{
  "address": "0x8Cf166d7c98e408a7814f61DA91ff768a9e229D0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claim",
          "type": "uint256"
        }
      ],
      "name": "Dequeue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Enqueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fulfillAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimableETH",
          "type": "uint256"
        }
      ],
      "name": "Fulfill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "NewExitThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Processed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "RequestTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    }
  ],
  "transactionHash": "0xaab8c0680f20470ed075ad9ff0e7a00a50699eb87f76d4d808180a894ee60c4d",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0x8Cf166d7c98e408a7814f61DA91ff768a9e229D0",
    "transactionIndex": 1,
    "gasUsed": "2502202",
    "logsBloom": "0x
    "blockHash": "0xc0ccadf194d22dd2c409f32c5a52862d4412496a24a96c000833b7fbac1ba0b5",
    "transactionHash": "0xaab8c0680f20470ed075ad9ff0e7a00a50699eb87f76d4d808180a894ee60c4d",
    "logs": [],
    "blockNumber": 1226893,
    "cumulativeGasUsed": "2523202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1106d2719b345652f80766915a08ac98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"}],\"name\":\"Dequeue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Enqueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fulfillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableETH\",\"type\":\"uint256\"}],\"name\":\"Fulfill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"NewExitThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Processed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RequestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"The Queue Lets say every '-' is representing 1 gETH. Queue: --- -- ---------- -- --- --- - --- -- ---- ----- - ------- ---- -- -- - - -------- -- There are 20 requests in this queue, adding up to 65 gETH, this is 'requested'. Every request has a 'size', first request' is 3 gETH , second' is 2 gETH. Every request has a 'trigger', pointing it's kickoff point. Thus, 3rd request' is 5 gETH. Let's say, there are 8 ETH processed in the contract, we burn 8 ETH worth of gETH. Let's say 8 ETH is 4 gETH. Then the first request can exit fully, and second one can exit for 1 gETH.This process creates a unique question: Considering that profit processing, price updates and queue operations are ASYNC, how can we make sure that we are paying the correct price? We have determined 3 possible points that we can 'derisk' a Request: Enqueue -> ProcessValidators -> Dequeue 1. We derisk the Request when it is enqueued: * This would cause 2 issues: * a. Best case, we would prevent the queued Request from profiting while they are in the queue. * b. Since there is a slashing risk, we cannot promise a fixed Ether amount without knowing what would be the future price. 2. We derisk the Request when validators are processed, with the latest price for the derivative: * This is the correct approach as we REALIZE the price at this exact point: by increasing the cumulative claimable gETH. * However, we would need to insert an 'unbound for loop' through 'realized' Requests, when a 'processValidators' operation is finalized. * We cannot, nor should, enforce an 'unbound for loop' on requests array. 3. We derisk the Request when it is dequeued: * Simply, price changes would have unpredictable effects on the Queue: A request can be claimable now, but might become unclaimable later. * Derisked Requests that are waiting to be claimed, would hijack the real stakers' APR, while sitting on top of some allocated Ether. * Unclaimed Requests can prevent the latter requests since there would be no way to keep track of the previous unclaimed requests without enforcing the order. We do not want to promise vague returns, we do not want for loops over requests array or price checkpoints, we do not want APR hijacking. Thus, none of these points can be implemented without utilizing a trusted third party, like an Oracle. However, we want Withdrawal logic to have the minimum Third Party risk as Geode Developers. As a result, we have came up with a logic that will allow stakers to maintain their profitability without disrupting the 'derisk' moment. * a. We keep track of an internal price, stating the ratio of the claimable ETH and processed gETH: realizedPrice. * b. We derisk the Queue on 'processValidators' by increasing the cumulative gETH that can be claimed. * * We also adjust the realizedPrice considering the pricePerShare of the currently derisked asset amount. * c. Requests can be fulfilled in respect to the internal price BY ANYONE at any point after they become claimable. * d. Fulfilled requests, including partially fulfilled ones, can be claimed (ONLY) BY THE OWNER. Why using an internal Price instead of 'enforcing the PricePerShare' makes sense: * All Requests, without considering their index, are in the same pool until they are derisked through price processing. * If all of the claimable requests are fulfilled periodically (via a script etc.), we would expect internal price to be equal to 'PricePerShare'. * This way, a well maintained pool can prevent APR hijacking by fulfilling neglected Requests, while it is not enforced for all of the pools. However, this is a gas-heavy process so it might not be needed after every 'processValidators' operation. Similarly, 'processValidators' is expensive as well, we would advise calling it when there is a dequeue opportunity. As a conclusion, if all requests are fulfilled immediately after the off-chain calculation signals them being claimable; None of these approaches will be expensive, nor will disrupt the internal pricing for the latter requests.while conducting the price calculations, a part of the balance within this contract should be taken into consideration. This ETH amount can be calculated as: sum(lambda x: requests[x].withdrawnBalance) - [fulfilledEtherBalance] (todo for the telescope). Note that, this is because: a price of the derivative is = total ETH / total Supply, and total ETH should include the balance within WC.Contracts relying on this library must initialize WithdrawalModuleLib.WithdrawalModuleStorageThere are 'owner' checks on 'transferRequest', _dequeue (used by dequeue, dequeueBatch). However, we preferred to not use a modifier for that.all parameters related to balance are denominated in gETH; except realizedEtherBalance,fulfilledEtherBalance and claimableEther: (requested, realized, fulfilled, commonPoll, trigger, size, fulfilled)\",\"events\":{\"NewExitThreshold(uint256)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"canFinalizeExit(WithdrawalModuleStorage storage,bytes)\":{\"details\":\"an external view function, just as an helper.\"},\"dequeue(WithdrawalModuleStorage storage,uint256,address)\":{\"details\":\"only owner can call this function\",\"params\":{\"index\":\"placement of the Request within the requests array.\"}},\"enqueue(WithdrawalModuleStorage storage,uint256,bytes,address)\":{\"params\":{\"owner\":\"allows caller to directly transfer the Request on creation\",\"pubkey\":\"voted validator, vote goes into commonPoll if bytes(0) is given.\"}},\"enqueueBatch(WithdrawalModuleStorage storage,uint256[],bytes[],address)\":{\"params\":{\"owner\":\"the owner for all the Requests being created.\",\"pubkeys\":\"array of voted validators, vote goes into commonPoll if bytes(0) is given.\",\"sizes\":\"array of gETH amount that are sent to enqueue multiple Requests.\"}},\"fulfill(WithdrawalModuleStorage storage,uint256)\":{\"custom:visibility\":\"-> external\"},\"fulfillable(WithdrawalModuleStorage storage,uint256,uint256,uint256)\":{\"details\":\"taking the previously fulfilled amount into consideration as it is the previously claimed part.\",\"params\":{\"index\":\"placement of the Request within the requests array.\",\"qFulfilled\":\"self.queue.fulfilled, might also be a hot value for Batch optimizations\",\"qRealized\":\"self.queue.realized, might also be hot value for Batch optimizations\"}},\"getValidatorThreshold(WithdrawalModuleStorage storage,bytes)\":{\"params\":{\"pubkey\":\"public key of the given validator.\"}},\"processValidators(WithdrawalModuleStorage storage,bytes[],uint256[],uint256[],bytes32[][])\":{\"details\":\"not all validators need to be processed all the time, process them as you need.We do not check if validators should be processed at all. Because its up to user if they want to pay extra for unnecessary operations. We should not be charging others extra to save their gas.It is advised to sort the pks according to the time passed, or remaining, to ensure that the preferred validators are prioritized in a case when the subset of given validators are not called for an exit.\"},\"setExitThreshold(WithdrawalModuleStorage storage,uint256)\":{\"details\":\"caller should be governed on module contract.\",\"params\":{\"newThreshold\":\"as percentage, denominated in PERCENTAGE_DENOMINATOR.\"}},\"transferRequest(WithdrawalModuleStorage storage,uint256,address)\":{\"details\":\"only current Owner can change the owner\",\"params\":{\"index\":\"placement of the Request within the requests array.\",\"newOwner\":\"new address that will be eligible to dequeue a Request.\"}}},\"title\":\"WML: Withdrawal Module Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canFinalizeExit(WithdrawalModuleStorage storage,bytes)\":{\"notice\":\"checks if given validator is exited, according to the information provided by Balances Merkle Root.\"},\"dequeue(WithdrawalModuleStorage storage,uint256,address)\":{\"notice\":\"given a Request from the requests array, claim the part that is currently claimable and forward the ether amount to the given receiver.\"},\"dequeueBatch(WithdrawalModuleStorage storage,uint256[],address)\":{\"notice\":\"dequeue() with batch optimizations\"},\"enqueue(WithdrawalModuleStorage storage,uint256,bytes,address)\":{\"notice\":\"queues a Request into Queue, processes the vote, exits the validator in case of a run-off.\"},\"enqueueBatch(WithdrawalModuleStorage storage,uint256[],bytes[],address)\":{\"notice\":\"enqueue() with batch optimizations\"},\"fulfillable(WithdrawalModuleStorage storage,uint256,uint256,uint256)\":{\"notice\":\"given a request, figure out the fulfillable gETH amount, limited up to its size.\"},\"getValidatorThreshold(WithdrawalModuleStorage storage,bytes)\":{\"notice\":\"figuring out the applied exit threshold, as in gETH, for a given validator.\"},\"processValidators(WithdrawalModuleStorage storage,bytes[],uint256[],uint256[],bytes32[][])\":{\"notice\":\"main function of this library, processing given information about the provided validators.\"},\"setExitThreshold(WithdrawalModuleStorage storage,uint256)\":{\"notice\":\"allowing EXIT_THRESHOLD to be set by the contract owner.\"},\"transferRequest(WithdrawalModuleStorage storage,uint256,address)\":{\"notice\":\"transferring the ownership of a Request to a new address\"}},\"notice\":\"Improved validator withdrawals (and exits), while preserving the validator segregation.Intended implementation scope: 1. Processing the withdrawals (partial and exits). * `processValidators` function handles any balance changes that is reflected from the Beacon Chain. * If a validator's balance on the Beacon Chain is ZERO, it exited (forced or voluntary). 2. Distributing the fees. * Pool and Operator fees are distributed whenever the validator is processed. * Note that if the validator is slashed before being processed, fees can be lost along with the stakers' profit. 3. Queueing withdrawal requests. * Users can request a withdrawal by forfeiting their gETH tokens. * Requests would be put in a queue (First-In-First-Out). * As the validators are processed, requests become claimable. * Users can dequeue partially or fully. 4. Allowing (Instant Run-off) elections on which validators to exit. * While getting into the queue, caller can vote on a validator, increasing it's 'poll'. * If a validator is not specified, vote goes to 'commonPoll'. It can be used for any validator to top-up the EXIT_THRESHOLD * If a validator is called for exit but there are remaining votes in it, it is transferred to the commonPoll. * Note that, elections are basically just stating a preference: * * Exit of the voted validator does not change the voter's priority in the queue.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/WithdrawalModule/libs/WithdrawalModuleLib.sol\":\"WithdrawalModuleLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0xdcbe1faa8712a653a87f4e185afb598388c2bbe62a750989df57afeac2848168\",\"license\":\"BUSL-1.1\"},\"contracts/globals/validator_state.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice VALIDATOR_STATE: keeping track of validators within The Staking Library.\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract.\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator.\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is called to be exited.\\n  uint8 internal constant EXIT_REQUESTED = 3;\\n\\n  /// @notice STATE 4: validator is fully exited.\\n  uint8 internal constant EXITED = 4;\\n\\n  /// @notice STATE 69: proposal was malicious(alien). Maybe faulty signatures or probably frontrunning (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xbba746dcad490d11ebc3a69b334c7284a546902392b565162a45d5b8a53d291d\",\"license\":\"BUSL-1.1\"},\"contracts/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.20;\\n\\nlibrary BytesLib {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  ) internal pure returns (bytes memory) {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      // Get a location of some free memory and store it in tempBytes as\\n      // Solidity does for memory variables.\\n      tempBytes := mload(0x40)\\n\\n      // Store the length of the first bytes array at the beginning of\\n      // the memory for tempBytes.\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      // Maintain a memory counter for the current write location in the\\n      // temp bytes array by adding the 32 bytes for the array length to\\n      // the starting location.\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the\\n      // first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data,\\n        // 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\n        // at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Add the length of _postBytes to the current length of tempBytes\\n      // and store it as the new length in the first 32 bytes of the\\n      // tempBytes memory.\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the\\n      // actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined\\n      // length of the arrays.\\n      end := add(mc, length)\\n\\n      for {\\n        let cc := add(_postBytes, 0x20)\\n      } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Update the free-memory pointer by padding our last write location\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n      // next 32 byte block, then round down to the nearest multiple of\\n      // 32. If the sum of the length of the two arrays is zero then add\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          not(31) // Round down to the nearest 32 bytes.\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\n      // of the array. (We don't need to use the offset into the slot\\n      // because arrays use the entire slot.)\\n      let fslot := sload(_preBytes.slot)\\n      // Arrays of 31 bytes or less have an even value in their slot,\\n      // while longer arrays have an odd value. The actual length is\\n      // the slot divided by two for odd values, and the lowest order\\n      // byte divided by two for even values.\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\n      // two to get the length. If the slot is odd, bitwise and the slot\\n      // with -1 and divide by two.\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n      // slength can contain both the length and contents of the array\\n      // if length < 32 bytes so let's prepare for that\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        // Since the new array still fits in the slot, we just need to\\n        // update the contents of the slot.\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n        sstore(\\n          _preBytes.slot,\\n          // all the modifications to the slot are inside this\\n          // next block\\n          add(\\n            // we can just add to the slot contents because the\\n            // bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory\\n                  mload(add(_postBytes, 0x20)),\\n                  // zero all bytes to the right\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // increase length by the double of the memory\\n              // bytes length\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        // The stored value fits in the slot, but the combined value\\n        // will exceed it.\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // The contents of the _postBytes array start 32 bytes into\\n        // the structure. Our first read should obtain the `submod`\\n        // bytes that can fit into the unused space in the last word\\n        // of the stored array. To get this, we read 32 bytes starting\\n        // from `submod`, so the data we read overlaps with the array\\n        // contents by `submod` bytes. Masking the lowest-order\\n        // `submod` bytes allows us to add that value directly to the\\n        // stored value.\\n\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in\\n        // case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        // cb is a circuit breaker in the for loop since there's\\n        //  no said feature for inline assembly loops\\n        // cb = 1 - don't breaker\\n        // cb = 0 - break\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for {\\n          let cc := add(_postBytes, 0x20)\\n          // the next line is the loop condition:\\n          // while(uint256(mc < end) + cb == 2)\\n        } eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // if any of these checks fails then arrays are not equal\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  ) internal view returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      // we know _preBytes_offset is 0\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(slength, mlength)\\n      case 1 {\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // blank the last byte which is the length\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n            let cb := 1\\n\\n            // get the keccak hash to get the contents of the array\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // the next line is the loop condition:\\n            // while(uint256(mc < end) + cb == 2)\\n            for {\\n\\n            } eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x4ee3f6ef85baa41794fc1519522f7c135becd0e267980eadc68dd643e52b59c7\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IGeodeModule, IStakeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (uint256 id);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n}\\n\",\"keccak256\":\"0x012a8ed050ba68838eeb7463b75f32ba8fdf50c9e54e44dd37d4e87ca16ba78c\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/** This interface is designed to be compatible with the Vyper version.\\n * @notice This is the Ethereum 2.0 deposit contract interface.\\n * For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ninterface IDepositContract {\\n  /**\\n   * @notice Submit a Phase 0 DepositData object.\\n   * @param pubkey A BLS12-381 public key.\\n   * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n   * @param signature A BLS12-381 signature.\\n   * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n   *Used as a protection against malformed input.\\n   */\\n  function deposit(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x2db8802f8f888c62b147508e142e15c59775ff75906d09122e810483919bff27\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3ba6191b4a643bce171bb7dc9b39a55dd0c8c932934429902dec4eb7b6c3df9a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Proposal} from \\\"../../modules/GeodeModule/structs/utils.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getGovernance() external view returns (address);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x2eb0e5472c00c7d91443f0544ce349129266665dd59f1e4b0598173df1a9d1c5\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Validator} from \\\"../../modules/StakeModule/structs/utils.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external;\\n\\n  function setBeaconDelays(uint256 entry, uint256 exit) external;\\n\\n  function setInitiationDeposit(uint256 newInitiationDeposit) external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 beaconDelayEntry,\\n      uint256 beaconDelayExit,\\n      uint256 initiationDeposit,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function getPriceMerkleRoot() external view returns (bytes32);\\n\\n  function getBalancesMerkleRoot() external view returns (bytes32);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function getInfrastructureFee(uint256 _type) external view returns (uint256);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPackage(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function setYieldReceiver(uint256 poolId, address yieldReceiver) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameExit(\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external;\\n\\n  function blameProposal(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function requestExit(uint256 poolId, bytes memory pk) external returns (bool);\\n\\n  function finalizeExit(uint256 poolId, bytes memory pk) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0x102393bdd245b4745032b3d21ba59ba7ee45dfc9fc2b152ee5cd014ab9403370\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals cannot be approved by Senate\\n * * Expired proposals cannot be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0xcaa2a8bae465cbfe7ecfa41fa0e54a83d1e50475a6d0e5864a3169bf0d537577\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/libs/DepositContractLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IDepositContract} from \\\"../../../interfaces/helpers/IDepositContract.sol\\\";\\n// internal - libraries\\nimport {BytesLib} from \\\"../../../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @title DCL: Deposit Contract Library\\n *\\n * @notice Includes constants & functions that helps to the deposit process.\\n *\\n * @dev DEPOSIT_CONTRACT is chain specific and should be changed before deployments.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DepositContractLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0x4242424242424242424242424242424242424242);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @custom:section                           ** FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(_stakeAmount % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot))\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  /**\\n   * @notice converts an address to withdrawal credential, used on validator creation\\n   */\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return abi.encodePacked(bytes32(w) | bytes32(uint256(uint160(address(wcAddress)))));\\n  }\\n\\n  /**\\n   * @notice deposit to DEPOSIT_CONTRACT and initiate a validator.\\n   */\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x71fa2b28cf5299abb9cfd8d7b8130c84f104b7a74d3ee2d6f5274e2fcc9a7ab2\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @param state state of the validator, refer to globals.sol\\n * @param index representing this validator's placement on the chronological order of the validators proposals\\n * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n * @param poolId needed for withdrawal_credential\\n * @param operatorId needed for staking after allowance\\n * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n * @param infrastructureFee all fees are crucial for the price calculation by the oracle, even if its zero.\\n * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n **/\\nstruct Validator {\\n  uint64 state;\\n  uint64 index;\\n  uint64 createdAt;\\n  uint64 period;\\n  uint256 poolId;\\n  uint256 operatorId;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes signature31;\\n}\\n\",\"keccak256\":\"0xd7f21251a595d6cb1f23aee2015557064568e604e992b63d20acea0816dcd848\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/libs/WithdrawalModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - libraries\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n// internal - globals\\nimport {PERCENTAGE_DENOMINATOR, gETH_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {IPortal} from \\\"../../../interfaces/IPortal.sol\\\";\\n// internal - structs\\nimport {Queue, Request, ValidatorData} from \\\"../structs/utils.sol\\\";\\nimport {WithdrawalModuleStorage} from \\\"../structs/storage.sol\\\";\\n// internal - libraries\\nimport {DepositContractLib as DCL} from \\\"../../StakeModule/libs/DepositContractLib.sol\\\";\\nimport {Validator} from \\\"../../StakeModule/structs/utils.sol\\\";\\n\\n/**\\n * @title WML: Withdrawal Module Library\\n *\\n * @notice Improved validator withdrawals (and exits), while preserving the validator segregation.\\n *\\n * @notice Intended implementation scope:\\n * 1. Processing the withdrawals (partial and exits).\\n * * `processValidators` function handles any balance changes that is reflected from the Beacon Chain.\\n * * If a validator's balance on the Beacon Chain is ZERO, it exited (forced or voluntary).\\n *\\n * 2. Distributing the fees.\\n * * Pool and Operator fees are distributed whenever the validator is processed.\\n * * Note that if the validator is slashed before being processed, fees can be lost along with the stakers' profit.\\n *\\n * 3. Queueing withdrawal requests.\\n * * Users can request a withdrawal by forfeiting their gETH tokens.\\n * * Requests would be put in a queue (First-In-First-Out).\\n * * As the validators are processed, requests become claimable.\\n * * Users can dequeue partially or fully.\\n *\\n * 4. Allowing (Instant Run-off) elections on which validators to exit.\\n * * While getting into the queue, caller can vote on a validator, increasing it's 'poll'.\\n * * If a validator is not specified, vote goes to 'commonPoll'. It can be used for any validator to top-up the EXIT_THRESHOLD\\n * * If a validator is called for exit but there are remaining votes in it, it is transferred to the commonPoll.\\n * * Note that, elections are basically just stating a preference:\\n * * * Exit of the voted validator does not change the voter's priority in the queue.\\n *\\n * @dev The Queue\\n * Lets say every '-' is representing 1 gETH.\\n * Queue: --- -- ---------- -- --- --- - --- -- ---- ----- - ------- ---- -- -- - - -------- --\\n * There are 20 requests in this queue, adding up to 65 gETH, this is 'requested'.\\n * Every request has a 'size', first request' is 3 gETH , second' is 2 gETH.\\n * Every request has a 'trigger', pointing it's kickoff point. Thus, 3rd request' is 5 gETH.\\n * Let's say, there are 8 ETH processed in the contract, we burn 8 ETH worth of gETH.\\n * Let's say 8 ETH is 4 gETH. Then the first request can exit fully, and second one can exit for 1 gETH.\\n *\\n * @dev This process creates a unique question:\\n * Considering that profit processing, price updates and queue operations are ASYNC,\\n * how can we make sure that we are paying the correct price?\\n * We have determined 3 possible points that we can 'derisk' a Request:\\n * Enqueue -> ProcessValidators -> Dequeue\\n * 1. We derisk the Request when it is enqueued:\\n * * This would cause 2 issues:\\n * * a. Best case, we would prevent the queued Request from profiting while they are in the queue.\\n * * b. Since there is a slashing risk, we cannot promise a fixed Ether amount without knowing what would be the future price.\\n * 2. We derisk the Request when validators are processed, with the latest price for the derivative:\\n * * This is the correct approach as we REALIZE the price at this exact point: by increasing the cumulative claimable gETH.\\n * * However, we would need to insert an 'unbound for loop' through 'realized' Requests, when a 'processValidators' operation is finalized.\\n * * We cannot, nor should, enforce an 'unbound for loop' on requests array.\\n * 3. We derisk the Request when it is dequeued:\\n * * Simply, price changes would have unpredictable effects on the Queue: A request can be claimable now, but might become unclaimable later.\\n * * Derisked Requests that are waiting to be claimed, would hijack the real stakers' APR, while sitting on top of some allocated Ether.\\n * * Unclaimed Requests can prevent the latter requests since there would be no way to keep track of the previous unclaimed requests without enforcing the order.\\n * We do not want to promise vague returns, we do not want for loops over requests array or price checkpoints, we do not want APR hijacking.\\n * Thus, none of these points can be implemented without utilizing a trusted third party, like an Oracle.\\n * However, we want Withdrawal logic to have the minimum Third Party risk as Geode Developers.\\n * As a result, we have came up with a logic that will allow stakers to maintain their profitability without disrupting the 'derisk' moment.\\n * * a. We keep track of an internal price, stating the ratio of the claimable ETH and processed gETH: realizedPrice.\\n * * b. We derisk the Queue on 'processValidators' by increasing the cumulative gETH that can be claimed.\\n * * * We also adjust the realizedPrice considering the pricePerShare of the currently derisked asset amount.\\n * * c. Requests can be fulfilled in respect to the internal price BY ANYONE at any point after they become claimable.\\n * * d. Fulfilled requests, including partially fulfilled ones, can be claimed (ONLY) BY THE OWNER.\\n * Why using an internal Price instead of 'enforcing the PricePerShare' makes sense:\\n * * All Requests, without considering their index, are in the same pool until they are derisked through price processing.\\n * * If all of the claimable requests are fulfilled periodically (via a script etc.), we would expect internal price to be equal to 'PricePerShare'.\\n * * This way, a well maintained pool can prevent APR hijacking by fulfilling neglected Requests, while it is not enforced for all of the pools.\\n * However, this is a gas-heavy process so it might not be needed after every 'processValidators' operation.\\n * Similarly, 'processValidators' is expensive as well, we would advise calling it when there is a dequeue opportunity.\\n * As a conclusion, if all requests are fulfilled immediately after the off-chain calculation signals them being claimable;\\n * None of these approaches will be expensive, nor will disrupt the internal pricing for the latter requests.\\n *\\n * @dev while conducting the price calculations, a part of the balance within this contract should be taken into consideration.\\n * This ETH amount can be calculated as: sum(lambda x: requests[x].withdrawnBalance) - [fulfilledEtherBalance] (todo for the telescope).\\n * Note that, this is because: a price of the derivative is = total ETH / total Supply, and total ETH should include the balance within WC.\\n *\\n * @dev Contracts relying on this library must initialize WithdrawalModuleLib.WithdrawalModuleStorage\\n *\\n * @dev There are 'owner' checks on 'transferRequest', _dequeue (used by dequeue, dequeueBatch).\\n * However, we preferred to not use a modifier for that.\\n *\\n * @dev all parameters related to balance are denominated in gETH; except realizedEtherBalance,fulfilledEtherBalance and claimableEther:\\n * (requested, realized, fulfilled, commonPoll, trigger, size, fulfilled)\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary WithdrawalModuleLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  /// @notice EXIT_THRESHOLD should be at least 60% and at most 100%\\n  uint256 internal constant MIN_EXIT_THRESHOLD = 6e9; // (6 * PERCENTAGE_DENOMINATOR) / 10;\\n  // minimum withdrawal request is 0.05 ETH\\n  uint256 internal constant MIN_REQUEST_SIZE = 5e16;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event NewExitThreshold(uint256 threshold);\\n  event Enqueue(uint256 indexed index, address owner);\\n  event Vote(uint256 indexed index, bytes indexed pubkey, uint256 size);\\n  event RequestTransfer(uint256 indexed index, address oldOwner, address newOwner);\\n  event Fulfill(uint256 indexed index, uint256 fulfillAmount, uint256 claimableETH);\\n  event Dequeue(uint256 indexed index, uint256 claim);\\n  event Processed();\\n\\n  /**\\n   * @custom:section                           ** HELPER **\\n   */\\n\\n  function _getPortal(WithdrawalModuleStorage storage self) internal view returns (IPortal) {\\n    return IPortal(self.PORTAL);\\n  }\\n\\n  /**\\n   * @custom:section                           ** EARLY EXIT REQUESTS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice checks if given validator is exited, according to the information provided by Balances Merkle Root.\\n   * @dev an external view function, just as an helper.\\n   */\\n  function canFinalizeExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    if (self.validators[pubkey].beaconBalance != 0) {\\n      return false;\\n    }\\n\\n    Validator memory val = _getPortal(self).getValidator(pubkey);\\n\\n    // check pubkey belong to this pool\\n    require(val.poolId == self.POOL_ID, \\\"WML:validator for an unknown pool\\\");\\n\\n    if (val.state != VALIDATOR_STATE.ACTIVE && val.state != VALIDATOR_STATE.EXIT_REQUESTED) {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice notifies Portal to change validator state from ACTIVE to EXIT_REQUESTED\\n   * @param pubkey public key of the given validator.\\n   */\\n  function _requestExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) internal returns (bool) {\\n    return _getPortal(self).requestExit(self.POOL_ID, pubkey);\\n  }\\n\\n  /**\\n   * @notice notifies Portal to change validator state from ACTIVE or EXIT_REQUESTED, to EXITED.\\n   * @dev no additional checks are needed as processValidators and PORTAL.finalizeExit has propser checks.\\n   * @param pubkey public key of the given validator.\\n   */\\n  function _finalizeExit(WithdrawalModuleStorage storage self, bytes calldata pubkey) internal {\\n    _getPortal(self).finalizeExit(self.POOL_ID, pubkey);\\n  }\\n\\n  /**\\n   * @notice if the poll is above the threshold, calls Portal to request a voluntary exit.\\n   * @param pubkey public key of the checked validator.\\n   * @param commonPoll cached commonPoll\\n   * @dev passing commonPoll around helps on gas on batch TXs.\\n   */\\n  function _checkAndRequestExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey,\\n    uint256 commonPoll\\n  ) internal returns (uint256) {\\n    (uint256 threshold, uint256 beaconBalancePriced) = getValidatorThreshold(self, pubkey);\\n    uint256 validatorPoll = self.validators[pubkey].poll;\\n\\n    if (commonPoll + validatorPoll > threshold) {\\n      // meaning it can request withdrawal\\n      if (_requestExit(self, pubkey)) {\\n        if (threshold > validatorPoll) {\\n          // If Poll is not enough spend votes from commonPoll.\\n          commonPoll -= threshold - validatorPoll;\\n        } else if (validatorPoll > beaconBalancePriced) {\\n          // If Poll is bigger than needed, move the extra votes instead of spending.\\n          commonPoll += validatorPoll - beaconBalancePriced;\\n        }\\n      }\\n    }\\n\\n    return commonPoll;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice allowing EXIT_THRESHOLD to be set by the contract owner.\\n   * @param newThreshold as percentage, denominated in PERCENTAGE_DENOMINATOR.\\n   * @dev caller should be governed on module contract.\\n   */\\n  function setExitThreshold(WithdrawalModuleStorage storage self, uint256 newThreshold) external {\\n    require(newThreshold >= MIN_EXIT_THRESHOLD, \\\"WML:min threshold is 60%\\\");\\n    require(newThreshold <= PERCENTAGE_DENOMINATOR, \\\"WML:max threshold is 100%\\\");\\n\\n    self.EXIT_THRESHOLD = newThreshold;\\n    emit NewExitThreshold(newThreshold);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** VOTE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice figuring out the applied exit threshold, as in gETH, for a given validator.\\n   * @param pubkey public key of the given validator.\\n   */\\n  function getValidatorThreshold(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) public view returns (uint256 threshold, uint256 beaconBalancePriced) {\\n    uint256 price = self.gETH.pricePerShare(self.POOL_ID);\\n    beaconBalancePriced = ((self.validators[pubkey].beaconBalance * gETH_DENOMINATOR));\\n    threshold = (beaconBalancePriced * self.EXIT_THRESHOLD) / PERCENTAGE_DENOMINATOR / price;\\n    beaconBalancePriced = beaconBalancePriced / price;\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice a validator is chosen to be the next exit by enqueued Request\\n   * @param pubkey public key of the voted validator.\\n   * @param size specified gETH amount\\n   */\\n  function _vote(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    bytes calldata pubkey,\\n    uint256 size\\n  ) internal {\\n    Validator memory val = _getPortal(self).getValidator(pubkey);\\n\\n    require(val.poolId == self.POOL_ID, \\\"WML:vote for an unknown pool\\\");\\n    require(val.state == VALIDATOR_STATE.ACTIVE, \\\"WML:voted for inactive validator\\\");\\n\\n    self.validators[pubkey].poll += size;\\n    emit Vote(index, pubkey, size);\\n  }\\n\\n  /**\\n   * @custom:section                           ** REQUESTS QUEUE **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** ENQUEUE **\\n   */\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice internal function to push a new Request into Queue\\n   * @param trigger the kickoff point for the Request\\n   * @param size specified gETH amount\\n   */\\n  function _enqueue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 trigger,\\n    uint256 size,\\n    address owner\\n  ) internal returns (uint256 index) {\\n    require(size >= MIN_REQUEST_SIZE, \\\"WML:min 0.05 gETH\\\");\\n    require(owner != address(0), \\\"WML:owner cannot be zero address\\\");\\n\\n    self.requests.push(\\n      Request({owner: owner, trigger: trigger, size: size, fulfilled: 0, claimableEther: 0})\\n    );\\n\\n    index = self.requests.length - 1;\\n\\n    emit Enqueue(index, owner);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice queues a Request into Queue, processes the vote, exits the validator in case of a run-off.\\n   * @param pubkey voted validator, vote goes into commonPoll if bytes(0) is given.\\n   * @param owner allows caller to directly transfer the Request on creation\\n   */\\n  function enqueue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 size,\\n    bytes calldata pubkey,\\n    address owner\\n  ) external returns (uint256 index) {\\n    uint256 requestedgETH = self.queue.requested;\\n    index = _enqueue(self, requestedgETH, size, owner);\\n\\n    if (pubkey.length == 0) {\\n      self.queue.commonPoll += size;\\n    } else {\\n      _vote(self, index, pubkey, size);\\n    }\\n\\n    self.queue.requested = requestedgETH + size;\\n\\n    self.gETH.safeTransferFrom(msg.sender, address(this), self.POOL_ID, size, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice enqueue() with batch optimizations\\n   * @param sizes array of gETH amount that are sent to enqueue multiple Requests.\\n   * @param pubkeys array of voted validators, vote goes into commonPoll if bytes(0) is given.\\n   * @param owner the owner for all the Requests being created.\\n   */\\n  function enqueueBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata sizes,\\n    bytes[] calldata pubkeys,\\n    address owner\\n  ) external returns (uint256[] memory indexes) {\\n    uint256 len = sizes.length;\\n    require(len == pubkeys.length, \\\"WML:invalid input length\\\");\\n\\n    uint256 commonPoll = self.queue.commonPoll;\\n    uint256 requestedgETH = self.queue.requested;\\n    uint256 totalSize;\\n\\n    indexes = new uint256[](len);\\n    for (uint256 i; i < len; ) {\\n      indexes[i] = _enqueue(self, requestedgETH, sizes[i], owner);\\n\\n      if (pubkeys[i].length == 0) {\\n        commonPoll += sizes[i];\\n      } else {\\n        _vote(self, indexes[i], pubkeys[i], sizes[i]);\\n      }\\n      requestedgETH = requestedgETH + sizes[i];\\n      totalSize += sizes[i];\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.queue.commonPoll = commonPoll;\\n    self.queue.requested = requestedgETH;\\n\\n    self.gETH.safeTransferFrom(msg.sender, address(this), self.POOL_ID, totalSize, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice transferring the ownership of a Request to a new address\\n   * @param index placement of the Request within the requests array.\\n   * @param newOwner new address that will be eligible to dequeue a Request.\\n   * @dev only current Owner can change the owner\\n   */\\n  function transferRequest(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    address newOwner\\n  ) external {\\n    address oldOwner = self.requests[index].owner;\\n    require(msg.sender == oldOwner, \\\"WML:not owner\\\");\\n    require(newOwner != address(0), \\\"WML:cannot transfer to zero address\\\");\\n    require(\\n      self.requests[index].fulfilled < self.requests[index].size,\\n      \\\"WML:cannot transfer fulfilled\\\"\\n    );\\n\\n    self.requests[index].owner = newOwner;\\n\\n    emit RequestTransfer(index, oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** FULFILL **\\n   */\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice given a request, figure out the fulfillable gETH amount, limited up to its size.\\n   * @param index placement of the Request within the requests array.\\n   * @param qRealized self.queue.realized, might also be hot value for Batch optimizations\\n   * @param qFulfilled self.queue.fulfilled, might also be a hot value for Batch optimizations\\n   * @dev taking the previously fulfilled amount into consideration as it is the previously claimed part.\\n   */\\n  function fulfillable(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    uint256 qRealized,\\n    uint256 qFulfilled\\n  ) public view returns (uint256) {\\n    if (qRealized > qFulfilled) {\\n      uint256 rTrigger = self.requests[index].trigger;\\n      uint256 rSize = self.requests[index].size;\\n      uint256 rFulfilled = self.requests[index].fulfilled;\\n\\n      uint256 rFloor = rTrigger + rFulfilled;\\n      uint256 rCeil = rTrigger + rSize;\\n\\n      if (qRealized > rCeil) {\\n        return rSize - rFulfilled;\\n      } else if (qRealized > rFloor) {\\n        return qRealized - rFloor;\\n      } else {\\n        return 0;\\n      }\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice by using the realized part of the size, we fulfill a single request by making use of the internal pricing.\\n   * @dev we burn the realized size of the Queue here because we do not want this process to mess with price\\n   * * calculations of the oracle.\\n   */\\n  function _fulfill(WithdrawalModuleStorage storage self, uint256 index) internal {\\n    uint256 toFulfill = fulfillable(self, index, self.queue.realized, self.queue.fulfilled);\\n\\n    if (toFulfill > 0) {\\n      uint256 claimableETH = (toFulfill * self.queue.realizedPrice) / gETH_DENOMINATOR;\\n      self.requests[index].claimableEther += claimableETH;\\n      self.requests[index].fulfilled += toFulfill;\\n      self.queue.fulfilled += toFulfill;\\n      self.queue.fulfilledEtherBalance += claimableETH;\\n\\n      self.gETH.burn(address(this), self.POOL_ID, toFulfill);\\n\\n      emit Fulfill(index, toFulfill, claimableETH);\\n    }\\n  }\\n\\n  /**\\n   * @notice _fulfill with Batch optimizations\\n   * @param qRealized queue.realized, as a hot value.\\n   * @param qFulfilled queue.fulfilled, as a hot value.\\n   * @param qPrice queue.realizedPrice, as a hot value.\\n   */\\n  function _fulfillBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata indexes,\\n    uint256 qRealized,\\n    uint256 qFulfilled,\\n    uint256 qPrice\\n  ) internal {\\n    uint256 indexesLen = indexes.length;\\n\\n    uint256 oldFulfilled = qFulfilled;\\n    uint256 qfulfilledEtherBalance;\\n    for (uint256 i; i < indexesLen; ) {\\n      uint256 toFulfill = fulfillable(self, indexes[i], qRealized, qFulfilled);\\n      if (toFulfill > 0) {\\n        uint256 claimableETH = (toFulfill * qPrice) / gETH_DENOMINATOR;\\n        self.requests[indexes[i]].claimableEther += claimableETH;\\n        self.requests[indexes[i]].fulfilled += toFulfill;\\n        qFulfilled += toFulfill;\\n        qfulfilledEtherBalance += claimableETH;\\n\\n        emit Fulfill(indexes[i], toFulfill, claimableETH);\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.queue.fulfilled = qFulfilled;\\n    self.queue.fulfilledEtherBalance += qfulfilledEtherBalance;\\n    self.gETH.burn(address(this), self.POOL_ID, qFulfilled - oldFulfilled);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  function fulfill(WithdrawalModuleStorage storage self, uint256 index) external {\\n    _fulfill(self, index);\\n  }\\n\\n  function fulfillBatch(WithdrawalModuleStorage storage self, uint256[] calldata indexes) external {\\n    _fulfillBatch(\\n      self,\\n      indexes,\\n      self.queue.realized,\\n      self.queue.fulfilled,\\n      self.queue.realizedPrice\\n    );\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** DEQUEUE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice given a Request from the requests array, remove the part that is currently claimable.\\n   * @param index placement of the Request within the requests array.\\n   * @dev only owner can call this function\\n   */\\n  function _dequeue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index\\n  ) internal returns (uint256 claimableETH) {\\n    require(msg.sender == self.requests[index].owner, \\\"WML:not owner\\\");\\n\\n    claimableETH = self.requests[index].claimableEther;\\n    require(claimableETH > 0, \\\"WML:not claimable\\\");\\n\\n    self.requests[index].claimableEther = 0;\\n\\n    emit Dequeue(index, claimableETH);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice given a Request from the requests array, claim the part that is currently claimable and forward the ether amount to the given receiver.\\n   * @param index placement of the Request within the requests array.\\n   * @dev only owner can call this function\\n   */\\n  function dequeue(WithdrawalModuleStorage storage self, uint256 index, address receiver) external {\\n    require(receiver != address(0), \\\"WML:receiver cannot be zero address\\\");\\n\\n    _fulfill(self, index);\\n    uint256 claimableETH = _dequeue(self, index);\\n\\n    // send ETH\\n    (bool sent, ) = payable(receiver).call{value: claimableETH}(\\\"\\\");\\n    require(sent, \\\"WML:Failed to send Ether\\\");\\n  }\\n\\n  /**\\n   * @notice dequeue() with batch optimizations\\n   */\\n  function dequeueBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata indexes,\\n    address receiver\\n  ) external {\\n    require(receiver != address(0), \\\"WML:receiver cannot be zero address\\\");\\n\\n    _fulfillBatch(\\n      self,\\n      indexes,\\n      self.queue.realized,\\n      self.queue.fulfilled,\\n      self.queue.realizedPrice\\n    );\\n\\n    uint256 claimableETH;\\n    uint256 indexesLen = indexes.length;\\n    for (uint256 i; i < indexesLen; ) {\\n      claimableETH += _dequeue(self, indexes[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    // send ETH\\n    (bool sent, ) = payable(receiver).call{value: claimableETH}(\\\"\\\");\\n    require(sent, \\\"WML:Failed to send Ether\\\");\\n  }\\n\\n  /**\\n   * @custom:section                           ** PROCESS BALANCES MERKLE UPDATE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice\\n   * @param pubkey public key of the given validator.\\n   * @param reportedWithdrawn withdrawn Ether amount according to the fresh Merkle root.\\n   * @param processedWithdrawn previously reported withdrawn amount.\\n   * @dev cannot overflow since max fee is 10%, if we change fee structure ever, we need to reconsider the math there! \\n   * * Note that if a validator is EXITED, we would assume 32 ETH that the pool put is also accounted for.\\n   @return extra calculated profit since the last time validator was processed\\n   */\\n  function _distributeFees(\\n    WithdrawalModuleStorage storage self,\\n    Validator memory val,\\n    uint256 reportedWithdrawn,\\n    uint256 processedWithdrawn\\n  ) internal returns (uint256 extra) {\\n    // reportedWithdrawn > processedWithdrawn checks are done as it should be before calling this function\\n    uint256 profit = reportedWithdrawn - processedWithdrawn;\\n\\n    uint256 poolProfit = (profit * val.poolFee) / PERCENTAGE_DENOMINATOR;\\n    uint256 operatorProfit = (profit * val.operatorFee) / PERCENTAGE_DENOMINATOR;\\n    uint256 infrastructureProfit = (profit * val.infrastructureFee) / PERCENTAGE_DENOMINATOR;\\n\\n    _getPortal(self).increaseWalletBalance{value: poolProfit}(val.poolId);\\n    _getPortal(self).increaseWalletBalance{value: operatorProfit}(val.operatorId);\\n    self.gatheredInfrastructureFees += infrastructureProfit;\\n\\n    extra = ((profit - poolProfit) - operatorProfit) - infrastructureProfit;\\n  }\\n\\n  /**\\n   * @notice acting like queue is one entity, we sell it some gETH in respect to Oracle price.\\n   * * by using the Ether from the latest withdrawals.\\n   */\\n  function _realizeProcessedEther(\\n    WithdrawalModuleStorage storage self,\\n    uint256 processedBalance\\n  ) internal {\\n    uint256 pps = self.gETH.pricePerShare(self.POOL_ID);\\n\\n    uint256 processedgETH = ((processedBalance * gETH_DENOMINATOR) / pps);\\n    uint256 newPrice = pps;\\n\\n    uint256 internalPrice = self.queue.realizedPrice;\\n    if (internalPrice > 0) {\\n      uint256 claimable = self.queue.realized - self.queue.fulfilled;\\n      if (claimable > 0) {\\n        newPrice =\\n          ((claimable * internalPrice) + (processedBalance * gETH_DENOMINATOR)) /\\n          (claimable + processedgETH);\\n      }\\n    }\\n\\n    self.queue.realized += processedgETH;\\n    self.queue.realizedEtherBalance += processedBalance;\\n    self.queue.realizedPrice = newPrice;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice main function of this library, processing given information about the provided validators.\\n   * @dev not all validators need to be processed all the time, process them as you need.\\n   * @dev We do not check if validators should be processed at all.\\n   * Because its up to user if they want to pay extra for unnecessary operations.\\n   * We should not be charging others extra to save their gas.\\n   * @dev It is advised to sort the pks according to the time passed, or remaining, to ensure that\\n   * the preferred validators are prioritized in a case\\n   * when the subset of given validators are not called for an exit.\\n   */\\n  function processValidators(\\n    WithdrawalModuleStorage storage self,\\n    bytes[] calldata pubkeys,\\n    uint256[] calldata beaconBalances,\\n    uint256[] calldata withdrawnBalances,\\n    bytes32[][] calldata balanceProofs\\n  ) external {\\n    uint256 pkLen = pubkeys.length;\\n    require(\\n      pkLen == beaconBalances.length &&\\n        pkLen == withdrawnBalances.length &&\\n        pkLen == balanceProofs.length,\\n      \\\"WML:invalid lengths\\\"\\n    );\\n\\n    Validator[] memory validators = new Validator[](pkLen);\\n\\n    {\\n      bytes32 balanceMerkleRoot = _getPortal(self).getBalancesMerkleRoot();\\n      for (uint256 i; i < pkLen; ) {\\n        // fill the validators array while checking the pool id\\n        validators[i] = _getPortal(self).getValidator(pubkeys[i]);\\n\\n        // check pubkey belong to this pool\\n        require(validators[i].poolId == self.POOL_ID, \\\"WML:validator for an unknown pool\\\");\\n\\n        // verify balances\\n        bytes32 leaf = keccak256(\\n          bytes.concat(keccak256(abi.encode(pubkeys[i], beaconBalances[i], withdrawnBalances[i])))\\n        );\\n        require(\\n          MerkleProof.verify(balanceProofs[i], balanceMerkleRoot, leaf),\\n          \\\"WML:not all proofs are valid\\\"\\n        );\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n    }\\n\\n    uint256 commonPoll = self.queue.commonPoll;\\n    uint256 processed;\\n    for (uint256 j; j < pkLen; ) {\\n      uint256 oldWitBal = self.validators[pubkeys[j]].withdrawnBalance;\\n\\n      self.validators[pubkeys[j]].beaconBalance = beaconBalances[j];\\n      self.validators[pubkeys[j]].withdrawnBalance = withdrawnBalances[j];\\n\\n      if (beaconBalances[j] == 0) {\\n        // exit\\n        if (withdrawnBalances[j] > oldWitBal + DCL.DEPOSIT_AMOUNT) {\\n          processed += _distributeFees(\\n            self,\\n            validators[j],\\n            withdrawnBalances[j],\\n            oldWitBal + DCL.DEPOSIT_AMOUNT\\n          );\\n          processed += DCL.DEPOSIT_AMOUNT;\\n        } else if (withdrawnBalances[j] >= oldWitBal) {\\n          processed += withdrawnBalances[j] - oldWitBal;\\n        } else {\\n          revert(\\\"WML:invalid withdrawn balance\\\");\\n        }\\n        _finalizeExit(self, pubkeys[j]);\\n      } else {\\n        // check if should request exit\\n        if (withdrawnBalances[j] > oldWitBal) {\\n          processed += _distributeFees(self, validators[j], withdrawnBalances[j], oldWitBal);\\n        }\\n        commonPoll = _checkAndRequestExit(self, pubkeys[j], commonPoll);\\n      }\\n\\n      unchecked {\\n        j += 1;\\n      }\\n    }\\n    self.queue.commonPoll = commonPoll;\\n\\n    if (processed > 0) {\\n      _realizeProcessedEther(self, processed);\\n    }\\n\\n    emit Processed();\\n  }\\n}\\n\",\"keccak256\":\"0x98f169e3c3276186d7e5744bf3b75e2dc4a619a88c97eaee9d499169a4658b0f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\n// internal - structs\\nimport {Queue, Request, ValidatorData} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Withdrawal Package enabling the Queued Withdrawal Requests with instant run-off validator exit elections\\n * @param gETH constant, ERC1155, all Geode Staking Derivatives.\\n * @param PORTAL constant, address of the PORTAL.\\n * @param POOL_ID constant, ID of the pool, also the token ID of represented gETH.\\n * @param EXIT_THRESHOLD variable, current exit threshold that is set by the owner.\\n * @param queue main variables related to Enqueue-Dequeue operations.\\n * @param requests an array of requests\\n * @param validators as pubkey being the key, the related data for the validators of the given pool. Updated on processValidators.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.StakeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct WithdrawalModuleStorage {\\n  IgETH gETH;\\n  address PORTAL;\\n  uint256 POOL_ID;\\n  uint256 EXIT_THRESHOLD;\\n  uint256 gatheredInfrastructureFees;\\n  Queue queue;\\n  Request[] requests;\\n  mapping(bytes => ValidatorData) validators;\\n}\\n\",\"keccak256\":\"0xd03e0163b0795cdce81ac61536c047c784e8c75bea7e7d0d34a964b744811a61\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @param beaconBalance  Beacon Chain balance of the validator (current).\\n * @param withdrawnBalance  Representing any Ether sent from Beacon Chain to a withdrawal package (cumulative).\\n * @param poll size of the requests that specifically voted for given validator to exit. as in gETH.\\n **/\\nstruct ValidatorData {\\n  uint256 beaconBalance;\\n  uint256 withdrawnBalance;\\n  uint256 poll;\\n}\\n\\n/**\\n * @param owner the address that can dequeue the request. Ownership can be transferred.\\n * @param trigger cumulative sum of the previous requests, as in gETH.\\n * @param size size of the withdrawal request, as in gETH.\\n * @param fulfilled part of the 'size' that became available after being processed relative to the 'realizedPrice'. as in gETH.\\n * @param claimableEther current ETH amount that can be claimed by the Owner, increased in respect to 'fulfilled' and 'realizedPrice', decreased with dequeue.\\n **/\\nstruct Request {\\n  address owner;\\n  uint256 trigger;\\n  uint256 size;\\n  uint256 fulfilled;\\n  uint256 claimableEther;\\n}\\n\\n/**\\n * @param requested cumulative size of all requests, as in gETH.\\n * ex: --- ------ ------ - - --- : 20 : there are 6 requests totaling up to 20 gETH.\\n * @param realized cumulative size of gETH that is processed and can be used to fulfill Requests, as in gETH\\n * ex: ----- -- -- - ----- --    : 17 : there are 17 gETH, processed as a response to the withdrawn funds.\\n * @param fulfilled cumulative size of the fulfilled requests, claimed or claimable, as in gETH\\n * ex: --- ----xx ------ x - ooo : 14 : there are 15 gETH being used to fulfill requests,including one that is partially filled. 3 gETH is still claimable.\\n * @param realizedEtherBalance cumulative size of the withdrawn and realized balances. Note that, (realizedEtherBalance * realizedPrice != realized) as price changes constantly.\\n * @param fulfilledEtherBalance cumulative size of the fulfilled requests.\\n * @param realizedPrice current Price of the queue, used when fulfilling a Request, updated with processValidators.\\n * @param commonPoll current size of requests that did not vote on any specific validator, as in gETH.\\n **/\\nstruct Queue {\\n  uint256 requested;\\n  uint256 realized;\\n  uint256 realizedEtherBalance;\\n  uint256 realizedPrice;\\n  uint256 fulfilled;\\n  uint256 fulfilledEtherBalance;\\n  uint256 commonPoll;\\n}\\n\",\"keccak256\":\"0x3eda33c444a9331c757cd1cd1b069b398a9c8afa9bb1130f42908ff639ed988e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x612c4d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80638b7d9c8e1161007b5780638b7d9c8e146101a05780638d33b0ee146101c35780638d755ff8146101e3578063928b8e4d1461020357806393c8c5e914610216578063b4d65a701461023657600080fd5b80630445a976146100c357806311c9522c146100e55780635083ad2c1461010557806357babf8b146101325780637b4517821461015257806383b1a5c014610172575b600080fd5b8180156100cf57600080fd5b506100e36100de366004612366565b610263565b005b8180156100f157600080fd5b506100e36101003660046123e6565b610460565b6101186101133660046124f6565b610bf9565b604080519283526020830191909152015b60405180910390f35b81801561013e57600080fd5b506100e361014d366004612541565b610ced565b81801561015e57600080fd5b506100e361016d366004612563565b610dd5565b81801561017e57600080fd5b5061019261018d3660046125c0565b610f09565b604051908152602001610129565b6101b36101ae3660046124f6565b610fda565b6040519015158152602001610129565b8180156101cf57600080fd5b506100e36101de366004612627565b611100565b8180156101ef57600080fd5b506100e36101fe366004612541565b611128565b610192610211366004612665565b611136565b81801561022257600080fd5b506100e3610231366004612366565b611226565b81801561024257600080fd5b50610256610251366004612697565b611309565b604051610129919061271f565b600083600c01838154811061027a5761027a612763565b60009182526020909120600590910201546001600160a01b031690503381146102da5760405162461bcd60e51b815260206004820152600d60248201526c2ba6a61d3737ba1037bbb732b960991b60448201526064015b60405180910390fd5b6001600160a01b03821661033c5760405162461bcd60e51b815260206004820152602360248201527f574d4c3a63616e6e6f74207472616e7366657220746f207a65726f206164647260448201526265737360e81b60648201526084016102d1565b83600c01838154811061035157610351612763565b90600052602060002090600502016002015484600c01848154811061037857610378612763565b906000526020600020906005020160030154106103d75760405162461bcd60e51b815260206004820152601d60248201527f574d4c3a63616e6e6f74207472616e736665722066756c66696c6c656400000060448201526064016102d1565b8184600c0184815481106103ed576103ed612763565b60009182526020918290206005919091020180546001600160a01b0319166001600160a01b039384161790556040805184841681529285169183019190915284917fa30fa183fcbebffd572794bba7d67101f347b12d98bd01e8c93936fcf7b2809b91015b60405180910390a250505050565b86858114801561046f57508084145b801561047a57508082145b6104bc5760405162461bcd60e51b8152602060048201526013602482015272574d4c3a696e76616c6964206c656e6774687360681b60448201526064016102d1565b6000816001600160401b038111156104d6576104d6612779565b60405190808252806020026020018201604052801561058157816020015b61056e60405180610140016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816104f45790505b509050600061059a8c600101546001600160a01b031690565b6001600160a01b03166335b12f376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb919061278f565b905060005b838110156108555760018d01546001600160a01b031663b4891bfd8d8d8481811061062d5761062d612763565b905060200281019061063f91906127a8565b6040518363ffffffff1660e01b815260040161065c929190612817565b600060405180830381865afa158015610679573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a1919081019061291f565b8382815181106106b3576106b3612763565b60200260200101819052508c600201548382815181106106d5576106d5612763565b602002602001015160800151146106fe5760405162461bcd60e51b81526004016102d190612a08565b60008c8c8381811061071257610712612763565b905060200281019061072491906127a8565b8c8c8581811061073657610736612763565b905060200201358b8b8681811061074f5761074f612763565b905060200201356040516020016107699493929190612a49565b60408051601f19818403018152828252805160209182012090830152016040516020818303038152906040528051906020012090506108008787848181106107b3576107b3612763565b90506020028101906107c59190612a70565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925085915061158b9050565b61084c5760405162461bcd60e51b815260206004820152601c60248201527f574d4c3a6e6f7420616c6c2070726f6f6673206172652076616c69640000000060448201526064016102d1565b50600101610600565b5050600b8b01546000805b84811015610ba95760008e600d018e8e8481811061088057610880612763565b905060200281019061089291906127a8565b6040516108a0929190612ab9565b90815260200160405180910390206001015490508b8b838181106108c6576108c6612763565b905060200201358f600d018f8f858181106108e3576108e3612763565b90506020028101906108f591906127a8565b604051610903929190612ab9565b9081526040519081900360200190205589898381811061092557610925612763565b905060200201358f600d018f8f8581811061094257610942612763565b905060200281019061095491906127a8565b604051610962929190612ab9565b908152604051908190036020019020600101558b8b8381811061098757610987612763565b90506020020135600003610b05576109a86801bc16d674ec80000082612adf565b8a8a848181106109ba576109ba612763565b905060200201351115610a3e57610a188f8684815181106109dd576109dd612763565b60200260200101518c8c868181106109f7576109f7612763565b905060200201356801bc16d674ec80000085610a139190612adf565b6115a1565b610a229084612adf565b9250610a376801bc16d674ec80000084612adf565b9250610ad3565b808a8a84818110610a5157610a51612763565b9050602002013510610a8b57808a8a84818110610a7057610a70612763565b90506020020135610a819190612af2565b610a379084612adf565b60405162461bcd60e51b815260206004820152601d60248201527f574d4c3a696e76616c69642077697468647261776e2062616c616e636500000060448201526064016102d1565b610b008f8f8f85818110610ae957610ae9612763565b9050602002810190610afb91906127a8565b611772565b610ba0565b808a8a84818110610b1857610b18612763565b905060200201351115610b6f57610b628f868481518110610b3b57610b3b612763565b60200260200101518c8c86818110610b5557610b55612763565b90506020020135846115a1565b610b6c9084612adf565b92505b610b9d8f8f8f85818110610b8557610b85612763565b9050602002810190610b9791906127a8565b876117d9565b93505b50600101610860565b50600b8d018290558015610bc157610bc18d82611887565b6040517f6a10d94ca0ceab39341d44815cb9695894176d2d70cdceea8cc9f30a462a8cbe90600090a150505050505050505050505050565b8254600284015460405163f759cc3b60e01b81526004810191909152600091829182916001600160a01b03169063f759cc3b90602401602060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c70919061278f565b9050670de0b6b3a764000086600d018686604051610c8f929190612ab9565b90815260405190819003602001902054610ca99190612b05565b9150806402540be400876003015484610cc29190612b05565b610ccc9190612b1c565b610cd69190612b1c565b9250610ce28183612b1c565b915050935093915050565b640165a0bc00811015610d425760405162461bcd60e51b815260206004820152601860248201527f574d4c3a6d696e207468726573686f6c6420697320363025000000000000000060448201526064016102d1565b6402540be400811115610d975760405162461bcd60e51b815260206004820152601960248201527f574d4c3a6d6178207468726573686f6c6420697320313030250000000000000060448201526064016102d1565b600382018190556040518181527fe1629baa07ffc5468c3ba990715bf17c809ece95ae9fa8f566f3abe160f246709060200160405180910390a15050565b6001600160a01b038116610dfb5760405162461bcd60e51b81526004016102d190612b3e565b610e1e8484848760050160010154886005016004015489600501600301546119cf565b600082815b81811015610e6157610e4d87878784818110610e4157610e41612763565b90506020020135611c0c565b610e579084612adf565b9250600101610e23565b506000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610eaf576040519150601f19603f3d011682016040523d82523d6000602084013e610eb4565b606091505b5050905080610f005760405162461bcd60e51b81526020600482015260186024820152772ba6a61d2330b4b632b2103a379039b2b7321022ba3432b960411b60448201526064016102d1565b50505050505050565b6005850154600090610f1d87828886611d54565b91506000849003610f4a5785876005016006016000828254610f3f9190612adf565b90915550610f579050565b610f57878387878a611ed0565b610f618682612adf565b600588015586546002880154604051637921219560e11b81526001600160a01b039092169163f242432a91610f9e91339130918c90600401612b81565b600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b505050505095945050505050565b600083600d018383604051610ff0929190612ab9565b908152604051908190036020019020541561100d575060006110f9565b600061102385600101546001600160a01b031690565b6001600160a01b031663b4891bfd85856040518363ffffffff1660e01b8152600401611050929190612817565b600060405180830381865afa15801561106d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611095919081019061291f565b905084600201548160800151146110be5760405162461bcd60e51b81526004016102d190612a08565b80516001600160401b03166002148015906110e4575080516001600160401b0316600314155b156110f35760009150506110f9565b60019150505b9392505050565b6111238383838660050160010154876005016004015488600501600301546119cf565b505050565b611132828261209f565b5050565b60008183111561121a57600085600c01858154811061115757611157612763565b9060005260206000209060050201600101549050600086600c01868154811061118257611182612763565b9060005260206000209060050201600201549050600087600c0187815481106111ad576111ad612763565b6000918252602082206003600590920201015491506111cc8285612adf565b905060006111da8486612adf565b9050808811156111fa576111ee8385612af2565b9550505050505061121e565b8188111561120c576111ee8289612af2565b60009550505050505061121e565b5060005b949350505050565b6001600160a01b03811661124c5760405162461bcd60e51b81526004016102d190612b3e565b611256838361209f565b60006112628484611c0c565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146112b1576040519150601f19603f3d011682016040523d82523d6000602084013e6112b6565b606091505b50509050806113025760405162461bcd60e51b81526020600482015260186024820152772ba6a61d2330b4b632b2103a379039b2b7321022ba3432b960411b60448201526064016102d1565b5050505050565b60608483811461135b5760405162461bcd60e51b815260206004820152601860248201527f574d4c3a696e76616c696420696e707574206c656e677468000000000000000060448201526064016102d1565b600b88015460058901546000836001600160401b0381111561137f5761137f612779565b6040519080825280602002602001820160405280156113a8578160200160208202803683370190505b50945060005b84811015611504576113da8c848d8d858181106113cd576113cd612763565b905060200201358a611d54565b8682815181106113ec576113ec612763565b60200260200101818152505088888281811061140a5761140a612763565b905060200281019061141c91906127a8565b9050600003611450578a8a8281811061143757611437612763565b90506020020135846114499190612adf565b93506114b0565b6114b08c87838151811061146657611466612763565b60200260200101518b8b8581811061148057611480612763565b905060200281019061149291906127a8565b8f8f878181106114a4576114a4612763565b90506020020135611ed0565b8a8a828181106114c2576114c2612763565b90506020020135836114d49190612adf565b92508a8a828181106114e8576114e8612763565b90506020020135826114fa9190612adf565b91506001016113ae565b50600b8b0183905560058b018290558a5460028c0154604051637921219560e11b81526001600160a01b039092169163f242432a9161154b91339130918790600401612b81565b600060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b50505050505050509695505050505050565b6000826115988584612243565b14949350505050565b6000806115ae8385612af2565b905060006402540be4008660c00151836115c89190612b05565b6115d29190612b1c565b905060006402540be4008760e00151846115ec9190612b05565b6115f69190612b1c565b905060006402540be400886101000151856116119190612b05565b61161b9190612b1c565b905061163189600101546001600160a01b031690565b6001600160a01b031663cdaba274848a608001516040518363ffffffff1660e01b815260040161166391815260200190565b60206040518083038185885af1158015611681573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116a69190612bb9565b5060018901546001600160a01b03166001600160a01b031663cdaba274838a60a001516040518363ffffffff1660e01b81526004016116e791815260200190565b60206040518083038185885af1158015611705573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061172a9190612bb9565b508089600401600082825461173f9190612adf565b90915550819050826117518587612af2565b61175b9190612af2565b6117659190612af2565b9998505050505050505050565b6001830154600284015460405163303c01c160e01b81526001600160a01b039092169163303c01c1916117ab9186908690600401612bdb565b600060405180830381600087803b1580156117c557600080fd5b505af1158015610f00573d6000803e3d6000fd5b60008060006117e9878787610bf9565b91509150600087600d018787604051611803929190612ab9565b908152604051908190036020019020600201549050826118238287612adf565b111561187b57611834888888612292565b1561187b578083111561185c5761184b8184612af2565b6118559086612af2565b945061187b565b8181111561187b5761186e8282612af2565b6118789086612adf565b94505b50929695505050505050565b8154600283015460405163f759cc3b60e01b815260048101919091526000916001600160a01b03169063f759cc3b90602401602060405180830381865afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa919061278f565b9050600081611911670de0b6b3a764000085612b05565b61191b9190612b1c565b600885015490915082908015611988576009860154600687015460009161194191612af2565b90508015611986576119538482612adf565b611965670de0b6b3a764000088612b05565b61196f8484612b05565b6119799190612adf565b6119839190612b1c565b92505b505b8286600501600101600082825461199f9190612adf565b90915550506007860180548691906000906119bb908490612adf565b909155505050600890940193909355505050565b83826000805b83811015611b52576000611a038b8b8b858181106119f5576119f5612763565b905060200201358a8a611136565b90508015611b49576000670de0b6b3a7640000611a208884612b05565b611a2a9190612b1c565b9050808c600c018c8c86818110611a4357611a43612763565b9050602002013581548110611a5a57611a5a612763565b90600052602060002090600502016004016000828254611a7a9190612adf565b90915550829050600c8d018c8c86818110611a9757611a97612763565b9050602002013581548110611aae57611aae612763565b90600052602060002090600502016003016000828254611ace9190612adf565b90915550611ade90508289612adf565b9750611aea8185612adf565b93508a8a84818110611afe57611afe612763565b905060200201357f557d4170c57ec197114bd2dac3892fab029cc93898a5cc4b6455bef3b6b3c0ca8383604051611b3f929190918252602082015260400190565b60405180910390a2505b506001016119d5565b5060098901859055600a89018054829190600090611b71908490612adf565b9091555050885460028a01546001600160a01b039091169063f5298aca903090611b9b868a612af2565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015611be957600080fd5b505af1158015611bfd573d6000803e3d6000fd5b50505050505050505050505050565b600082600c018281548110611c2357611c23612763565b60009182526020909120600590910201546001600160a01b03163314611c7b5760405162461bcd60e51b815260206004820152600d60248201526c2ba6a61d3737ba1037bbb732b960991b60448201526064016102d1565b82600c018281548110611c9057611c90612763565b906000526020600020906005020160040154905060008111611ce85760405162461bcd60e51b8152602060048201526011602482015270574d4c3a6e6f7420636c61696d61626c6560781b60448201526064016102d1565b600083600c018381548110611cff57611cff612763565b906000526020600020906005020160040181905550817fad77e8aabfa0888720a5c1eedcdddc5a7aa25e2e3e2251b88b2e93318a4cecd182604051611d4691815260200190565b60405180910390a292915050565b600066b1a2bc2ec50000831015611da15760405162461bcd60e51b81526020600482015260116024820152700ae9a9874dad2dc40605c606a40ce8aa89607b1b60448201526064016102d1565b6001600160a01b038216611df75760405162461bcd60e51b815260206004820181905260248201527f574d4c3a6f776e65722063616e6e6f74206265207a65726f206164647265737360448201526064016102d1565b6040805160a0810182526001600160a01b038481168252602080830188815293830187815260006060850181815260808601828152600c8d01805460018082018355828652969094209751600590940290970180546001600160a01b031916939096169290921785559551848401559051600284015593516003830155925160049091015554611e879190612af2565b6040516001600160a01b038416815290915081907fc4193cc773105974437d05cb715f0f6ec12111aaea921df69ece51d70093f1279060200160405180910390a2949350505050565b6000611ee686600101546001600160a01b031690565b6001600160a01b031663b4891bfd85856040518363ffffffff1660e01b8152600401611f13929190612817565b600060405180830381865afa158015611f30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f58919081019061291f565b90508560020154816080015114611fb15760405162461bcd60e51b815260206004820152601c60248201527f574d4c3a766f746520666f7220616e20756e6b6e6f776e20706f6f6c0000000060448201526064016102d1565b80516001600160401b031660021461200b5760405162461bcd60e51b815260206004820181905260248201527f574d4c3a766f74656420666f7220696e6163746976652076616c696461746f7260448201526064016102d1565b8186600d018585604051612020929190612ab9565b908152602001604051809103902060020160008282546120409190612adf565b90915550506040516120559085908590612ab9565b6040518091039020857fcb2ceea6bf824190161ade5df35bbf82b98534e4f375a6999bfddb9dde71a6e08460405161208f91815260200190565b60405180910390a3505050505050565b60006120bb838385600501600101548660050160040154611136565b90508015611123576008830154600090670de0b6b3a7640000906120df9084612b05565b6120e99190612b1c565b90508084600c01848154811061210157612101612763565b906000526020600020906005020160040160008282546121219190612adf565b925050819055508184600c01848154811061213e5761213e612763565b9060005260206000209060050201600301600082825461215e9190612adf565b909155505060098401805483919060009061217a908490612adf565b9091555050600a84018054829190600090612196908490612adf565b909155505083546002850154604051637a94c56560e11b81523060048201526024810191909152604481018490526001600160a01b039091169063f5298aca90606401600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b505060408051858152602081018590528693507f557d4170c57ec197114bd2dac3892fab029cc93898a5cc4b6455bef3b6b3c0ca925001610452565b600081815b8451811015612288576122748286838151811061226757612267612763565b602002602001015161231e565b91508061228081612bfe565b915050612248565b5090505b92915050565b60006122a884600101546001600160a01b031690565b6001600160a01b031663697684cc856002015485856040518463ffffffff1660e01b81526004016122db93929190612bdb565b6020604051808303816000875af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e9190612bb9565b600081831061233a5760008281526020849052604090206110f9565b5060009182526020526040902090565b80356001600160a01b038116811461236157600080fd5b919050565b60008060006060848603121561237b57600080fd5b83359250602084013591506123926040850161234a565b90509250925092565b60008083601f8401126123ad57600080fd5b5081356001600160401b038111156123c457600080fd5b6020830191508360208260051b85010111156123df57600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561240457600080fd5b8935985060208a01356001600160401b038082111561242257600080fd5b61242e8d838e0161239b565b909a50985060408c013591508082111561244757600080fd5b6124538d838e0161239b565b909850965060608c013591508082111561246c57600080fd5b6124788d838e0161239b565b909650945060808c013591508082111561249157600080fd5b5061249e8c828d0161239b565b915080935050809150509295985092959850929598565b60008083601f8401126124c757600080fd5b5081356001600160401b038111156124de57600080fd5b6020830191508360208285010111156123df57600080fd5b60008060006040848603121561250b57600080fd5b8335925060208401356001600160401b0381111561252857600080fd5b612534868287016124b5565b9497909650939450505050565b6000806040838503121561255457600080fd5b50508035926020909101359150565b6000806000806060858703121561257957600080fd5b8435935060208501356001600160401b0381111561259657600080fd5b6125a28782880161239b565b90945092506125b590506040860161234a565b905092959194509250565b6000806000806000608086880312156125d857600080fd5b853594506020860135935060408601356001600160401b038111156125fc57600080fd5b612608888289016124b5565b909450925061261b90506060870161234a565b90509295509295909350565b60008060006040848603121561263c57600080fd5b8335925060208401356001600160401b0381111561265957600080fd5b6125348682870161239b565b6000806000806080858703121561267b57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600080608087890312156126b057600080fd5b8635955060208701356001600160401b03808211156126ce57600080fd5b6126da8a838b0161239b565b909750955060408901359150808211156126f357600080fd5b5061270089828a0161239b565b909450925061271390506060880161234a565b90509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156127575783518352928401929184019160010161273b565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156127a157600080fd5b5051919050565b6000808335601e198436030181126127bf57600080fd5b8301803591506001600160401b038211156127d957600080fd5b6020019150368190038213156123df57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061121e6020830184866127ee565b60405161014081016001600160401b038111828210171561284e5761284e612779565b60405290565b604051601f8201601f191681016001600160401b038111828210171561287c5761287c612779565b604052919050565b80516001600160401b038116811461236157600080fd5b600082601f8301126128ac57600080fd5b81516001600160401b038111156128c5576128c5612779565b60206128d9601f8301601f19168201612854565b82815285828487010111156128ed57600080fd5b60005b8381101561290b5785810183015182820184015282016128f0565b506000928101909101919091529392505050565b60006020828403121561293157600080fd5b81516001600160401b038082111561294857600080fd5b90830190610140828603121561295d57600080fd5b61296561282b565b61296e83612884565b815261297c60208401612884565b602082015261298d60408401612884565b604082015261299e60608401612884565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151838111156129eb57600080fd5b6129f78882870161289b565b918301919091525095945050505050565b60208082526021908201527f574d4c3a76616c696461746f7220666f7220616e20756e6b6e6f776e20706f6f6040820152601b60fa1b606082015260800190565b606081526000612a5d6060830186886127ee565b6020830194909452506040015292915050565b6000808335601e19843603018112612a8757600080fd5b8301803591506001600160401b03821115612aa157600080fd5b6020019150600581901b36038213156123df57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561228c5761228c612ac9565b8181038181111561228c5761228c612ac9565b808202811582820484141761228c5761228c612ac9565b600082612b3957634e487b7160e01b600052601260045260246000fd5b500490565b60208082526023908201527f574d4c3a72656365697665722063616e6e6f74206265207a65726f206164647260408201526265737360e81b606082015260800190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215612bcb57600080fd5b815180151581146110f957600080fd5b838152604060208201526000612bf56040830184866127ee565b95945050505050565b600060018201612c1057612c10612ac9565b506001019056fea26469706673582212208b14ead77925b0021c1b9e12585a6c6ac2e7d0aad0e06b0044b6fd8280bf8c3164736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80638b7d9c8e1161007b5780638b7d9c8e146101a05780638d33b0ee146101c35780638d755ff8146101e3578063928b8e4d1461020357806393c8c5e914610216578063b4d65a701461023657600080fd5b80630445a976146100c357806311c9522c146100e55780635083ad2c1461010557806357babf8b146101325780637b4517821461015257806383b1a5c014610172575b600080fd5b8180156100cf57600080fd5b506100e36100de366004612366565b610263565b005b8180156100f157600080fd5b506100e36101003660046123e6565b610460565b6101186101133660046124f6565b610bf9565b604080519283526020830191909152015b60405180910390f35b81801561013e57600080fd5b506100e361014d366004612541565b610ced565b81801561015e57600080fd5b506100e361016d366004612563565b610dd5565b81801561017e57600080fd5b5061019261018d3660046125c0565b610f09565b604051908152602001610129565b6101b36101ae3660046124f6565b610fda565b6040519015158152602001610129565b8180156101cf57600080fd5b506100e36101de366004612627565b611100565b8180156101ef57600080fd5b506100e36101fe366004612541565b611128565b610192610211366004612665565b611136565b81801561022257600080fd5b506100e3610231366004612366565b611226565b81801561024257600080fd5b50610256610251366004612697565b611309565b604051610129919061271f565b600083600c01838154811061027a5761027a612763565b60009182526020909120600590910201546001600160a01b031690503381146102da5760405162461bcd60e51b815260206004820152600d60248201526c2ba6a61d3737ba1037bbb732b960991b60448201526064015b60405180910390fd5b6001600160a01b03821661033c5760405162461bcd60e51b815260206004820152602360248201527f574d4c3a63616e6e6f74207472616e7366657220746f207a65726f206164647260448201526265737360e81b60648201526084016102d1565b83600c01838154811061035157610351612763565b90600052602060002090600502016002015484600c01848154811061037857610378612763565b906000526020600020906005020160030154106103d75760405162461bcd60e51b815260206004820152601d60248201527f574d4c3a63616e6e6f74207472616e736665722066756c66696c6c656400000060448201526064016102d1565b8184600c0184815481106103ed576103ed612763565b60009182526020918290206005919091020180546001600160a01b0319166001600160a01b039384161790556040805184841681529285169183019190915284917fa30fa183fcbebffd572794bba7d67101f347b12d98bd01e8c93936fcf7b2809b91015b60405180910390a250505050565b86858114801561046f57508084145b801561047a57508082145b6104bc5760405162461bcd60e51b8152602060048201526013602482015272574d4c3a696e76616c6964206c656e6774687360681b60448201526064016102d1565b6000816001600160401b038111156104d6576104d6612779565b60405190808252806020026020018201604052801561058157816020015b61056e60405180610140016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816104f45790505b509050600061059a8c600101546001600160a01b031690565b6001600160a01b03166335b12f376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb919061278f565b905060005b838110156108555760018d01546001600160a01b031663b4891bfd8d8d8481811061062d5761062d612763565b905060200281019061063f91906127a8565b6040518363ffffffff1660e01b815260040161065c929190612817565b600060405180830381865afa158015610679573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a1919081019061291f565b8382815181106106b3576106b3612763565b60200260200101819052508c600201548382815181106106d5576106d5612763565b602002602001015160800151146106fe5760405162461bcd60e51b81526004016102d190612a08565b60008c8c8381811061071257610712612763565b905060200281019061072491906127a8565b8c8c8581811061073657610736612763565b905060200201358b8b8681811061074f5761074f612763565b905060200201356040516020016107699493929190612a49565b60408051601f19818403018152828252805160209182012090830152016040516020818303038152906040528051906020012090506108008787848181106107b3576107b3612763565b90506020028101906107c59190612a70565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925085915061158b9050565b61084c5760405162461bcd60e51b815260206004820152601c60248201527f574d4c3a6e6f7420616c6c2070726f6f6673206172652076616c69640000000060448201526064016102d1565b50600101610600565b5050600b8b01546000805b84811015610ba95760008e600d018e8e8481811061088057610880612763565b905060200281019061089291906127a8565b6040516108a0929190612ab9565b90815260200160405180910390206001015490508b8b838181106108c6576108c6612763565b905060200201358f600d018f8f858181106108e3576108e3612763565b90506020028101906108f591906127a8565b604051610903929190612ab9565b9081526040519081900360200190205589898381811061092557610925612763565b905060200201358f600d018f8f8581811061094257610942612763565b905060200281019061095491906127a8565b604051610962929190612ab9565b908152604051908190036020019020600101558b8b8381811061098757610987612763565b90506020020135600003610b05576109a86801bc16d674ec80000082612adf565b8a8a848181106109ba576109ba612763565b905060200201351115610a3e57610a188f8684815181106109dd576109dd612763565b60200260200101518c8c868181106109f7576109f7612763565b905060200201356801bc16d674ec80000085610a139190612adf565b6115a1565b610a229084612adf565b9250610a376801bc16d674ec80000084612adf565b9250610ad3565b808a8a84818110610a5157610a51612763565b9050602002013510610a8b57808a8a84818110610a7057610a70612763565b90506020020135610a819190612af2565b610a379084612adf565b60405162461bcd60e51b815260206004820152601d60248201527f574d4c3a696e76616c69642077697468647261776e2062616c616e636500000060448201526064016102d1565b610b008f8f8f85818110610ae957610ae9612763565b9050602002810190610afb91906127a8565b611772565b610ba0565b808a8a84818110610b1857610b18612763565b905060200201351115610b6f57610b628f868481518110610b3b57610b3b612763565b60200260200101518c8c86818110610b5557610b55612763565b90506020020135846115a1565b610b6c9084612adf565b92505b610b9d8f8f8f85818110610b8557610b85612763565b9050602002810190610b9791906127a8565b876117d9565b93505b50600101610860565b50600b8d018290558015610bc157610bc18d82611887565b6040517f6a10d94ca0ceab39341d44815cb9695894176d2d70cdceea8cc9f30a462a8cbe90600090a150505050505050505050505050565b8254600284015460405163f759cc3b60e01b81526004810191909152600091829182916001600160a01b03169063f759cc3b90602401602060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c70919061278f565b9050670de0b6b3a764000086600d018686604051610c8f929190612ab9565b90815260405190819003602001902054610ca99190612b05565b9150806402540be400876003015484610cc29190612b05565b610ccc9190612b1c565b610cd69190612b1c565b9250610ce28183612b1c565b915050935093915050565b640165a0bc00811015610d425760405162461bcd60e51b815260206004820152601860248201527f574d4c3a6d696e207468726573686f6c6420697320363025000000000000000060448201526064016102d1565b6402540be400811115610d975760405162461bcd60e51b815260206004820152601960248201527f574d4c3a6d6178207468726573686f6c6420697320313030250000000000000060448201526064016102d1565b600382018190556040518181527fe1629baa07ffc5468c3ba990715bf17c809ece95ae9fa8f566f3abe160f246709060200160405180910390a15050565b6001600160a01b038116610dfb5760405162461bcd60e51b81526004016102d190612b3e565b610e1e8484848760050160010154886005016004015489600501600301546119cf565b600082815b81811015610e6157610e4d87878784818110610e4157610e41612763565b90506020020135611c0c565b610e579084612adf565b9250600101610e23565b506000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610eaf576040519150601f19603f3d011682016040523d82523d6000602084013e610eb4565b606091505b5050905080610f005760405162461bcd60e51b81526020600482015260186024820152772ba6a61d2330b4b632b2103a379039b2b7321022ba3432b960411b60448201526064016102d1565b50505050505050565b6005850154600090610f1d87828886611d54565b91506000849003610f4a5785876005016006016000828254610f3f9190612adf565b90915550610f579050565b610f57878387878a611ed0565b610f618682612adf565b600588015586546002880154604051637921219560e11b81526001600160a01b039092169163f242432a91610f9e91339130918c90600401612b81565b600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b505050505095945050505050565b600083600d018383604051610ff0929190612ab9565b908152604051908190036020019020541561100d575060006110f9565b600061102385600101546001600160a01b031690565b6001600160a01b031663b4891bfd85856040518363ffffffff1660e01b8152600401611050929190612817565b600060405180830381865afa15801561106d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611095919081019061291f565b905084600201548160800151146110be5760405162461bcd60e51b81526004016102d190612a08565b80516001600160401b03166002148015906110e4575080516001600160401b0316600314155b156110f35760009150506110f9565b60019150505b9392505050565b6111238383838660050160010154876005016004015488600501600301546119cf565b505050565b611132828261209f565b5050565b60008183111561121a57600085600c01858154811061115757611157612763565b9060005260206000209060050201600101549050600086600c01868154811061118257611182612763565b9060005260206000209060050201600201549050600087600c0187815481106111ad576111ad612763565b6000918252602082206003600590920201015491506111cc8285612adf565b905060006111da8486612adf565b9050808811156111fa576111ee8385612af2565b9550505050505061121e565b8188111561120c576111ee8289612af2565b60009550505050505061121e565b5060005b949350505050565b6001600160a01b03811661124c5760405162461bcd60e51b81526004016102d190612b3e565b611256838361209f565b60006112628484611c0c565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146112b1576040519150601f19603f3d011682016040523d82523d6000602084013e6112b6565b606091505b50509050806113025760405162461bcd60e51b81526020600482015260186024820152772ba6a61d2330b4b632b2103a379039b2b7321022ba3432b960411b60448201526064016102d1565b5050505050565b60608483811461135b5760405162461bcd60e51b815260206004820152601860248201527f574d4c3a696e76616c696420696e707574206c656e677468000000000000000060448201526064016102d1565b600b88015460058901546000836001600160401b0381111561137f5761137f612779565b6040519080825280602002602001820160405280156113a8578160200160208202803683370190505b50945060005b84811015611504576113da8c848d8d858181106113cd576113cd612763565b905060200201358a611d54565b8682815181106113ec576113ec612763565b60200260200101818152505088888281811061140a5761140a612763565b905060200281019061141c91906127a8565b9050600003611450578a8a8281811061143757611437612763565b90506020020135846114499190612adf565b93506114b0565b6114b08c87838151811061146657611466612763565b60200260200101518b8b8581811061148057611480612763565b905060200281019061149291906127a8565b8f8f878181106114a4576114a4612763565b90506020020135611ed0565b8a8a828181106114c2576114c2612763565b90506020020135836114d49190612adf565b92508a8a828181106114e8576114e8612763565b90506020020135826114fa9190612adf565b91506001016113ae565b50600b8b0183905560058b018290558a5460028c0154604051637921219560e11b81526001600160a01b039092169163f242432a9161154b91339130918790600401612b81565b600060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b50505050505050509695505050505050565b6000826115988584612243565b14949350505050565b6000806115ae8385612af2565b905060006402540be4008660c00151836115c89190612b05565b6115d29190612b1c565b905060006402540be4008760e00151846115ec9190612b05565b6115f69190612b1c565b905060006402540be400886101000151856116119190612b05565b61161b9190612b1c565b905061163189600101546001600160a01b031690565b6001600160a01b031663cdaba274848a608001516040518363ffffffff1660e01b815260040161166391815260200190565b60206040518083038185885af1158015611681573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116a69190612bb9565b5060018901546001600160a01b03166001600160a01b031663cdaba274838a60a001516040518363ffffffff1660e01b81526004016116e791815260200190565b60206040518083038185885af1158015611705573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061172a9190612bb9565b508089600401600082825461173f9190612adf565b90915550819050826117518587612af2565b61175b9190612af2565b6117659190612af2565b9998505050505050505050565b6001830154600284015460405163303c01c160e01b81526001600160a01b039092169163303c01c1916117ab9186908690600401612bdb565b600060405180830381600087803b1580156117c557600080fd5b505af1158015610f00573d6000803e3d6000fd5b60008060006117e9878787610bf9565b91509150600087600d018787604051611803929190612ab9565b908152604051908190036020019020600201549050826118238287612adf565b111561187b57611834888888612292565b1561187b578083111561185c5761184b8184612af2565b6118559086612af2565b945061187b565b8181111561187b5761186e8282612af2565b6118789086612adf565b94505b50929695505050505050565b8154600283015460405163f759cc3b60e01b815260048101919091526000916001600160a01b03169063f759cc3b90602401602060405180830381865afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa919061278f565b9050600081611911670de0b6b3a764000085612b05565b61191b9190612b1c565b600885015490915082908015611988576009860154600687015460009161194191612af2565b90508015611986576119538482612adf565b611965670de0b6b3a764000088612b05565b61196f8484612b05565b6119799190612adf565b6119839190612b1c565b92505b505b8286600501600101600082825461199f9190612adf565b90915550506007860180548691906000906119bb908490612adf565b909155505050600890940193909355505050565b83826000805b83811015611b52576000611a038b8b8b858181106119f5576119f5612763565b905060200201358a8a611136565b90508015611b49576000670de0b6b3a7640000611a208884612b05565b611a2a9190612b1c565b9050808c600c018c8c86818110611a4357611a43612763565b9050602002013581548110611a5a57611a5a612763565b90600052602060002090600502016004016000828254611a7a9190612adf565b90915550829050600c8d018c8c86818110611a9757611a97612763565b9050602002013581548110611aae57611aae612763565b90600052602060002090600502016003016000828254611ace9190612adf565b90915550611ade90508289612adf565b9750611aea8185612adf565b93508a8a84818110611afe57611afe612763565b905060200201357f557d4170c57ec197114bd2dac3892fab029cc93898a5cc4b6455bef3b6b3c0ca8383604051611b3f929190918252602082015260400190565b60405180910390a2505b506001016119d5565b5060098901859055600a89018054829190600090611b71908490612adf565b9091555050885460028a01546001600160a01b039091169063f5298aca903090611b9b868a612af2565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015611be957600080fd5b505af1158015611bfd573d6000803e3d6000fd5b50505050505050505050505050565b600082600c018281548110611c2357611c23612763565b60009182526020909120600590910201546001600160a01b03163314611c7b5760405162461bcd60e51b815260206004820152600d60248201526c2ba6a61d3737ba1037bbb732b960991b60448201526064016102d1565b82600c018281548110611c9057611c90612763565b906000526020600020906005020160040154905060008111611ce85760405162461bcd60e51b8152602060048201526011602482015270574d4c3a6e6f7420636c61696d61626c6560781b60448201526064016102d1565b600083600c018381548110611cff57611cff612763565b906000526020600020906005020160040181905550817fad77e8aabfa0888720a5c1eedcdddc5a7aa25e2e3e2251b88b2e93318a4cecd182604051611d4691815260200190565b60405180910390a292915050565b600066b1a2bc2ec50000831015611da15760405162461bcd60e51b81526020600482015260116024820152700ae9a9874dad2dc40605c606a40ce8aa89607b1b60448201526064016102d1565b6001600160a01b038216611df75760405162461bcd60e51b815260206004820181905260248201527f574d4c3a6f776e65722063616e6e6f74206265207a65726f206164647265737360448201526064016102d1565b6040805160a0810182526001600160a01b038481168252602080830188815293830187815260006060850181815260808601828152600c8d01805460018082018355828652969094209751600590940290970180546001600160a01b031916939096169290921785559551848401559051600284015593516003830155925160049091015554611e879190612af2565b6040516001600160a01b038416815290915081907fc4193cc773105974437d05cb715f0f6ec12111aaea921df69ece51d70093f1279060200160405180910390a2949350505050565b6000611ee686600101546001600160a01b031690565b6001600160a01b031663b4891bfd85856040518363ffffffff1660e01b8152600401611f13929190612817565b600060405180830381865afa158015611f30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f58919081019061291f565b90508560020154816080015114611fb15760405162461bcd60e51b815260206004820152601c60248201527f574d4c3a766f746520666f7220616e20756e6b6e6f776e20706f6f6c0000000060448201526064016102d1565b80516001600160401b031660021461200b5760405162461bcd60e51b815260206004820181905260248201527f574d4c3a766f74656420666f7220696e6163746976652076616c696461746f7260448201526064016102d1565b8186600d018585604051612020929190612ab9565b908152602001604051809103902060020160008282546120409190612adf565b90915550506040516120559085908590612ab9565b6040518091039020857fcb2ceea6bf824190161ade5df35bbf82b98534e4f375a6999bfddb9dde71a6e08460405161208f91815260200190565b60405180910390a3505050505050565b60006120bb838385600501600101548660050160040154611136565b90508015611123576008830154600090670de0b6b3a7640000906120df9084612b05565b6120e99190612b1c565b90508084600c01848154811061210157612101612763565b906000526020600020906005020160040160008282546121219190612adf565b925050819055508184600c01848154811061213e5761213e612763565b9060005260206000209060050201600301600082825461215e9190612adf565b909155505060098401805483919060009061217a908490612adf565b9091555050600a84018054829190600090612196908490612adf565b909155505083546002850154604051637a94c56560e11b81523060048201526024810191909152604481018490526001600160a01b039091169063f5298aca90606401600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b505060408051858152602081018590528693507f557d4170c57ec197114bd2dac3892fab029cc93898a5cc4b6455bef3b6b3c0ca925001610452565b600081815b8451811015612288576122748286838151811061226757612267612763565b602002602001015161231e565b91508061228081612bfe565b915050612248565b5090505b92915050565b60006122a884600101546001600160a01b031690565b6001600160a01b031663697684cc856002015485856040518463ffffffff1660e01b81526004016122db93929190612bdb565b6020604051808303816000875af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e9190612bb9565b600081831061233a5760008281526020849052604090206110f9565b5060009182526020526040902090565b80356001600160a01b038116811461236157600080fd5b919050565b60008060006060848603121561237b57600080fd5b83359250602084013591506123926040850161234a565b90509250925092565b60008083601f8401126123ad57600080fd5b5081356001600160401b038111156123c457600080fd5b6020830191508360208260051b85010111156123df57600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561240457600080fd5b8935985060208a01356001600160401b038082111561242257600080fd5b61242e8d838e0161239b565b909a50985060408c013591508082111561244757600080fd5b6124538d838e0161239b565b909850965060608c013591508082111561246c57600080fd5b6124788d838e0161239b565b909650945060808c013591508082111561249157600080fd5b5061249e8c828d0161239b565b915080935050809150509295985092959850929598565b60008083601f8401126124c757600080fd5b5081356001600160401b038111156124de57600080fd5b6020830191508360208285010111156123df57600080fd5b60008060006040848603121561250b57600080fd5b8335925060208401356001600160401b0381111561252857600080fd5b612534868287016124b5565b9497909650939450505050565b6000806040838503121561255457600080fd5b50508035926020909101359150565b6000806000806060858703121561257957600080fd5b8435935060208501356001600160401b0381111561259657600080fd5b6125a28782880161239b565b90945092506125b590506040860161234a565b905092959194509250565b6000806000806000608086880312156125d857600080fd5b853594506020860135935060408601356001600160401b038111156125fc57600080fd5b612608888289016124b5565b909450925061261b90506060870161234a565b90509295509295909350565b60008060006040848603121561263c57600080fd5b8335925060208401356001600160401b0381111561265957600080fd5b6125348682870161239b565b6000806000806080858703121561267b57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600080608087890312156126b057600080fd5b8635955060208701356001600160401b03808211156126ce57600080fd5b6126da8a838b0161239b565b909750955060408901359150808211156126f357600080fd5b5061270089828a0161239b565b909450925061271390506060880161234a565b90509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156127575783518352928401929184019160010161273b565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156127a157600080fd5b5051919050565b6000808335601e198436030181126127bf57600080fd5b8301803591506001600160401b038211156127d957600080fd5b6020019150368190038213156123df57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061121e6020830184866127ee565b60405161014081016001600160401b038111828210171561284e5761284e612779565b60405290565b604051601f8201601f191681016001600160401b038111828210171561287c5761287c612779565b604052919050565b80516001600160401b038116811461236157600080fd5b600082601f8301126128ac57600080fd5b81516001600160401b038111156128c5576128c5612779565b60206128d9601f8301601f19168201612854565b82815285828487010111156128ed57600080fd5b60005b8381101561290b5785810183015182820184015282016128f0565b506000928101909101919091529392505050565b60006020828403121561293157600080fd5b81516001600160401b038082111561294857600080fd5b90830190610140828603121561295d57600080fd5b61296561282b565b61296e83612884565b815261297c60208401612884565b602082015261298d60408401612884565b604082015261299e60608401612884565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151838111156129eb57600080fd5b6129f78882870161289b565b918301919091525095945050505050565b60208082526021908201527f574d4c3a76616c696461746f7220666f7220616e20756e6b6e6f776e20706f6f6040820152601b60fa1b606082015260800190565b606081526000612a5d6060830186886127ee565b6020830194909452506040015292915050565b6000808335601e19843603018112612a8757600080fd5b8301803591506001600160401b03821115612aa157600080fd5b6020019150600581901b36038213156123df57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561228c5761228c612ac9565b8181038181111561228c5761228c612ac9565b808202811582820484141761228c5761228c612ac9565b600082612b3957634e487b7160e01b600052601260045260246000fd5b500490565b60208082526023908201527f574d4c3a72656365697665722063616e6e6f74206265207a65726f206164647260408201526265737360e81b606082015260800190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215612bcb57600080fd5b815180151581146110f957600080fd5b838152604060208201526000612bf56040830184866127ee565b95945050505050565b600060018201612c1057612c10612ac9565b506001019056fea26469706673582212208b14ead77925b0021c1b9e12585a6c6ac2e7d0aad0e06b0044b6fd8280bf8c3164736f6c63430008140033",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "The Queue Lets say every '-' is representing 1 gETH. Queue: --- -- ---------- -- --- --- - --- -- ---- ----- - ------- ---- -- -- - - -------- -- There are 20 requests in this queue, adding up to 65 gETH, this is 'requested'. Every request has a 'size', first request' is 3 gETH , second' is 2 gETH. Every request has a 'trigger', pointing it's kickoff point. Thus, 3rd request' is 5 gETH. Let's say, there are 8 ETH processed in the contract, we burn 8 ETH worth of gETH. Let's say 8 ETH is 4 gETH. Then the first request can exit fully, and second one can exit for 1 gETH.This process creates a unique question: Considering that profit processing, price updates and queue operations are ASYNC, how can we make sure that we are paying the correct price? We have determined 3 possible points that we can 'derisk' a Request: Enqueue -> ProcessValidators -> Dequeue 1. We derisk the Request when it is enqueued: * This would cause 2 issues: * a. Best case, we would prevent the queued Request from profiting while they are in the queue. * b. Since there is a slashing risk, we cannot promise a fixed Ether amount without knowing what would be the future price. 2. We derisk the Request when validators are processed, with the latest price for the derivative: * This is the correct approach as we REALIZE the price at this exact point: by increasing the cumulative claimable gETH. * However, we would need to insert an 'unbound for loop' through 'realized' Requests, when a 'processValidators' operation is finalized. * We cannot, nor should, enforce an 'unbound for loop' on requests array. 3. We derisk the Request when it is dequeued: * Simply, price changes would have unpredictable effects on the Queue: A request can be claimable now, but might become unclaimable later. * Derisked Requests that are waiting to be claimed, would hijack the real stakers' APR, while sitting on top of some allocated Ether. * Unclaimed Requests can prevent the latter requests since there would be no way to keep track of the previous unclaimed requests without enforcing the order. We do not want to promise vague returns, we do not want for loops over requests array or price checkpoints, we do not want APR hijacking. Thus, none of these points can be implemented without utilizing a trusted third party, like an Oracle. However, we want Withdrawal logic to have the minimum Third Party risk as Geode Developers. As a result, we have came up with a logic that will allow stakers to maintain their profitability without disrupting the 'derisk' moment. * a. We keep track of an internal price, stating the ratio of the claimable ETH and processed gETH: realizedPrice. * b. We derisk the Queue on 'processValidators' by increasing the cumulative gETH that can be claimed. * * We also adjust the realizedPrice considering the pricePerShare of the currently derisked asset amount. * c. Requests can be fulfilled in respect to the internal price BY ANYONE at any point after they become claimable. * d. Fulfilled requests, including partially fulfilled ones, can be claimed (ONLY) BY THE OWNER. Why using an internal Price instead of 'enforcing the PricePerShare' makes sense: * All Requests, without considering their index, are in the same pool until they are derisked through price processing. * If all of the claimable requests are fulfilled periodically (via a script etc.), we would expect internal price to be equal to 'PricePerShare'. * This way, a well maintained pool can prevent APR hijacking by fulfilling neglected Requests, while it is not enforced for all of the pools. However, this is a gas-heavy process so it might not be needed after every 'processValidators' operation. Similarly, 'processValidators' is expensive as well, we would advise calling it when there is a dequeue opportunity. As a conclusion, if all requests are fulfilled immediately after the off-chain calculation signals them being claimable; None of these approaches will be expensive, nor will disrupt the internal pricing for the latter requests.while conducting the price calculations, a part of the balance within this contract should be taken into consideration. This ETH amount can be calculated as: sum(lambda x: requests[x].withdrawnBalance) - [fulfilledEtherBalance] (todo for the telescope). Note that, this is because: a price of the derivative is = total ETH / total Supply, and total ETH should include the balance within WC.Contracts relying on this library must initialize WithdrawalModuleLib.WithdrawalModuleStorageThere are 'owner' checks on 'transferRequest', _dequeue (used by dequeue, dequeueBatch). However, we preferred to not use a modifier for that.all parameters related to balance are denominated in gETH; except realizedEtherBalance,fulfilledEtherBalance and claimableEther: (requested, realized, fulfilled, commonPoll, trigger, size, fulfilled)",
    "events": {
      "NewExitThreshold(uint256)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "canFinalizeExit(WithdrawalModuleStorage storage,bytes)": {
        "details": "an external view function, just as an helper."
      },
      "dequeue(WithdrawalModuleStorage storage,uint256,address)": {
        "details": "only owner can call this function",
        "params": {
          "index": "placement of the Request within the requests array."
        }
      },
      "enqueue(WithdrawalModuleStorage storage,uint256,bytes,address)": {
        "params": {
          "owner": "allows caller to directly transfer the Request on creation",
          "pubkey": "voted validator, vote goes into commonPoll if bytes(0) is given."
        }
      },
      "enqueueBatch(WithdrawalModuleStorage storage,uint256[],bytes[],address)": {
        "params": {
          "owner": "the owner for all the Requests being created.",
          "pubkeys": "array of voted validators, vote goes into commonPoll if bytes(0) is given.",
          "sizes": "array of gETH amount that are sent to enqueue multiple Requests."
        }
      },
      "fulfill(WithdrawalModuleStorage storage,uint256)": {
        "custom:visibility": "-> external"
      },
      "fulfillable(WithdrawalModuleStorage storage,uint256,uint256,uint256)": {
        "details": "taking the previously fulfilled amount into consideration as it is the previously claimed part.",
        "params": {
          "index": "placement of the Request within the requests array.",
          "qFulfilled": "self.queue.fulfilled, might also be a hot value for Batch optimizations",
          "qRealized": "self.queue.realized, might also be hot value for Batch optimizations"
        }
      },
      "getValidatorThreshold(WithdrawalModuleStorage storage,bytes)": {
        "params": {
          "pubkey": "public key of the given validator."
        }
      },
      "processValidators(WithdrawalModuleStorage storage,bytes[],uint256[],uint256[],bytes32[][])": {
        "details": "not all validators need to be processed all the time, process them as you need.We do not check if validators should be processed at all. Because its up to user if they want to pay extra for unnecessary operations. We should not be charging others extra to save their gas.It is advised to sort the pks according to the time passed, or remaining, to ensure that the preferred validators are prioritized in a case when the subset of given validators are not called for an exit."
      },
      "setExitThreshold(WithdrawalModuleStorage storage,uint256)": {
        "details": "caller should be governed on module contract.",
        "params": {
          "newThreshold": "as percentage, denominated in PERCENTAGE_DENOMINATOR."
        }
      },
      "transferRequest(WithdrawalModuleStorage storage,uint256,address)": {
        "details": "only current Owner can change the owner",
        "params": {
          "index": "placement of the Request within the requests array.",
          "newOwner": "new address that will be eligible to dequeue a Request."
        }
      }
    },
    "title": "WML: Withdrawal Module Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canFinalizeExit(WithdrawalModuleStorage storage,bytes)": {
        "notice": "checks if given validator is exited, according to the information provided by Balances Merkle Root."
      },
      "dequeue(WithdrawalModuleStorage storage,uint256,address)": {
        "notice": "given a Request from the requests array, claim the part that is currently claimable and forward the ether amount to the given receiver."
      },
      "dequeueBatch(WithdrawalModuleStorage storage,uint256[],address)": {
        "notice": "dequeue() with batch optimizations"
      },
      "enqueue(WithdrawalModuleStorage storage,uint256,bytes,address)": {
        "notice": "queues a Request into Queue, processes the vote, exits the validator in case of a run-off."
      },
      "enqueueBatch(WithdrawalModuleStorage storage,uint256[],bytes[],address)": {
        "notice": "enqueue() with batch optimizations"
      },
      "fulfillable(WithdrawalModuleStorage storage,uint256,uint256,uint256)": {
        "notice": "given a request, figure out the fulfillable gETH amount, limited up to its size."
      },
      "getValidatorThreshold(WithdrawalModuleStorage storage,bytes)": {
        "notice": "figuring out the applied exit threshold, as in gETH, for a given validator."
      },
      "processValidators(WithdrawalModuleStorage storage,bytes[],uint256[],uint256[],bytes32[][])": {
        "notice": "main function of this library, processing given information about the provided validators."
      },
      "setExitThreshold(WithdrawalModuleStorage storage,uint256)": {
        "notice": "allowing EXIT_THRESHOLD to be set by the contract owner."
      },
      "transferRequest(WithdrawalModuleStorage storage,uint256,address)": {
        "notice": "transferring the ownership of a Request to a new address"
      }
    },
    "notice": "Improved validator withdrawals (and exits), while preserving the validator segregation.Intended implementation scope: 1. Processing the withdrawals (partial and exits). * `processValidators` function handles any balance changes that is reflected from the Beacon Chain. * If a validator's balance on the Beacon Chain is ZERO, it exited (forced or voluntary). 2. Distributing the fees. * Pool and Operator fees are distributed whenever the validator is processed. * Note that if the validator is slashed before being processed, fees can be lost along with the stakers' profit. 3. Queueing withdrawal requests. * Users can request a withdrawal by forfeiting their gETH tokens. * Requests would be put in a queue (First-In-First-Out). * As the validators are processed, requests become claimable. * Users can dequeue partially or fully. 4. Allowing (Instant Run-off) elections on which validators to exit. * While getting into the queue, caller can vote on a validator, increasing it's 'poll'. * If a validator is not specified, vote goes to 'commonPoll'. It can be used for any validator to top-up the EXIT_THRESHOLD * If a validator is called for exit but there are remaining votes in it, it is transferred to the commonPoll. * Note that, elections are basically just stating a preference: * * Exit of the voted validator does not change the voter's priority in the queue.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}