{
  "address": "0x87828ff83A8B257D544c06fe64B6838DD2Fb0ED1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    }
  ],
  "transactionHash": "0xd54966a6f424478bf572448bbe9397a3641a56834b5a02267163e9fa37f4b421",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0x87828ff83A8B257D544c06fe64B6838DD2Fb0ED1",
    "transactionIndex": 4,
    "gasUsed": "1128871",
    "logsBloom": "0x
    "blockHash": "0x5becaa1bcaabd2ee6e20c00726f31aa685d06b7aca77537bd776ad4399ec2c08",
    "transactionHash": "0xd54966a6f424478bf572448bbe9397a3641a56834b5a02267163e9fa37f4b421",
    "logs": [],
    "blockNumber": 1550545,
    "cumulativeGasUsed": "1238615",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f37d23c7f369dde887557e5b9b00ccf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"review: DataStoreModule for the id based isolated storage logic.review: Reserved TYPEs are defined within globals/id_type.solSENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.There are 3 ways to set a new Senate: 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry. 2. Current Senate can call changeSenate, which doesn't change the expiry 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.Currently, there are no way to set a new Governance.Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorageThis is an external library, requires deployment.\",\"events\":{\"Proposed(uint256,uint256,address,uint256)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"approveProposal(GeodeModuleStorage storage,DataStoreModuleStorage storage,uint256)\":{\"details\":\"Senate is not able to approve approved proposalsSenate is not able to approve expired proposals\",\"params\":{\"id\":\"given ID proposal that has will be approved by Senate\"}},\"changeIdCONTROLLER(DataStoreModuleStorage storage,uint256,address)\":{\"details\":\"this operation cannot be reverted by the old CONTROLLER!!!cannot provide address(0), try 0x000000000000000000000000000000000000dEaD\"},\"changeSenate(GeodeModuleStorage storage,address)\":{\"details\":\"Does not change the expiry\"},\"getProposal(GeodeModuleStorage storage,uint256)\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"isUpgradeAllowed(GeodeModuleStorage storage,address,address)\":{\"details\":\"provided for _authorizeUpgradecurrentImplementation should always be UUPS._getImplementation()currentImplementation or zero as proposedImplementation will return false*\"},\"propose(GeodeModuleStorage storage,DataStoreModuleStorage storage,address,uint256,bytes,uint256)\":{\"details\":\"DATASTORE[id] will not be updated until the proposal is approvedProposals can NEVER be overriden\"},\"rescueSenate(GeodeModuleStorage storage,address)\":{\"details\":\"Obviously, Governance needs to wait for SENATE_EXPIRY.Refreshes the expiry\"}},\"stateVariables\":{\"MAX_SENATE_PERIOD\":{\"details\":\"\\\"MAX\\\" underlines a new senate can be set without expecting an expiry\"}},\"title\":\"GML: Geode Module Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveProposal(GeodeModuleStorage storage,DataStoreModuleStorage storage,uint256)\":{\"notice\":\"approves a proposal and records given data to DataStorespecific changes for the reserved types (1, 2, 3) are implemented here, any other addition should take place in Portal, as not related. Note that GM has additional logic for package type approvals.\"},\"changeIdCONTROLLER(DataStoreModuleStorage storage,uint256,address)\":{\"notice\":\"change the CONTROLLER of an ID\"},\"changeSenate(GeodeModuleStorage storage,address)\":{\"notice\":\"It is useful to be able to change the Senate's address without changing the expiry.\"},\"isUpgradeAllowed(GeodeModuleStorage storage,address,address)\":{\"notice\":\"Check if it is allowed to change the package version to given proposedImplementation.\"},\"propose(GeodeModuleStorage storage,DataStoreModuleStorage storage,address,uint256,bytes,uint256)\":{\"notice\":\"generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\"},\"rescueSenate(GeodeModuleStorage storage,address)\":{\"notice\":\"changes Senate in a scenerio where the current Senate acts maliciously! * We are sure this will not be the case, but creating a method for possible recovery is a must.Normally, Governance creates Senate Proposals frequently to signal it does not have * any intent of malicious overtake. note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY, * we recommend users to take their money out.\"}},\"notice\":\"Dual Governance & Limited Upgradability: Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate. Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPackage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/GeodeModule/libs/GeodeModuleLib.sol\":\"GeodeModuleLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT UPGRADE: proposal to change the given contract's implementation. TYPE should be package's TYPE.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPackage and WithdrawalPackage are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Cannot be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// --\\n\\n  /// @notice TYPE 3: Limit: exclusive, minimum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MIN_USER = 3;\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 9999: Limit: exclusive, maximum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MAX_USER = 9999;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10001: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20011: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x14e68dc40a8b7a3d6737f0a3f7d3154b6debb7e4d92564c54ec82a082cc9df2a\",\"license\":\"BUSL-1.1\"},\"contracts/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition treshold calculated with given percentage value for fallback operator to be activated\\n   */\\n  bytes32 internal constant fallbackThreshold = \\\"fallbackThreshold\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the initiation timestamp of a \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity package of a staking pool\\n   */\\n  bytes32 internal constant liquidityPackage = \\\"liquidityPackage\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition receiver address for yield seperation functionality\\n   * * will receive minted gETH to given receiver instead of increasing pricePerShare\\n   */\\n  bytes32 internal constant yieldReceiver = \\\"yieldReceiver\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition period that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for pool-operator pair.\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalPackage = \\\"withdrawalPackage\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalPackage address of the pool\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x7444cee1d8a60065e2ef6f64693ee2456484565ef41c2300337c0b997e294726\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\n// external - libraries\\n// external - contracts\\n// internal - globals\\n// internal - interfaces\\nimport {DataStoreModuleStorage} from \\\"../structs/storage.sol\\\";\\n\\n// internal - structs\\n// internal - libraries\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the DataStoreModuleStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is not mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.DataStoreModuleStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the DataStoreModuleStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encode(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0x51807687607c0b53afa9408b86d3f6523c5869802700624299fddac68fde381c\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Storage Struct for reading/writing operations for given (id, key) pairs.\\n *\\n * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n * @param uintData keccak(id, key) =>  returns uint256\\n * @param bytesData keccak(id, key) => returns bytes\\n * @param addressData keccak(id, key) =>  returns address\\n *\\n * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.DataStoreModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct DataStoreModuleStorage {\\n  mapping(uint256 => uint256[]) allIdsByType;\\n  mapping(bytes32 => uint256) uintData;\\n  mapping(bytes32 => bytes) bytesData;\\n  mapping(bytes32 => address) addressData;\\n}\\n\",\"keccak256\":\"0x75890780f8cc5d9d0b6c84b9647b098d6c1d75083774f77e945fd307fcc10b86\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/libs/GeodeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {Proposal} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title GML: Geode Module Library\\n *\\n * @notice Dual Governance & Limited Upgradability:\\n * Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate.\\n * Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPackage.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n *\\n * @dev SENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.\\n *\\n * @dev There are 3 ways to set a new Senate:\\n * 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry.\\n * 2. Current Senate can call changeSenate, which doesn't change the expiry\\n * 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.\\n * @dev Currently, there are no way to set a new Governance.\\n *\\n *\\n * @dev Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorage\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary GeodeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice a proposal can have a duration between 1 days to 4 weeks (inclusive)\\n  uint32 internal constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 internal constant MAX_PROPOSAL_DURATION = 4 weeks;\\n\\n  /// @notice if expiry is utilized, a senate can be active for a year.\\n  /// @dev \\\"MAX\\\" underlines a new senate can be set without expecting an expiry\\n  uint32 internal constant MAX_SENATE_PERIOD = 365 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GML:GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlySenate(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.SENATE, \\\"GML:SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GML:SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DataStoreModuleStorage storage DATASTORE, uint256 id) {\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"GML:CONTROLLER role needed\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Check if it is allowed to change the package version to given proposedImplementation.\\n   * @dev provided for _authorizeUpgrade\\n   * @dev currentImplementation should always be UUPS._getImplementation()\\n   * @dev currentImplementation or zero as proposedImplementation will return false\\n   **/\\n  function isUpgradeAllowed(\\n    GeodeModuleStorage storage self,\\n    address proposedImplementation,\\n    address currentImplementation\\n  ) external view returns (bool) {\\n    return\\n      (self.APPROVED_UPGRADE != address(0)) &&\\n      (proposedImplementation != currentImplementation) &&\\n      (self.APPROVED_UPGRADE == proposedImplementation);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function getProposal(\\n    GeodeModuleStorage storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self.proposals[id];\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** INTERNAL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n  function _setSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    require(_newSenate != address(0), \\\"GML:Senate cannot be zero address\\\");\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   */\\n  function propose(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSML.generateId(_NAME, _TYPE);\\n\\n    require(self.proposals[id].deadline == 0, \\\"GML:already proposed\\\");\\n    require((DATASTORE.readBytes(id, rks.NAME)).length == 0, \\\"GML:ID already exist\\\");\\n    require(_CONTROLLER != address(0), \\\"GML:CONTROLLER cannot be ZERO\\\");\\n    require((_TYPE != ID_TYPE.NONE) && (_TYPE != ID_TYPE.POOL), \\\"GML:TYPE is NONE or POOL\\\");\\n    require(\\n      (duration >= MIN_PROPOSAL_DURATION) && (duration <= MAX_PROPOSAL_DURATION),\\n      \\\"GML:invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self.proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(_TYPE, id, _CONTROLLER, _deadline);\\n  }\\n\\n  /**\\n   * @notice changes Senate in a scenerio where the current Senate acts maliciously!\\n   * * We are sure this will not be the case, but creating a method for possible recovery is a must.\\n   * @notice Normally, Governance creates Senate Proposals frequently to signal it does not have\\n   * * any intent of malicious overtake.\\n   * note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY,\\n   * * we recommend users to take their money out.\\n   * @dev Obviously, Governance needs to wait for SENATE_EXPIRY.\\n   * @dev Refreshes the expiry\\n   */\\n  function rescueSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlyGovernance(self) {\\n    require(block.timestamp > self.SENATE_EXPIRY, \\\"GML:cannot rescue yet\\\");\\n\\n    _setSenate(self, _newSenate, block.timestamp + MAX_SENATE_PERIOD);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a proposal and records given data to DataStore\\n   * @notice specific changes for the reserved types (1, 2, 3) are implemented here,\\n   * any other addition should take place in Portal, as not related.\\n   * Note that GM has additional logic for package type approvals.\\n   * @param id given ID proposal that has will be approved by Senate\\n   * @dev Senate is not able to approve approved proposals\\n   * @dev Senate is not able to approve expired proposals\\n   */\\n  function approveProposal(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (address _controller, uint256 _type, bytes memory _name) {\\n    require(self.proposals[id].deadline > block.timestamp, \\\"GML:not an active proposal\\\");\\n\\n    _controller = self.proposals[id].CONTROLLER;\\n    _type = self.proposals[id].TYPE;\\n    _name = self.proposals[id].NAME;\\n\\n    DATASTORE.writeUint(id, rks.TYPE, _type);\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, _controller);\\n    DATASTORE.writeBytes(id, rks.NAME, _name);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.SENATE) {\\n      _setSenate(self, _controller, block.timestamp + MAX_SENATE_PERIOD);\\n    } else if (_type == self.PACKAGE_TYPE) {\\n      self.APPROVED_UPGRADE = _controller;\\n    }\\n\\n    // important\\n    self.proposals[id].deadline = block.timestamp;\\n\\n    emit Approved(id);\\n  }\\n\\n  /**\\n   * @notice It is useful to be able to change the Senate's address without changing the expiry.\\n   * @dev Does not change the expiry\\n   */\\n  function changeSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ONLY CONTROLLER **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice change the CONTROLLER of an ID\\n   * @dev this operation cannot be reverted by the old CONTROLLER!!!\\n   * @dev cannot provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GML:CONTROLLER cannot be zero\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(\\n      typeOfId > ID_TYPE.LIMIT_MIN_USER && typeOfId < ID_TYPE.LIMIT_MAX_USER,\\n      \\\"GML:ID TYPE is not user\\\"\\n    );\\n\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0xe512a12a6b8972f526dfc4028517d5ea3a00ed0004833d7ef35fe12479ff8c9f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - structs\\nimport {Proposal} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Dual Governance logic\\n * @dev Dual Governance allows 2 parties to manage a package with proposals and approvals.\\n * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n * Suggests updates, such as new operators, contract/package upgrades, a new Senate (without any permission to force them)\\n * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n * @param APPROVED_UPGRADE only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Might not be utilized. Limited by MAX_SENATE_PERIOD\\n * @param PACKAGE_TYPE every package has a specific TYPE. Defined in globals/id_type.sol\\n * @param CONTRACT_VERSION always refers to the upgrade proposal ID. Does not increase uniformly like one might expect.\\n * @param proposals till approved, proposals are kept separated from the Isolated Storage\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.GeodeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct GeodeModuleStorage {\\n  address GOVERNANCE;\\n  address SENATE;\\n  address APPROVED_UPGRADE;\\n  uint256 SENATE_EXPIRY;\\n  uint256 PACKAGE_TYPE;\\n  uint256 CONTRACT_VERSION;\\n  mapping(uint256 => Proposal) proposals;\\n}\\n\",\"keccak256\":\"0xed6ca1f88ad9b514c2fd8004c1b191b6b8baca81376e1f0c701381e30617cec3\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals cannot be approved by Senate\\n * * Expired proposals cannot be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0xcaa2a8bae465cbfe7ecfa41fa0e54a83d1e50475a6d0e5864a3169bf0d537577\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61137561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80636dc129ae116100655780636dc129ae146101015780636f47008214610130578063b57e6b0b14610150578063c3581ee21461017357600080fd5b80630f808a361461008c57806361642eae146100ae57806363feb974146100ce575b600080fd5b81801561009857600080fd5b506100ac6100a7366004610f4e565b610193565b005b8180156100ba57600080fd5b506100ac6100c9366004610f7a565b61025b565b8180156100da57600080fd5b506100ee6100e9366004610faf565b6103fd565b6040519081526020015b60405180910390f35b81801561010d57600080fd5b5061012161011c366004611059565b610779565b6040516100f8939291906110cb565b61014361013e3660046110fb565b610a47565b6040516100f8919061111d565b61016361015e36600461116b565b610b5c565b60405190151581526020016100f8565b81801561017f57600080fd5b506100ac61018e366004610f4e565b610bb0565b815482906001600160a01b031633146101f35760405162461bcd60e51b815260206004820152601a60248201527f474d4c3a474f5645524e414e434520726f6c65206e656564656400000000000060448201526064015b60405180910390fd5b8260030154421161023e5760405162461bcd60e51b815260206004820152601560248201527411d3530e98d85b9b9bdd081c995cd8dd59481e595d605a1b60448201526064016101ea565b61025683836102516301e133804261119e565b610c5a565b505050565b828261027582826921a7a72a2927a62622a960b11b610d1f565b6001600160a01b0316336001600160a01b0316146102d55760405162461bcd60e51b815260206004820152601a60248201527f474d4c3a434f4e54524f4c4c455220726f6c65206e656564656400000000000060448201526064016101ea565b6001600160a01b03831661032b5760405162461bcd60e51b815260206004820152601d60248201527f474d4c3a434f4e54524f4c4c45522063616e6e6f74206265207a65726f00000060448201526064016101ea565b600061033f8686635459504560e01b610d53565b9050600381118015610352575061270f81105b61039e5760405162461bcd60e51b815260206004820152601760248201527f474d4c3a49442054595045206973206e6f74207573657200000000000000000060448201526064016101ea565b6103b786866921a7a72a2927a62622a960b11b87610d7d565b6040516001600160a01b038516815285907ff0d0c255199b45799d6fd3623dce5e99a7cb09d662754eff92d8d0e73a537f0a9060200160405180910390a2505050505050565b865460009088906001600160a01b0316331461045b5760405162461bcd60e51b815260206004820152601a60248201527f474d4c3a474f5645524e414e434520726f6c65206e656564656400000000000060448201526064016101ea565b61049c85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610dc6915050565b600081815260068b016020526040902060030154909250156104f75760405162461bcd60e51b815260206004820152601460248201527311d3530e985b1c9958591e481c1c9bdc1bdcd95960621b60448201526064016101ea565b6105098883634e414d4560e01b610dfa565b511561054e5760405162461bcd60e51b815260206004820152601460248201527311d3530e925108185b1c9958591e48195e1a5cdd60621b60448201526064016101ea565b6001600160a01b0387166105a45760405162461bcd60e51b815260206004820152601d60248201527f474d4c3a434f4e54524f4c4c45522063616e6e6f74206265205a45524f00000060448201526064016101ea565b85158015906105b4575060058614155b6106005760405162461bcd60e51b815260206004820152601860248201527f474d4c3a54595045206973204e4f4e45206f7220504f4f4c000000000000000060448201526064016101ea565b62015180831080159061061657506224ea008311155b6106625760405162461bcd60e51b815260206004820152601d60248201527f474d4c3a696e76616c69642070726f706f73616c206475726174696f6e00000060448201526064016101ea565b600061066e844261119e565b90506040518060800160405280896001600160a01b0316815260200188815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602091820184905285815260068d018252604090819020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820190610716908261125d565b50606091820151600390910155604080518581526001600160a01b038b16602082015290810183905288917f1ff68ed75922b8da2edb71149ae5de14f24d950ccc82c7cc12254771915426c3910160405180910390a25050979650505050505050565b6001830154600090819060609086906001600160a01b031633146107d85760405162461bcd60e51b815260206004820152601660248201527511d3530e94d153905511481c9bdb19481b995959195960521b60448201526064016101ea565b806003015442106108205760405162461bcd60e51b815260206004820152601260248201527111d3530e94d15390551148195e1c1a5c995960721b60448201526064016101ea565b600085815260068801602052604090206003015442106108825760405162461bcd60e51b815260206004820152601a60248201527f474d4c3a6e6f7420616e206163746976652070726f706f73616c00000000000060448201526064016101ea565b6000858152600688016020526040902080546001820154600290920180546001600160a01b0390921696509194506108b9906111d5565b80601f01602080910402602001604051908101604052809291908181526020018280546108e5906111d5565b80156109325780601f1061090757610100808354040283529160200191610932565b820191906000526020600020905b81548152906001019060200180831161091557829003601f168201915b5050505050915061095785635459504560e01b8589610eac909392919063ffffffff16565b61097086866921a7a72a2927a62622a960b11b87610d7d565b6109838686634e414d4560e01b85610ed4565b6000838152602087815260408220805460018101825590835291200185905560001983016109c3576109be87856102516301e133804261119e565b6109ec565b866004015483036109ec576002870180546001600160a01b0319166001600160a01b0386161790555b60008581526006880160205260409081902042600390910155517f3ad93af63cb7967b23e4fb500b7d7d28b07516325dcf341f88bebf959d82c1cb90610a359087815260200190565b60405180910390a15093509350939050565b610a7b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000828152600684016020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092526002810180549293919291840191610ac7906111d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610af3906111d5565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b5050505050815260200160038201548152505090505b92915050565b60028301546000906001600160a01b031615801590610b8d5750816001600160a01b0316836001600160a01b031614155b8015610ba8575060028401546001600160a01b038481169116145b949350505050565b600182015482906001600160a01b03163314610c075760405162461bcd60e51b815260206004820152601660248201527511d3530e94d153905511481c9bdb19481b995959195960521b60448201526064016101ea565b80600301544210610c4f5760405162461bcd60e51b815260206004820152601260248201527111d3530e94d15390551148195e1c1a5c995960721b60448201526064016101ea565b610256838385600301545b6001600160a01b038216610cba5760405162461bcd60e51b815260206004820152602160248201527f474d4c3a53656e6174652063616e6e6f74206265207a65726f206164647265736044820152607360f81b60648201526084016101ea565b6001830180546001600160a01b0319166001600160a01b0384169081179091556003840182905560408051918252602082018390527f3f34afe456fb5b36c04b5d1e2ef0750086747ac542262fbf14a0b1aae5fd7ee8910160405180910390a1505050565b6000836003016000610d318585610f06565b81526020810191909152604001600020546001600160a01b0316949350505050565b6000836001016000610d658585610f06565b81526020019081526020016000205490509392505050565b80846003016000610d8e8686610f06565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60008282604051602001610ddb92919061131d565b60408051601f1981840301815291905280516020909101209392505050565b6060836002016000610e0c8585610f06565b81526020019081526020016000208054610e25906111d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e51906111d5565b8015610e9e5780601f10610e7357610100808354040283529160200191610e9e565b820191906000526020600020905b815481529060010190602001808311610e8157829003601f168201915b505050505090509392505050565b80846001016000610ebd8686610f06565b815260208101919091526040016000205550505050565b80846002016000610ee58686610f06565b81526020019081526020016000209081610eff919061125d565b5050505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b80356001600160a01b0381168114610f4957600080fd5b919050565b60008060408385031215610f6157600080fd5b82359150610f7160208401610f32565b90509250929050565b600080600060608486031215610f8f57600080fd5b8335925060208401359150610fa660408501610f32565b90509250925092565b600080600080600080600060c0888a031215610fca57600080fd5b8735965060208801359550610fe160408901610f32565b945060608801359350608088013567ffffffffffffffff8082111561100557600080fd5b818a0191508a601f83011261101957600080fd5b81358181111561102857600080fd5b8b602082850101111561103a57600080fd5b60208301955080945050505060a0880135905092959891949750929550565b60008060006060848603121561106e57600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b818110156110ab5760208185018101518683018201520161108f565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b03841681528260208201526060604082015260006110f26060830184611085565b95945050505050565b6000806040838503121561110e57600080fd5b50508035926020909101359150565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015261115560a0840182611085565b9050606084015160808401528091505092915050565b60008060006060848603121561118057600080fd5b8335925061119060208501610f32565b9150610fa660408501610f32565b80820180821115610b5657634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600181811c908216806111e957607f821691505b60208210810361120957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561025657600081815260208120601f850160051c810160208610156112365750805b601f850160051c820191505b8181101561125557828155600101611242565b505050505050565b815167ffffffffffffffff811115611277576112776111bf565b61128b8161128584546111d5565b8461120f565b602080601f8311600181146112c057600084156112a85750858301515b600019600386901b1c1916600185901b178555611255565b600085815260208120601f198616915b828110156112ef578886015182559484019460019091019084016112d0565b508582101561130d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006113306040830185611085565b9050826020830152939250505056fea2646970667358221220d03d1baf35d0d438ac38ba65267200528875e89b0e4788a862d07f2bea09208f64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "review: DataStoreModule for the id based isolated storage logic.review: Reserved TYPEs are defined within globals/id_type.solSENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.There are 3 ways to set a new Senate: 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry. 2. Current Senate can call changeSenate, which doesn't change the expiry 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.Currently, there are no way to set a new Governance.Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorageThis is an external library, requires deployment.",
    "events": {
      "Proposed(uint256,uint256,address,uint256)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "approveProposal(GeodeModuleStorage storage,DataStoreModuleStorage storage,uint256)": {
        "details": "Senate is not able to approve approved proposalsSenate is not able to approve expired proposals",
        "params": {
          "id": "given ID proposal that has will be approved by Senate"
        }
      },
      "changeIdCONTROLLER(DataStoreModuleStorage storage,uint256,address)": {
        "details": "this operation cannot be reverted by the old CONTROLLER!!!cannot provide address(0), try 0x000000000000000000000000000000000000dEaD"
      },
      "changeSenate(GeodeModuleStorage storage,address)": {
        "details": "Does not change the expiry"
      },
      "getProposal(GeodeModuleStorage storage,uint256)": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "isUpgradeAllowed(GeodeModuleStorage storage,address,address)": {
        "details": "provided for _authorizeUpgradecurrentImplementation should always be UUPS._getImplementation()currentImplementation or zero as proposedImplementation will return false*"
      },
      "propose(GeodeModuleStorage storage,DataStoreModuleStorage storage,address,uint256,bytes,uint256)": {
        "details": "DATASTORE[id] will not be updated until the proposal is approvedProposals can NEVER be overriden"
      },
      "rescueSenate(GeodeModuleStorage storage,address)": {
        "details": "Obviously, Governance needs to wait for SENATE_EXPIRY.Refreshes the expiry"
      }
    },
    "stateVariables": {
      "MAX_SENATE_PERIOD": {
        "details": "\"MAX\" underlines a new senate can be set without expecting an expiry"
      }
    },
    "title": "GML: Geode Module Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveProposal(GeodeModuleStorage storage,DataStoreModuleStorage storage,uint256)": {
        "notice": "approves a proposal and records given data to DataStorespecific changes for the reserved types (1, 2, 3) are implemented here, any other addition should take place in Portal, as not related. Note that GM has additional logic for package type approvals."
      },
      "changeIdCONTROLLER(DataStoreModuleStorage storage,uint256,address)": {
        "notice": "change the CONTROLLER of an ID"
      },
      "changeSenate(GeodeModuleStorage storage,address)": {
        "notice": "It is useful to be able to change the Senate's address without changing the expiry."
      },
      "isUpgradeAllowed(GeodeModuleStorage storage,address,address)": {
        "notice": "Check if it is allowed to change the package version to given proposedImplementation."
      },
      "propose(GeodeModuleStorage storage,DataStoreModuleStorage storage,address,uint256,bytes,uint256)": {
        "notice": "generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER."
      },
      "rescueSenate(GeodeModuleStorage storage,address)": {
        "notice": "changes Senate in a scenerio where the current Senate acts maliciously! * We are sure this will not be the case, but creating a method for possible recovery is a must.Normally, Governance creates Senate Proposals frequently to signal it does not have * any intent of malicious overtake. note: If Governance does not send a Senate Proposal \"a while\" before the SENATE_EXPIRY, * we recommend users to take their money out."
      }
    },
    "notice": "Dual Governance & Limited Upgradability: Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate. Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPackage.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}