{
  "address": "0x818D3F510C1512f951c08e8f32B92832C3a46748",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gETHPos",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_portalPos",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ContractVersionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claim",
          "type": "uint256"
        }
      ],
      "name": "Dequeue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Enqueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fulfillAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimableETH",
          "type": "uint256"
        }
      ],
      "name": "Fulfill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "NewExitThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Processed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "RequestTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GeodeParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approvedUpgrade",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "senateExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "packageType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QueueParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realized",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realizedEtherBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realizedPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilledEtherBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commonPoll",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WithdrawalParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "gETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "portal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exitThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gatheredInfrastructureFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "allIdsByType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "allIdsByTypeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "canFinalizeExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "changeIdCONTROLLER",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "changeSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "claimInfrastructureFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "dequeue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "dequeueBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "enqueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "enqueueBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "fulfillable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "generateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_param",
          "type": "bytes32"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "CONTROLLER",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TYPE",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "NAME",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proposal",
          "name": "proposal",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposedVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trigger",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableEther",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "getValidatorData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poll",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "versionName",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isolationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "beaconBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "withdrawnBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "balanceProofs",
          "type": "bytes32[][]"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "priceProof",
          "type": "bytes32[]"
        }
      ],
      "name": "processValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_TYPE",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_NAME",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readAddressArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readBytesArray",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readUintArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "rescueSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "setExitThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "validatorThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa9d006c7efada27855104c7ad05eb72befbff60b47e9d73bc1322f6643e27e3a",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0x818D3F510C1512f951c08e8f32B92832C3a46748",
    "transactionIndex": 8,
    "gasUsed": "3691200",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000004000000000000000000000000000000000000000000000000000000000000000000010000000000000000",
    "blockHash": "0x361a8d6ec9120a2a8211e74c67cec422f3c6c8acede0444f84c733ce58f55a72",
    "transactionHash": "0xa9d006c7efada27855104c7ad05eb72befbff60b47e9d73bc1322f6643e27e3a",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 1550553,
        "transactionHash": "0xa9d006c7efada27855104c7ad05eb72befbff60b47e9d73bc1322f6643e27e3a",
        "address": "0x818D3F510C1512f951c08e8f32B92832C3a46748",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 45,
        "blockHash": "0x361a8d6ec9120a2a8211e74c67cec422f3c6c8acede0444f84c733ce58f55a72"
      }
    ],
    "blockNumber": 1550553,
    "cumulativeGasUsed": "5807105",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
    "0xcA69bA533810ee94b7649c57eF8aB22EBbE0bbf7"
  ],
  "numDeployments": 1,
  "solcInputHash": "e25e6b0dd11e130b0e651c906c66ce16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gETHPos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_portalPos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ContractVersionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"}],\"name\":\"Dequeue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Enqueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fulfillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableETH\",\"type\":\"uint256\"}],\"name\":\"Fulfill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"NewExitThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Processed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RequestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GeodeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvedUpgrade\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senateExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QueueParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realizedEtherBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realizedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledEtherBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commonPoll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawalParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"portal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gatheredInfrastructureFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"allIdsByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"allIdsByTypeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"canFinalizeExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"changeIdCONTROLLER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"changeSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimInfrastructureFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"dequeue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"dequeueBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"enqueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"enqueueBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"fulfillBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fulfillable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"generateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_param\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableEther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"versionName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isolationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"beaconBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawnBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"balanceProofs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceProof\",\"type\":\"bytes32[]\"}],\"name\":\"processValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readBytesArray\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readUintArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"rescueSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setExitThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"validatorThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ContractVersionSet(uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NewExitThreshold(uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"GeodeParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"WithdrawalParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"allIdsByType(uint256,uint256)\":{\"details\":\"useful for outside reach, shouldn't be used within contracts as a referance\",\"returns\":{\"_0\":\"allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index\"}},\"approveProposal(uint256)\":{\"details\":\"handles PACKAGE_TYPE proposals by upgrading the contract immediately.onlySenate is checked inside GML.approveProposal\"},\"canFinalizeExit(bytes)\":{\"custom:visibility\":\"-> view\"},\"changeIdCONTROLLER(uint256,address)\":{\"custom:subsection\":\"** ONLY CONTROLLER **\"},\"claimInfrastructureFees(address)\":{\"custom:subsection\":\"** INFRASTRUCTURE FEE **\",\"details\":\"WM override\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"we don't want to provide these package-specific not-changing parameters accross all instances of the packages. So we will store them in the ref implementation contract of the package, and fetch when needed on initialization.\"},\"dequeue(uint256,address)\":{\"custom:visibility\":\"-> external\"},\"enqueue(uint256,bytes,address)\":{\"custom:subsection\":\"** ENQUEUE **\",\"custom:visibility\":\"-> external\"},\"fulfill(uint256)\":{\"custom:visibility\":\"-> external\"},\"fulfillable(uint256)\":{\"custom:visibility\":\"-> view\"},\"generateId(string,uint256)\":{\"details\":\"id is generated by keccak(name, type)\"},\"getProposedVersion()\":{\"details\":\"GeodeModule override\"},\"initialize(uint256,address,bytes,bytes)\":{\"details\":\"While 'data' parameter is not currently used it is a standarized approach on all * GeodePackages have the same function signature on 'initialize'.\"},\"isolationMode()\":{\"details\":\"GeodeModule override\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.This is necessary for the multistep operations done in this contract: * Enqueue, Process, Fulfill, Dequeue.Using 'functionDelegateCall' so it does not cause any issues when using msg.sender etc.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processValidators(bytes[],uint256[],uint256[],bytes32[][],uint256,bytes32[])\":{\"custom:section\":\"** PROCESS BALANCES MERKLE UPDATE **\"},\"propose(address,uint256,bytes,uint256)\":{\"custom:subsection\":\"** ONLY GOVERNANCE **\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"pullUpgrade()\":{\"details\":\"IGeodePackage override\"},\"readUintArray(uint256,bytes32,uint256)\":{\"custom:section\":\"** ARRAY GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"setExitThreshold(uint256)\":{\"custom:subsection\":\"** WITHDRAWAL QUEUE **\",\"details\":\"WM override\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"generateId(string,uint256)\":{\"notice\":\"useful function for string inputs - returns same with the DSML.generateId\"},\"getKey(uint256,bytes32)\":{\"notice\":\"useful view function for string inputs - returns same with the DSML.generateId\"},\"pause()\":{\"notice\":\"pausing the contract activates the isolationMode\"},\"unpause()\":{\"notice\":\"unpausing the contract deactivates the isolationMode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/packages/WithdrawalPackage.sol\":\"WithdrawalPackage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155HolderUpgradeable is Initializable, ERC165Upgradeable, IERC1155Receiver {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd5cd13424ae387f7356676f7b90081cc63af46eac66ef15efeaca6177863eb83\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT UPGRADE: proposal to change the given contract's implementation. TYPE should be package's TYPE.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPackage and WithdrawalPackage are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Cannot be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// --\\n\\n  /// @notice TYPE 3: Limit: exclusive, minimum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MIN_USER = 3;\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 9999: Limit: exclusive, maximum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MAX_USER = 9999;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10001: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20011: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x14e68dc40a8b7a3d6737f0a3f7d3154b6debb7e4d92564c54ec82a082cc9df2a\",\"license\":\"BUSL-1.1\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0xdcbe1faa8712a653a87f4e185afb598388c2bbe62a750989df57afeac2848168\",\"license\":\"BUSL-1.1\"},\"contracts/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition treshold calculated with given percentage value for fallback operator to be activated\\n   */\\n  bytes32 internal constant fallbackThreshold = \\\"fallbackThreshold\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the initiation timestamp of a \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity package of a staking pool\\n   */\\n  bytes32 internal constant liquidityPackage = \\\"liquidityPackage\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition receiver address for yield seperation functionality\\n   * * will receive minted gETH to given receiver instead of increasing pricePerShare\\n   */\\n  bytes32 internal constant yieldReceiver = \\\"yieldReceiver\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition period that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for pool-operator pair.\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalPackage = \\\"withdrawalPackage\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalPackage address of the pool\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x7444cee1d8a60065e2ef6f64693ee2456484565ef41c2300337c0b997e294726\",\"license\":\"BUSL-1.1\"},\"contracts/globals/validator_state.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice VALIDATOR_STATE: keeping track of validators within The Staking Library.\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract.\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator.\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is called to be exited.\\n  uint8 internal constant EXIT_REQUESTED = 3;\\n\\n  /// @notice STATE 4: validator is fully exited.\\n  uint8 internal constant EXITED = 4;\\n\\n  /// @notice STATE 69: proposal was malicious(alien). Maybe faulty signatures or probably frontrunning (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xbba746dcad490d11ebc3a69b334c7284a546902392b565162a45d5b8a53d291d\",\"license\":\"BUSL-1.1\"},\"contracts/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.20;\\n\\nlibrary BytesLib {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  ) internal pure returns (bytes memory) {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      // Get a location of some free memory and store it in tempBytes as\\n      // Solidity does for memory variables.\\n      tempBytes := mload(0x40)\\n\\n      // Store the length of the first bytes array at the beginning of\\n      // the memory for tempBytes.\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      // Maintain a memory counter for the current write location in the\\n      // temp bytes array by adding the 32 bytes for the array length to\\n      // the starting location.\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the\\n      // first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data,\\n        // 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\n        // at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Add the length of _postBytes to the current length of tempBytes\\n      // and store it as the new length in the first 32 bytes of the\\n      // tempBytes memory.\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the\\n      // actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined\\n      // length of the arrays.\\n      end := add(mc, length)\\n\\n      for {\\n        let cc := add(_postBytes, 0x20)\\n      } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Update the free-memory pointer by padding our last write location\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n      // next 32 byte block, then round down to the nearest multiple of\\n      // 32. If the sum of the length of the two arrays is zero then add\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          not(31) // Round down to the nearest 32 bytes.\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\n      // of the array. (We don't need to use the offset into the slot\\n      // because arrays use the entire slot.)\\n      let fslot := sload(_preBytes.slot)\\n      // Arrays of 31 bytes or less have an even value in their slot,\\n      // while longer arrays have an odd value. The actual length is\\n      // the slot divided by two for odd values, and the lowest order\\n      // byte divided by two for even values.\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\n      // two to get the length. If the slot is odd, bitwise and the slot\\n      // with -1 and divide by two.\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n      // slength can contain both the length and contents of the array\\n      // if length < 32 bytes so let's prepare for that\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        // Since the new array still fits in the slot, we just need to\\n        // update the contents of the slot.\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n        sstore(\\n          _preBytes.slot,\\n          // all the modifications to the slot are inside this\\n          // next block\\n          add(\\n            // we can just add to the slot contents because the\\n            // bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory\\n                  mload(add(_postBytes, 0x20)),\\n                  // zero all bytes to the right\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // increase length by the double of the memory\\n              // bytes length\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        // The stored value fits in the slot, but the combined value\\n        // will exceed it.\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // The contents of the _postBytes array start 32 bytes into\\n        // the structure. Our first read should obtain the `submod`\\n        // bytes that can fit into the unused space in the last word\\n        // of the stored array. To get this, we read 32 bytes starting\\n        // from `submod`, so the data we read overlaps with the array\\n        // contents by `submod` bytes. Masking the lowest-order\\n        // `submod` bytes allows us to add that value directly to the\\n        // stored value.\\n\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in\\n        // case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        // cb is a circuit breaker in the for loop since there's\\n        //  no said feature for inline assembly loops\\n        // cb = 1 - don't breaker\\n        // cb = 0 - break\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for {\\n          let cc := add(_postBytes, 0x20)\\n          // the next line is the loop condition:\\n          // while(uint256(mc < end) + cb == 2)\\n        } eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // if any of these checks fails then arrays are not equal\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  ) internal view returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      // we know _preBytes_offset is 0\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(slength, mlength)\\n      case 1 {\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // blank the last byte which is the length\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n            let cb := 1\\n\\n            // get the keccak hash to get the contents of the array\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // the next line is the loop condition:\\n            // while(uint256(mc < end) + cb == 2)\\n            for {\\n\\n            } eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x4ee3f6ef85baa41794fc1519522f7c135becd0e267980eadc68dd643e52b59c7\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IGeodeModule, IStakeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (uint256 id);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n}\\n\",\"keccak256\":\"0x012a8ed050ba68838eeb7463b75f32ba8fdf50c9e54e44dd37d4e87ca16ba78c\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/** This interface is designed to be compatible with the Vyper version.\\n * @notice This is the Ethereum 2.0 deposit contract interface.\\n * For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ninterface IDepositContract {\\n  /**\\n   * @notice Submit a Phase 0 DepositData object.\\n   * @param pubkey A BLS12-381 public key.\\n   * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n   * @param signature A BLS12-381 signature.\\n   * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n   *Used as a protection against malformed input.\\n   */\\n  function deposit(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x2db8802f8f888c62b147508e142e15c59775ff75906d09122e810483919bff27\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3ba6191b4a643bce171bb7dc9b39a55dd0c8c932934429902dec4eb7b6c3df9a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Proposal} from \\\"../../modules/GeodeModule/structs/utils.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getGovernance() external view returns (address);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x2eb0e5472c00c7d91443f0544ce349129266665dd59f1e4b0598173df1a9d1c5\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Validator} from \\\"../../modules/StakeModule/structs/utils.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external;\\n\\n  function setBeaconDelays(uint256 entry, uint256 exit) external;\\n\\n  function setInitiationDeposit(uint256 newInitiationDeposit) external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 beaconDelayEntry,\\n      uint256 beaconDelayExit,\\n      uint256 initiationDeposit,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function getPriceMerkleRoot() external view returns (bytes32);\\n\\n  function getBalancesMerkleRoot() external view returns (bytes32);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function getInfrastructureFee(uint256 _type) external view returns (uint256);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPackage(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function setYieldReceiver(uint256 poolId, address yieldReceiver) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameExit(\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external;\\n\\n  function blameProposal(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function requestExit(uint256 poolId, bytes memory pk) external returns (bool);\\n\\n  function finalizeExit(uint256 poolId, bytes memory pk) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0x102393bdd245b4745032b3d21ba59ba7ee45dfc9fc2b152ee5cd014ab9403370\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IWithdrawalModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IWithdrawalModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setExitThreshold(uint256 newThreshold) external;\\n\\n  function claimInfrastructureFees(address receiver) external returns (bool success);\\n\\n  function WithdrawalParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address portal,\\n      uint256 poolId,\\n      uint256 exitThreshold,\\n      uint256 gatheredInfrastructureFees\\n    );\\n\\n  function QueueParams()\\n    external\\n    view\\n    returns (\\n      uint256 requested,\\n      uint256 realized,\\n      uint256 realizedEtherBalance,\\n      uint256 realizedPrice,\\n      uint256 fulfilled,\\n      uint256 fulfilledEtherBalance,\\n      uint256 commonPoll\\n    );\\n\\n  function getRequest(\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      address owner,\\n      uint256 trigger,\\n      uint256 size,\\n      uint256 fulfilled,\\n      uint256 claimableEther\\n    );\\n\\n  function getValidatorData(\\n    bytes calldata pubkey\\n  ) external view returns (uint256 beaconBalance, uint256 withdrawnBalance, uint256 poll);\\n\\n  function canFinalizeExit(bytes memory pubkey) external view returns (bool);\\n\\n  function validatorThreshold(bytes memory pubkey) external view returns (uint256 threshold);\\n\\n  function enqueue(\\n    uint256 size,\\n    bytes calldata pubkey,\\n    address owner\\n  ) external returns (uint256 index);\\n\\n  function enqueueBatch(\\n    uint256[] calldata sizes,\\n    bytes[] calldata pubkeys,\\n    address owner\\n  ) external returns (uint256[] memory indexes);\\n\\n  function transferRequest(uint256 index, address newOwner) external;\\n\\n  function fulfillable(uint256 index) external view returns (uint256);\\n\\n  function fulfill(uint256 index) external;\\n\\n  function fulfillBatch(uint256[] calldata indexes) external;\\n\\n  function dequeue(uint256 index, address receiver) external;\\n\\n  function dequeueBatch(uint256[] calldata indexes, address receiver) external;\\n\\n  function processValidators(\\n    bytes[] calldata pubkeys,\\n    uint256[] calldata beaconBalances,\\n    uint256[] calldata withdrawnBalances,\\n    bytes32[][] calldata balanceProofs,\\n    uint256 price,\\n    bytes32[] calldata priceProof\\n  ) external;\\n\\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xa2a89742f100d1d5b43bb154834485ab23ec1c5cb54db6129b2ffffe896f5283\",\"license\":\"MIT\"},\"contracts/interfaces/packages/IGeodePackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"../modules/IGeodeModule.sol\\\";\\nimport {IPortal} from \\\"../IPortal.sol\\\";\\n\\ninterface IGeodePackage is IGeodeModule {\\n  function initialize(\\n    uint256 poolId,\\n    address owner,\\n    bytes calldata versionName,\\n    bytes memory data\\n  ) external;\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function pullUpgrade() external;\\n}\\n\",\"keccak256\":\"0x9c854fab873502a768e5903e7f66b6697313f77bea4d5ca200aad8d0c3190ed9\",\"license\":\"MIT\"},\"contracts/interfaces/packages/IWithdrawalPackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IWithdrawalModule} from \\\"../modules/IWithdrawalModule.sol\\\";\\nimport {IGeodePackage} from \\\"./IGeodePackage.sol\\\";\\n\\ninterface IWithdrawalPackage is IGeodePackage, IWithdrawalModule {}\\n\",\"keccak256\":\"0x64212474a09d3608d8348498fd94fb246bd4d31bc32edc732064e1f04946775d\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/DataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// internal - interfaces\\nimport {IDataStoreModule} from \\\"../../interfaces/modules/IDataStoreModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"./structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"./libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title DSM: DataStore Module\\n *\\n * @notice A storage management tool designed to create a safe and scalable storage layout\\n * for upgradable contracts with various types of data classes (users, packages, definitions).\\n *\\n * @dev review: this module delegates its functionality to DSML (DataStoreModuleLib).\\n * DSM or DSML has NO access control.\\n *\\n * @dev There are no additional functionalities implemented apart from the library.\\n *\\n * @dev NO function needs to be overriden when inherited.\\n *\\n * @dev __DataStoreModule_init (or _unchained) call is not necessary when inherited.\\n *\\n * @dev No storage-altering external/public functions are exposed here, only view/pure external functions.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract DataStoreModule is IDataStoreModule, Initializable {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.DataStoreModule\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant DataStoreModuleStorageLocation =\\n    0xa3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c00;\\n\\n  function _getDataStoreModuleStorage() internal pure returns (DataStoreModuleStorage storage $) {\\n    assembly {\\n      $.slot := DataStoreModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __DataStoreModule_init() internal onlyInitializing {}\\n\\n  function __DataStoreModule_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @custom:section                           ** HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> pure-external\\n   */\\n\\n  /**\\n   * @notice useful function for string inputs - returns same with the DSML.generateId\\n   * @dev id is generated by keccak(name, type)\\n   */\\n  function generateId(\\n    string calldata _name,\\n    uint256 _type\\n  ) external pure virtual override returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice useful view function for string inputs - returns same with the DSML.generateId\\n   */\\n  function getKey(\\n    uint256 _id,\\n    bytes32 _param\\n  ) external pure virtual override returns (bytes32 key) {\\n    return DSML.getKey(_id, _param);\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev useful for outside reach, shouldn't be used within contracts as a referance\\n   * @return allIdsByType is an array of IDs of the given TYPE from Datastore,\\n   * returns a specific index\\n   */\\n  function allIdsByType(\\n    uint256 _type,\\n    uint256 _index\\n  ) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type][_index];\\n  }\\n\\n  function allIdsByTypeLength(uint256 _type) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type].length;\\n  }\\n\\n  function readUint(uint256 id, bytes32 key) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUint(id, key);\\n  }\\n\\n  function readAddress(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddress(id, key);\\n  }\\n\\n  function readBytes(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytes(id, key);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUintArray(id, key, index);\\n  }\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytesArray(id, key, index);\\n  }\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddressArray(id, key, index);\\n  }\\n}\\n\",\"keccak256\":\"0x25eb0dd1c0e7484c36320629bac60f346ab3cd138ace7940b296a87a25c10b39\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\n// external - libraries\\n// external - contracts\\n// internal - globals\\n// internal - interfaces\\nimport {DataStoreModuleStorage} from \\\"../structs/storage.sol\\\";\\n\\n// internal - structs\\n// internal - libraries\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the DataStoreModuleStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is not mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.DataStoreModuleStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the DataStoreModuleStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encode(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0x51807687607c0b53afa9408b86d3f6523c5869802700624299fddac68fde381c\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Storage Struct for reading/writing operations for given (id, key) pairs.\\n *\\n * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n * @param uintData keccak(id, key) =>  returns uint256\\n * @param bytesData keccak(id, key) => returns bytes\\n * @param addressData keccak(id, key) =>  returns address\\n *\\n * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.DataStoreModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct DataStoreModuleStorage {\\n  mapping(uint256 => uint256[]) allIdsByType;\\n  mapping(bytes32 => uint256) uintData;\\n  mapping(bytes32 => bytes) bytesData;\\n  mapping(bytes32 => address) addressData;\\n}\\n\",\"keccak256\":\"0x75890780f8cc5d9d0b6c84b9647b098d6c1d75083774f77e945fd307fcc10b86\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/GeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - library\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// external - contracts\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../globals/id_type.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"../../interfaces/modules/IGeodeModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"./structs/storage.sol\\\";\\nimport {Proposal} from \\\"./structs/utils.sol\\\";\\n// internal - libraries\\nimport {GeodeModuleLib as GML} from \\\"./libs/GeodeModuleLib.sol\\\";\\nimport {DataStoreModuleLib as DSML} from \\\"../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n// internal - contracts\\nimport {DataStoreModule} from \\\"../DataStoreModule/DataStoreModule.sol\\\";\\n\\n/**\\n * @title GM: Geode Module\\n *\\n * @notice Base logic for Upgradable Packages:\\n * * Dual Governance with Senate+Governance: Governance proposes, Senate approves.\\n * * Limited Upgradability built on top of UUPS via Dual Governance.\\n *\\n * @dev review: this module delegates its functionality to GML (GeodeModuleLib):\\n * GML has onlyGovernance, onlySenate, onlyController modifiers for access control.\\n *\\n * @dev There is 1 additional functionality implemented apart from the library:\\n * Mutating UUPS pattern to fit Limited Upgradability:\\n * 1. New implementation contract is proposed with its own package type within the limits, refer to globals/id_type.sol.\\n * 2. Proposal is approved by the contract owner, Senate.\\n * 3. approveProposal calls _handleUpgrade which mimics UUPS.upgradeTo:\\n * 3.1. Checks the implementation address with _authorizeUpgrade, also preventing any UUPS upgrades.\\n * 3.2. Upgrades the contract with no function to call afterwards.\\n * 3.3. Sets contract version. Note that it does not increase linearly like one might expect.\\n *\\n * @dev 1 function needs to be overriden when inherited: isolationMode. (also refer to approveProposal)\\n *\\n * @dev __GeodeModule_init (or _unchained) call is NECESSARY when inherited.\\n * However, deployer MUST call initializer after upgradeTo call,\\n * should not call initializer on upgradeToAndCall or new ERC1967Proxy calls.\\n *\\n * @dev This module inherits DataStoreModule.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract GeodeModule is IGeodeModule, UUPSUpgradeable, DataStoreModule {\\n  using GML for GeodeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.GeodeModuleStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant GeodeModuleStorageLocation =\\n    0x121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b04200;\\n\\n  function _getGeodeModuleStorage() internal pure returns (GeodeModuleStorage storage $) {\\n    assembly {\\n      $.slot := GeodeModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event ContractVersionSet(uint256 version);\\n\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   */\\n  function isolationMode() external view virtual override returns (bool);\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __GeodeModule_init(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    __UUPSUpgradeable_init();\\n    __DataStoreModule_init();\\n    __GeodeModule_init_unchained(governance, senate, senateExpiry, packageType, initVersionName);\\n  }\\n\\n  /**\\n   * @dev This function uses _getImplementation(), clearly deployer should not call initializer on\\n   * upgradeToAndCall or new ERC1967Proxy calls. _getImplementation() returns 0 then.\\n   * @dev GOVERNANCE and SENATE set to msg.sender at beginning, cannot propose+approve otherwise.\\n   * @dev native approveProposal(public) is not used here. Because it has an _handleUpgrade,\\n   * however initialization does not require UUPS.upgradeTo.\\n   */\\n  function __GeodeModule_init_unchained(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    require(governance != address(0), \\\"GM:governance cannot be zero\\\");\\n    require(senate != address(0), \\\"GM:senate cannot be zero\\\");\\n    require(senateExpiry > block.timestamp, \\\"GM:low senateExpiry\\\");\\n    require(packageType != 0, \\\"GM:packageType cannot be zero\\\");\\n    require(initVersionName.length != 0, \\\"GM:initVersionName cannot be empty\\\");\\n\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.GOVERNANCE = msg.sender;\\n    $.SENATE = msg.sender;\\n\\n    $.SENATE_EXPIRY = senateExpiry;\\n    $.PACKAGE_TYPE = packageType;\\n\\n    DataStoreModuleStorage storage DSMStorage = _getDataStoreModuleStorage();\\n\\n    uint256 initVersion = $.propose(\\n      DSMStorage,\\n      ERC1967Utils.getImplementation(),\\n      packageType,\\n      initVersionName,\\n      1 days\\n    );\\n\\n    $.approveProposal(DSMStorage, initVersion);\\n\\n    _setContractVersion(DSML.generateId(initVersionName, $.PACKAGE_TYPE));\\n\\n    $.GOVERNANCE = governance;\\n    $.SENATE = senate;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev required by the OZ UUPS module, improved by the Geode Module.\\n   */\\n  function _authorizeUpgrade(address proposed_implementation) internal virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    require(\\n      $.isUpgradeAllowed(proposed_implementation, ERC1967Utils.getImplementation()),\\n      \\\"GM:not allowed to upgrade\\\"\\n    );\\n  }\\n\\n  function _setContractVersion(uint256 id) internal virtual {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.CONTRACT_VERSION = id;\\n    emit ContractVersionSet(id);\\n  }\\n\\n  /**\\n   * @dev Would use the public upgradeTo() call, which does _authorizeUpgrade and _upgradeToAndCallUUPS,\\n   * but it is external, OZ have not made it public yet.\\n   */\\n  function _handleUpgrade(address proposed_implementation, uint256 id) internal virtual {\\n    UUPSUpgradeable.upgradeToAndCall(proposed_implementation, \\\"\\\");\\n    _setContractVersion(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function GeodeParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    )\\n  {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n\\n    governance = $.GOVERNANCE;\\n    senate = $.SENATE;\\n    approvedUpgrade = $.APPROVED_UPGRADE;\\n    senateExpiry = $.SENATE_EXPIRY;\\n    packageType = $.PACKAGE_TYPE;\\n  }\\n\\n  function getGovernance() external view virtual override returns (address) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.GOVERNANCE;\\n  }\\n\\n  function getContractVersion() public view virtual override returns (uint256) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.CONTRACT_VERSION;\\n  }\\n\\n  function getProposal(\\n    uint256 id\\n  ) external view virtual override returns (Proposal memory proposal) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    proposal = $.getProposal(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> public/external\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   */\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) public virtual override returns (uint256 id) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    id = $.propose(_getDataStoreModuleStorage(), _CONTROLLER, _TYPE, _NAME, duration);\\n  }\\n\\n  function rescueSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.rescueSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   */\\n\\n  /**\\n   * @dev handles PACKAGE_TYPE proposals by upgrading the contract immediately.\\n   * @dev onlySenate is checked inside GML.approveProposal\\n   */\\n  function approveProposal(\\n    uint256 id\\n  ) public virtual override returns (address _controller, uint256 _type, bytes memory _name) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    (_controller, _type, _name) = $.approveProposal(_getDataStoreModuleStorage(), id);\\n\\n    if (_type == $.PACKAGE_TYPE) {\\n      _handleUpgrade(_controller, id);\\n    }\\n  }\\n\\n  function changeSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.changeSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY CONTROLLER **\\n   */\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external virtual override {\\n    GML.changeIdCONTROLLER(_getDataStoreModuleStorage(), id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0x3bf367a4430addb6eac18d4dd1f58add98e4b5d72a43d51eb585dc59f2f3b43e\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/libs/GeodeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {Proposal} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title GML: Geode Module Library\\n *\\n * @notice Dual Governance & Limited Upgradability:\\n * Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate.\\n * Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPackage.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n *\\n * @dev SENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.\\n *\\n * @dev There are 3 ways to set a new Senate:\\n * 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry.\\n * 2. Current Senate can call changeSenate, which doesn't change the expiry\\n * 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.\\n * @dev Currently, there are no way to set a new Governance.\\n *\\n *\\n * @dev Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorage\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary GeodeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice a proposal can have a duration between 1 days to 4 weeks (inclusive)\\n  uint32 internal constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 internal constant MAX_PROPOSAL_DURATION = 4 weeks;\\n\\n  /// @notice if expiry is utilized, a senate can be active for a year.\\n  /// @dev \\\"MAX\\\" underlines a new senate can be set without expecting an expiry\\n  uint32 internal constant MAX_SENATE_PERIOD = 365 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GML:GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlySenate(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.SENATE, \\\"GML:SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GML:SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DataStoreModuleStorage storage DATASTORE, uint256 id) {\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"GML:CONTROLLER role needed\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Check if it is allowed to change the package version to given proposedImplementation.\\n   * @dev provided for _authorizeUpgrade\\n   * @dev currentImplementation should always be UUPS._getImplementation()\\n   * @dev currentImplementation or zero as proposedImplementation will return false\\n   **/\\n  function isUpgradeAllowed(\\n    GeodeModuleStorage storage self,\\n    address proposedImplementation,\\n    address currentImplementation\\n  ) external view returns (bool) {\\n    return\\n      (self.APPROVED_UPGRADE != address(0)) &&\\n      (proposedImplementation != currentImplementation) &&\\n      (self.APPROVED_UPGRADE == proposedImplementation);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function getProposal(\\n    GeodeModuleStorage storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self.proposals[id];\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** INTERNAL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n  function _setSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    require(_newSenate != address(0), \\\"GML:Senate cannot be zero address\\\");\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   */\\n  function propose(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSML.generateId(_NAME, _TYPE);\\n\\n    require(self.proposals[id].deadline == 0, \\\"GML:already proposed\\\");\\n    require((DATASTORE.readBytes(id, rks.NAME)).length == 0, \\\"GML:ID already exist\\\");\\n    require(_CONTROLLER != address(0), \\\"GML:CONTROLLER cannot be ZERO\\\");\\n    require((_TYPE != ID_TYPE.NONE) && (_TYPE != ID_TYPE.POOL), \\\"GML:TYPE is NONE or POOL\\\");\\n    require(\\n      (duration >= MIN_PROPOSAL_DURATION) && (duration <= MAX_PROPOSAL_DURATION),\\n      \\\"GML:invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self.proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(_TYPE, id, _CONTROLLER, _deadline);\\n  }\\n\\n  /**\\n   * @notice changes Senate in a scenerio where the current Senate acts maliciously!\\n   * * We are sure this will not be the case, but creating a method for possible recovery is a must.\\n   * @notice Normally, Governance creates Senate Proposals frequently to signal it does not have\\n   * * any intent of malicious overtake.\\n   * note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY,\\n   * * we recommend users to take their money out.\\n   * @dev Obviously, Governance needs to wait for SENATE_EXPIRY.\\n   * @dev Refreshes the expiry\\n   */\\n  function rescueSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlyGovernance(self) {\\n    require(block.timestamp > self.SENATE_EXPIRY, \\\"GML:cannot rescue yet\\\");\\n\\n    _setSenate(self, _newSenate, block.timestamp + MAX_SENATE_PERIOD);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a proposal and records given data to DataStore\\n   * @notice specific changes for the reserved types (1, 2, 3) are implemented here,\\n   * any other addition should take place in Portal, as not related.\\n   * Note that GM has additional logic for package type approvals.\\n   * @param id given ID proposal that has will be approved by Senate\\n   * @dev Senate is not able to approve approved proposals\\n   * @dev Senate is not able to approve expired proposals\\n   */\\n  function approveProposal(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (address _controller, uint256 _type, bytes memory _name) {\\n    require(self.proposals[id].deadline > block.timestamp, \\\"GML:not an active proposal\\\");\\n\\n    _controller = self.proposals[id].CONTROLLER;\\n    _type = self.proposals[id].TYPE;\\n    _name = self.proposals[id].NAME;\\n\\n    DATASTORE.writeUint(id, rks.TYPE, _type);\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, _controller);\\n    DATASTORE.writeBytes(id, rks.NAME, _name);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.SENATE) {\\n      _setSenate(self, _controller, block.timestamp + MAX_SENATE_PERIOD);\\n    } else if (_type == self.PACKAGE_TYPE) {\\n      self.APPROVED_UPGRADE = _controller;\\n    }\\n\\n    // important\\n    self.proposals[id].deadline = block.timestamp;\\n\\n    emit Approved(id);\\n  }\\n\\n  /**\\n   * @notice It is useful to be able to change the Senate's address without changing the expiry.\\n   * @dev Does not change the expiry\\n   */\\n  function changeSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ONLY CONTROLLER **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice change the CONTROLLER of an ID\\n   * @dev this operation cannot be reverted by the old CONTROLLER!!!\\n   * @dev cannot provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GML:CONTROLLER cannot be zero\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(\\n      typeOfId > ID_TYPE.LIMIT_MIN_USER && typeOfId < ID_TYPE.LIMIT_MAX_USER,\\n      \\\"GML:ID TYPE is not user\\\"\\n    );\\n\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0xe512a12a6b8972f526dfc4028517d5ea3a00ed0004833d7ef35fe12479ff8c9f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - structs\\nimport {Proposal} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Dual Governance logic\\n * @dev Dual Governance allows 2 parties to manage a package with proposals and approvals.\\n * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n * Suggests updates, such as new operators, contract/package upgrades, a new Senate (without any permission to force them)\\n * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n * @param APPROVED_UPGRADE only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Might not be utilized. Limited by MAX_SENATE_PERIOD\\n * @param PACKAGE_TYPE every package has a specific TYPE. Defined in globals/id_type.sol\\n * @param CONTRACT_VERSION always refers to the upgrade proposal ID. Does not increase uniformly like one might expect.\\n * @param proposals till approved, proposals are kept separated from the Isolated Storage\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.GeodeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct GeodeModuleStorage {\\n  address GOVERNANCE;\\n  address SENATE;\\n  address APPROVED_UPGRADE;\\n  uint256 SENATE_EXPIRY;\\n  uint256 PACKAGE_TYPE;\\n  uint256 CONTRACT_VERSION;\\n  mapping(uint256 => Proposal) proposals;\\n}\\n\",\"keccak256\":\"0xed6ca1f88ad9b514c2fd8004c1b191b6b8baca81376e1f0c701381e30617cec3\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals cannot be approved by Senate\\n * * Expired proposals cannot be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0xcaa2a8bae465cbfe7ecfa41fa0e54a83d1e50475a6d0e5864a3169bf0d537577\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/libs/DepositContractLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IDepositContract} from \\\"../../../interfaces/helpers/IDepositContract.sol\\\";\\n// internal - libraries\\nimport {BytesLib} from \\\"../../../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @title DCL: Deposit Contract Library\\n *\\n * @notice Includes constants & functions that helps to the deposit process.\\n *\\n * @dev DEPOSIT_CONTRACT is chain specific and should be changed before deployments.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DepositContractLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0x4242424242424242424242424242424242424242);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @custom:section                           ** FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(_stakeAmount % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot))\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  /**\\n   * @notice converts an address to withdrawal credential, used on validator creation\\n   */\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return abi.encodePacked(bytes32(w) | bytes32(uint256(uint160(address(wcAddress)))));\\n  }\\n\\n  /**\\n   * @notice deposit to DEPOSIT_CONTRACT and initiate a validator.\\n   */\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x71fa2b28cf5299abb9cfd8d7b8130c84f104b7a74d3ee2d6f5274e2fcc9a7ab2\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @param state state of the validator, refer to globals.sol\\n * @param index representing this validator's placement on the chronological order of the validators proposals\\n * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n * @param poolId needed for withdrawal_credential\\n * @param operatorId needed for staking after allowance\\n * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n * @param infrastructureFee all fees are crucial for the price calculation by the oracle, even if its zero.\\n * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n **/\\nstruct Validator {\\n  uint64 state;\\n  uint64 index;\\n  uint64 createdAt;\\n  uint64 period;\\n  uint256 poolId;\\n  uint256 operatorId;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes signature31;\\n}\\n\",\"keccak256\":\"0xd7f21251a595d6cb1f23aee2015557064568e604e992b63d20acea0816dcd848\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/WithdrawalModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - libraries\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// external - contracts\\nimport {ERC1155HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../interfaces/IgETH.sol\\\";\\nimport {IPortal} from \\\"../../interfaces/IPortal.sol\\\";\\nimport {IWithdrawalModule} from \\\"../../interfaces/modules/IWithdrawalModule.sol\\\";\\n// internal - structs\\nimport {WithdrawalModuleStorage} from \\\"./structs/storage.sol\\\";\\n// internal - libraries\\nimport {WithdrawalModuleLib as WML} from \\\"./libs/WithdrawalModuleLib.sol\\\";\\n\\n/**\\n * @title WM: Withdrawal Module\\n *\\n * @notice Withdrawal Queue and voluntary exit elections.\\n * * Processing the withdrawals\\n * * Distributing the fees\\n * * Queueing withdrawal requests\\n * * Allowing (Instant Run-off) elections on which validators to exit.\\n * @dev all done while preserving the validator segregation.\\n *\\n * @dev There is 1 additional functionality implemented apart from the library:\\n * * if the price is not valid, user must prove it before processing validators.\\n *\\n * @dev review: this module delegates its functionality to WML (WithdrawalModuleLib).\\n *\\n * @dev 4 functions need to be overriden with access control when inherited:\\n * * pause, unpause, setExitThreshold, claimInfrastructureFees\\n *\\n * @dev __WithdrawalModule_init (or _unchained) call is NECESSARY when inherited.\\n *\\n * note This module does not implement necessary admin checks; or pausability overrides.\\n * * If a package inherits WM, should implement it's own logic around those.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract WithdrawalModule is\\n  IWithdrawalModule,\\n  ERC1155HolderUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable\\n{\\n  using WML for WithdrawalModuleStorage;\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.WithdrawalModuleStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant WithdrawalModuleStorageLocation =\\n    0x50605cc6f5170f0cdbb610edd2214831ea96f61cd1eba92cf58939f65736af00;\\n\\n  function _getWithdrawalModuleStorage() internal pure returns (WithdrawalModuleStorage storage $) {\\n    assembly {\\n      $.slot := WithdrawalModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event NewExitThreshold(uint256 threshold);\\n  event Enqueue(uint256 indexed index, address owner);\\n  event Vote(uint256 indexed index, bytes indexed pubkey, uint256 size);\\n  event RequestTransfer(uint256 indexed index, address oldOwner, address newOwner);\\n  event Fulfill(uint256 indexed index, uint256 fulfillAmount, uint256 claimableETH);\\n  event Dequeue(uint256 indexed index, uint256 claim);\\n  event Processed();\\n\\n  /**\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   *\\n   * @dev these functions MUST be overriden for admin functionality.\\n   */\\n\\n  function pause() external virtual override;\\n\\n  function unpause() external virtual override;\\n\\n  function setExitThreshold(uint256 newThreshold) external virtual override;\\n\\n  function claimInfrastructureFees(\\n    address receiver\\n  ) external virtual override returns (bool success);\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n  function __WithdrawalModule_init(\\n    address _gETH_position,\\n    address _portal_position,\\n    uint256 _poolId\\n  ) internal onlyInitializing {\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC1155Holder_init();\\n    __WithdrawalModule_init_unchained(_gETH_position, _portal_position, _poolId);\\n  }\\n\\n  function __WithdrawalModule_init_unchained(\\n    address _gETH_position,\\n    address _portal_position,\\n    uint256 _poolId\\n  ) internal onlyInitializing {\\n    require(_gETH_position != address(0), \\\"WM:gETH cannot be zero address\\\");\\n    require(_portal_position != address(0), \\\"WM:portal cannot be zero address\\\");\\n\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.gETH = IgETH(_gETH_position);\\n    $.PORTAL = _portal_position;\\n    $.POOL_ID = _poolId;\\n    $.EXIT_THRESHOLD = WML.MIN_EXIT_THRESHOLD;\\n\\n    $.gETH.avoidMiddlewares(_poolId, true);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n  function WithdrawalParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address gETH,\\n      address portal,\\n      uint256 poolId,\\n      uint256 exitThreshold,\\n      uint256 gatheredInfrastructureFees\\n    )\\n  {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    gETH = address($.gETH);\\n    portal = $.PORTAL;\\n    poolId = $.POOL_ID;\\n    exitThreshold = $.EXIT_THRESHOLD;\\n    gatheredInfrastructureFees = $.gatheredInfrastructureFees;\\n  }\\n\\n  function QueueParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 requested,\\n      uint256 realized,\\n      uint256 realizedEtherBalance,\\n      uint256 realizedPrice,\\n      uint256 fulfilled,\\n      uint256 fulfilledEtherBalance,\\n      uint256 commonPoll\\n    )\\n  {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    requested = $.queue.requested;\\n    realized = $.queue.realized;\\n    realizedEtherBalance = $.queue.realizedEtherBalance;\\n    realizedPrice = $.queue.realizedPrice;\\n    fulfilled = $.queue.fulfilled;\\n    fulfilledEtherBalance = $.queue.fulfilledEtherBalance;\\n    commonPoll = $.queue.commonPoll;\\n  }\\n\\n  function getRequest(\\n    uint256 index\\n  )\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address owner,\\n      uint256 trigger,\\n      uint256 size,\\n      uint256 fulfilled,\\n      uint256 claimableEther\\n    )\\n  {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    owner = $.requests[index].owner;\\n    trigger = $.requests[index].trigger;\\n    size = $.requests[index].size;\\n    fulfilled = $.requests[index].fulfilled;\\n    claimableEther = $.requests[index].claimableEther;\\n  }\\n\\n  function getValidatorData(\\n    bytes calldata pubkey\\n  )\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256 beaconBalance, uint256 withdrawnBalance, uint256 poll)\\n  {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    beaconBalance = $.validators[pubkey].beaconBalance;\\n    withdrawnBalance = $.validators[pubkey].withdrawnBalance;\\n    poll = $.validators[pubkey].poll;\\n  }\\n\\n  /**\\n   * @custom:section                           ** EARLY EXIT **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function canFinalizeExit(bytes calldata pubkey) external view virtual override returns (bool) {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    return $.canFinalizeExit(pubkey);\\n  }\\n\\n  function validatorThreshold(\\n    bytes calldata pubkey\\n  ) external view virtual override returns (uint256 threshold) {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    (threshold, ) = $.getValidatorThreshold(pubkey);\\n  }\\n\\n  /**\\n   * @custom:section                           ** REQUESTS QUEUE **\\n   */\\n  /**\\n   * @custom:subsection                        ** ENQUEUE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function enqueue(\\n    uint256 size,\\n    bytes calldata pubkey,\\n    address owner\\n  ) external virtual override returns (uint256 index) {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    index = $.enqueue(size, pubkey, owner);\\n  }\\n\\n  function enqueueBatch(\\n    uint256[] calldata sizes,\\n    bytes[] calldata pubkeys,\\n    address owner\\n  ) external virtual override returns (uint256[] memory indexes) {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    indexes = $.enqueueBatch(sizes, pubkeys, owner);\\n  }\\n\\n  function transferRequest(uint256 index, address newOwner) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.transferRequest(index, newOwner);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** FULFILL **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n\\n  function fulfillable(uint256 index) external view virtual override returns (uint256) {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    return $.fulfillable(index, $.queue.realized, $.queue.fulfilled);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  function fulfill(uint256 index) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.fulfill(index);\\n  }\\n\\n  function fulfillBatch(uint256[] calldata indexes) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.fulfillBatch(indexes);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** DEQUEUE **\\n   */\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  function dequeue(uint256 index, address receiver) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.dequeue(index, receiver);\\n  }\\n\\n  function dequeueBatch(uint256[] calldata indexes, address receiver) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.dequeueBatch(indexes, receiver);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PROCESS BALANCES MERKLE UPDATE **\\n   */\\n  function processValidators(\\n    bytes[] calldata pubkeys,\\n    uint256[] calldata beaconBalances,\\n    uint256[] calldata withdrawnBalances,\\n    bytes32[][] calldata balanceProofs,\\n    uint256 price,\\n    bytes32[] calldata priceProof\\n  ) external virtual override {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    if (!IPortal($.PORTAL).isPriceValid($.POOL_ID)) {\\n      IPortal($.PORTAL).priceSync($.POOL_ID, price, priceProof);\\n    }\\n    $.processValidators(pubkeys, beaconBalances, withdrawnBalances, balanceProofs);\\n  }\\n\\n  /**\\n   * @custom:section                           ** MULTICALL **\\n   */\\n\\n  /**\\n   * @dev Receives and executes a batch of function calls on this contract.\\n   * @dev This is necessary for the multistep operations done in this contract:\\n   * * Enqueue, Process, Fulfill, Dequeue.\\n   * @dev Using 'functionDelegateCall' so it does not cause any issues when using msg.sender etc.\\n   * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n   */\\n  function multicall(\\n    bytes[] calldata data\\n  ) external virtual override returns (bytes[] memory results) {\\n    results = new bytes[](data.length);\\n    for (uint256 i; i < data.length; ) {\\n      results[i] = Address.functionDelegateCall(address(this), data[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    return results;\\n  }\\n}\\n\",\"keccak256\":\"0xcc8b028b5b944156ef766ef8e75c24aaf489ee6e0f04108aa7cb877d16d428d4\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/libs/WithdrawalModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - libraries\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n// internal - globals\\nimport {PERCENTAGE_DENOMINATOR, gETH_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {IPortal} from \\\"../../../interfaces/IPortal.sol\\\";\\n// internal - structs\\nimport {Queue, Request, ValidatorData} from \\\"../structs/utils.sol\\\";\\nimport {WithdrawalModuleStorage} from \\\"../structs/storage.sol\\\";\\n// internal - libraries\\nimport {DepositContractLib as DCL} from \\\"../../StakeModule/libs/DepositContractLib.sol\\\";\\nimport {Validator} from \\\"../../StakeModule/structs/utils.sol\\\";\\n\\n/**\\n * @title WML: Withdrawal Module Library\\n *\\n * @notice Improved validator withdrawals (and exits), while preserving the validator segregation.\\n *\\n * @notice Intended implementation scope:\\n * 1. Processing the withdrawals (partial and exits).\\n * * `processValidators` function handles any balance changes that is reflected from the Beacon Chain.\\n * * If a validator's balance on the Beacon Chain is ZERO, it exited (forced or voluntary).\\n *\\n * 2. Distributing the fees.\\n * * Pool and Operator fees are distributed whenever the validator is processed.\\n * * Note that if the validator is slashed before being processed, fees can be lost along with the stakers' profit.\\n *\\n * 3. Queueing withdrawal requests.\\n * * Users can request a withdrawal by forfeiting their gETH tokens.\\n * * Requests would be put in a queue (First-In-First-Out).\\n * * As the validators are processed, requests become claimable.\\n * * Users can dequeue partially or fully.\\n *\\n * 4. Allowing (Instant Run-off) elections on which validators to exit.\\n * * While getting into the queue, caller can vote on a validator, increasing it's 'poll'.\\n * * If a validator is not specified, vote goes to 'commonPoll'. It can be used for any validator to top-up the EXIT_THRESHOLD\\n * * If a validator is called for exit but there are remaining votes in it, it is transferred to the commonPoll.\\n * * Note that, elections are basically just stating a preference:\\n * * * Exit of the voted validator does not change the voter's priority in the queue.\\n *\\n * @dev The Queue\\n * Lets say every '-' is representing 1 gETH.\\n * Queue: --- -- ---------- -- --- --- - --- -- ---- ----- - ------- ---- -- -- - - -------- --\\n * There are 20 requests in this queue, adding up to 65 gETH, this is 'requested'.\\n * Every request has a 'size', first request' is 3 gETH , second' is 2 gETH.\\n * Every request has a 'trigger', pointing it's kickoff point. Thus, 3rd request' is 5 gETH.\\n * Let's say, there are 8 ETH processed in the contract, we burn 8 ETH worth of gETH.\\n * Let's say 8 ETH is 4 gETH. Then the first request can exit fully, and second one can exit for 1 gETH.\\n *\\n * @dev This process creates a unique question:\\n * Considering that profit processing, price updates and queue operations are ASYNC,\\n * how can we make sure that we are paying the correct price?\\n * We have determined 3 possible points that we can 'derisk' a Request:\\n * Enqueue -> ProcessValidators -> Dequeue\\n * 1. We derisk the Request when it is enqueued:\\n * * This would cause 2 issues:\\n * * a. Best case, we would prevent the queued Request from profiting while they are in the queue.\\n * * b. Since there is a slashing risk, we cannot promise a fixed Ether amount without knowing what would be the future price.\\n * 2. We derisk the Request when validators are processed, with the latest price for the derivative:\\n * * This is the correct approach as we REALIZE the price at this exact point: by increasing the cumulative claimable gETH.\\n * * However, we would need to insert an 'unbound for loop' through 'realized' Requests, when a 'processValidators' operation is finalized.\\n * * We cannot, nor should, enforce an 'unbound for loop' on requests array.\\n * 3. We derisk the Request when it is dequeued:\\n * * Simply, price changes would have unpredictable effects on the Queue: A request can be claimable now, but might become unclaimable later.\\n * * Derisked Requests that are waiting to be claimed, would hijack the real stakers' APR, while sitting on top of some allocated Ether.\\n * * Unclaimed Requests can prevent the latter requests since there would be no way to keep track of the previous unclaimed requests without enforcing the order.\\n * We do not want to promise vague returns, we do not want for loops over requests array or price checkpoints, we do not want APR hijacking.\\n * Thus, none of these points can be implemented without utilizing a trusted third party, like an Oracle.\\n * However, we want Withdrawal logic to have the minimum Third Party risk as Geode Developers.\\n * As a result, we have came up with a logic that will allow stakers to maintain their profitability without disrupting the 'derisk' moment.\\n * * a. We keep track of an internal price, stating the ratio of the claimable ETH and processed gETH: realizedPrice.\\n * * b. We derisk the Queue on 'processValidators' by increasing the cumulative gETH that can be claimed.\\n * * * We also adjust the realizedPrice considering the pricePerShare of the currently derisked asset amount.\\n * * c. Requests can be fulfilled in respect to the internal price BY ANYONE at any point after they become claimable.\\n * * d. Fulfilled requests, including partially fulfilled ones, can be claimed (ONLY) BY THE OWNER.\\n * Why using an internal Price instead of 'enforcing the PricePerShare' makes sense:\\n * * All Requests, without considering their index, are in the same pool until they are derisked through price processing.\\n * * If all of the claimable requests are fulfilled periodically (via a script etc.), we would expect internal price to be equal to 'PricePerShare'.\\n * * This way, a well maintained pool can prevent APR hijacking by fulfilling neglected Requests, while it is not enforced for all of the pools.\\n * However, this is a gas-heavy process so it might not be needed after every 'processValidators' operation.\\n * Similarly, 'processValidators' is expensive as well, we would advise calling it when there is a dequeue opportunity.\\n * As a conclusion, if all requests are fulfilled immediately after the off-chain calculation signals them being claimable;\\n * None of these approaches will be expensive, nor will disrupt the internal pricing for the latter requests.\\n *\\n * @dev while conducting the price calculations, a part of the balance within this contract should be taken into consideration.\\n * This ETH amount can be calculated as: sum(lambda x: requests[x].withdrawnBalance) - [fulfilledEtherBalance] (todo for the telescope).\\n * Note that, this is because: a price of the derivative is = total ETH / total Supply, and total ETH should include the balance within WP.\\n *\\n * @dev Contracts relying on this library must initialize WithdrawalModuleLib.WithdrawalModuleStorage\\n *\\n * @dev There are 'owner' checks on 'transferRequest', _dequeue (used by dequeue, dequeueBatch).\\n * However, we preferred to not use a modifier for that.\\n *\\n * @dev all parameters related to balance are denominated in gETH; except realizedEtherBalance,fulfilledEtherBalance and claimableEther:\\n * (requested, realized, fulfilled, commonPoll, trigger, size, fulfilled)\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary WithdrawalModuleLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  /// @notice EXIT_THRESHOLD should be at least 60% and at most 100%\\n  uint256 internal constant MIN_EXIT_THRESHOLD = 6e9; // (6 * PERCENTAGE_DENOMINATOR) / 10;\\n  // minimum withdrawal request is 0.05 ETH\\n  uint256 internal constant MIN_REQUEST_SIZE = 5e16;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event NewExitThreshold(uint256 threshold);\\n  event Enqueue(uint256 indexed index, address owner);\\n  event Vote(uint256 indexed index, bytes indexed pubkey, uint256 size);\\n  event RequestTransfer(uint256 indexed index, address oldOwner, address newOwner);\\n  event Fulfill(uint256 indexed index, uint256 fulfillAmount, uint256 claimableETH);\\n  event Dequeue(uint256 indexed index, uint256 claim);\\n  event Processed();\\n\\n  /**\\n   * @custom:section                           ** HELPER **\\n   */\\n\\n  function _getPortal(WithdrawalModuleStorage storage self) internal view returns (IPortal) {\\n    return IPortal(self.PORTAL);\\n  }\\n\\n  /**\\n   * @custom:section                           ** EARLY EXIT REQUESTS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice checks if given validator is exited, according to the information provided by Balances Merkle Root.\\n   * @dev an external view function, just as an helper.\\n   */\\n  function canFinalizeExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    if (self.validators[pubkey].beaconBalance != 0) {\\n      return false;\\n    }\\n\\n    Validator memory val = _getPortal(self).getValidator(pubkey);\\n\\n    // check pubkey belong to this pool\\n    require(val.poolId == self.POOL_ID, \\\"WML:validator for an unknown pool\\\");\\n\\n    if (val.state != VALIDATOR_STATE.ACTIVE && val.state != VALIDATOR_STATE.EXIT_REQUESTED) {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice notifies Portal to change validator state from ACTIVE to EXIT_REQUESTED\\n   * @param pubkey public key of the given validator.\\n   */\\n  function _requestExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) internal returns (bool) {\\n    return _getPortal(self).requestExit(self.POOL_ID, pubkey);\\n  }\\n\\n  /**\\n   * @notice notifies Portal to change validator state from ACTIVE or EXIT_REQUESTED, to EXITED.\\n   * @dev no additional checks are needed as processValidators and PORTAL.finalizeExit has propser checks.\\n   * @param pubkey public key of the given validator.\\n   */\\n  function _finalizeExit(WithdrawalModuleStorage storage self, bytes calldata pubkey) internal {\\n    _getPortal(self).finalizeExit(self.POOL_ID, pubkey);\\n  }\\n\\n  /**\\n   * @notice if the poll is above the threshold, calls Portal to request a voluntary exit.\\n   * @param pubkey public key of the checked validator.\\n   * @param commonPoll cached commonPoll\\n   * @dev passing commonPoll around helps on gas on batch TXs.\\n   */\\n  function _checkAndRequestExit(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey,\\n    uint256 commonPoll\\n  ) internal returns (uint256) {\\n    (uint256 threshold, uint256 beaconBalancePriced) = getValidatorThreshold(self, pubkey);\\n    uint256 validatorPoll = self.validators[pubkey].poll;\\n\\n    if (commonPoll + validatorPoll > threshold) {\\n      // meaning it can request withdrawal\\n      if (_requestExit(self, pubkey)) {\\n        if (threshold > validatorPoll) {\\n          // If Poll is not enough spend votes from commonPoll.\\n          commonPoll -= threshold - validatorPoll;\\n        } else if (validatorPoll > beaconBalancePriced) {\\n          // If Poll is bigger than needed, move the extra votes instead of spending.\\n          commonPoll += validatorPoll - beaconBalancePriced;\\n        }\\n      }\\n    }\\n\\n    return commonPoll;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice allowing EXIT_THRESHOLD to be set by the contract owner.\\n   * @param newThreshold as percentage, denominated in PERCENTAGE_DENOMINATOR.\\n   * @dev caller should be governed on module contract.\\n   */\\n  function setExitThreshold(WithdrawalModuleStorage storage self, uint256 newThreshold) external {\\n    require(newThreshold >= MIN_EXIT_THRESHOLD, \\\"WML:min threshold is 60%\\\");\\n    require(newThreshold <= PERCENTAGE_DENOMINATOR, \\\"WML:max threshold is 100%\\\");\\n\\n    self.EXIT_THRESHOLD = newThreshold;\\n    emit NewExitThreshold(newThreshold);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** VOTE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice figuring out the applied exit threshold, as in gETH, for a given validator.\\n   * @param pubkey public key of the given validator.\\n   */\\n  function getValidatorThreshold(\\n    WithdrawalModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) public view returns (uint256 threshold, uint256 beaconBalancePriced) {\\n    uint256 price = self.gETH.pricePerShare(self.POOL_ID);\\n    beaconBalancePriced = ((self.validators[pubkey].beaconBalance * gETH_DENOMINATOR));\\n    threshold = (beaconBalancePriced * self.EXIT_THRESHOLD) / PERCENTAGE_DENOMINATOR / price;\\n    beaconBalancePriced = beaconBalancePriced / price;\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice a validator is chosen to be the next exit by enqueued Request\\n   * @param pubkey public key of the voted validator.\\n   * @param size specified gETH amount\\n   */\\n  function _vote(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    bytes calldata pubkey,\\n    uint256 size\\n  ) internal {\\n    Validator memory val = _getPortal(self).getValidator(pubkey);\\n\\n    require(val.poolId == self.POOL_ID, \\\"WML:vote for an unknown pool\\\");\\n    require(val.state == VALIDATOR_STATE.ACTIVE, \\\"WML:voted for inactive validator\\\");\\n\\n    self.validators[pubkey].poll += size;\\n    emit Vote(index, pubkey, size);\\n  }\\n\\n  /**\\n   * @custom:section                           ** REQUESTS QUEUE **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** ENQUEUE **\\n   */\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice internal function to push a new Request into Queue\\n   * @param trigger the kickoff point for the Request\\n   * @param size specified gETH amount\\n   */\\n  function _enqueue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 trigger,\\n    uint256 size,\\n    address owner\\n  ) internal returns (uint256 index) {\\n    require(size >= MIN_REQUEST_SIZE, \\\"WML:min 0.05 gETH\\\");\\n    require(owner != address(0), \\\"WML:owner cannot be zero address\\\");\\n\\n    self.requests.push(\\n      Request({owner: owner, trigger: trigger, size: size, fulfilled: 0, claimableEther: 0})\\n    );\\n\\n    index = self.requests.length - 1;\\n\\n    emit Enqueue(index, owner);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice queues a Request into Queue, processes the vote, exits the validator in case of a run-off.\\n   * @param pubkey voted validator, vote goes into commonPoll if bytes(0) is given.\\n   * @param owner allows caller to directly transfer the Request on creation\\n   */\\n  function enqueue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 size,\\n    bytes calldata pubkey,\\n    address owner\\n  ) external returns (uint256 index) {\\n    uint256 requestedgETH = self.queue.requested;\\n    index = _enqueue(self, requestedgETH, size, owner);\\n\\n    if (pubkey.length == 0) {\\n      self.queue.commonPoll += size;\\n    } else {\\n      _vote(self, index, pubkey, size);\\n    }\\n\\n    self.queue.requested = requestedgETH + size;\\n\\n    self.gETH.safeTransferFrom(msg.sender, address(this), self.POOL_ID, size, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice enqueue() with batch optimizations\\n   * @param sizes array of gETH amount that are sent to enqueue multiple Requests.\\n   * @param pubkeys array of voted validators, vote goes into commonPoll if bytes(0) is given.\\n   * @param owner the owner for all the Requests being created.\\n   */\\n  function enqueueBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata sizes,\\n    bytes[] calldata pubkeys,\\n    address owner\\n  ) external returns (uint256[] memory indexes) {\\n    uint256 len = sizes.length;\\n    require(len == pubkeys.length, \\\"WML:invalid input length\\\");\\n\\n    uint256 commonPoll = self.queue.commonPoll;\\n    uint256 requestedgETH = self.queue.requested;\\n    uint256 totalSize;\\n\\n    indexes = new uint256[](len);\\n    for (uint256 i; i < len; ) {\\n      indexes[i] = _enqueue(self, requestedgETH, sizes[i], owner);\\n\\n      if (pubkeys[i].length == 0) {\\n        commonPoll += sizes[i];\\n      } else {\\n        _vote(self, indexes[i], pubkeys[i], sizes[i]);\\n      }\\n      requestedgETH = requestedgETH + sizes[i];\\n      totalSize += sizes[i];\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.queue.commonPoll = commonPoll;\\n    self.queue.requested = requestedgETH;\\n\\n    self.gETH.safeTransferFrom(msg.sender, address(this), self.POOL_ID, totalSize, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice transferring the ownership of a Request to a new address\\n   * @param index placement of the Request within the requests array.\\n   * @param newOwner new address that will be eligible to dequeue a Request.\\n   * @dev only current Owner can change the owner\\n   */\\n  function transferRequest(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    address newOwner\\n  ) external {\\n    address oldOwner = self.requests[index].owner;\\n    require(msg.sender == oldOwner, \\\"WML:not owner\\\");\\n    require(newOwner != address(0), \\\"WML:cannot transfer to zero address\\\");\\n    require(\\n      self.requests[index].fulfilled < self.requests[index].size,\\n      \\\"WML:cannot transfer fulfilled\\\"\\n    );\\n\\n    self.requests[index].owner = newOwner;\\n\\n    emit RequestTransfer(index, oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** FULFILL **\\n   */\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice given a request, figure out the fulfillable gETH amount, limited up to its size.\\n   * @param index placement of the Request within the requests array.\\n   * @param qRealized self.queue.realized, might also be hot value for Batch optimizations\\n   * @param qFulfilled self.queue.fulfilled, might also be a hot value for Batch optimizations\\n   * @dev taking the previously fulfilled amount into consideration as it is the previously claimed part.\\n   */\\n  function fulfillable(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index,\\n    uint256 qRealized,\\n    uint256 qFulfilled\\n  ) public view returns (uint256) {\\n    if (qRealized > qFulfilled) {\\n      uint256 rTrigger = self.requests[index].trigger;\\n      uint256 rSize = self.requests[index].size;\\n      uint256 rFulfilled = self.requests[index].fulfilled;\\n\\n      uint256 rFloor = rTrigger + rFulfilled;\\n      uint256 rCeil = rTrigger + rSize;\\n\\n      if (qRealized > rCeil) {\\n        return rSize - rFulfilled;\\n      } else if (qRealized > rFloor) {\\n        return qRealized - rFloor;\\n      } else {\\n        return 0;\\n      }\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice by using the realized part of the size, we fulfill a single request by making use of the internal pricing.\\n   * @dev we burn the realized size of the Queue here because we do not want this process to mess with price\\n   * * calculations of the oracle.\\n   */\\n  function _fulfill(WithdrawalModuleStorage storage self, uint256 index) internal {\\n    uint256 toFulfill = fulfillable(self, index, self.queue.realized, self.queue.fulfilled);\\n\\n    if (toFulfill > 0) {\\n      uint256 claimableETH = (toFulfill * self.queue.realizedPrice) / gETH_DENOMINATOR;\\n      self.requests[index].claimableEther += claimableETH;\\n      self.requests[index].fulfilled += toFulfill;\\n      self.queue.fulfilled += toFulfill;\\n      self.queue.fulfilledEtherBalance += claimableETH;\\n\\n      self.gETH.burn(address(this), self.POOL_ID, toFulfill);\\n\\n      emit Fulfill(index, toFulfill, claimableETH);\\n    }\\n  }\\n\\n  /**\\n   * @notice _fulfill with Batch optimizations\\n   * @param qRealized queue.realized, as a hot value.\\n   * @param qFulfilled queue.fulfilled, as a hot value.\\n   * @param qPrice queue.realizedPrice, as a hot value.\\n   */\\n  function _fulfillBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata indexes,\\n    uint256 qRealized,\\n    uint256 qFulfilled,\\n    uint256 qPrice\\n  ) internal {\\n    uint256 indexesLen = indexes.length;\\n\\n    uint256 oldFulfilled = qFulfilled;\\n    uint256 qfulfilledEtherBalance;\\n    for (uint256 i; i < indexesLen; ) {\\n      uint256 toFulfill = fulfillable(self, indexes[i], qRealized, qFulfilled);\\n      if (toFulfill > 0) {\\n        uint256 claimableETH = (toFulfill * qPrice) / gETH_DENOMINATOR;\\n        self.requests[indexes[i]].claimableEther += claimableETH;\\n        self.requests[indexes[i]].fulfilled += toFulfill;\\n        qFulfilled += toFulfill;\\n        qfulfilledEtherBalance += claimableETH;\\n\\n        emit Fulfill(indexes[i], toFulfill, claimableETH);\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.queue.fulfilled = qFulfilled;\\n    self.queue.fulfilledEtherBalance += qfulfilledEtherBalance;\\n    self.gETH.burn(address(this), self.POOL_ID, qFulfilled - oldFulfilled);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  function fulfill(WithdrawalModuleStorage storage self, uint256 index) external {\\n    _fulfill(self, index);\\n  }\\n\\n  function fulfillBatch(WithdrawalModuleStorage storage self, uint256[] calldata indexes) external {\\n    _fulfillBatch(\\n      self,\\n      indexes,\\n      self.queue.realized,\\n      self.queue.fulfilled,\\n      self.queue.realizedPrice\\n    );\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** DEQUEUE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice given a Request from the requests array, remove the part that is currently claimable.\\n   * @param index placement of the Request within the requests array.\\n   * @dev only owner can call this function\\n   */\\n  function _dequeue(\\n    WithdrawalModuleStorage storage self,\\n    uint256 index\\n  ) internal returns (uint256 claimableETH) {\\n    require(msg.sender == self.requests[index].owner, \\\"WML:not owner\\\");\\n\\n    claimableETH = self.requests[index].claimableEther;\\n    require(claimableETH > 0, \\\"WML:not claimable\\\");\\n\\n    self.requests[index].claimableEther = 0;\\n\\n    emit Dequeue(index, claimableETH);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice given a Request from the requests array, claim the part that is currently claimable and forward the ether amount to the given receiver.\\n   * @param index placement of the Request within the requests array.\\n   * @dev only owner can call this function\\n   */\\n  function dequeue(WithdrawalModuleStorage storage self, uint256 index, address receiver) external {\\n    require(receiver != address(0), \\\"WML:receiver cannot be zero address\\\");\\n\\n    _fulfill(self, index);\\n    uint256 claimableETH = _dequeue(self, index);\\n\\n    // send ETH\\n    (bool sent, ) = payable(receiver).call{value: claimableETH}(\\\"\\\");\\n    require(sent, \\\"WML:Failed to send Ether\\\");\\n  }\\n\\n  /**\\n   * @notice dequeue() with batch optimizations\\n   */\\n  function dequeueBatch(\\n    WithdrawalModuleStorage storage self,\\n    uint256[] calldata indexes,\\n    address receiver\\n  ) external {\\n    require(receiver != address(0), \\\"WML:receiver cannot be zero address\\\");\\n\\n    _fulfillBatch(\\n      self,\\n      indexes,\\n      self.queue.realized,\\n      self.queue.fulfilled,\\n      self.queue.realizedPrice\\n    );\\n\\n    uint256 claimableETH;\\n    uint256 indexesLen = indexes.length;\\n    for (uint256 i; i < indexesLen; ) {\\n      claimableETH += _dequeue(self, indexes[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    // send ETH\\n    (bool sent, ) = payable(receiver).call{value: claimableETH}(\\\"\\\");\\n    require(sent, \\\"WML:Failed to send Ether\\\");\\n  }\\n\\n  /**\\n   * @custom:section                           ** PROCESS BALANCES MERKLE UPDATE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice\\n   * @param pubkey public key of the given validator.\\n   * @param reportedWithdrawn withdrawn Ether amount according to the fresh Merkle root.\\n   * @param processedWithdrawn previously reported withdrawn amount.\\n   * @dev cannot overflow since max fee is 10%, if we change fee structure ever, we need to reconsider the math there! \\n   * * Note that if a validator is EXITED, we would assume 32 ETH that the pool put is also accounted for.\\n   @return extra calculated profit since the last time validator was processed\\n   */\\n  function _distributeFees(\\n    WithdrawalModuleStorage storage self,\\n    Validator memory val,\\n    uint256 reportedWithdrawn,\\n    uint256 processedWithdrawn\\n  ) internal returns (uint256 extra) {\\n    // reportedWithdrawn > processedWithdrawn checks are done as it should be before calling this function\\n    uint256 profit = reportedWithdrawn - processedWithdrawn;\\n\\n    uint256 poolProfit = (profit * val.poolFee) / PERCENTAGE_DENOMINATOR;\\n    uint256 operatorProfit = (profit * val.operatorFee) / PERCENTAGE_DENOMINATOR;\\n    uint256 infrastructureProfit = (profit * val.infrastructureFee) / PERCENTAGE_DENOMINATOR;\\n\\n    _getPortal(self).increaseWalletBalance{value: poolProfit}(val.poolId);\\n    _getPortal(self).increaseWalletBalance{value: operatorProfit}(val.operatorId);\\n    self.gatheredInfrastructureFees += infrastructureProfit;\\n\\n    extra = ((profit - poolProfit) - operatorProfit) - infrastructureProfit;\\n  }\\n\\n  /**\\n   * @notice acting like queue is one entity, we sell it some gETH in respect to Oracle price.\\n   * * by using the Ether from the latest withdrawals.\\n   */\\n  function _realizeProcessedEther(\\n    WithdrawalModuleStorage storage self,\\n    uint256 processedBalance\\n  ) internal {\\n    uint256 pps = self.gETH.pricePerShare(self.POOL_ID);\\n\\n    uint256 processedgETH = ((processedBalance * gETH_DENOMINATOR) / pps);\\n    uint256 newPrice = pps;\\n\\n    uint256 internalPrice = self.queue.realizedPrice;\\n    if (internalPrice > 0) {\\n      uint256 claimable = self.queue.realized - self.queue.fulfilled;\\n      if (claimable > 0) {\\n        newPrice =\\n          ((claimable * internalPrice) + (processedBalance * gETH_DENOMINATOR)) /\\n          (claimable + processedgETH);\\n      }\\n    }\\n\\n    self.queue.realized += processedgETH;\\n    self.queue.realizedEtherBalance += processedBalance;\\n    self.queue.realizedPrice = newPrice;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice main function of this library, processing given information about the provided validators.\\n   * @dev not all validators need to be processed all the time, process them as you need.\\n   * @dev We do not check if validators should be processed at all.\\n   * Because its up to user if they want to pay extra for unnecessary operations.\\n   * We should not be charging others extra to save their gas.\\n   * @dev It is advised to sort the pks according to the time passed, or remaining, to ensure that\\n   * the preferred validators are prioritized in a case\\n   * when the subset of given validators are not called for an exit.\\n   */\\n  function processValidators(\\n    WithdrawalModuleStorage storage self,\\n    bytes[] calldata pubkeys,\\n    uint256[] calldata beaconBalances,\\n    uint256[] calldata withdrawnBalances,\\n    bytes32[][] calldata balanceProofs\\n  ) external {\\n    uint256 pkLen = pubkeys.length;\\n    require(\\n      pkLen == beaconBalances.length &&\\n        pkLen == withdrawnBalances.length &&\\n        pkLen == balanceProofs.length,\\n      \\\"WML:invalid lengths\\\"\\n    );\\n\\n    Validator[] memory validators = new Validator[](pkLen);\\n\\n    {\\n      bytes32 balanceMerkleRoot = _getPortal(self).getBalancesMerkleRoot();\\n      for (uint256 i; i < pkLen; ) {\\n        // fill the validators array while checking the pool id\\n        validators[i] = _getPortal(self).getValidator(pubkeys[i]);\\n\\n        // check pubkey belong to this pool\\n        require(validators[i].poolId == self.POOL_ID, \\\"WML:validator for an unknown pool\\\");\\n\\n        // verify balances\\n        bytes32 leaf = keccak256(\\n          bytes.concat(keccak256(abi.encode(pubkeys[i], beaconBalances[i], withdrawnBalances[i])))\\n        );\\n        require(\\n          MerkleProof.verify(balanceProofs[i], balanceMerkleRoot, leaf),\\n          \\\"WML:not all proofs are valid\\\"\\n        );\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n    }\\n\\n    uint256 commonPoll = self.queue.commonPoll;\\n    uint256 processed;\\n    for (uint256 j; j < pkLen; ) {\\n      uint256 oldWitBal = self.validators[pubkeys[j]].withdrawnBalance;\\n\\n      self.validators[pubkeys[j]].beaconBalance = beaconBalances[j];\\n      self.validators[pubkeys[j]].withdrawnBalance = withdrawnBalances[j];\\n\\n      if (beaconBalances[j] == 0) {\\n        // exit\\n        if (withdrawnBalances[j] > oldWitBal + DCL.DEPOSIT_AMOUNT) {\\n          processed += _distributeFees(\\n            self,\\n            validators[j],\\n            withdrawnBalances[j],\\n            oldWitBal + DCL.DEPOSIT_AMOUNT\\n          );\\n          processed += DCL.DEPOSIT_AMOUNT;\\n        } else if (withdrawnBalances[j] >= oldWitBal) {\\n          processed += withdrawnBalances[j] - oldWitBal;\\n        } else {\\n          revert(\\\"WML:invalid withdrawn balance\\\");\\n        }\\n        _finalizeExit(self, pubkeys[j]);\\n      } else {\\n        // check if should request exit\\n        if (withdrawnBalances[j] > oldWitBal) {\\n          processed += _distributeFees(self, validators[j], withdrawnBalances[j], oldWitBal);\\n        }\\n        commonPoll = _checkAndRequestExit(self, pubkeys[j], commonPoll);\\n      }\\n\\n      unchecked {\\n        j += 1;\\n      }\\n    }\\n    self.queue.commonPoll = commonPoll;\\n\\n    if (processed > 0) {\\n      _realizeProcessedEther(self, processed);\\n    }\\n\\n    emit Processed();\\n  }\\n}\\n\",\"keccak256\":\"0xb4eb31f0382ed5aceaffa235743d49b3640aa24342a32683ebdc3b13cd7e4a3f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\n// internal - structs\\nimport {Queue, Request, ValidatorData} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Withdrawal Package enabling the Queued Withdrawal Requests with instant run-off validator exit elections\\n * @param gETH constant, ERC1155, all Geode Staking Derivatives.\\n * @param PORTAL constant, address of the PORTAL.\\n * @param POOL_ID constant, ID of the pool, also the token ID of represented gETH.\\n * @param EXIT_THRESHOLD variable, current exit threshold that is set by the owner.\\n * @param queue main variables related to Enqueue-Dequeue operations.\\n * @param requests an array of requests\\n * @param validators as pubkey being the key, the related data for the validators of the given pool. Updated on processValidators.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.StakeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct WithdrawalModuleStorage {\\n  IgETH gETH;\\n  address PORTAL;\\n  uint256 POOL_ID;\\n  uint256 EXIT_THRESHOLD;\\n  uint256 gatheredInfrastructureFees;\\n  Queue queue;\\n  Request[] requests;\\n  mapping(bytes => ValidatorData) validators;\\n}\\n\",\"keccak256\":\"0xd03e0163b0795cdce81ac61536c047c784e8c75bea7e7d0d34a964b744811a61\",\"license\":\"BUSL-1.1\"},\"contracts/modules/WithdrawalModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @param beaconBalance  Beacon Chain balance of the validator (current).\\n * @param withdrawnBalance  Representing any Ether sent from Beacon Chain to a withdrawal package (cumulative).\\n * @param poll size of the requests that specifically voted for given validator to exit. as in gETH.\\n **/\\nstruct ValidatorData {\\n  uint256 beaconBalance;\\n  uint256 withdrawnBalance;\\n  uint256 poll;\\n}\\n\\n/**\\n * @param owner the address that can dequeue the request. Ownership can be transferred.\\n * @param trigger cumulative sum of the previous requests, as in gETH.\\n * @param size size of the withdrawal request, as in gETH.\\n * @param fulfilled part of the 'size' that became available after being processed relative to the 'realizedPrice'. as in gETH.\\n * @param claimableEther current ETH amount that can be claimed by the Owner, increased in respect to 'fulfilled' and 'realizedPrice', decreased with dequeue.\\n **/\\nstruct Request {\\n  address owner;\\n  uint256 trigger;\\n  uint256 size;\\n  uint256 fulfilled;\\n  uint256 claimableEther;\\n}\\n\\n/**\\n * @param requested cumulative size of all requests, as in gETH.\\n * ex: --- ------ ------ - - --- : 20 : there are 6 requests totaling up to 20 gETH.\\n * @param realized cumulative size of gETH that is processed and can be used to fulfill Requests, as in gETH\\n * ex: ----- -- -- - ----- --    : 17 : there are 17 gETH, processed as a response to the withdrawn funds.\\n * @param fulfilled cumulative size of the fulfilled requests, claimed or claimable, as in gETH\\n * ex: --- ----xx ------ x - ooo : 14 : there are 15 gETH being used to fulfill requests,including one that is partially filled. 3 gETH is still claimable.\\n * @param realizedEtherBalance cumulative size of the withdrawn and realized balances. Note that, (realizedEtherBalance * realizedPrice != realized) as price changes constantly.\\n * @param fulfilledEtherBalance cumulative size of the fulfilled requests.\\n * @param realizedPrice current Price of the queue, used when fulfilling a Request, updated with processValidators.\\n * @param commonPoll current size of requests that did not vote on any specific validator, as in gETH.\\n **/\\nstruct Queue {\\n  uint256 requested;\\n  uint256 realized;\\n  uint256 realizedEtherBalance;\\n  uint256 realizedPrice;\\n  uint256 fulfilled;\\n  uint256 fulfilledEtherBalance;\\n  uint256 commonPoll;\\n}\\n\",\"keccak256\":\"0x3eda33c444a9331c757cd1cd1b069b398a9c8afa9bb1130f42908ff639ed988e\",\"license\":\"BUSL-1.1\"},\"contracts/packages/WithdrawalPackage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../globals/reserved_key_space.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"../interfaces/modules/IGeodeModule.sol\\\";\\nimport {IWithdrawalModule} from \\\"../interfaces/modules/IWithdrawalModule.sol\\\";\\nimport {IWithdrawalPackage} from \\\"../interfaces/packages/IWithdrawalPackage.sol\\\";\\nimport {IPortal} from \\\"../interfaces/IPortal.sol\\\";\\n// internal - structs\\nimport {GeodeModuleStorage} from \\\"../modules/GeodeModule/structs/storage.sol\\\";\\nimport {WithdrawalModuleStorage} from \\\"../modules/WithdrawalModule/structs/storage.sol\\\";\\n// internal - libraries\\nimport {WithdrawalModuleLib as WML} from \\\"../modules/WithdrawalModule/libs/WithdrawalModuleLib.sol\\\";\\n// internal - contracts\\nimport {GeodeModule} from \\\"../modules/GeodeModule/GeodeModule.sol\\\";\\nimport {WithdrawalModule} from \\\"../modules/WithdrawalModule/WithdrawalModule.sol\\\";\\n\\ncontract WithdrawalPackage is IWithdrawalPackage, GeodeModule, WithdrawalModule {\\n  using WML for WithdrawalModuleStorage;\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   * Following immutable parameters are set when the referance library implementation is deployed.\\n   * Making necessary data for initialization reachable for all instances of LP.\\n   */\\n  /// @notice gETH position\\n  address internal immutable gETHPos;\\n  /// @notice Portal position\\n  address internal immutable portalPos;\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == _getGeodeModuleStorage().SENATE, \\\"WP:sender not owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n  /**\\n   * @custom:oz-upgrades-unsafe-allow constructor\\n   *\\n   * @dev we don't want to provide these package-specific not-changing parameters\\n   * accross all instances of the packages.\\n   * So we will store them in the ref implementation contract of the package,\\n   * and fetch when needed on initialization.\\n   */\\n  constructor(address _gETHPos, address _portalPos) {\\n    require(_gETHPos != address(0), \\\"WP:_gETHPos cannot be zero\\\");\\n    require(_portalPos != address(0), \\\"WP:_portalPos cannot be zero\\\");\\n\\n    gETHPos = _gETHPos;\\n    portalPos = _portalPos;\\n\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev While 'data' parameter is not currently used it is a standarized approach on all\\n   * * GeodePackages have the same function signature on 'initialize'.\\n   */\\n  function initialize(\\n    uint256 poolId,\\n    address poolOwner,\\n    bytes calldata versionName,\\n    bytes calldata data\\n  ) public virtual override initializer {\\n    __WithdrawalPackage_init(poolId, poolOwner, versionName);\\n  }\\n\\n  function __WithdrawalPackage_init(\\n    uint256 poolId,\\n    address poolOwner,\\n    bytes calldata versionName\\n  ) internal onlyInitializing {\\n    __GeodeModule_init(\\n      portalPos,\\n      poolOwner,\\n      type(uint256).max,\\n      ID_TYPE.PACKAGE_WITHDRAWAL,\\n      versionName\\n    );\\n    __WithdrawalModule_init(gETHPos, portalPos, poolId);\\n    __WithdrawalPackage_init_unchained();\\n  }\\n\\n  function __WithdrawalPackage_init_unchained() internal onlyInitializing {}\\n\\n  function getPoolId() public view override returns (uint256) {\\n    return _getWithdrawalModuleStorage().POOL_ID;\\n  }\\n\\n  /**\\n   * @dev GeodeModule override\\n   */\\n  function getProposedVersion() public view virtual override returns (uint256) {\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n\\n    return IPortal(GMStorage.GOVERNANCE).getPackageVersion(GMStorage.PACKAGE_TYPE);\\n  }\\n\\n  /**\\n   * @dev GeodeModule override\\n   */\\n  function isolationMode()\\n    external\\n    view\\n    virtual\\n    override(GeodeModule, IGeodeModule)\\n    returns (bool)\\n  {\\n    if (paused()) {\\n      return true;\\n    }\\n\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n\\n    if (\\n      GMStorage.CONTRACT_VERSION !=\\n      IPortal(GMStorage.GOVERNANCE).getPackageVersion(GMStorage.PACKAGE_TYPE)\\n    ) {\\n      return true;\\n    }\\n\\n    if (GMStorage.APPROVED_UPGRADE != ERC1967Utils.getImplementation()) {\\n      return true;\\n    }\\n\\n    if (\\n      IPortal(GMStorage.GOVERNANCE).readAddress(getPoolId(), rks.CONTROLLER) != GMStorage.SENATE\\n    ) {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @custom:section                           ** ADMIN FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** UPGRADABILITY FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev IGeodePackage override\\n   */\\n  function pullUpgrade() external virtual override onlyOwner {\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n    IPortal Portal = IPortal(GMStorage.GOVERNANCE);\\n\\n    require(!Portal.isolationMode(), \\\"WP:Portal is isolated\\\");\\n    require(\\n      GMStorage.CONTRACT_VERSION != Portal.getPackageVersion(GMStorage.PACKAGE_TYPE),\\n      \\\"WP:no upgrades\\\"\\n    );\\n\\n    uint256 id = Portal.pushUpgrade(GMStorage.PACKAGE_TYPE);\\n    approveProposal(id);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** PAUSABILITY FUNCTIONS **\\n   */\\n\\n  /**\\n   * @notice pausing the contract activates the isolationMode\\n   */\\n  function pause() external virtual override(WithdrawalModule, IWithdrawalModule) onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice unpausing the contract deactivates the isolationMode\\n   */\\n  function unpause() external virtual override(WithdrawalModule, IWithdrawalModule) onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** WITHDRAWAL QUEUE **\\n   *\\n   * @dev WM override\\n   */\\n  function setExitThreshold(\\n    uint256 newThreshold\\n  ) external virtual override(WithdrawalModule, IWithdrawalModule) onlyOwner {\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    $.setExitThreshold(newThreshold);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** INFRASTRUCTURE FEE **\\n   *\\n   * @dev WM override\\n   */\\n  function claimInfrastructureFees(\\n    address receiver\\n  ) external virtual override(WithdrawalModule, IWithdrawalModule) returns (bool success) {\\n    require(msg.sender == IPortal(_getGeodeModuleStorage().GOVERNANCE).getGovernance());\\n\\n    WithdrawalModuleStorage storage $ = _getWithdrawalModuleStorage();\\n    uint256 claimable = $.gatheredInfrastructureFees;\\n\\n    (success, ) = payable(receiver).call{value: claimable}(\\\"\\\");\\n    require(success, \\\"WP:Failed to send ETH\\\");\\n  }\\n\\n  /**\\n   * @notice fallback functions: receive\\n   */\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb8d2e194da87e5ced2e8e63c2ef5f4e7cffd5697efeb3c36810c72c895dfbd69\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080523480156200001557600080fd5b506040516200439d3803806200439d8339810160408190526200003891620001e2565b6001600160a01b038216620000945760405162461bcd60e51b815260206004820152601a60248201527f57503a5f67455448506f732063616e6e6f74206265207a65726f00000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000ec5760405162461bcd60e51b815260206004820152601c60248201527f57503a5f706f7274616c506f732063616e6e6f74206265207a65726f0000000060448201526064016200008b565b6001600160a01b0380831660a052811660c0526200010962000111565b50506200021a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620001625760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620001c25780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b80516001600160a01b0381168114620001dd57600080fd5b919050565b60008060408385031215620001f657600080fd5b6200020183620001c5565b91506200021160208401620001c5565b90509250929050565b60805160a05160c05161413e6200025f60003960008181612635015261268801526000612667015260008181612207015281816122300152612449015261413e6000f3fe6080604052600436106102e85760003560e01c80638650c07211610190578063bf211ed1116100dc578063dca1086111610095578063e72b1d6d1161006f578063e72b1d6d14610a06578063e768887e14610a26578063e78e839714610a46578063f23a6e6114610a6657600080fd5b8063dca10861146109a6578063e02a5208146109c6578063e68e1218146109e657600080fd5b8063bf211ed114610855578063c58343ef1461089d578063c7f758a8146108ef578063d2583aee1461091c578063d99a16c514610966578063dab840c71461098657600080fd5b8063ac144d8b11610149578063ad4ac4c411610123578063ad4ac4c41461078d578063ad8655cb146107db578063aec98863146107fb578063bc197c811461081057600080fd5b8063ac144d8b1461070f578063ac9650d81461072f578063ad3cb1cc1461075c57600080fd5b80638650c072146106565780638794fabc1461066b5780638aa104351461068b57806398951b56146106a05780639934b281146106cf57806399ac48ba146106ef57600080fd5b806356a72dbf1161024f578063722679541161020857806377a3a813116101e257806377a3a813146105c65780637aed42ce146106015780637e5358d1146106215780638456cb591461064157600080fd5b80637226795414610564578063745653de14610591578063753b8807146105a657600080fd5b806356a72dbf146104855780635731bc1d146104a55780635a34bb15146104c55780635c975abb146104e55780635d9e085d1461050a5780636d07e4041461054457600080fd5b8063419754c5116102a1578063419754c5146103d05780634b75642f146103f05780634f1ef286146104105780634f5141e91461042357806352d1902d146104505780635329512b1461046557600080fd5b806301ffc9a7146102f45780631da7159114610329578063289b3c0d1461035757806338fff2d0146103845780633b8ba862146103995780633f4ba83a146103b957600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613072565b610a92565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b5061034961034436600461309c565b610ac9565b604051908152602001610320565b34801561036357600080fd5b5061036c610adc565b6040516001600160a01b039091168152602001610320565b34801561039057600080fd5b50610349610af7565b3480156103a557600080fd5b506103496103b436600461311b565b610b0a565b3480156103c557600080fd5b506103ce610bb5565b005b3480156103dc57600080fd5b506103146103eb36600461317e565b610bfb565b3480156103fc57600080fd5b506103ce61040b36600461319b565b610d41565b6103ce61041e366004613277565b610df0565b34801561042f57600080fd5b5061044361043e36600461330a565b610e0f565b604051610320919061338d565b34801561045c57600080fd5b50610349610ea4565b34801561047157600080fd5b5061036c6104803660046133d1565b610ec1565b34801561049157600080fd5b506103496104a036600461309c565b610ee7565b3480156104b157600080fd5b506103ce6104c03660046133fd565b610f0b565b3480156104d157600080fd5b506103496104e0366004613453565b610f8b565b3480156104f157600080fd5b506000805160206140e98339815191525460ff16610314565b34801561051657600080fd5b5061034961052536600461319b565b60009081526000805160206140a9833981519152602052604090205490565b34801561055057600080fd5b506103ce61055f36600461349e565b610fc2565b34801561057057600080fd5b5061058461057f36600461309c565b61101d565b604051610320919061351e565b34801561059d57600080fd5b50610349611039565b3480156105b257600080fd5b506103ce6105c136600461319b565b6110ba565b3480156105d257600080fd5b506105e66105e1366004613531565b611106565b60408051938452602084019290925290820152606001610320565b34801561060d57600080fd5b5061031461061c366004613531565b611192565b34801561062d57600080fd5b5061034961063c36600461319b565b61121c565b34801561064d57600080fd5b506103ce6112bc565b34801561066257600080fd5b506103146112f7565b34801561067757600080fd5b506103ce610686366004613572565b611482565b34801561069757600080fd5b506103496115fb565b3480156106ac57600080fd5b506106c06106bb36600461319b565b611610565b6040516103209392919061366e565b3480156106db57600080fd5b506103ce6106ea366004613695565b6116e0565b3480156106fb57600080fd5b5061036c61070a36600461309c565b6117f6565b34801561071b57600080fd5b5061034961072a366004613720565b611812565b34801561073b57600080fd5b5061074f61074a36600461377e565b6118aa565b60405161032091906137b3565b34801561076857600080fd5b50610584604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561079957600080fd5b506107a2611993565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610320565b3480156107e757600080fd5b506103ce6107f636600461317e565b6119da565b34801561080757600080fd5b506103ce611a2e565b34801561081c57600080fd5b5061083c61082b36600461389e565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610320565b34801561086157600080fd5b5061086a611c4c565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a001610320565b3480156108a957600080fd5b506108bd6108b836600461319b565b611c92565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a001610320565b3480156108fb57600080fd5b5061090f61090a36600461319b565b611d88565b604051610320919061394b565b34801561092857600080fd5b50610931611e48565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610320565b34801561097257600080fd5b506103ce61098136600461349e565b611e96565b34801561099257600080fd5b506103ce6109a136600461317e565b611f22565b3480156109b257600080fd5b506103ce6109c136600461377e565b611f76565b3480156109d257600080fd5b506103496109e136600461309c565b611fbe565b3480156109f257600080fd5b50610349610a01366004613531565b612001565b348015610a1257600080fd5b50610349610a213660046133d1565b612093565b348015610a3257600080fd5b50610584610a413660046133d1565b6120b0565b348015610a5257600080fd5b506103ce610a6136600461349e565b6120cd565b348015610a7257600080fd5b5061083c610a81366004613999565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b1480610ac357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610ad58383612128565b9392505050565b600080610ae7612154565b546001600160a01b031692915050565b6000610b01612178565b60020154905090565b600080610b15612154565b6040516318ffae5d60e21b81529091507387828ff83A8B257D544c06fe64B6838DD2Fb0ED1906363feb97490610b699084906000805160206140a9833981519152908c908c908c908c908c90600401613a2a565b602060405180830381865af4158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190613a72565b979650505050505050565b610bbd612154565b600101546001600160a01b03163314610bf15760405162461bcd60e51b8152600401610be890613a8b565b60405180910390fd5b610bf961219c565b565b6000610c05612154565b546040805163289b3c0d60e01b815290516001600160a01b039092169163289b3c0d916004808201926020929091908290030181865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c719190613ab8565b6001600160a01b0316336001600160a01b031614610c8e57600080fd5b6000610c98612178565b6004810154604051919250906001600160a01b038516908290600081818185875af1925050503d8060008114610cea576040519150601f19603f3d011682016040523d82523d6000602084013e610cef565b606091505b50508093505082610d3a5760405162461bcd60e51b81526020600482015260156024820152740aea0748cc2d2d8cac840e8de40e6cadcc8408aa89605b1b6044820152606401610be8565b5050919050565b610d49612154565b600101546001600160a01b03163314610d745760405162461bcd60e51b8152600401610be890613a8b565b6000610d7e612178565b6040516357babf8b60e01b81526004810182905260248101849052909150737224F427fA92CE4FD8d0058C354634217438b34c906357babf8b906044015b60006040518083038186803b158015610dd457600080fd5b505af4158015610de8573d6000803e3d6000fd5b505050505050565b610df86121fc565b610e018261228a565b610e0b828261237c565b5050565b60606000610e1b612178565b604051630b4d65a760e41b8152909150737224F427fA92CE4FD8d0058C354634217438b34c9063b4d65a7090610e5f9084908b908b908b908b908b90600401613b98565b600060405180830381865af4158015610e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610baa9190810190613be1565b6000610eae61243e565b506000805160206140c983398151915290565b60006000805160206140a9833981519152610ede81868686612487565b95945050505050565b60006000805160206140a9833981519152610f038185856124c5565b949350505050565b6000610f15612178565b604051633da28bc160e11b8152909150737224F427fA92CE4FD8d0058C354634217438b34c90637b45178290610f55908490889088908890600401613c66565b60006040518083038186803b158015610f6d57600080fd5b505af4158015610f81573d6000803e3d6000fd5b5050505050505050565b6000838383604051602001610fa293929190613c99565b60408051601f198184030181529190528051602090910120949350505050565b6040516330b2175760e11b81526000805160206140a98339815191526004820152602481018390526001600160a01b03821660448201527387828ff83A8B257D544c06fe64B6838DD2Fb0ED1906361642eae90606401610dbc565b60606000805160206140a9833981519152610f038185856124ef565b600080611044612154565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190613a72565b91505090565b60006110c4612178565b6040516311aeabff60e31b81526004810182905260248101849052909150737224F427fA92CE4FD8d0058C354634217438b34c90638d755ff890604401610dbc565b600080600080611114612178565b905080600d01868660405161112a929190613cbd565b908152604051908190036020018120549450600d82019061114e9088908890613cbd565b908152602001604051809103902060010154925080600d018686604051611176929190613cbd565b9081526020016040518091039020600201549150509250925092565b60008061119d612178565b6040516345bece4760e11b8152909150737224F427fA92CE4FD8d0058C354634217438b34c90638b7d9c8e906111db90849088908890600401613ccd565b602060405180830381865af41580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f039190613ce7565b600080611227612178565b6006810154600982015460405163928b8e4d60e01b8152600481018490526024810187905260448101929092526064820152909150737224F427fA92CE4FD8d0058C354634217438b34c9063928b8e4d90608401602060405180830381865af4158015611298573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190613a72565b6112c4612154565b600101546001600160a01b031633146112ef5760405162461bcd60e51b8152600401610be890613a8b565b610bf96125a1565b60006113126000805160206140e98339815191525460ff1690565b1561131d5750600190565b6000611327612154565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015611373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113979190613a72565b8160050154146113a957600191505090565b6113b16125ea565b60028201546001600160a01b039081169116146113d057600191505090565b600181015481546001600160a01b0391821691166399ac48ba6113f1610af7565b6040516001600160e01b031960e084901b16815260048101919091526921a7a72a2927a62622a960b11b6024820152604401602060405180830381865afa158015611440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114649190613ab8565b6001600160a01b03161461147a57600191505090565b600091505090565b600061148c612178565b60018101546002820154604051630300147560e11b815260048101919091529192506001600160a01b03169063060028ea90602401602060405180830381865afa1580156114de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115029190613ce7565b6115745760018101546002820154604051637e1ece9f60e01b81526001600160a01b0390921691637e1ece9f9161154191889088908890600401613d09565b600060405180830381600087803b15801561155b57600080fd5b505af115801561156f573d6000803e3d6000fd5b505050505b80737224F427fA92CE4FD8d0058C354634217438b34c6311c9522c90918e8e8e8e8e8e8e8e6040518a63ffffffff1660e01b81526004016115bd99989796959493929190613d29565b60006040518083038186803b1580156115d557600080fd5b505af41580156115e9573d6000803e3d6000fd5b50505050505050505050505050505050565b600080611606612154565b6005015492915050565b6000806060600061161f612154565b90507387828ff83A8B257D544c06fe64B6838DD2Fb0ED1636dc129ae826000805160206140a98339815191526040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af4158015611693573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bb9190810190613e57565b6004840154929650909450925083036116d8576116d88486612606565b509193909250565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156117255750825b90506000826001600160401b031660011480156117415750303b155b90508115801561174f575080155b1561176d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561179757845460ff60401b1916600160401b1785555b6117a38b8b8b8b612628565b83156117e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b60006000805160206140a9833981519152610f038185856126bb565b60008061181d612178565b60405163020ec69760e61b8152909150737224F427fA92CE4FD8d0058C354634217438b34c906383b1a5c09061185f9084908a908a908a908a90600401613eb0565b602060405180830381865af415801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a09190613a72565b9695505050505050565b6060816001600160401b038111156118c4576118c46131b4565b6040519080825280602002602001820160405280156118f757816020015b60608152602001906001900390816118e25790505b50905060005b8281101561198c576119673085858481811061191b5761191b613eea565b905060200281019061192d9190613f00565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126ef92505050565b82828151811061197957611979613eea565b60209081029190910101526001016118fd565b5092915050565b6000806000806000806119a4612154565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b60006119e4612154565b6040516361ac0f7160e11b8152600481018290526001600160a01b03841660248201529091507387828ff83A8B257D544c06fe64B6838DD2Fb0ED19063c3581ee290604401610dbc565b611a36612154565b600101546001600160a01b03163314611a615760405162461bcd60e51b8152600401610be890613a8b565b6000611a6b612154565b805460408051634328603960e11b815290519293506001600160a01b03909116918291638650c0729160048083019260209291908290030181865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613ce7565b15611b215760405162461bcd60e51b815260206004820152601560248201527415d40e941bdc9d185b081a5cc81a5cdbdb185d1959605a1b6044820152606401610be8565b600482810154604051630eca989d60e11b8152918201526001600160a01b03821690631d95313a90602401602060405180830381865afa158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d9190613a72565b826005015403611bd05760405162461bcd60e51b815260206004820152600e60248201526d57503a6e6f20757067726164657360901b6044820152606401610be8565b60048281015460405163e3099e0960e01b8152918201526000906001600160a01b0383169063e3099e09906024016020604051808303816000875af1158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190613a72565b9050610de881611610565b600080600080600080611c5d612178565b80546001820154600283015460038401546004909401546001600160a01b039384169b92909316995097509195509350915050565b600080600080600080611ca3612178565b905080600c018781548110611cba57611cba613eea565b6000918252602090912060059091020154600c820180546001600160a01b0390921697509088908110611cef57611cef613eea565b906000526020600020906005020160010154945080600c018781548110611d1857611d18613eea565b906000526020600020906005020160020154935080600c018781548110611d4157611d41613eea565b906000526020600020906005020160030154925080600c018781548110611d6a57611d6a613eea565b90600052602060002090600502016004015491505091939590929450565b611dbc604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000611dc6612154565b6040516337a3804160e11b815260048101829052602481018590529091507387828ff83A8B257D544c06fe64B6838DD2Fb0ED190636f47008290604401600060405180830381865af4158015611e20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ad59190810190613f46565b600080600080600080600080611e5c612178565b60058101546006820154600783015460088401546009850154600a860154600b90960154949e939d50919b50995097509195509350915050565b6000611ea0612178565b604051630222d4bb60e11b815260048101829052602481018590526001600160a01b0384166044820152909150737224F427fA92CE4FD8d0058C354634217438b34c90630445a976906064015b60006040518083038186803b158015611f0557600080fd5b505af4158015611f19573d6000803e3d6000fd5b50505050505050565b6000611f2c612154565b6040516307c0451b60e11b8152600481018290526001600160a01b03841660248201529091507387828ff83A8B257D544c06fe64B6838DD2Fb0ED190630f808a3690604401610dbc565b6000611f80612178565b604051634699d87760e11b8152909150737224F427fA92CE4FD8d0058C354634217438b34c90638d33b0ee90611eed90849087908790600401613ff2565b60008281526000805160206140a9833981519152602081905260408220805484908110611fed57611fed613eea565b906000526020600020015491505092915050565b60008061200c612178565b604051631420eb4b60e21b8152909150737224F427fA92CE4FD8d0058C354634217438b34c90635083ad2c9061204a90849088908890600401613ccd565b6040805180830381865af4158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a919061400c565b50949350505050565b60006000805160206140a9833981519152610ede8186868661275c565b60606000805160206140a9833981519152610ede8186868661278b565b60006120d7612178565b6040516393c8c5e960e01b815260048101829052602481018590526001600160a01b0384166044820152909150737224F427fA92CE4FD8d0058C354634217438b34c906393c8c5e990606401611eed565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b7f50605cc6f5170f0cdbb610edd2214831ea96f61cd1eba92cf58939f65736af0090565b6121a4612842565b6000805160206140e9833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061226c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122606125ea565b6001600160a01b031614155b15610bf95760405163703e46dd60e11b815260040160405180910390fd5b6000612294612154565b90507387828ff83A8B257D544c06fe64B6838DD2Fb0ED163b57e6b0b82846122ba6125ea565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af415801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190613ce7565b610e0b5760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401610be8565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156123d6575060408051601f3d908101601f191682019092526123d391810190613a72565b60015b6123fe57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610be8565b6000805160206140c9833981519152811461242f57604051632a87526960e21b815260048101829052602401610be8565b6124398383612872565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bf95760405163703e46dd60e11b815260040160405180910390fd5b60008460030160006124a28461249d8888612128565b612128565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006124d78585612128565b81526020019081526020016000205490509392505050565b60608360020160006125018585612128565b8152602001908152602001600020805461251a90614030565b80601f016020809104026020016040519081016040528092919081815260200182805461254690614030565b80156125935780601f1061256857610100808354040283529160200191612593565b820191906000526020600020905b81548152906001019060200180831161257657829003601f168201915b505050505090509392505050565b6125a96128c8565b6000805160206140e9833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336121de565b6000805160206140c9833981519152546001600160a01b031690565b61261f8260405180602001604052806000815250610df0565b610e0b816128f9565b612630612944565b6126627f00000000000000000000000000000000000000000000000000000000000000008460001961271b868661298d565b6126ad7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866129b3565b6126b56129de565b50505050565b60008360030160006126cd8585612128565b81526020810191909152604001600020546001600160a01b0316949350505050565b6060600080846001600160a01b03168460405161270c919061406a565b600060405180830381855af49150503d8060008114612747576040519150601f19603f3d011682016040523d82523d6000602084013e61274c565b606091505b5091509150610ede8583836129e6565b60008460010160006127728461249d8888612128565b8152602001908152602001600020549050949350505050565b60608460020160006127a18461249d8888612128565b815260200190815260200160002080546127ba90614030565b80601f01602080910402602001604051908101604052809291908181526020018280546127e690614030565b80156128335780601f1061280857610100808354040283529160200191612833565b820191906000526020600020905b81548152906001019060200180831161281657829003601f168201915b50505050509050949350505050565b6000805160206140e98339815191525460ff16610bf957604051638dfc202b60e01b815260040160405180910390fd5b61287b82612a3b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156128c05761243982826126ef565b610e0b612aa0565b6000805160206140e98339815191525460ff1615610bf95760405163d93c066560e01b815260040160405180910390fd5b6000612903612154565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a15050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610bf957604051631afcd79f60e31b815260040160405180910390fd5b612995612944565b61299d6129de565b6129a56129de565b610de8868686868686612abf565b6129bb612944565b6129c3612e4b565b6129cb612e5b565b6129d36129de565b612439838383612e6b565b610bf9612944565b6060826129fb576129f682612fc3565b610ad5565b8151158015612a1257506001600160a01b0384163b155b1561198c57604051639996b31560e01b81526001600160a01b0385166004820152602401610be8565b806001600160a01b03163b600003612a7157604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610be8565b6000805160206140c983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415610bf95760405163b398979f60e01b815260040160405180910390fd5b612ac7612944565b6001600160a01b038616612b1d5760405162461bcd60e51b815260206004820152601c60248201527f474d3a676f7665726e616e63652063616e6e6f74206265207a65726f000000006044820152606401610be8565b6001600160a01b038516612b735760405162461bcd60e51b815260206004820152601860248201527f474d3a73656e6174652063616e6e6f74206265207a65726f00000000000000006044820152606401610be8565b428411612bb85760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401610be8565b82600003612c085760405162461bcd60e51b815260206004820152601d60248201527f474d3a7061636b616765547970652063616e6e6f74206265207a65726f0000006044820152606401610be8565b6000819003612c645760405162461bcd60e51b815260206004820152602260248201527f474d3a696e697456657273696f6e4e616d652063616e6e6f7420626520656d70604482015261747960f01b6064820152608401610be8565b6000612c6e612154565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000805160206140a983398151915260007387828ff83A8B257D544c06fe64B6838DD2Fb0ED16363feb9748484612cd26125ea565b8a8a8a620151806040518863ffffffff1660e01b8152600401612cfb9796959493929190613a2a565b602060405180830381865af4158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c9190613a72565b6040516336e094d760e11b81526004810185905260248101849052604481018290529091507387828ff83A8B257D544c06fe64B6838DD2Fb0ED190636dc129ae90606401600060405180830381865af4158015612d9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dc59190810190613e57565b505050612e13612e0e86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506004860154612fef565b6128f9565b505080546001600160a01b039788166001600160a01b0319918216178255600190910180549690971695169490941790945550505050565b612e53612944565b610bf9613023565b612e63612944565b610bf9613051565b612e73612944565b6001600160a01b038316612ec95760405162461bcd60e51b815260206004820152601e60248201527f574d3a674554482063616e6e6f74206265207a65726f206164647265737300006044820152606401610be8565b6001600160a01b038216612f1f5760405162461bcd60e51b815260206004820181905260248201527f574d3a706f7274616c2063616e6e6f74206265207a65726f20616464726573736044820152606401610be8565b6000612f29612178565b80546001600160a01b03199081166001600160a01b038781169182178455600180850180549094169188169190911790925560028301859055640165a0bc006003840155604051630492f6e160e01b8152600481018690526024810192909252919250630492f6e190604401600060405180830381600087803b158015612faf57600080fd5b505af1158015610f81573d6000803e3d6000fd5b805115612fd35780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60008282604051602001613004929190614086565b60408051601f1981840301815291905280516020909101209392505050565b61302b612944565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b613059612944565b6000805160206140e9833981519152805460ff19169055565b60006020828403121561308457600080fd5b81356001600160e01b031981168114610ad557600080fd5b600080604083850312156130af57600080fd5b50508035926020909101359150565b6001600160a01b0381168114612fec57600080fd5b60008083601f8401126130e557600080fd5b5081356001600160401b038111156130fc57600080fd5b60208301915083602082850101111561311457600080fd5b9250929050565b60008060008060006080868803121561313357600080fd5b853561313e816130be565b94506020860135935060408601356001600160401b0381111561316057600080fd5b61316c888289016130d3565b96999598509660600135949350505050565b60006020828403121561319057600080fd5b8135610ad5816130be565b6000602082840312156131ad57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156131f2576131f26131b4565b604052919050565b60006001600160401b03821115613213576132136131b4565b50601f01601f191660200190565b600082601f83011261323257600080fd5b8135613245613240826131fa565b6131ca565b81815284602083860101111561325a57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561328a57600080fd5b8235613295816130be565b915060208301356001600160401b038111156132b057600080fd5b6132bc85828601613221565b9150509250929050565b60008083601f8401126132d857600080fd5b5081356001600160401b038111156132ef57600080fd5b6020830191508360208260051b850101111561311457600080fd5b60008060008060006060868803121561332257600080fd5b85356001600160401b038082111561333957600080fd5b61334589838a016132c6565b9097509550602088013591508082111561335e57600080fd5b5061336b888289016132c6565b909450925050604086013561337f816130be565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156133c5578351835292840192918401916001016133a9565b50909695505050505050565b6000806000606084860312156133e657600080fd5b505081359360208301359350604090920135919050565b60008060006040848603121561341257600080fd5b83356001600160401b0381111561342857600080fd5b613434868287016132c6565b9094509250506020840135613448816130be565b809150509250925092565b60008060006040848603121561346857600080fd5b83356001600160401b0381111561347e57600080fd5b61348a868287016130d3565b909790965060209590950135949350505050565b600080604083850312156134b157600080fd5b8235915060208301356134c3816130be565b809150509250929050565b60005b838110156134e95781810151838201526020016134d1565b50506000910152565b6000815180845261350a8160208601602086016134ce565b601f01601f19169290920160200192915050565b602081526000610ad560208301846134f2565b6000806020838503121561354457600080fd5b82356001600160401b0381111561355a57600080fd5b613566858286016130d3565b90969095509350505050565b600080600080600080600080600080600060c08c8e03121561359357600080fd5b6001600160401b03808d3511156135a957600080fd5b6135b68e8e358f016132c6565b909c509a5060208d01358110156135cc57600080fd5b6135dc8e60208f01358f016132c6565b909a50985060408d01358110156135f257600080fd5b6136028e60408f01358f016132c6565b909850965060608d013581101561361857600080fd5b6136288e60608f01358f016132c6565b909650945060808d0135935060a08d013581101561364557600080fd5b506136568d60a08e01358e016132c6565b81935080925050509295989b509295989b9093969950565b60018060a01b0384168152826020820152606060408201526000610ede60608301846134f2565b600080600080600080608087890312156136ae57600080fd5b8635955060208701356136c0816130be565b945060408701356001600160401b03808211156136dc57600080fd5b6136e88a838b016130d3565b9096509450606089013591508082111561370157600080fd5b5061370e89828a016130d3565b979a9699509497509295939492505050565b6000806000806060858703121561373657600080fd5b8435935060208501356001600160401b0381111561375357600080fd5b61375f878288016130d3565b9094509250506040850135613773816130be565b939692955090935050565b6000806020838503121561379157600080fd5b82356001600160401b038111156137a757600080fd5b613566858286016132c6565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561380857603f198886030184526137f68583516134f2565b945092850192908501906001016137da565b5092979650505050505050565b60006001600160401b0382111561382e5761382e6131b4565b5060051b60200190565b600082601f83011261384957600080fd5b8135602061385961324083613815565b82815260059290921b8401810191818101908684111561387857600080fd5b8286015b84811015613893578035835291830191830161387c565b509695505050505050565b600080600080600060a086880312156138b657600080fd5b85356138c1816130be565b945060208601356138d1816130be565b935060408601356001600160401b03808211156138ed57600080fd5b6138f989838a01613838565b9450606088013591508082111561390f57600080fd5b61391b89838a01613838565b9350608088013591508082111561393157600080fd5b5061393e88828901613221565b9150509295509295909350565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015261398360a08401826134f2565b9050606084015160808401528091505092915050565b600080600080600060a086880312156139b157600080fd5b85356139bc816130be565b945060208601356139cc816130be565b9350604086013592506060860135915060808601356001600160401b038111156139f557600080fd5b61393e88828901613221565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815286602082015260018060a01b038616604082015284606082015260c060808201526000613a5e60c083018587613a01565b90508260a083015298975050505050505050565b600060208284031215613a8457600080fd5b5051919050565b6020808252601390820152722ba81d39b2b73232b9103737ba1037bbb732b960691b604082015260600190565b600060208284031215613aca57600080fd5b8151610ad5816130be565b81835260006001600160fb1b03831115613aee57600080fd5b8260051b80836020870137939093016020019392505050565b81835260006020808501808196508560051b810191508460005b87811015613b8b5782840389528135601e19883603018112613b4257600080fd5b870185810190356001600160401b03811115613b5d57600080fd5b803603821315613b6c57600080fd5b613b77868284613a01565b9a87019a9550505090840190600101613b21565b5091979650505050505050565b868152608060208201526000613bb2608083018789613ad5565b8281036040840152613bc5818688613b07565b91505060018060a01b0383166060830152979650505050505050565b60006020808385031215613bf457600080fd5b82516001600160401b03811115613c0a57600080fd5b8301601f81018513613c1b57600080fd5b8051613c2961324082613815565b81815260059190911b82018301908381019087831115613c4857600080fd5b928401925b82841015610baa57835182529284019290840190613c4d565b848152606060208201526000613c80606083018587613ad5565b905060018060a01b038316604083015295945050505050565b604081526000613cad604083018587613a01565b9050826020830152949350505050565b8183823760009101908152919050565b838152604060208201526000610ede604083018486613a01565b600060208284031215613cf957600080fd5b81518015158114610ad557600080fd5b8481528360208201526060604082015260006118a0606083018486613ad5565b8981526000602060a081840152613d4460a084018b8d613b07565b8381036040850152613d57818a8c613ad5565b90508381036060850152613d6c81888a613ad5565b84810360808601528581529050818101600586811b830184018860005b89811015613dfa57858303601f190185528135368c9003601e19018112613daf57600080fd5b8b0187810190356001600160401b03811115613dca57600080fd5b80861b3603821315613ddb57600080fd5b613de6858284613ad5565b968901969450505090860190600101613d89565b505080955050505050509a9950505050505050505050565b600082601f830112613e2357600080fd5b8151613e31613240826131fa565b818152846020838601011115613e4657600080fd5b610f038260208301602087016134ce565b600080600060608486031215613e6c57600080fd5b8351613e77816130be565b6020850151604086015191945092506001600160401b03811115613e9a57600080fd5b613ea686828701613e12565b9150509250925092565b858152846020820152608060408201526000613ed0608083018587613a01565b905060018060a01b03831660608301529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112613f1757600080fd5b8301803591506001600160401b03821115613f3157600080fd5b60200191503681900382131561311457600080fd5b600060208284031215613f5857600080fd5b81516001600160401b0380821115613f6f57600080fd5b9083019060808286031215613f8357600080fd5b604051608081018181108382111715613f9e57613f9e6131b4565b6040528251613fac816130be565b815260208381015190820152604083015182811115613fca57600080fd5b613fd687828601613e12565b6040830152506060830151606082015280935050505092915050565b838152604060208201526000610ede604083018486613ad5565b6000806040838503121561401f57600080fd5b505080516020909101519092909150565b600181811c9082168061404457607f821691505b60208210810361406457634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161407c8184602087016134ce565b9190910192915050565b60408152600061409960408301856134f2565b9050826020830152939250505056fea3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c00360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122010f211f6cf7ffc7524dec2da4c36b578d0b849a4a992aa8087b8058940a38e7764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102e85760003560e01c80638650c07211610190578063bf211ed1116100dc578063dca1086111610095578063e72b1d6d1161006f578063e72b1d6d14610a06578063e768887e14610a26578063e78e839714610a46578063f23a6e6114610a6657600080fd5b8063dca10861146109a6578063e02a5208146109c6578063e68e1218146109e657600080fd5b8063bf211ed114610855578063c58343ef1461089d578063c7f758a8146108ef578063d2583aee1461091c578063d99a16c514610966578063dab840c71461098657600080fd5b8063ac144d8b11610149578063ad4ac4c411610123578063ad4ac4c41461078d578063ad8655cb146107db578063aec98863146107fb578063bc197c811461081057600080fd5b8063ac144d8b1461070f578063ac9650d81461072f578063ad3cb1cc1461075c57600080fd5b80638650c072146106565780638794fabc1461066b5780638aa104351461068b57806398951b56146106a05780639934b281146106cf57806399ac48ba146106ef57600080fd5b806356a72dbf1161024f578063722679541161020857806377a3a813116101e257806377a3a813146105c65780637aed42ce146106015780637e5358d1146106215780638456cb591461064157600080fd5b80637226795414610564578063745653de14610591578063753b8807146105a657600080fd5b806356a72dbf146104855780635731bc1d146104a55780635a34bb15146104c55780635c975abb146104e55780635d9e085d1461050a5780636d07e4041461054457600080fd5b8063419754c5116102a1578063419754c5146103d05780634b75642f146103f05780634f1ef286146104105780634f5141e91461042357806352d1902d146104505780635329512b1461046557600080fd5b806301ffc9a7146102f45780631da7159114610329578063289b3c0d1461035757806338fff2d0146103845780633b8ba862146103995780633f4ba83a146103b957600080fd5b366102ef57005b600080fd5b34801561030057600080fd5b5061031461030f366004613072565b610a92565b60405190151581526020015b60405180910390f35b34801561033557600080fd5b5061034961034436600461309c565b610ac9565b604051908152602001610320565b34801561036357600080fd5b5061036c610adc565b6040516001600160a01b039091168152602001610320565b34801561039057600080fd5b50610349610af7565b3480156103a557600080fd5b506103496103b436600461311b565b610b0a565b3480156103c557600080fd5b506103ce610bb5565b005b3480156103dc57600080fd5b506103146103eb36600461317e565b610bfb565b3480156103fc57600080fd5b506103ce61040b36600461319b565b610d41565b6103ce61041e366004613277565b610df0565b34801561042f57600080fd5b5061044361043e36600461330a565b610e0f565b604051610320919061338d565b34801561045c57600080fd5b50610349610ea4565b34801561047157600080fd5b5061036c6104803660046133d1565b610ec1565b34801561049157600080fd5b506103496104a036600461309c565b610ee7565b3480156104b157600080fd5b506103ce6104c03660046133fd565b610f0b565b3480156104d157600080fd5b506103496104e0366004613453565b610f8b565b3480156104f157600080fd5b506000805160206140e98339815191525460ff16610314565b34801561051657600080fd5b5061034961052536600461319b565b60009081526000805160206140a9833981519152602052604090205490565b34801561055057600080fd5b506103ce61055f36600461349e565b610fc2565b34801561057057600080fd5b5061058461057f36600461309c565b61101d565b604051610320919061351e565b34801561059d57600080fd5b50610349611039565b3480156105b257600080fd5b506103ce6105c136600461319b565b6110ba565b3480156105d257600080fd5b506105e66105e1366004613531565b611106565b60408051938452602084019290925290820152606001610320565b34801561060d57600080fd5b5061031461061c366004613531565b611192565b34801561062d57600080fd5b5061034961063c36600461319b565b61121c565b34801561064d57600080fd5b506103ce6112bc565b34801561066257600080fd5b506103146112f7565b34801561067757600080fd5b506103ce610686366004613572565b611482565b34801561069757600080fd5b506103496115fb565b3480156106ac57600080fd5b506106c06106bb36600461319b565b611610565b6040516103209392919061366e565b3480156106db57600080fd5b506103ce6106ea366004613695565b6116e0565b3480156106fb57600080fd5b5061036c61070a36600461309c565b6117f6565b34801561071b57600080fd5b5061034961072a366004613720565b611812565b34801561073b57600080fd5b5061074f61074a36600461377e565b6118aa565b60405161032091906137b3565b34801561076857600080fd5b50610584604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561079957600080fd5b506107a2611993565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610320565b3480156107e757600080fd5b506103ce6107f636600461317e565b6119da565b34801561080757600080fd5b506103ce611a2e565b34801561081c57600080fd5b5061083c61082b36600461389e565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610320565b34801561086157600080fd5b5061086a611c4c565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a001610320565b3480156108a957600080fd5b506108bd6108b836600461319b565b611c92565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a001610320565b3480156108fb57600080fd5b5061090f61090a36600461319b565b611d88565b604051610320919061394b565b34801561092857600080fd5b50610931611e48565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610320565b34801561097257600080fd5b506103ce61098136600461349e565b611e96565b34801561099257600080fd5b506103ce6109a136600461317e565b611f22565b3480156109b257600080fd5b506103ce6109c136600461377e565b611f76565b3480156109d257600080fd5b506103496109e136600461309c565b611fbe565b3480156109f257600080fd5b50610349610a01366004613531565b612001565b348015610a1257600080fd5b50610349610a213660046133d1565b612093565b348015610a3257600080fd5b50610584610a413660046133d1565b6120b0565b348015610a5257600080fd5b506103ce610a6136600461349e565b6120cd565b348015610a7257600080fd5b5061083c610a81366004613999565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b1480610ac357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610ad58383612128565b9392505050565b600080610ae7612154565b546001600160a01b031692915050565b6000610b01612178565b60020154905090565b600080610b15612154565b6040516318ffae5d60e21b815290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__906363feb97490610b699084906000805160206140a9833981519152908c908c908c908c908c90600401613a2a565b602060405180830381865af4158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190613a72565b979650505050505050565b610bbd612154565b600101546001600160a01b03163314610bf15760405162461bcd60e51b8152600401610be890613a8b565b60405180910390fd5b610bf961219c565b565b6000610c05612154565b546040805163289b3c0d60e01b815290516001600160a01b039092169163289b3c0d916004808201926020929091908290030181865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c719190613ab8565b6001600160a01b0316336001600160a01b031614610c8e57600080fd5b6000610c98612178565b6004810154604051919250906001600160a01b038516908290600081818185875af1925050503d8060008114610cea576040519150601f19603f3d011682016040523d82523d6000602084013e610cef565b606091505b50508093505082610d3a5760405162461bcd60e51b81526020600482015260156024820152740aea0748cc2d2d8cac840e8de40e6cadcc8408aa89605b1b6044820152606401610be8565b5050919050565b610d49612154565b600101546001600160a01b03163314610d745760405162461bcd60e51b8152600401610be890613a8b565b6000610d7e612178565b6040516357babf8b60e01b8152600481018290526024810184905290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__906357babf8b906044015b60006040518083038186803b158015610dd457600080fd5b505af4158015610de8573d6000803e3d6000fd5b505050505050565b610df86121fc565b610e018261228a565b610e0b828261237c565b5050565b60606000610e1b612178565b604051630b4d65a760e41b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__9063b4d65a7090610e5f9084908b908b908b908b908b90600401613b98565b600060405180830381865af4158015610e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610baa9190810190613be1565b6000610eae61243e565b506000805160206140c983398151915290565b60006000805160206140a9833981519152610ede81868686612487565b95945050505050565b60006000805160206140a9833981519152610f038185856124c5565b949350505050565b6000610f15612178565b604051633da28bc160e11b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90637b45178290610f55908490889088908890600401613c66565b60006040518083038186803b158015610f6d57600080fd5b505af4158015610f81573d6000803e3d6000fd5b5050505050505050565b6000838383604051602001610fa293929190613c99565b60408051601f198184030181529190528051602090910120949350505050565b6040516330b2175760e11b81526000805160206140a98339815191526004820152602481018390526001600160a01b038216604482015273__$dabd46e1bb7f0d62843614b2ceac53b60c$__906361642eae90606401610dbc565b60606000805160206140a9833981519152610f038185856124ef565b600080611044612154565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190613a72565b91505090565b60006110c4612178565b6040516311aeabff60e31b8152600481018290526024810184905290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90638d755ff890604401610dbc565b600080600080611114612178565b905080600d01868660405161112a929190613cbd565b908152604051908190036020018120549450600d82019061114e9088908890613cbd565b908152602001604051809103902060010154925080600d018686604051611176929190613cbd565b9081526020016040518091039020600201549150509250925092565b60008061119d612178565b6040516345bece4760e11b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90638b7d9c8e906111db90849088908890600401613ccd565b602060405180830381865af41580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f039190613ce7565b600080611227612178565b6006810154600982015460405163928b8e4d60e01b815260048101849052602481018790526044810192909252606482015290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__9063928b8e4d90608401602060405180830381865af4158015611298573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190613a72565b6112c4612154565b600101546001600160a01b031633146112ef5760405162461bcd60e51b8152600401610be890613a8b565b610bf96125a1565b60006113126000805160206140e98339815191525460ff1690565b1561131d5750600190565b6000611327612154565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015611373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113979190613a72565b8160050154146113a957600191505090565b6113b16125ea565b60028201546001600160a01b039081169116146113d057600191505090565b600181015481546001600160a01b0391821691166399ac48ba6113f1610af7565b6040516001600160e01b031960e084901b16815260048101919091526921a7a72a2927a62622a960b11b6024820152604401602060405180830381865afa158015611440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114649190613ab8565b6001600160a01b03161461147a57600191505090565b600091505090565b600061148c612178565b60018101546002820154604051630300147560e11b815260048101919091529192506001600160a01b03169063060028ea90602401602060405180830381865afa1580156114de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115029190613ce7565b6115745760018101546002820154604051637e1ece9f60e01b81526001600160a01b0390921691637e1ece9f9161154191889088908890600401613d09565b600060405180830381600087803b15801561155b57600080fd5b505af115801561156f573d6000803e3d6000fd5b505050505b8073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__6311c9522c90918e8e8e8e8e8e8e8e6040518a63ffffffff1660e01b81526004016115bd99989796959493929190613d29565b60006040518083038186803b1580156115d557600080fd5b505af41580156115e9573d6000803e3d6000fd5b50505050505050505050505050505050565b600080611606612154565b6005015492915050565b6000806060600061161f612154565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__636dc129ae826000805160206140a98339815191526040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af4158015611693573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116bb9190810190613e57565b6004840154929650909450925083036116d8576116d88486612606565b509193909250565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156117255750825b90506000826001600160401b031660011480156117415750303b155b90508115801561174f575080155b1561176d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561179757845460ff60401b1916600160401b1785555b6117a38b8b8b8b612628565b83156117e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b60006000805160206140a9833981519152610f038185856126bb565b60008061181d612178565b60405163020ec69760e61b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__906383b1a5c09061185f9084908a908a908a908a90600401613eb0565b602060405180830381865af415801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a09190613a72565b9695505050505050565b6060816001600160401b038111156118c4576118c46131b4565b6040519080825280602002602001820160405280156118f757816020015b60608152602001906001900390816118e25790505b50905060005b8281101561198c576119673085858481811061191b5761191b613eea565b905060200281019061192d9190613f00565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126ef92505050565b82828151811061197957611979613eea565b60209081029190910101526001016118fd565b5092915050565b6000806000806000806119a4612154565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b60006119e4612154565b6040516361ac0f7160e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__9063c3581ee290604401610dbc565b611a36612154565b600101546001600160a01b03163314611a615760405162461bcd60e51b8152600401610be890613a8b565b6000611a6b612154565b805460408051634328603960e11b815290519293506001600160a01b03909116918291638650c0729160048083019260209291908290030181865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190613ce7565b15611b215760405162461bcd60e51b815260206004820152601560248201527415d40e941bdc9d185b081a5cc81a5cdbdb185d1959605a1b6044820152606401610be8565b600482810154604051630eca989d60e11b8152918201526001600160a01b03821690631d95313a90602401602060405180830381865afa158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d9190613a72565b826005015403611bd05760405162461bcd60e51b815260206004820152600e60248201526d57503a6e6f20757067726164657360901b6044820152606401610be8565b60048281015460405163e3099e0960e01b8152918201526000906001600160a01b0383169063e3099e09906024016020604051808303816000875af1158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190613a72565b9050610de881611610565b600080600080600080611c5d612178565b80546001820154600283015460038401546004909401546001600160a01b039384169b92909316995097509195509350915050565b600080600080600080611ca3612178565b905080600c018781548110611cba57611cba613eea565b6000918252602090912060059091020154600c820180546001600160a01b0390921697509088908110611cef57611cef613eea565b906000526020600020906005020160010154945080600c018781548110611d1857611d18613eea565b906000526020600020906005020160020154935080600c018781548110611d4157611d41613eea565b906000526020600020906005020160030154925080600c018781548110611d6a57611d6a613eea565b90600052602060002090600502016004015491505091939590929450565b611dbc604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000611dc6612154565b6040516337a3804160e11b8152600481018290526024810185905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90636f47008290604401600060405180830381865af4158015611e20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ad59190810190613f46565b600080600080600080600080611e5c612178565b60058101546006820154600783015460088401546009850154600a860154600b90960154949e939d50919b50995097509195509350915050565b6000611ea0612178565b604051630222d4bb60e11b815260048101829052602481018590526001600160a01b038416604482015290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90630445a976906064015b60006040518083038186803b158015611f0557600080fd5b505af4158015611f19573d6000803e3d6000fd5b50505050505050565b6000611f2c612154565b6040516307c0451b60e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90630f808a3690604401610dbc565b6000611f80612178565b604051634699d87760e11b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90638d33b0ee90611eed90849087908790600401613ff2565b60008281526000805160206140a9833981519152602081905260408220805484908110611fed57611fed613eea565b906000526020600020015491505092915050565b60008061200c612178565b604051631420eb4b60e21b815290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__90635083ad2c9061204a90849088908890600401613ccd565b6040805180830381865af4158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a919061400c565b50949350505050565b60006000805160206140a9833981519152610ede8186868661275c565b60606000805160206140a9833981519152610ede8186868661278b565b60006120d7612178565b6040516393c8c5e960e01b815260048101829052602481018590526001600160a01b038416604482015290915073__$9ac600e8e8caf8e716c00e1b9cc2af3047$__906393c8c5e990606401611eed565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b7f50605cc6f5170f0cdbb610edd2214831ea96f61cd1eba92cf58939f65736af0090565b6121a4612842565b6000805160206140e9833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061226c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122606125ea565b6001600160a01b031614155b15610bf95760405163703e46dd60e11b815260040160405180910390fd5b6000612294612154565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__63b57e6b0b82846122ba6125ea565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af415801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190613ce7565b610e0b5760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401610be8565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156123d6575060408051601f3d908101601f191682019092526123d391810190613a72565b60015b6123fe57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610be8565b6000805160206140c9833981519152811461242f57604051632a87526960e21b815260048101829052602401610be8565b6124398383612872565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bf95760405163703e46dd60e11b815260040160405180910390fd5b60008460030160006124a28461249d8888612128565b612128565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006124d78585612128565b81526020019081526020016000205490509392505050565b60608360020160006125018585612128565b8152602001908152602001600020805461251a90614030565b80601f016020809104026020016040519081016040528092919081815260200182805461254690614030565b80156125935780601f1061256857610100808354040283529160200191612593565b820191906000526020600020905b81548152906001019060200180831161257657829003601f168201915b505050505090509392505050565b6125a96128c8565b6000805160206140e9833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336121de565b6000805160206140c9833981519152546001600160a01b031690565b61261f8260405180602001604052806000815250610df0565b610e0b816128f9565b612630612944565b6126627f00000000000000000000000000000000000000000000000000000000000000008460001961271b868661298d565b6126ad7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866129b3565b6126b56129de565b50505050565b60008360030160006126cd8585612128565b81526020810191909152604001600020546001600160a01b0316949350505050565b6060600080846001600160a01b03168460405161270c919061406a565b600060405180830381855af49150503d8060008114612747576040519150601f19603f3d011682016040523d82523d6000602084013e61274c565b606091505b5091509150610ede8583836129e6565b60008460010160006127728461249d8888612128565b8152602001908152602001600020549050949350505050565b60608460020160006127a18461249d8888612128565b815260200190815260200160002080546127ba90614030565b80601f01602080910402602001604051908101604052809291908181526020018280546127e690614030565b80156128335780601f1061280857610100808354040283529160200191612833565b820191906000526020600020905b81548152906001019060200180831161281657829003601f168201915b50505050509050949350505050565b6000805160206140e98339815191525460ff16610bf957604051638dfc202b60e01b815260040160405180910390fd5b61287b82612a3b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156128c05761243982826126ef565b610e0b612aa0565b6000805160206140e98339815191525460ff1615610bf95760405163d93c066560e01b815260040160405180910390fd5b6000612903612154565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a15050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610bf957604051631afcd79f60e31b815260040160405180910390fd5b612995612944565b61299d6129de565b6129a56129de565b610de8868686868686612abf565b6129bb612944565b6129c3612e4b565b6129cb612e5b565b6129d36129de565b612439838383612e6b565b610bf9612944565b6060826129fb576129f682612fc3565b610ad5565b8151158015612a1257506001600160a01b0384163b155b1561198c57604051639996b31560e01b81526001600160a01b0385166004820152602401610be8565b806001600160a01b03163b600003612a7157604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610be8565b6000805160206140c983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415610bf95760405163b398979f60e01b815260040160405180910390fd5b612ac7612944565b6001600160a01b038616612b1d5760405162461bcd60e51b815260206004820152601c60248201527f474d3a676f7665726e616e63652063616e6e6f74206265207a65726f000000006044820152606401610be8565b6001600160a01b038516612b735760405162461bcd60e51b815260206004820152601860248201527f474d3a73656e6174652063616e6e6f74206265207a65726f00000000000000006044820152606401610be8565b428411612bb85760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401610be8565b82600003612c085760405162461bcd60e51b815260206004820152601d60248201527f474d3a7061636b616765547970652063616e6e6f74206265207a65726f0000006044820152606401610be8565b6000819003612c645760405162461bcd60e51b815260206004820152602260248201527f474d3a696e697456657273696f6e4e616d652063616e6e6f7420626520656d70604482015261747960f01b6064820152608401610be8565b6000612c6e612154565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000805160206140a9833981519152600073__$dabd46e1bb7f0d62843614b2ceac53b60c$__6363feb9748484612cd26125ea565b8a8a8a620151806040518863ffffffff1660e01b8152600401612cfb9796959493929190613a2a565b602060405180830381865af4158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c9190613a72565b6040516336e094d760e11b815260048101859052602481018490526044810182905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$",
  "libraries": {
    "GeodeModuleLib": "0x87828ff83A8B257D544c06fe64B6838DD2Fb0ED1",
    "WithdrawalModuleLib": "0x7224F427fA92CE4FD8d0058C354634217438b34c"
  },
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ContractVersionSet(uint256)": {
        "custom:section": "** EVENTS **"
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NewExitThreshold(uint256)": {
        "custom:section": "** EVENTS **"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "GeodeParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "WithdrawalParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "allIdsByType(uint256,uint256)": {
        "details": "useful for outside reach, shouldn't be used within contracts as a referance",
        "returns": {
          "_0": "allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index"
        }
      },
      "approveProposal(uint256)": {
        "details": "handles PACKAGE_TYPE proposals by upgrading the contract immediately.onlySenate is checked inside GML.approveProposal"
      },
      "canFinalizeExit(bytes)": {
        "custom:visibility": "-> view"
      },
      "changeIdCONTROLLER(uint256,address)": {
        "custom:subsection": "** ONLY CONTROLLER **"
      },
      "claimInfrastructureFees(address)": {
        "custom:subsection": "** INFRASTRUCTURE FEE **",
        "details": "WM override"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "we don't want to provide these package-specific not-changing parameters accross all instances of the packages. So we will store them in the ref implementation contract of the package, and fetch when needed on initialization."
      },
      "dequeue(uint256,address)": {
        "custom:visibility": "-> external"
      },
      "enqueue(uint256,bytes,address)": {
        "custom:subsection": "** ENQUEUE **",
        "custom:visibility": "-> external"
      },
      "fulfill(uint256)": {
        "custom:visibility": "-> external"
      },
      "fulfillable(uint256)": {
        "custom:visibility": "-> view"
      },
      "generateId(string,uint256)": {
        "details": "id is generated by keccak(name, type)"
      },
      "getProposedVersion()": {
        "details": "GeodeModule override"
      },
      "initialize(uint256,address,bytes,bytes)": {
        "details": "While 'data' parameter is not currently used it is a standarized approach on all * GeodePackages have the same function signature on 'initialize'."
      },
      "isolationMode()": {
        "details": "GeodeModule override"
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract.This is necessary for the multistep operations done in this contract: * Enqueue, Process, Fulfill, Dequeue.Using 'functionDelegateCall' so it does not cause any issues when using msg.sender etc."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processValidators(bytes[],uint256[],uint256[],bytes32[][],uint256,bytes32[])": {
        "custom:section": "** PROCESS BALANCES MERKLE UPDATE **"
      },
      "propose(address,uint256,bytes,uint256)": {
        "custom:subsection": "** ONLY GOVERNANCE **"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "pullUpgrade()": {
        "details": "IGeodePackage override"
      },
      "readUintArray(uint256,bytes32,uint256)": {
        "custom:section": "** ARRAY GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "setExitThreshold(uint256)": {
        "custom:subsection": "** WITHDRAWAL QUEUE **",
        "details": "WM override"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "generateId(string,uint256)": {
        "notice": "useful function for string inputs - returns same with the DSML.generateId"
      },
      "getKey(uint256,bytes32)": {
        "notice": "useful view function for string inputs - returns same with the DSML.generateId"
      },
      "pause()": {
        "notice": "pausing the contract activates the isolationMode"
      },
      "unpause()": {
        "notice": "unpausing the contract deactivates the isolationMode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}