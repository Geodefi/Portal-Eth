{
  "address": "0x53898a4f73f6a338605a6cB82f2B7d2E803B30ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gETHPos",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_portalPos",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LPTokenRef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ContractVersionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "soldId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "boughtId",
          "type": "uint128"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GeodeParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approvedUpgrade",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "senateExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "packageType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LiquidityParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "gETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pooledTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "allIdsByType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "allIdsByTypeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "changeIdCONTROLLER",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "changeSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "generateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAdminBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_param",
          "type": "bytes32"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "CONTROLLER",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TYPE",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "NAME",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proposal",
          "name": "proposal",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposedVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pooledTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "versionName",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isolationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_TYPE",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_NAME",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readAddressArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readBytesArray",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readUintArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "rescueSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "setAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawAdminFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0613e6eb6d72f290ed0a27de99e027429df4db810bfdd2ede98a44ff1b079cba",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0x53898a4f73f6a338605a6cB82f2B7d2E803B30ed",
    "transactionIndex": 0,
    "gasUsed": "3868464",
    "logsBloom": "0x
    "blockHash": "0xad1ff74ed07b16b390183c3dca1450b95dd6b03c6525e01604594c3160132d2a",
    "transactionHash": "0x0613e6eb6d72f290ed0a27de99e027429df4db810bfdd2ede98a44ff1b079cba",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 500533,
        "transactionHash": "0x0613e6eb6d72f290ed0a27de99e027429df4db810bfdd2ede98a44ff1b079cba",
        "address": "0x53898a4f73f6a338605a6cB82f2B7d2E803B30ed",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xad1ff74ed07b16b390183c3dca1450b95dd6b03c6525e01604594c3160132d2a"
      }
    ],
    "blockNumber": 500533,
    "cumulativeGasUsed": "3868464",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C49FC86F3fC418216b2B44C8bEA16437219bA78",
    "0x5280b0EC68aE2524a137Bba0A8B95020ff98899d",
    "0x655a91fE4db66AcDF8bd3358D2f556b3b0f6499B"
  ],
  "numDeployments": 1,
  "solcInputHash": "61510320e155ddc5271d2656d1a4fd97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gETHPos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_portalPos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LPTokenRef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ContractVersionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GeodeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvedUpgrade\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senateExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pooledTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"allIdsByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"allIdsByTypeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"changeIdCONTROLLER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"changeSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"generateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_param\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pooledTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"versionName\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isolationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readBytesArray\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readUintArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"rescueSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAdminFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"TYPE: PACKAGE_LIQUIDITY_POOLUtilizing IGeodePackage interface, meaning initialize function takes 3 parameters: * * poolOwner: will be assigned as the senate of the package * * pooledTokenId: used internally on LM and LML. * * data: referances 1 parameter: name. Used to generate lpTokenName and lpTokenSymbol for __LM_init.review: LM for StableSwap implementation. Also note: * initial and future A coefficients are set as 60 (LM) * trade fee set to 4 bips (LM) * owner fee is set to 0 (LM) * senate expiry is not effective (GM)review: GM for The Limited Upgradability through Dual Governance: * Governance is the Portal, package version controller. * Senate is the Staking Pool Owner.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ContractVersionSet(uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"TokenSwap(address,uint256,uint256,uint128,uint128)\":{\"custom:section\":\"** EVENTS **\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"GeodeParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"LiquidityParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"addLiquidity(uint256[2],uint256,uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"deadline\":\"latest timestamp to accept this transaction\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"allIdsByType(uint256,uint256)\":{\"details\":\"useful for outside reach, shouldn't be used within contracts as a referance\",\"returns\":{\"_0\":\"allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index\"}},\"approveProposal(uint256)\":{\"details\":\"handles PACKAGE_TYPE proposals by upgrading the contract immediately.onlySenate is checked inside GML.approveProposal\"},\"calculateRemoveLiquidity(uint256)\":{\"params\":{\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(uint256,uint8)\":{\"params\":{\"tokenAmount\":\"the amount of LP token to burn\",\"tokenIndex\":\"index of which token will be withdrawn\"},\"returns\":{\"availableTokenAmount\":\"calculated amount of underlying token available to withdraw\"}},\"calculateSwap(uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(uint256[2],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"changeIdCONTROLLER(uint256,address)\":{\"custom:subsection\":\"** ONLY CONTROLLER **\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"generateId(string,uint256)\":{\"details\":\"id is generated by keccak(name, type)\"},\"getA()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"A parameter\"}},\"getAPrecise()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"getAdminBalance(uint256)\":{\"params\":{\"index\":\"Index of the pooled token\"},\"returns\":{\"_0\":\"admin's token balance in the token's precision\"}},\"getBalance(uint8)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"current balance of the pooled token at given index with token's native precision\"}},\"getDebt()\":{\"details\":\"result might change when price is in.\",\"returns\":{\"_0\":\"debt the half of the D StableSwap invariant when debt is needed to be payed.\"}},\"getProposedVersion()\":{\"details\":\"GeodeModule override\"},\"getVirtualPrice()\":{\"returns\":{\"_0\":\"the virtual override price\"}},\"initialize(uint256,address,bytes,bytes)\":{\"params\":{\"data\":\"only poolName is required from Portal\"}},\"isolationMode()\":{\"custom:visibility\":\"-> view\",\"details\":\"GeodeModule override\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"propose(address,uint256,bytes,uint256)\":{\"custom:subsection\":\"** ONLY GOVERNANCE **\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"pullUpgrade()\":{\"details\":\"IGeodePackage override\"},\"readUintArray(uint256,bytes32,uint256)\":{\"custom:section\":\"** ARRAY GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"deadline\":\"latest timestamp to accept this transaction\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the token you want to receive\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"setSwapFee(uint256)\":{\"custom:subsection\":\"** LIQUIDITY POOL **\",\"details\":\"LM override\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"dx\":\"the amount of tokens the user wants to swap from\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"LPP: Liquidity Pool Package: Geode Module + Liquidity Module\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[2],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(uint256,uint8)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(uint8,uint8,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(uint256[2],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"generateId(string,uint256)\":{\"notice\":\"useful function for string inputs - returns same with the DSML.generateId\"},\"getA()\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise()\":{\"notice\":\"Return A in its raw precision form\"},\"getAdminBalance(uint256)\":{\"notice\":\"Reads the accumulated amount of admin fees of the token with given index\"},\"getBalance(uint8)\":{\"notice\":\"Return current balance of the pooled token at given index\"},\"getDebt()\":{\"notice\":\"Debt, The amount of buyback for stable pricing (1=1).\"},\"getKey(uint256,bytes32)\":{\"notice\":\"useful view function for string inputs - returns same with the DSML.generateId\"},\"getPoolId()\":{\"notice\":\"get the gETH ID of the corresponding staking pool\"},\"getVirtualPrice()\":{\"notice\":\"Get the virtual override price, to help calculate profit\"},\"pause()\":{\"notice\":\"pausing the contract activates the isolationMode\"},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Swap two tokens using this pool\"},\"unpause()\":{\"notice\":\"unpausing the contract deactivates the isolationMode\"}},\"notice\":\"LPP is a package that provides a liquidity pool for a staking pool created through Portal.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/packages/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155HolderUpgradeable is Initializable, ERC165Upgradeable, IERC1155Receiver {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd5cd13424ae387f7356676f7b90081cc63af46eac66ef15efeaca6177863eb83\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT UPGRADE: proposal to change the given contract's implementation. TYPE should be package's TYPE.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPool and WithdrawalContract are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Can not be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// --\\n\\n  /// @notice TYPE 3: Limit: exclusive, minimum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MIN_USER = 3;\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 9999: Limit: exclusive, maximum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MAX_USER = 9999;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10001: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Credential Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL_CONTRACT = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY_POOL = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20011: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x57f7402676daf6b6e67c986886a6bcda45e22bef084fda946fd191fd3ff9f63d\",\"license\":\"MIT\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0x9d699aeaf6da35d188a5495eec188b28a990e09bd04fa7701d28c4ff9afba801\",\"license\":\"MIT\"},\"contracts/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition treshold calculated with given percentage value for fallback operator to be activated\\n   */\\n  bytes32 internal constant fallbackThreshold = \\\"fallbackThreshold\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the initiation timestamp of a \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity pool of a pool\\n   */\\n  bytes32 internal constant liquidityPool = \\\"liquidityPool\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition receiver address for yield seperation functionality\\n   * * will receive minted gETH to given receiver instead of increasing pricePerShare\\n   */\\n  bytes32 internal constant yieldReceiver = \\\"yieldReceiver\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition period that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for pool-operator pair.\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalContract = \\\"withdrawalContract\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalContract\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x62ab3086774ad8721fa9e571e663e6444bebe30020075898406ec92ab55146bb\",\"license\":\"MIT\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IGeodeModule, IStakeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (uint256 id);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n}\\n\",\"keccak256\":\"0x012a8ed050ba68838eeb7463b75f32ba8fdf50c9e54e44dd37d4e87ca16ba78c\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/ILPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\ninterface ILPToken {\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n\\n  function decimals() external view returns (uint8);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function initialize(string memory name, string memory symbol) external;\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n\\n  function symbol() external view returns (string memory);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xf261416729820085f0f810987d2cf7cb70bdc928f3c900473e3fee8ffa48986c\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3ba6191b4a643bce171bb7dc9b39a55dd0c8c932934429902dec4eb7b6c3df9a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Proposal} from \\\"../../modules/GeodeModule/structs/utils.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getGovernance() external view returns (address);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x2eb0e5472c00c7d91443f0544ce349129266665dd59f1e4b0598173df1a9d1c5\",\"license\":\"MIT\"},\"contracts/interfaces/modules/ILiquidityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface ILiquidityModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function LiquidityParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address lpToken,\\n      uint256 pooledTokenId,\\n      uint256 initialA,\\n      uint256 futureA,\\n      uint256 initialATime,\\n      uint256 futureATime,\\n      uint256 swapFee,\\n      uint256 adminFee\\n    );\\n\\n  function getA() external view returns (uint256);\\n\\n  function getAPrecise() external view returns (uint256);\\n\\n  function getBalance(uint8 index) external view returns (uint256);\\n\\n  function getDebt() external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[2] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function withdrawAdminFees(address receiver) external;\\n\\n  function setAdminFee(uint256 newAdminFee) external;\\n\\n  function setSwapFee(uint256 newSwapFee) external;\\n\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n  function stopRampA() external;\\n}\\n\",\"keccak256\":\"0xee470aafacf0ec10f63efa53a3f4f8deaf03cd9b0d0aae178949464960ff397a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Validator} from \\\"../../modules/StakeModule/structs/utils.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function getPriceMerkleRoot() external view returns (bytes32);\\n\\n  function getBalancesMerkleRoot() external view returns (bytes32);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function getInfrastructureFee(uint256 _type) external view returns (uint256);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPool(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function setYieldReceiver(uint256 poolId, address yieldReceiver) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameExit(bytes calldata pk) external;\\n\\n  function blameProposal(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function requestExit(uint256 poolId, bytes memory pk) external;\\n\\n  function finalizeExit(uint256 poolId, bytes memory pk) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0x9aa14e9a735d7487740753aa1c0c8a9eb4fba868d2f3b9fa9ea6972874362f25\",\"license\":\"MIT\"},\"contracts/interfaces/packages/IGeodePackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"../modules/IGeodeModule.sol\\\";\\nimport {IPortal} from \\\"../IPortal.sol\\\";\\n\\ninterface IGeodePackage is IGeodeModule {\\n  function initialize(\\n    uint256 poolId,\\n    address owner,\\n    bytes calldata versionName,\\n    bytes memory data\\n  ) external;\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function pullUpgrade() external;\\n}\\n\",\"keccak256\":\"0x9c854fab873502a768e5903e7f66b6697313f77bea4d5ca200aad8d0c3190ed9\",\"license\":\"MIT\"},\"contracts/interfaces/packages/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {ILiquidityModule} from \\\"../modules/ILiquidityModule.sol\\\";\\nimport {IGeodePackage} from \\\"./IGeodePackage.sol\\\";\\n\\ninterface ILiquidityPool is IGeodePackage, ILiquidityModule {}\\n\",\"keccak256\":\"0x75fe3f103131761db0210141774365c7eb975812178b262564343c7d660f9cb4\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/DataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// internal - interfaces\\nimport {IDataStoreModule} from \\\"../../interfaces/modules/IDataStoreModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"./structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"./libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title DSM: DataStore Module\\n *\\n * @notice A storage management tool designed to create a safe and scalable storage layout\\n * for upgradable contracts with various types of data classes (users, packages, definitions).\\n *\\n * @dev review: this module delegates its functionality to DSML (DataStoreModuleLib).\\n * DSM or DSML has NO access control.\\n *\\n * @dev There are no additional functionalities implemented apart from the library.\\n *\\n * @dev NO function needs to be overriden when inherited.\\n *\\n * @dev __DataStoreModule_init (or _unchained) call is NOT NECESSARY when inherited.\\n *\\n * @dev No storage-altering external/public functions are exposed here, only view/pure external functions.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract DataStoreModule is IDataStoreModule, Initializable {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do NOT have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.DataStoreModule\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant DataStoreModuleStorageLocation =\\n    0xa3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c00;\\n\\n  function _getDataStoreModuleStorage() internal pure returns (DataStoreModuleStorage storage $) {\\n    assembly {\\n      $.slot := DataStoreModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __DataStoreModule_init() internal onlyInitializing {}\\n\\n  function __DataStoreModule_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @custom:section                           ** HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> pure-external\\n   */\\n\\n  /**\\n   * @notice useful function for string inputs - returns same with the DSML.generateId\\n   * @dev id is generated by keccak(name, type)\\n   */\\n  function generateId(\\n    string calldata _name,\\n    uint256 _type\\n  ) external pure virtual override returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice useful view function for string inputs - returns same with the DSML.generateId\\n   */\\n  function getKey(\\n    uint256 _id,\\n    bytes32 _param\\n  ) external pure virtual override returns (bytes32 key) {\\n    return DSML.getKey(_id, _param);\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev useful for outside reach, shouldn't be used within contracts as a referance\\n   * @return allIdsByType is an array of IDs of the given TYPE from Datastore,\\n   * returns a specific index\\n   */\\n  function allIdsByType(\\n    uint256 _type,\\n    uint256 _index\\n  ) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type][_index];\\n  }\\n\\n  function allIdsByTypeLength(uint256 _type) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type].length;\\n  }\\n\\n  function readUint(uint256 id, bytes32 key) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUint(id, key);\\n  }\\n\\n  function readAddress(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddress(id, key);\\n  }\\n\\n  function readBytes(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytes(id, key);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUintArray(id, key, index);\\n  }\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytesArray(id, key, index);\\n  }\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddressArray(id, key, index);\\n  }\\n}\\n\",\"keccak256\":\"0x974c47e14399ce86d006af0ab864c3168b2432522bc0f0803f4d1f7cb89eed43\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\n// external - libraries\\n// external - contracts\\n// internal - globals\\n// internal - interfaces\\nimport {DataStoreModuleStorage} from \\\"../structs/storage.sol\\\";\\n\\n// internal - structs\\n// internal - libraries\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the DataStoreModuleStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is NOT mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.DataStoreModuleStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the DataStoreModuleStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encode(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0xfc96e97319466fe81944b00814d17aee972c91858eb64c7e5d8e1d0258a62c9b\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Storage Struct for reading/writing operations for given (id, key) pairs.\\n *\\n * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n * @param uintData keccak(id, key) =>  returns uint256\\n * @param bytesData keccak(id, key) => returns bytes\\n * @param addressData keccak(id, key) =>  returns address\\n *\\n * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.DataStoreModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct DataStoreModuleStorage {\\n  mapping(uint256 => uint256[]) allIdsByType;\\n  mapping(bytes32 => uint256) uintData;\\n  mapping(bytes32 => bytes) bytesData;\\n  mapping(bytes32 => address) addressData;\\n}\\n\",\"keccak256\":\"0x10c4430d4d368abd4bd5488b4cf6c942c6e26e58ae52163926cd5daae3e0c77f\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/GeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// external - library\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// external - contracts\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../globals/id_type.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"../../interfaces/modules/IGeodeModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"./structs/storage.sol\\\";\\nimport {Proposal} from \\\"./structs/utils.sol\\\";\\n// internal - libraries\\nimport {GeodeModuleLib as GML} from \\\"./libs/GeodeModuleLib.sol\\\";\\nimport {DataStoreModuleLib as DSML} from \\\"../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n// internal - contracts\\nimport {DataStoreModule} from \\\"../DataStoreModule/DataStoreModule.sol\\\";\\n\\n/**\\n * @title GM: Geode Module\\n *\\n * @notice Base logic for Upgradable Packages:\\n * * Dual Governance with Senate+Governance: Governance proposes, Senate approves.\\n * * Limited Upgradability built on top of UUPS via Dual Governance.\\n *\\n * @dev review: this module delegates its functionality to GML (GeodeModuleLib):\\n * GML has onlyGovernance, onlySenate, onlyController modifiers for access control.\\n *\\n * @dev There is 1 additional functionality implemented apart from the library:\\n * Mutating UUPS pattern to fit Limited Upgradability:\\n * 1. New implementation contract is proposed with its own package type within the limits, refer to globals/id_type.sol.\\n * 2. Proposal is approved by the contract owner, Senate.\\n * 3. approveProposal calls _handleUpgrade which mimics UUPS.upgradeTo:\\n * 3.1. Checks the implementation address with _authorizeUpgrade, also preventing any UUPS upgrades.\\n * 3.2. Upgrades the contract with no function to call afterwards.\\n * 3.3. Sets contract version. Note that it does not increase linearly like one might expect.\\n *\\n * @dev 1 function needs to be overriden when inherited: isolationMode. (also refer to approveProposal)\\n *\\n * @dev __GeodeModule_init (or _unchained) call is NECESSARY when inherited.\\n * However, deployer MUST call initializer after upgradeTo call,\\n * SHOULD NOT call initializer on upgradeToAndCall or new ERC1967Proxy calls.\\n *\\n * @dev This module inherits DataStoreModule.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract GeodeModule is IGeodeModule, UUPSUpgradeable, DataStoreModule {\\n  using GML for GeodeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do NOT have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.GeodeModuleStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant GeodeModuleStorageLocation =\\n    0x121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b04200;\\n\\n  function _getGeodeModuleStorage() internal pure returns (GeodeModuleStorage storage $) {\\n    assembly {\\n      $.slot := GeodeModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event ContractVersionSet(uint256 version);\\n\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   */\\n  function isolationMode() external view virtual override returns (bool);\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __GeodeModule_init(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    __UUPSUpgradeable_init();\\n    __DataStoreModule_init();\\n    __GeodeModule_init_unchained(governance, senate, senateExpiry, packageType, initVersionName);\\n  }\\n\\n  /**\\n   * @dev This function uses _getImplementation(), clearly deployer SHOULD NOT call initializer on\\n   * upgradeToAndCall or new ERC1967Proxy calls. _getImplementation() returns 0 then.\\n   * @dev GOVERNANCE and SENATE set to msg.sender at beginning, can not propose+approve otherwise.\\n   * @dev native approveProposal(public) is not used here. Because it has an _handleUpgrade,\\n   * however initialization does not require UUPS.upgradeTo.\\n   */\\n  function __GeodeModule_init_unchained(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    require(governance != address(0), \\\"GM:governance can not be zero\\\");\\n    require(senate != address(0), \\\"GM:senate can not be zero\\\");\\n    require(senateExpiry > block.timestamp, \\\"GM:low senateExpiry\\\");\\n    require(packageType != 0, \\\"GM:packageType can not be zero\\\");\\n    require(initVersionName.length != 0, \\\"GM:initVersionName can not be empty\\\");\\n\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.GOVERNANCE = msg.sender;\\n    $.SENATE = msg.sender;\\n\\n    $.SENATE_EXPIRY = senateExpiry;\\n    $.PACKAGE_TYPE = packageType;\\n\\n    DataStoreModuleStorage storage DSMStorage = _getDataStoreModuleStorage();\\n\\n    uint256 initVersion = $.propose(\\n      DSMStorage,\\n      ERC1967Utils.getImplementation(),\\n      packageType,\\n      initVersionName,\\n      1 days\\n    );\\n\\n    $.approveProposal(DSMStorage, initVersion);\\n\\n    _setContractVersion(DSML.generateId(initVersionName, $.PACKAGE_TYPE));\\n\\n    $.GOVERNANCE = governance;\\n    $.SENATE = senate;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev required by the OZ UUPS module, improved by the Geode Module.\\n   */\\n  function _authorizeUpgrade(address proposed_implementation) internal virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    require(\\n      $.isUpgradeAllowed(proposed_implementation, ERC1967Utils.getImplementation()),\\n      \\\"GM:not allowed to upgrade\\\"\\n    );\\n  }\\n\\n  function _setContractVersion(uint256 id) internal virtual {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.CONTRACT_VERSION = id;\\n    emit ContractVersionSet(id);\\n  }\\n\\n  /**\\n   * @dev Would use the public upgradeTo() call, which does _authorizeUpgrade and _upgradeToAndCallUUPS,\\n   * but it is external, OZ have not made it public yet.\\n   */\\n  function _handleUpgrade(address proposed_implementation, uint256 id) internal virtual {\\n    UUPSUpgradeable.upgradeToAndCall(proposed_implementation, \\\"\\\");\\n    _setContractVersion(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function GeodeParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    )\\n  {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n\\n    governance = $.GOVERNANCE;\\n    senate = $.SENATE;\\n    approvedUpgrade = $.APPROVED_UPGRADE;\\n    senateExpiry = $.SENATE_EXPIRY;\\n    packageType = $.PACKAGE_TYPE;\\n  }\\n\\n  function getGovernance() external view virtual override returns (address) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.GOVERNANCE;\\n  }\\n\\n  function getContractVersion() public view virtual override returns (uint256) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.CONTRACT_VERSION;\\n  }\\n\\n  function getProposal(\\n    uint256 id\\n  ) external view virtual override returns (Proposal memory proposal) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    proposal = $.getProposal(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> public/external\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   */\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) public virtual override returns (uint256 id) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    id = $.propose(_getDataStoreModuleStorage(), _CONTROLLER, _TYPE, _NAME, duration);\\n  }\\n\\n  function rescueSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.rescueSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   */\\n\\n  /**\\n   * @dev handles PACKAGE_TYPE proposals by upgrading the contract immediately.\\n   * @dev onlySenate is checked inside GML.approveProposal\\n   */\\n  function approveProposal(\\n    uint256 id\\n  ) public virtual override returns (address _controller, uint256 _type, bytes memory _name) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    (_controller, _type, _name) = $.approveProposal(_getDataStoreModuleStorage(), id);\\n\\n    if (_type == $.PACKAGE_TYPE) {\\n      _handleUpgrade(_controller, id);\\n    }\\n  }\\n\\n  function changeSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.changeSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY CONTROLLER **\\n   */\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external virtual override {\\n    GML.changeIdCONTROLLER(_getDataStoreModuleStorage(), id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0xda41dcf92802dbb08269efd65fc93f5a539ad670e8ab38da7e239f52d2cccfb3\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/libs/GeodeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {Proposal} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title GML: Geode Module Library\\n *\\n * @notice Dual Governance & Limited Upgradability:\\n * Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate.\\n * Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPool.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n *\\n * @dev SENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.\\n *\\n * @dev There are 3 ways to set a new Senate:\\n * 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry.\\n * 2. Current Senate can call changeSenate, which doesn't change the expiry\\n * 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.\\n * @dev Currently, there are no way to set a new Governance.\\n *\\n *\\n * @dev Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorage\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary GeodeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice a proposal can have a duration between 1 days to 4 weeks (inclusive)\\n  uint32 internal constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 internal constant MAX_PROPOSAL_DURATION = 4 weeks;\\n\\n  /// @notice if expiry is utilized, a senate can be active for a year.\\n  /// @dev \\\"MAX\\\" underlines a new senate can be set without expecting an expiry\\n  uint32 internal constant MAX_SENATE_PERIOD = 365 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GML:GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlySenate(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.SENATE, \\\"GML:SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GML:SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DataStoreModuleStorage storage DATASTORE, uint256 id) {\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"GML:CONTROLLER role needed\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Check if it is allowed to change the package version to given proposedImplementation.\\n   * @dev provided for _authorizeUpgrade\\n   * @dev currentImplementation should always be UUPS._getImplementation()\\n   * @dev currentImplementation or zero as proposedImplementation will return false\\n   **/\\n  function isUpgradeAllowed(\\n    GeodeModuleStorage storage self,\\n    address proposedImplementation,\\n    address currentImplementation\\n  ) external view returns (bool) {\\n    return\\n      (self.APPROVED_UPGRADE != address(0)) &&\\n      (proposedImplementation != currentImplementation) &&\\n      (self.APPROVED_UPGRADE == proposedImplementation);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function getProposal(\\n    GeodeModuleStorage storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self.proposals[id];\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** INTERNAL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n  function _setSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    require(_newSenate != address(0), \\\"GML:Senate cannot be zero address\\\");\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   */\\n  function propose(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSML.generateId(_NAME, _TYPE);\\n\\n    require(self.proposals[id].deadline == 0, \\\"GML:already proposed\\\");\\n    require((DATASTORE.readBytes(id, rks.NAME)).length == 0, \\\"GML:ID already exist\\\");\\n    require(_CONTROLLER != address(0), \\\"GML:CONTROLLER can NOT be ZERO\\\");\\n    require((_TYPE != ID_TYPE.NONE) && (_TYPE != ID_TYPE.POOL), \\\"GML:TYPE is NONE or POOL\\\");\\n    require(\\n      (duration >= MIN_PROPOSAL_DURATION) && (duration <= MAX_PROPOSAL_DURATION),\\n      \\\"GML:invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self.proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(_TYPE, id, _CONTROLLER, _deadline);\\n  }\\n\\n  /**\\n   * @notice changes Senate in a scenerio where the current Senate acts maliciously!\\n   * * We are sure this will not be the case, but creating a method for possible recovery is a must.\\n   * @notice Normally, Governance creates Senate Proposals frequently to signal it does not have\\n   * * any intent of malicious overtake.\\n   * note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY,\\n   * * we recommend users to take their money out.\\n   * @dev Obviously, Governance needs to wait for SENATE_EXPIRY.\\n   * @dev Refreshes the expiry\\n   */\\n  function rescueSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlyGovernance(self) {\\n    require(block.timestamp > self.SENATE_EXPIRY, \\\"GML:cannot rescue yet\\\");\\n\\n    _setSenate(self, _newSenate, block.timestamp + MAX_SENATE_PERIOD);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a proposal and records given data to DataStore\\n   * @notice specific changes for the reserved types (1, 2, 3) are implemented here,\\n   * any other addition should take place in Portal, as not related.\\n   * Note that GM has additional logic for package type approvals.\\n   * @param id given ID proposal that has will be approved by Senate\\n   * @dev Senate is not able to approve approved proposals\\n   * @dev Senate is not able to approve expired proposals\\n   */\\n  function approveProposal(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (address _controller, uint256 _type, bytes memory _name) {\\n    require(self.proposals[id].deadline > block.timestamp, \\\"GML:NOT an active proposal\\\");\\n\\n    _controller = self.proposals[id].CONTROLLER;\\n    _type = self.proposals[id].TYPE;\\n    _name = self.proposals[id].NAME;\\n\\n    DATASTORE.writeUint(id, rks.TYPE, _type);\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, _controller);\\n    DATASTORE.writeBytes(id, rks.NAME, _name);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.SENATE) {\\n      _setSenate(self, _controller, block.timestamp + MAX_SENATE_PERIOD);\\n    } else if (_type == self.PACKAGE_TYPE) {\\n      self.APPROVED_UPGRADE = _controller;\\n    }\\n\\n    // important\\n    self.proposals[id].deadline = block.timestamp;\\n\\n    emit Approved(id);\\n  }\\n\\n  /**\\n   * @notice It is useful to be able to change the Senate's address without changing the expiry.\\n   * @dev Does not change the expiry\\n   */\\n  function changeSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ONLY CONTROLLER **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice change the CONTROLLER of an ID\\n   * @dev this operation can not be reverted by the old CONTROLLER!!!\\n   * @dev can not provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GML:CONTROLLER can not be zero\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(\\n      typeOfId > ID_TYPE.LIMIT_MIN_USER && typeOfId < ID_TYPE.LIMIT_MAX_USER,\\n      \\\"GML:ID TYPE is NOT user\\\"\\n    );\\n\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0xbfb4c60d9554def5a5995550806e70774aced630484bd063488ae3828ffc976c\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - structs\\nimport {Proposal} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Dual Governance logic\\n * @dev Dual Governance allows 2 parties to manage a package with proposals and approvals.\\n * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n * Suggests updates, such as new operators, contract/package upgrades, a new Senate (without any permission to force them)\\n * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n * @param APPROVED_UPGRADE only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Might not be utilized. Limited by MAX_SENATE_PERIOD\\n * @param PACKAGE_TYPE every package has a specific TYPE. Defined in globals/id_type.sol\\n * @param CONTRACT_VERSION always refers to the upgrade proposal ID. Does NOT increase uniformly like one might expect.\\n * @param proposals till approved, proposals are kept separated from the Isolated Storage\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.GeodeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct GeodeModuleStorage {\\n  address GOVERNANCE;\\n  address SENATE;\\n  address APPROVED_UPGRADE;\\n  uint256 SENATE_EXPIRY;\\n  uint256 PACKAGE_TYPE;\\n  uint256 CONTRACT_VERSION;\\n  mapping(uint256 => Proposal) proposals;\\n}\\n\",\"keccak256\":\"0xce123a0457129a14a9c4b28931196bff45ca0e9d62dbd3318bec3fed9376b255\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals can not be approved by Senate\\n * * Expired proposals can not be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0x7092bceb57c78a1a7332d78233e1b3563546102f8bccf62c85ec1c93d9a556c3\",\"license\":\"MIT\"},\"contracts/modules/LiquidityModule/LiquidityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC1155HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../interfaces/IgETH.sol\\\";\\nimport {ILiquidityModule} from \\\"../../interfaces/modules/ILiquidityModule.sol\\\";\\nimport {ILPToken} from \\\"../../interfaces/helpers/ILPToken.sol\\\";\\n// internal - structs\\nimport {LiquidityModuleStorage} from \\\"./structs/storage.sol\\\";\\n// internal - libraries\\nimport {LiquidityModuleLib as LML} from \\\"./libs/LiquidityModuleLib.sol\\\";\\nimport {AmplificationLib as AL} from \\\"./libs/AmplificationLib.sol\\\";\\n\\n/**\\n * @title LM: Liquidity Module\\n *\\n * @notice A StableSwap implementation for ERC1155 staking derivatives, gETH.\\n * * Users become an LP (Liquidity Provider) by depositing their tokens\\n * * in desired ratios for an exchange of the pool token that represents their share of the pool.\\n * * Users can burn pool tokens and withdraw their share of token(s).\\n * * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\\n * * distributed to the LPs.\\n * * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\\n * * stops the ratio of the tokens in the pool from changing.\\n * * Users can always withdraw their tokens via multi-asset withdraws.\\n *\\n * @dev There are no additional functionalities implemented apart from the library.\\n * * However, this module inherits and implements nonReentrant & whenNotPaused modifiers.\\n * * LM has pausability and expects inheriting contract to provide the access control mechanism.\\n *\\n * @dev review: this module delegates its functionality to LML (LiquidityModuleLib).\\n *\\n * @dev 7 functions need to be overriden with access control when inherited:\\n * * pause, unpause, setSwapFee, setAdminFee, withdrawAdminFees, rampA, stopRampA.\\n *\\n * @dev __LiquidityModule_init (or _unchained) call is NECESSARY when inherited.\\n *\\n * note This module utilizes modifiers but does not implement necessary admin checks; or pausability overrides.\\n * * If a package inherits LM, should implement it's own logic around those.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract LiquidityModule is\\n  ILiquidityModule,\\n  ERC1155HolderUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable\\n{\\n  using LML for LiquidityModuleStorage;\\n  using AL for LiquidityModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do NOT have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.LiquidityModule\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant LiquidityModuleStorageLocation =\\n    0xbf570a7b0f42d13b79178a015638486db13c20a3e56dc93ef0739ba4e0119a00;\\n\\n  function _getLiquidityModuleStorage() internal pure returns (LiquidityModuleStorage storage $) {\\n    assembly {\\n      $.slot := LiquidityModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event TokenSwap(\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n\\n  /**\\n   * @notice Modifier to check deadline against current timestamp\\n   * @param deadline latest timestamp to accept this transaction\\n   */\\n  modifier deadlineCheck(uint256 deadline) {\\n    require(block.timestamp <= deadline, \\\"LM:Deadline not met\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   *\\n   * @dev these functions MUST be overriden for admin functionality.\\n   */\\n\\n  /**\\n   * @dev -> external\\n   */\\n  function pause() external virtual override;\\n\\n  function unpause() external virtual override;\\n\\n  /**\\n   * @notice Update the swap fee to be applied on swaps\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(uint256 newSwapFee) external virtual override;\\n\\n  /**\\n   * @notice Update the admin fee. Admin fee takes portion of the swap fee.\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(uint256 newAdminFee) external virtual override;\\n\\n  /**\\n   * @notice Withdraw all admin fees to the contract owner\\n   */\\n  function withdrawAdminFees(address receiver) external virtual override;\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA and futureTime\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param futureA the new A to ramp towards\\n   * @param futureTime timestamp when the new A should be reached\\n   */\\n  function rampA(uint256 futureA, uint256 futureTime) external virtual override;\\n\\n  /**\\n   * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\\n   */\\n  function stopRampA() external virtual override;\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __LiquidityModule_init(\\n    address _gETH_position,\\n    address _lpToken_referance,\\n    uint256 _pooledTokenId,\\n    uint256 _A,\\n    uint256 _swapFee,\\n    string memory _poolName\\n  ) internal onlyInitializing {\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC1155Holder_init();\\n    __LiquidityModule_init_unchained(\\n      _gETH_position,\\n      _lpToken_referance,\\n      _pooledTokenId,\\n      _A,\\n      _swapFee,\\n      _poolName\\n    );\\n  }\\n\\n  function __LiquidityModule_init_unchained(\\n    address _gETH_position,\\n    address _lpToken_referance,\\n    uint256 _pooledTokenId,\\n    uint256 _A,\\n    uint256 _swapFee,\\n    string memory _poolName\\n  ) internal onlyInitializing {\\n    require(_gETH_position != address(0), \\\"LM:_gETH_position can not be zero\\\");\\n    require(_lpToken_referance != address(0), \\\"LM:_lpToken_referance can not be zero\\\");\\n    require(_pooledTokenId != 0, \\\"LM:_pooledTokenId can not be zero\\\");\\n    require(_A != 0, \\\"LM:_A can not be zero\\\");\\n    require(_A < AL.MAX_A, \\\"LM:_A exceeds maximum\\\");\\n    require(_swapFee < LML.MAX_SWAP_FEE, \\\"LM:_swapFee exceeds maximum\\\");\\n\\n    // Clone and initialize a LPToken contract\\n    ILPToken _lpToken = ILPToken(Clones.clone(_lpToken_referance));\\n    string memory name_prefix = \\\"Geode LP Token: \\\";\\n    string memory symbol_suffix = \\\"-LP\\\";\\n    _lpToken.initialize(\\n      string(abi.encodePacked(name_prefix, _poolName)),\\n      string(abi.encodePacked(_poolName, symbol_suffix))\\n    );\\n\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    $.gETH = IgETH(_gETH_position);\\n    $.lpToken = _lpToken;\\n    $.pooledTokenId = _pooledTokenId;\\n    $.initialA = _A * AL.A_PRECISION;\\n    $.futureA = _A * AL.A_PRECISION;\\n    $.swapFee = _swapFee;\\n\\n    // Do not trust middlewares. Protect LPs, gETH tokens from\\n    // issues that can be surfaced with future middlewares.\\n    $.gETH.avoidMiddlewares(_pooledTokenId, true);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function LiquidityParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address gETH,\\n      address lpToken,\\n      uint256 pooledTokenId,\\n      uint256 initialA,\\n      uint256 futureA,\\n      uint256 initialATime,\\n      uint256 futureATime,\\n      uint256 swapFee,\\n      uint256 adminFee\\n    )\\n  {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    gETH = address($.gETH);\\n    lpToken = address($.lpToken);\\n    pooledTokenId = $.pooledTokenId;\\n    initialA = $.initialA;\\n    futureA = $.futureA;\\n    initialATime = $.initialATime;\\n    futureATime = $.futureATime;\\n    swapFee = $.swapFee;\\n    adminFee = $.adminFee;\\n  }\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n * (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @return A parameter\\n   */\\n  function getA() external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.getA();\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision form\\n   * @dev See the StableSwap paper for details\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise() external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.getAPrecise();\\n  }\\n\\n  /**\\n   * @notice Debt, The amount of buyback for stable pricing (1=1).\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\n   * @dev result might change when price is in.\\n   */\\n  function getDebt() external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.getDebt();\\n  }\\n\\n  /**\\n   * @notice Return current balance of the pooled token at given index\\n   * @param index the index of the token\\n   * @return current balance of the pooled token at given index with token's native precision\\n   */\\n  function getBalance(uint8 index) external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.balances[index];\\n  }\\n\\n  /**\\n   * @notice Get the virtual override price, to help calculate profit\\n   * @return the virtual override price\\n   */\\n  function getVirtualPrice() external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.getVirtualPrice();\\n  }\\n\\n  /**\\n   * @notice Reads the accumulated amount of admin fees of the token with given index\\n   * @param index Index of the pooled token\\n   * @return admin's token balance in the token's precision\\n   */\\n  function getAdminBalance(uint256 index) external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.getAdminBalance(index);\\n  }\\n\\n  /**\\n   * @custom:section                           ** HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive on swap\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell. If the token charges\\n   * a fee on transfers, use the amount that gets transferred after the fee.\\n   * @return amount of tokens the user will receive\\n   */\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return token amount the user will receive\\n   */\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view virtual override returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.calculateTokenAmount(amounts, deposit);\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of LP tokens\\n   * @param amount the amount of LP tokens that would be burned on withdrawal\\n   * @return array of token balances that the user will receive\\n   */\\n  function calculateRemoveLiquidity(\\n    uint256 amount\\n  ) external view virtual override returns (uint256[2] memory) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.calculateRemoveLiquidity(amount);\\n  }\\n\\n  /**\\n   * @notice Calculate the amount of underlying token available to withdraw\\n   * when withdrawing via only single token\\n   * @param tokenAmount the amount of LP token to burn\\n   * @param tokenIndex index of which token will be withdrawn\\n   * @return availableTokenAmount calculated amount of underlying token\\n   * available to withdraw\\n   */\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view virtual override returns (uint256 availableTokenAmount) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.calculateWithdrawOneToken(tokenAmount, tokenIndex);\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Swap two tokens using this pool\\n   * @param tokenIndexFrom the token the user wants to swap from\\n   * @param tokenIndexTo the token the user wants to swap to\\n   * @param dx the amount of tokens the user wants to swap from\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @param deadline latest timestamp to accept this transaction\\n   */\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  )\\n    public\\n    payable\\n    virtual\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    deadlineCheck(deadline)\\n    returns (uint256)\\n  {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool with the given amounts of tokens\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * @param deadline latest timestamp to accept this transaction\\n   * @return amount of LP token user minted and received\\n   */\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  )\\n    public\\n    payable\\n    virtual\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    deadlineCheck(deadline)\\n    returns (uint256)\\n  {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.addLiquidity(amounts, minToMint);\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   *        acceptable for this burn. Useful as a front-running mitigation\\n   * @param deadline latest timestamp to accept this transaction\\n   * @return amounts of tokens user received\\n   */\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) public virtual override nonReentrant deadlineCheck(deadline) returns (uint256[2] memory) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.removeLiquidity(amount, minAmounts);\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param tokenAmount the amount of the token you want to receive\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @param deadline latest timestamp to accept this transaction\\n   * @return amount of chosen token user received\\n   */\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) public virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.removeLiquidityOneToken(tokenAmount, tokenIndex, minAmount);\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @param deadline latest timestamp to accept this transaction\\n   * @return amount of LP tokens burned\\n   */\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) public virtual override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n    LiquidityModuleStorage storage $ = _getLiquidityModuleStorage();\\n    return $.removeLiquidityImbalance(amounts, maxBurnAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xfadc8fd6e63bb8f4f3cf2bceae98ae857fdea22ef66486ecee10b0ad0abc9957\",\"license\":\"MIT\"},\"contracts/modules/LiquidityModule/libs/AmplificationLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - structs\\nimport {LiquidityModuleStorage} from \\\"../structs/storage.sol\\\";\\n// internal - libraries\\nimport {LiquidityModuleLib as LML} from \\\"./LiquidityModuleLib.sol\\\";\\n\\n/**\\n * @title AL: Amplification Library\\n *\\n * @notice A helper library for Liquidity Module Library (LML) to calculate and ramp the A parameter of a given `LiquidityModuleLib.LiquidityModuleStorage` struct.\\n *\\n * @dev review: Liquidity Module for the StableSwap logic.\\n * @dev This library assumes the Swap struct is fully validated.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary AmplificationLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  uint256 internal constant A_PRECISION = 100;\\n  uint256 internal constant MAX_A = 1e6;\\n  uint256 internal constant MAX_A_CHANGE = 2;\\n  uint256 internal constant MIN_RAMP_TIME = 14 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n * (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter\\n   */\\n  function getA(LiquidityModuleStorage storage self) internal view returns (uint256) {\\n    return _getAPrecise(self) / (A_PRECISION);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise(LiquidityModuleStorage storage self) internal view returns (uint256) {\\n    return _getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function _getAPrecise(LiquidityModuleStorage storage self) internal view returns (uint256) {\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\n    uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n    if (block.timestamp < t1) {\\n      uint256 t0 = self.initialATime; // time when ramp is started\\n      uint256 a0 = self.initialA; // initial A value when ramp is started\\n      if (a1 > a0) {\\n        // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\n      } else {\\n        // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\n      }\\n    } else {\\n      return a1;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param self Swap struct to update\\n   * @param futureA_ the new A to ramp towards\\n   * @param futureTime_ timestamp when the new A should be reached\\n   */\\n  function rampA(\\n    LiquidityModuleStorage storage self,\\n    uint256 futureA_,\\n    uint256 futureTime_\\n  ) internal {\\n    require(block.timestamp >= self.initialATime + 1 days, \\\"AL:Wait 1 day before starting ramp\\\");\\n    require(futureTime_ >= block.timestamp + MIN_RAMP_TIME, \\\"AL:Insufficient ramp time\\\");\\n    require(futureA_ > 0 && futureA_ < MAX_A, \\\"AL:futureA_ must be > 0 and < MAX_A\\\");\\n\\n    uint256 initialAPrecise = _getAPrecise(self);\\n    uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n    if (futureAPrecise < initialAPrecise) {\\n      require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"AL:futureA_ is too small\\\");\\n    } else {\\n      require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"AL:futureA_ is too large\\\");\\n    }\\n\\n    self.initialA = initialAPrecise;\\n    self.futureA = futureAPrecise;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = futureTime_;\\n\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n  }\\n\\n  /**\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\n   * cannot be called for another 24 hours\\n   * @param self Swap struct to update\\n   */\\n  function stopRampA(LiquidityModuleStorage storage self) internal {\\n    require(self.futureATime > block.timestamp, \\\"AL:Ramp is already stopped\\\");\\n\\n    uint256 currentA = _getAPrecise(self);\\n    self.initialA = currentA;\\n    self.futureA = currentA;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = block.timestamp;\\n\\n    emit StopRampA(currentA, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x341a7de203e33638b20e84f3cb1f12acbad8355b872a9020abb03b03b19733b3\",\"license\":\"MIT\"},\"contracts/modules/LiquidityModule/libs/LiquidityModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {gETH_DENOMINATOR, PERCENTAGE_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {ILPToken} from \\\"../../../interfaces/helpers/ILPToken.sol\\\";\\n// internal - structs\\nimport {LiquidityModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {CalculateWithdrawOneTokenDYInfo, ManageLiquidityInfo} from \\\"../structs/helpers.sol\\\";\\n// internal - libraries\\nimport {AmplificationLib as AL} from \\\"./AmplificationLib.sol\\\";\\n\\n/**\\n * @title LiquidityModule Library - LML\\n *\\n * @notice A library to be used within LiquidityModule\\n * * Contains functions responsible for custody and AMM functionalities with some changes.\\n * * The main functionality of Liquidity Pools is allowing the depositors to have instant access to liquidity\\n * * relying on the Oracle Price, with the help of Liquidity Providers.\\n *\\n * @dev focus point (1-1) of the pricing algorithm is manipulated with PriceIn and PriceOut functions.\\n * Because the underlying price of the staked assets are expected to raise in time.\\n * One can see this similar to accomplishing a \\\"rebasing\\\" logic, with the help of a trusted price source.\\n * Whenever \\\"Effective Balance\\\" is mentioned it refers to the balance projected with the underlying price.\\n *\\n * @dev Contracts relying on this library must initialize LiquidityModuleLib.Swap struct\\n * * Note that this library contains both functions called by users and admins.\\n * * Admin functions should be protected within contracts using this library.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary LiquidityModuleLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice Max swap fee is 1% or 100bps of each swap\\n  uint256 internal constant MAX_SWAP_FEE = PERCENTAGE_DENOMINATOR / 100;\\n\\n  /// @notice Max adminFee is 50% of the swapFee\\n  /// adminFee does not add additional fee on top of swapFee\\n  /// instead it takes a certain percentage of the swapFee.\\n  /// Therefore it has no impact on users but only on the earnings of LPs\\n  uint256 internal constant MAX_ADMIN_FEE = (50 * PERCENTAGE_DENOMINATOR) / 100;\\n\\n  /// @notice Constant value used as max loop limit\\n  uint256 internal constant MAX_LOOP_LIMIT = 256;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n\\n  event TokenSwap(\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @custom:subsection Math helpers\\n   */\\n\\n  /**\\n   * @notice Compares a and b and returns true if the difference between a and b is 1 or 0.\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return True if the difference between a and b is less than 1 or equal.\\n   */\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return (difference(a, b) <= 1);\\n  }\\n\\n  /**\\n   * @notice Calculates absolute difference between a and b\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return Difference between a and b\\n   */\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a > b) {\\n      return a - b;\\n    }\\n    return b - a;\\n  }\\n\\n  /**\\n   * @custom:subsection StableSwap invariants: D,Y,YD\\n   */\\n\\n  /**\\n   * @notice Calculate the price of a token in the pool with given\\n   *  balances and a particular D.\\n   *\\n   * @dev This is accomplished via solving the invariant iteratively.\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\n   *\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n   * x_1**2 + b*x_1 = c\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n   *\\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n   * @param tokenIndex Index of token we are calculating for.\\n   * @param xp a  set of pool balances. Array should be\\n   * the same cardinality as the pool.\\n   * @param d the stableswap invariant\\n   * @return the price of the token, in the same precision as in xp\\n   */\\n  function getYD(\\n    uint256 a,\\n    uint8 tokenIndex,\\n    uint256[2] memory xp,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    require(tokenIndex < numTokens, \\\"LML:Token not found\\\");\\n\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < numTokens; ) {\\n      if (i != tokenIndex) {\\n        s = s + xp[i];\\n        c = (c * d) / (xp[i] * (numTokens));\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // c = c * D * D * D * ... overflow!\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    c = (c * d * AL.A_PRECISION) / (nA * numTokens);\\n\\n    uint256 b = s + ((d * AL.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / (2 * y + b - d);\\n      if (within1(y, yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return the invariant, at the precision of the pool\\n   */\\n  function getD(uint256[2] memory xp, uint256 a) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    uint256 s = xp[0] + xp[1];\\n    if (s == 0) {\\n      return 0;\\n    }\\n\\n    uint256 prevD;\\n    uint256 d = s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      uint256 dP = (d ** (numTokens + 1)) / (numTokens ** numTokens * xp[0] * xp[1]);\\n      prevD = d;\\n      d =\\n        ((((nA * s) / AL.A_PRECISION) + dP * numTokens) * (d)) /\\n        (((nA - AL.A_PRECISION) * (d)) / (AL.A_PRECISION) + ((numTokens + 1) * dP));\\n\\n      if (within1(d, prevD)) {\\n        return d;\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n    // function which does not rely on D.\\n    revert(\\\"D does not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\n   * This function is used as a helper function to calculate how much TO token\\n   * the user should receive on swap.\\n   *\\n   * @param preciseA precise form of amplification coefficient\\n   * @param tokenIndexFrom index of FROM token\\n   * @param tokenIndexTo index of TO token\\n   * @param x the new total amount of FROM token\\n   * @param xp balances of the tokens in the pool\\n   * @return the amount of TO token that should remain in the pool\\n   */\\n  function getY(\\n    uint256 preciseA,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 x,\\n    uint256[2] memory xp\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    require(tokenIndexFrom != tokenIndexTo, \\\"LML:Cannot compare token to itself\\\");\\n    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"LML:Tokens must be in pool\\\");\\n\\n    uint256 d = getD(xp, preciseA);\\n    uint256 c = d;\\n    uint256 s = x;\\n    uint256 nA = numTokens * (preciseA);\\n\\n    c = (c * d) / (x * numTokens);\\n    c = (c * d * (AL.A_PRECISION)) / (nA * numTokens);\\n    uint256 b = s + ((d * AL.A_PRECISION) / nA);\\n\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / (2 * y + b - d);\\n      if (within1(y, yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** REBASING FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice This function MULTIPLIES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balance balance that will be taken into calculation\\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\\n   */\\n  function _pricedIn(\\n    LiquidityModuleStorage storage self,\\n    uint256 balance,\\n    uint256 i\\n  ) internal view returns (uint256) {\\n    return\\n      i == 1 ? (balance * self.gETH.pricePerShare(self.pooledTokenId)) / gETH_DENOMINATOR : balance;\\n  }\\n\\n  /**\\n   * @notice This function DIVIDES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balance balance that will be taken into calculation\\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\\n   */\\n  function _pricedOut(\\n    LiquidityModuleStorage storage self,\\n    uint256 balance,\\n    uint256 i\\n  ) internal view returns (uint256) {\\n    return\\n      i == 1 ? (balance * gETH_DENOMINATOR) / self.gETH.pricePerShare(self.pooledTokenId) : balance;\\n  }\\n\\n  /**\\n   * @notice This function MULTIPLIES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balances ARRAY of balances that will be taken into calculation\\n   */\\n  function _pricedInBatch(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256[2] memory _p) {\\n    _p[0] = balances[0];\\n    _p[1] = (balances[1] * self.gETH.pricePerShare(self.pooledTokenId)) / gETH_DENOMINATOR;\\n    return _p;\\n  }\\n\\n  /**\\n   * @notice This function DIVIDES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balances ARRAY of balances that will be taken into calculation\\n   */\\n  function _pricedOutBatch(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256[2] memory _p) {\\n    _p[0] = balances[0];\\n    _p[1] = (balances[1] * gETH_DENOMINATOR) / self.gETH.pricePerShare(self.pooledTokenId);\\n    return _p;\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** DEBT FUNCTIONS **\\n   *\\n   * @custom:visibility -> view\\n   *\\n   * @dev debt refers to the amount of ETH needed to stabilize the pool\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice Get Debt, The amount of buyback for stable pricing.\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\n   */\\n  function _getDebt(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] memory xp,\\n    uint256 a\\n  ) internal view returns (uint256 debt) {\\n    uint256 halfD = getD(xp, a) >> 1;\\n    if (xp[0] >= halfD) {\\n      debt = 0;\\n    } else {\\n      uint256 dy = xp[1] - halfD;\\n      uint256 feeHalf = ((dy * self.swapFee) / PERCENTAGE_DENOMINATOR) >> 1;\\n      debt = halfD - xp[0] + feeHalf;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\n   * @dev might change when price is in.\\n   */\\n  function getDebt(LiquidityModuleStorage storage self) external view returns (uint256) {\\n    return _getDebt(self, _pricedInBatch(self, self.balances), AL._getAPrecise(self));\\n  }\\n\\n  /**\\n   * @custom:section                           ** SWAP HELPER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> pure-internal\\n   */\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of\\n   * LP tokens\\n   *\\n   * @param amount the amount of LP tokens that would to be burned on\\n   * withdrawal\\n   * @return amounts of tokens user will receive as an array [ETH, gETH]\\n   */\\n  function _calculateRemoveLiquidity(\\n    uint256[2] memory balances,\\n    uint256 amount,\\n    uint256 totalSupply\\n  ) internal pure returns (uint256[2] memory amounts) {\\n    require(amount <= totalSupply, \\\"LML:Cannot exceed total supply\\\");\\n\\n    amounts[0] = (balances[0] * amount) / totalSupply;\\n    amounts[1] = (balances[1] * amount) / totalSupply;\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function _calculateWithdrawOneToken(\\n    LiquidityModuleStorage storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 totalSupply\\n  ) internal view returns (uint256, uint256) {\\n    uint256 dy;\\n    uint256 newY;\\n    uint256 currentY;\\n\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount, totalSupply);\\n\\n    uint256 dySwapFee = currentY - newY - dy;\\n\\n    return (dy, dySwapFee);\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   * @return dyFee the associated fee\\n   */\\n  function _calculateSwap(\\n    LiquidityModuleStorage storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\n    require(tokenIndexFrom < 2 && tokenIndexTo < 2, \\\"LML:Token index out of range\\\");\\n\\n    uint256 x = _pricedIn(self, dx + balances[tokenIndexFrom], tokenIndexFrom);\\n    uint256[2] memory pricedBalances = _pricedInBatch(self, balances);\\n    uint256 y = _pricedOut(\\n      self,\\n      getY(AL._getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, pricedBalances),\\n      tokenIndexTo // => not id, index !!!\\n    );\\n    dy = balances[tokenIndexTo] - y - 1;\\n    dyFee = (dy * self.swapFee) / (PERCENTAGE_DENOMINATOR);\\n    dy = dy - dyFee;\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\n   * the fee of withdrawing in one token\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\n   * @param tokenIndex which token will be withdrawn\\n   * @param self Swap struct to read from\\n   * @return the amount of token user will receive\\n   */\\n  function calculateWithdrawOneToken(\\n    LiquidityModuleStorage storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256) {\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      self.lpToken.totalSupply()\\n    );\\n    return availableTokenAmount;\\n  }\\n\\n  /**\\n   * @notice Calculate the dy of withdrawing in one token\\n   * @param self Swap struct to read from\\n   * @param tokenIndex which token will be withdrawn\\n   * @param tokenAmount the amount to withdraw in the pools precision\\n   * @return the d and the new y after withdrawing one token\\n   */\\n  function calculateWithdrawOneTokenDY(\\n    LiquidityModuleStorage storage self,\\n    uint8 tokenIndex,\\n    uint256 tokenAmount,\\n    uint256 totalSupply\\n  ) internal view returns (uint256, uint256, uint256) {\\n    // Get the current D, then solve the stableswap invariant\\n    // y_i for D - tokenAmount\\n\\n    require(tokenIndex < 2, \\\"LML:Token index out of range\\\");\\n\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n    v.preciseA = AL._getAPrecise(self);\\n    v.d0 = getD(_pricedInBatch(self, self.balances), v.preciseA);\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n    require(tokenAmount <= self.balances[tokenIndex], \\\"LML:Withdraw exceeds available\\\");\\n\\n    v.newY = _pricedOut(\\n      self,\\n      getYD(v.preciseA, tokenIndex, _pricedInBatch(self, self.balances), v.d1),\\n      tokenIndex\\n    );\\n\\n    uint256[2] memory xpReduced;\\n\\n    v.feePerToken = self.swapFee >> 1;\\n    for (uint256 i; i < 2; ) {\\n      uint256 xpi = self.balances[i];\\n      xpReduced[i] =\\n        xpi -\\n        ((((i == tokenIndex) ? (xpi * v.d1) / v.d0 - v.newY : xpi - ((xpi * v.d1) / (v.d0))) *\\n          (v.feePerToken)) / (PERCENTAGE_DENOMINATOR));\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    uint256 dy = xpReduced[tokenIndex] -\\n      _pricedOut(\\n        self,\\n        (getYD(v.preciseA, tokenIndex, _pricedInBatch(self, xpReduced), v.d1)),\\n        tokenIndex\\n      );\\n    dy = dy - 1;\\n\\n    return (dy, v.newY, self.balances[tokenIndex]);\\n  }\\n\\n  /**\\n   * @notice Get the virtual price, to help calculate profit\\n   * @param self Swap struct to read from\\n   * @return the virtual price\\n   */\\n  function getVirtualPrice(LiquidityModuleStorage storage self) external view returns (uint256) {\\n    uint256 d = getD(_pricedInBatch(self, self.balances), AL._getAPrecise(self));\\n    ILPToken lpToken = self.lpToken;\\n    uint256 supply = lpToken.totalSupply();\\n    if (supply > 0) {\\n      return (d * 1e18) / supply;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   */\\n  function calculateSwap(\\n    LiquidityModuleStorage storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256 dy) {\\n    (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, self.balances);\\n  }\\n\\n  /**\\n   * @notice Uses _calculateRemoveLiquidity with Effective Balances,\\n   * then projects the prices to the token amounts\\n   * to get Real Balances, before removing them from pool.\\n   */\\n  function calculateRemoveLiquidity(\\n    LiquidityModuleStorage storage self,\\n    uint256 amount\\n  ) external view returns (uint256[2] memory) {\\n    return\\n      _pricedOutBatch(\\n        self,\\n        _calculateRemoveLiquidity(\\n          _pricedInBatch(self, self.balances),\\n          amount,\\n          self.lpToken.totalSupply()\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param self Swap struct to read from\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\n   * deposit was false, total amount of lp token that will be burned\\n   */\\n  function calculateTokenAmount(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256) {\\n    uint256 a = AL._getAPrecise(self);\\n    uint256[2] memory balances = self.balances;\\n\\n    uint256 d0 = getD(_pricedInBatch(self, balances), a);\\n    for (uint256 i; i < 2; ) {\\n      if (deposit) {\\n        balances[i] = balances[i] + amounts[i];\\n      } else {\\n        require(amounts[i] <= balances[i], \\\"LML:Cannot withdraw > available\\\");\\n        balances[i] = balances[i] - amounts[i];\\n      }\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    uint256 d1 = getD(_pricedInBatch(self, balances), a);\\n    uint256 totalSupply = self.lpToken.totalSupply();\\n\\n    if (deposit) {\\n      return ((d1 - d0) * totalSupply) / d0;\\n    } else {\\n      return ((d0 - d1) * totalSupply) / d0;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** ADMIN HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice return accumulated amount of admin fees of the token with given index\\n   * @param self Swap struct to read from\\n   * @param index Index of the pooled token\\n   * @return admin balance in the token's precision\\n   */\\n  function getAdminBalance(\\n    LiquidityModuleStorage storage self,\\n    uint256 index\\n  ) external view returns (uint256) {\\n    require(index < 2, \\\"LML:Token index out of range\\\");\\n    if (index == 0) {\\n      return address(this).balance - (self.balances[index]);\\n    } else if (index == 1) {\\n      return self.gETH.balanceOf(address(this), self.pooledTokenId) - (self.balances[index]);\\n    } else {\\n      revert(\\\"LML:invalid index\\\");\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swap(\\n    LiquidityModuleStorage storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) external returns (uint256) {\\n    IgETH gETHRef = self.gETH;\\n    if (tokenIndexFrom == 0) {\\n      // Means user is selling some ETH to the pool to get some gETH.\\n      // In which case, we need to send exactly that amount of ETH.\\n      require(dx == msg.value, \\\"LML:Cannot swap != eth sent\\\");\\n    }\\n    if (tokenIndexFrom == 1) {\\n      // Means user is selling some gETH to the pool to get some ETH.\\n\\n      require(dx <= gETHRef.balanceOf(msg.sender, self.pooledTokenId), \\\"LML:Cannot swap > you own\\\");\\n\\n      // Transfer tokens first\\n      uint256 beforeBalance = gETHRef.balanceOf(address(this), self.pooledTokenId);\\n      gETHRef.safeTransferFrom(msg.sender, address(this), self.pooledTokenId, dx, \\\"\\\");\\n\\n      // Use the actual transferred amount for AMM math\\n      dx = gETHRef.balanceOf(address(this), self.pooledTokenId) - beforeBalance;\\n    }\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    // Meaning the real balances *without* any effect of underlying price\\n    // However, when we call _calculateSwap, it uses pricedIn function before calculation,\\n    // and pricedOut function after the calculation. So, we don't need to use priceOut here.\\n    uint256[2] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n\\n    require(dy >= minDy, \\\"LML:Swap didnot result in min tokens\\\");\\n    uint256 dyAdminFee = (dyFee * self.adminFee) / PERCENTAGE_DENOMINATOR;\\n\\n    // To prevent any Reentrancy, balances are updated before transfering the tokens.\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n    if (tokenIndexTo == 0) {\\n      // Means contract is going to send Idle Ether (ETH)\\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n    if (tokenIndexTo == 1) {\\n      // Means contract is going to send staked ETH (gETH)\\n      gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, dy, \\\"\\\");\\n    }\\n\\n    emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param self Swap struct to read from and write to\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] memory amounts,\\n    uint256 minToMint\\n  ) external returns (uint256) {\\n    require(amounts[0] == msg.value, \\\"LML:received less or more ETH than expected\\\");\\n    IgETH gETHRef = self.gETH;\\n    // current state\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      self.lpToken,\\n      0,\\n      0,\\n      0,\\n      AL._getAPrecise(self),\\n      0,\\n      self.balances\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n    if (v.totalSupply != 0) {\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\n    }\\n\\n    uint256[2] memory newBalances;\\n    newBalances[0] = v.balances[0] + msg.value;\\n\\n    for (uint256 i; i < 2; ) {\\n      require(v.totalSupply != 0 || amounts[i] > 0, \\\"LML:Must supply all tokens in pool\\\");\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    {\\n      // Transfer tokens first\\n      uint256 beforeBalance = gETHRef.balanceOf(address(this), self.pooledTokenId);\\n      gETHRef.safeTransferFrom(msg.sender, address(this), self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n      // Update the amounts[] with actual transfer amount\\n      amounts[1] = gETHRef.balanceOf(address(this), self.pooledTokenId) - beforeBalance;\\n\\n      newBalances[1] = v.balances[1] + amounts[1];\\n    }\\n\\n    // invariant after change\\n    v.d1 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\n    require(v.d1 > v.d0, \\\"LML:D should increase\\\");\\n\\n    // updated to reflect fees and calculate the user's LP tokens\\n    v.d2 = v.d1;\\n    uint256[2] memory fees;\\n\\n    if (v.totalSupply != 0) {\\n      uint256 feePerToken = self.swapFee >> 1;\\n\\n      for (uint256 i; i < 2; ) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n\\n        fees[i] =\\n          (feePerToken * (difference(idealBalance, newBalances[i]))) /\\n          (PERCENTAGE_DENOMINATOR);\\n        self.balances[i] =\\n          newBalances[i] -\\n          ((fees[i] * (self.adminFee)) / (PERCENTAGE_DENOMINATOR));\\n        newBalances[i] = newBalances[i] - (fees[i]);\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n\\n      v.d2 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\n    } else {\\n      // the initial depositor doesn't pay fees\\n      self.balances = newBalances;\\n    }\\n\\n    uint256 toMint;\\n    if (v.totalSupply == 0) {\\n      toMint = v.d1;\\n    } else {\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n    }\\n\\n    require(toMint >= minToMint, \\\"LML:Could not mint min requested\\\");\\n    // mint the user's LP tokens\\n    v.lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param self Swap struct to read from and write to\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   * acceptable for this burn. Useful as a front-running mitigation\\n   * @return amounts of tokens the user received\\n   */\\n  function removeLiquidity(\\n    LiquidityModuleStorage storage self,\\n    uint256 amount,\\n    uint256[2] calldata minAmounts\\n  ) external returns (uint256[2] memory) {\\n    ILPToken lpToken = self.lpToken;\\n    IgETH gETHRef = self.gETH;\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\"LML:>LP.balanceOf\\\");\\n\\n    uint256[2] memory balances = self.balances;\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    uint256[2] memory amounts = _pricedOutBatch(\\n      self,\\n      _calculateRemoveLiquidity(_pricedInBatch(self, balances), amount, totalSupply)\\n    );\\n\\n    for (uint256 i; i < amounts.length; ) {\\n      require(amounts[i] >= minAmounts[i], \\\"LML:amounts[i] < minAmounts[i]\\\");\\n      self.balances[i] = balances[i] - amounts[i];\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    lpToken.burnFrom(msg.sender, amount);\\n\\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\\\"\\\");\\n    require(sent, \\\"LML:Failed to send Ether\\\");\\n\\n    gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n    emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param self Swap struct to read from and write to\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    LiquidityModuleStorage storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount\\n  ) external returns (uint256) {\\n    ILPToken lpToken = self.lpToken;\\n    IgETH gETHRef = self.gETH;\\n\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\"LML:>LP.balanceOf\\\");\\n    require(tokenIndex < 2, \\\"LML:Token not found\\\");\\n\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      totalSupply\\n    );\\n\\n    require(dy >= minAmount, \\\"LML:dy < minAmount\\\");\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    self.balances[tokenIndex] =\\n      self.balances[tokenIndex] -\\n      (dy + ((dyFee * (self.adminFee)) / (PERCENTAGE_DENOMINATOR)));\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    if (tokenIndex == 0) {\\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n    if (tokenIndex == 1) {\\n      gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, dy, \\\"\\\");\\n    }\\n\\n    emit RemoveLiquidityOne(msg.sender, tokenAmount, totalSupply, tokenIndex, dy);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   *\\n   * @param self Swap struct to read from and write to\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @return actual amount of LP tokens burned in the withdrawal\\n   */\\n  function removeLiquidityImbalance(\\n    LiquidityModuleStorage storage self,\\n    uint256[2] memory amounts,\\n    uint256 maxBurnAmount\\n  ) public returns (uint256) {\\n    IgETH gETHRef = self.gETH;\\n\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      self.lpToken,\\n      0,\\n      0,\\n      0,\\n      AL._getAPrecise(self),\\n      0,\\n      self.balances\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n\\n    require(\\n      maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0,\\n      \\\"LML:>LP.balanceOf\\\"\\n    );\\n\\n    uint256 feePerToken = self.swapFee >> 1;\\n    uint256[2] memory fees;\\n\\n    {\\n      uint256[2] memory balances1;\\n\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\n      for (uint256 i; i < 2; ) {\\n        require(amounts[i] <= v.balances[i], \\\"LML:Cannot withdraw > available\\\");\\n        balances1[i] = v.balances[i] - amounts[i];\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n      v.d1 = getD(_pricedInBatch(self, balances1), v.preciseA);\\n\\n      for (uint256 i; i < 2; ) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        uint256 _diff = difference(idealBalance, balances1[i]);\\n        fees[i] = (feePerToken * _diff) / PERCENTAGE_DENOMINATOR;\\n        uint256 adminFee = self.adminFee;\\n        {\\n          self.balances[i] = balances1[i] - ((fees[i] * adminFee) / PERCENTAGE_DENOMINATOR);\\n        }\\n        balances1[i] = balances1[i] - fees[i];\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n\\n      v.d2 = getD(_pricedInBatch(self, balances1), v.preciseA);\\n    }\\n\\n    uint256 tokenAmount = ((v.d0 - v.d2) * (v.totalSupply)) / v.d0;\\n    require(tokenAmount != 0, \\\"LML:Burnt amount cannot be zero\\\");\\n    tokenAmount = tokenAmount + 1;\\n\\n    require(tokenAmount <= maxBurnAmount, \\\"LML:tokenAmount > maxBurnAmount\\\");\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\\\"\\\");\\n    require(sent, \\\"LML:Failed to send Ether\\\");\\n\\n    gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n    emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n    return tokenAmount;\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** ADMIN FUNCTIONS **\\n   */\\n\\n  /**\\n   * @notice withdraw all admin fees to a given address\\n   * @param self Swap struct to withdraw fees from\\n   * @param receiver Address to send the fees to\\n   */\\n  function withdrawAdminFees(LiquidityModuleStorage storage self, address receiver) external {\\n    IgETH gETHRef = self.gETH;\\n    uint256 tokenBalance = gETHRef.balanceOf(address(this), self.pooledTokenId) - self.balances[1];\\n    if (tokenBalance != 0) {\\n      gETHRef.safeTransferFrom(address(this), receiver, self.pooledTokenId, tokenBalance, \\\"\\\");\\n    }\\n\\n    uint256 etherBalance = address(this).balance - self.balances[0];\\n    if (etherBalance != 0) {\\n      (bool sent, ) = payable(receiver).call{value: etherBalance}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the admin fee\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\n   * @param self Swap struct to update\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(LiquidityModuleStorage storage self, uint256 newAdminFee) external {\\n    require(newAdminFee <= MAX_ADMIN_FEE, \\\"LML:Fee is too high\\\");\\n    self.adminFee = newAdminFee;\\n\\n    emit NewAdminFee(newAdminFee);\\n  }\\n\\n  /**\\n   * @notice update the swap fee\\n   * @dev fee cannot be higher than 1% of each swap\\n   * @param self Swap struct to update\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(LiquidityModuleStorage storage self, uint256 newSwapFee) external {\\n    require(newSwapFee <= MAX_SWAP_FEE, \\\"LML:Fee is too high\\\");\\n    self.swapFee = newSwapFee;\\n\\n    emit NewSwapFee(newSwapFee);\\n  }\\n}\\n\",\"keccak256\":\"0xff2daba6d10f8a617672e11acdaf9a688acd0c26471d6b84113f283aae618763\",\"license\":\"MIT\"},\"contracts/modules/LiquidityModule/structs/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {ILPToken} from \\\"../../../interfaces/helpers/ILPToken.sol\\\";\\n\\n/**\\n * @notice Helper Struct storing variables used in calculations in the\\n * calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n */\\nstruct CalculateWithdrawOneTokenDYInfo {\\n  uint256 d0;\\n  uint256 d1;\\n  uint256 newY;\\n  uint256 feePerToken;\\n  uint256 preciseA;\\n}\\n\\n/**\\n * @notice Helper Struct storing variables used in calculations in the\\n * {add,remove} Liquidity functions to avoid stack too deep errors\\n */\\nstruct ManageLiquidityInfo {\\n  ILPToken lpToken;\\n  uint256 d0;\\n  uint256 d1;\\n  uint256 d2;\\n  uint256 preciseA;\\n  uint256 totalSupply;\\n  uint256[2] balances;\\n}\\n\",\"keccak256\":\"0xc0d1f3f93c320c3cbd99d2156ee92b4d39fa0ad02d1d27079e30418e5af62b4a\",\"license\":\"MIT\"},\"contracts/modules/LiquidityModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal -interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {ILPToken} from \\\"../../../interfaces/helpers/ILPToken.sol\\\";\\n\\n/**\\n * @notice Storage struct for the liquidity pool logic, should be correctly initialized.\\n *\\n * @param gETH ERC1155 contract\\n * @param lpToken address of the LP Token\\n * @param pooledTokenId gETH ID of the pooled staking derivative\\n * @param initialA the amplification coefficient * n * (n - 1)\\n * @param futureA the amplification coef that will be effective after futureATime\\n * @param initialATime variable around the ramp management of A\\n * @param futureATime variable around the ramp management of A\\n * @param swapFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from resulting tokens of a swap\\n * @param adminFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from swapFee\\n * @param balances the pool balance as [ETH, gETH]; the contract's actual token balance might differ\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.LiquidityModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct LiquidityModuleStorage {\\n  IgETH gETH;\\n  ILPToken lpToken;\\n  uint256 pooledTokenId;\\n  uint256 initialA;\\n  uint256 futureA;\\n  uint256 initialATime;\\n  uint256 futureATime;\\n  uint256 swapFee;\\n  uint256 adminFee;\\n  uint256[2] balances;\\n}\\n\",\"keccak256\":\"0x5e9b07677322c86c974148fa036e33973f370c0a5c343c25d23e501c9bad1a8f\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @param state state of the validator, refer to globals.sol\\n * @param index representing this validator's placement on the chronological order of the validators proposals\\n * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n * @param poolId needed for withdrawal_credential\\n * @param operatorId needed for staking after allowance\\n * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n * @param infrastructureFee all fees are crucial for the price calculation by the oracle, even if its zero.\\n * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n **/\\nstruct Validator {\\n  uint64 state;\\n  uint64 index;\\n  uint64 createdAt;\\n  uint64 period;\\n  uint256 poolId;\\n  uint256 operatorId;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes signature31;\\n}\\n\",\"keccak256\":\"0xbbd41f0da602f5bc6cfd7ff7d4feec259d3266f87c711a5c16070d529da441e6\",\"license\":\"MIT\"},\"contracts/packages/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../globals/id_type.sol\\\";\\nimport {PERCENTAGE_DENOMINATOR} from \\\"../globals/macros.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../globals/reserved_key_space.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"../interfaces/modules/IGeodeModule.sol\\\";\\nimport {ILiquidityModule} from \\\"../interfaces/modules/ILiquidityModule.sol\\\";\\nimport {ILiquidityPool} from \\\"../interfaces/packages/ILiquidityPool.sol\\\";\\nimport {IPortal} from \\\"../interfaces/IPortal.sol\\\";\\n// internal - structs\\nimport {GeodeModuleStorage} from \\\"../modules/GeodeModule/structs/storage.sol\\\";\\nimport {LiquidityModuleStorage} from \\\"../modules/LiquidityModule/structs/storage.sol\\\";\\n// internal - libraries\\nimport {GeodeModuleLib as GML} from \\\"../modules/GeodeModule/libs/GeodeModuleLib.sol\\\";\\nimport {AmplificationLib as AL} from \\\"../modules/LiquidityModule/libs/AmplificationLib.sol\\\";\\nimport {LiquidityModuleLib as LML} from \\\"../modules/LiquidityModule/libs/LiquidityModuleLib.sol\\\";\\n// internal - contracts\\nimport {GeodeModule} from \\\"../modules/GeodeModule/GeodeModule.sol\\\";\\nimport {LiquidityModule} from \\\"../modules/LiquidityModule/LiquidityModule.sol\\\";\\n\\n/**\\n * @title LPP: Liquidity Pool Package: Geode Module + Liquidity Module\\n *\\n * @notice LPP is a package that provides a liquidity pool for a staking pool created through Portal.\\n *\\n * @dev TYPE: PACKAGE_LIQUIDITY_POOL\\n * @dev Utilizing IGeodePackage interface, meaning initialize function takes 3 parameters:\\n * * * poolOwner: will be assigned as the senate of the package\\n * * * pooledTokenId: used internally on LM and LML.\\n * * * data: referances 1 parameter: name. Used to generate lpTokenName and lpTokenSymbol for __LM_init.\\n *\\n * @dev review: LM for StableSwap implementation. Also note:\\n * * initial and future A coefficients are set as 60 (LM)\\n * * trade fee set to 4 bips (LM)\\n * * owner fee is set to 0 (LM)\\n * * senate expiry is not effective (GM)\\n *\\n * @dev review: GM for The Limited Upgradability through Dual Governance:\\n * * Governance is the Portal, package version controller.\\n * * Senate is the Staking Pool Owner.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\ncontract LiquidityPool is ILiquidityPool, GeodeModule, LiquidityModule {\\n  using GML for GeodeModuleStorage;\\n  using AL for LiquidityModuleStorage;\\n  using LML for LiquidityModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Following immutable parameters are set when the referance library implementation is deployed.\\n   * It is not desired to provide these package-specific not-changing parameters\\n   * accross all instances of the packages.\\n   * So, we will store them in the ref implementation contract of the package,\\n   * and fetch when needed on initialization of an instance.\\n   */\\n  /// @notice gETH position\\n  address internal immutable gETHPos;\\n  /// @notice Portal position\\n  address internal immutable portalPos;\\n  /// @notice LPToken implementation referance, needs to be cloned\\n  address internal immutable LPTokenRef;\\n  /// @notice LPP package type, useful for Limited Upgradability\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == _getGeodeModuleStorage().SENATE, \\\"LPP:sender NOT owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  /**\\n   * @custom:oz-upgrades-unsafe-allow constructor\\n   */\\n  constructor(address _gETHPos, address _portalPos, address _LPTokenRef) {\\n    require(_gETHPos != address(0), \\\"LPP:_gETHPos can not be zero\\\");\\n    require(_portalPos != address(0), \\\"LPP:_portalPos can not be zero\\\");\\n    require(_LPTokenRef != address(0), \\\"LPP:_LPTokenRef can not be zero\\\");\\n\\n    gETHPos = _gETHPos;\\n    portalPos = _portalPos;\\n    LPTokenRef = _LPTokenRef;\\n\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @param data only poolName is required from Portal\\n   */\\n  function initialize(\\n    uint256 pooledTokenId,\\n    address poolOwner,\\n    bytes calldata versionName,\\n    bytes calldata data\\n  ) public virtual override initializer {\\n    __LiquidityPool_init(pooledTokenId, poolOwner, versionName, data);\\n  }\\n\\n  function __LiquidityPool_init(\\n    uint256 pooledTokenId,\\n    address poolOwner,\\n    bytes calldata versionName,\\n    bytes calldata data\\n  ) internal onlyInitializing {\\n    __GeodeModule_init(\\n      portalPos,\\n      poolOwner,\\n      type(uint256).max,\\n      ID_TYPE.PACKAGE_LIQUIDITY_POOL,\\n      versionName\\n    );\\n    __LiquidityModule_init(\\n      gETHPos,\\n      LPTokenRef,\\n      pooledTokenId,\\n      60,\\n      (4 * PERCENTAGE_DENOMINATOR) / 10000,\\n      string(data)\\n    );\\n    __LiquidityPool_init_unchained();\\n  }\\n\\n  function __LiquidityPool_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice get the gETH ID of the corresponding staking pool\\n   */\\n  function getPoolId() public view override returns (uint256) {\\n    return _getLiquidityModuleStorage().pooledTokenId;\\n  }\\n\\n  /**\\n   * @dev GeodeModule override\\n   */\\n  function getProposedVersion() public view virtual override returns (uint256) {\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n    return IPortal(GMStorage.GOVERNANCE).getPackageVersion(GMStorage.PACKAGE_TYPE);\\n  }\\n\\n  /**\\n   * @dev GeodeModule override\\n   *\\n   * @custom:visibility -> view\\n   */\\n  function isolationMode()\\n    external\\n    view\\n    virtual\\n    override(GeodeModule, IGeodeModule)\\n    returns (bool)\\n  {\\n    if (paused()) {\\n      return true;\\n    }\\n\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n\\n    if (\\n      GMStorage.CONTRACT_VERSION !=\\n      IPortal(GMStorage.GOVERNANCE).getPackageVersion(GMStorage.PACKAGE_TYPE)\\n    ) {\\n      return true;\\n    }\\n\\n    if (GMStorage.APPROVED_UPGRADE != ERC1967Utils.getImplementation()) {\\n      return true;\\n    }\\n\\n    if (\\n      IPortal(GMStorage.GOVERNANCE).readAddress(getPoolId(), rks.CONTROLLER) != GMStorage.SENATE\\n    ) {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @custom:section                           ** ADMIN FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** UPGRADABILITY FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev IGeodePackage override\\n   */\\n  function pullUpgrade() external virtual override onlyOwner {\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n    IPortal Portal = IPortal(GMStorage.GOVERNANCE);\\n\\n    require(!Portal.isolationMode(), \\\"LPP:Portal is isolated\\\");\\n    require(\\n      GMStorage.CONTRACT_VERSION != Portal.getPackageVersion(GMStorage.PACKAGE_TYPE),\\n      \\\"LPP:no upgrades\\\"\\n    );\\n\\n    uint256 id = Portal.pushUpgrade(GMStorage.PACKAGE_TYPE);\\n    approveProposal(id);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** PAUSABILITY FUNCTIONS **\\n   */\\n\\n  /**\\n   * @notice pausing the contract activates the isolationMode\\n   */\\n  function pause() external virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice unpausing the contract deactivates the isolationMode\\n   */\\n  function unpause() external virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** LIQUIDITY POOL **\\n   *\\n   * @dev LM override\\n   */\\n\\n  function setSwapFee(\\n    uint256 newSwapFee\\n  ) public virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _getLiquidityModuleStorage().setSwapFee(newSwapFee);\\n  }\\n\\n  function setAdminFee(\\n    uint256 newAdminFee\\n  ) public virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _getLiquidityModuleStorage().setAdminFee(newAdminFee);\\n  }\\n\\n  function withdrawAdminFees(\\n    address receiver\\n  ) public virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _getLiquidityModuleStorage().withdrawAdminFees(receiver);\\n  }\\n\\n  function rampA(\\n    uint256 futureA,\\n    uint256 futureTime\\n  ) public virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _getLiquidityModuleStorage().rampA(futureA, futureTime);\\n  }\\n\\n  function stopRampA() external virtual override(LiquidityModule, ILiquidityModule) onlyOwner {\\n    _getLiquidityModuleStorage().stopRampA();\\n  }\\n\\n  /**\\n   * @notice fallback functions\\n   */\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5ed92571836096357d399832c4494ffe9ba2d7bb079b9a35b2f88f9606cdcfd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052306080523480156200001657600080fd5b506040516200473b3803806200473b833981016040819052620000399162000242565b6001600160a01b038316620000955760405162461bcd60e51b815260206004820152601c60248201527f4c50503a5f67455448506f732063616e206e6f74206265207a65726f0000000060448201526064015b60405180910390fd5b6001600160a01b038216620000ed5760405162461bcd60e51b815260206004820152601e60248201527f4c50503a5f706f7274616c506f732063616e206e6f74206265207a65726f000060448201526064016200008c565b6001600160a01b038116620001455760405162461bcd60e51b815260206004820152601f60248201527f4c50503a5f4c50546f6b656e5265662063616e206e6f74206265207a65726f0060448201526064016200008c565b6001600160a01b0380841660a05282811660c052811660e0526200016862000171565b5050506200028c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620001c25760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620002225780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b80516001600160a01b03811681146200023d57600080fd5b919050565b6000806000606084860312156200025857600080fd5b620002638462000225565b9250620002736020850162000225565b9150620002836040850162000225565b90509250925092565b60805160a05160c05160e051614467620002d4600039600061288c015260006128390152600061286b015260008181612191015281816121ba01526123d301526144676000f3fe6080604052600436106103395760003560e01c80638beb60b6116101ab578063c4db7fa0116100f7578063e25aa5fa11610095578063e768887e1161006f578063e768887e146109fe578063ef0a712f14610a1e578063f23a6e6114610a3e578063f2fad2b614610a6a57600080fd5b8063e25aa5fa146109a9578063e3a12480146109be578063e72b1d6d146109de57600080fd5b8063d4fd01ce116100d1578063d4fd01ce146108d8578063d6f0df621461093c578063dab840c714610969578063e02a52081461098957600080fd5b8063c4db7fa014610881578063c7f758a814610896578063d46300fd146108c357600080fd5b8063ad3cb1cc11610164578063aec988631161013e578063aec98863146107e7578063b0630715146107fc578063bc197c811461081c578063bfc65c9b1461086157600080fd5b8063ad3cb1cc14610748578063ad4ac4c414610779578063ad8655cb146107c757600080fd5b80638beb60b61461068657806391695586146106a657806398951b56146106b95780639934b281146106e857806399ac48ba14610708578063a95b089f1461072857600080fd5b806352d1902d116102855780636d07e404116102235780637e0ccbff116101fd5780637e0ccbff146106275780638456cb59146106475780638650c0721461065c5780638aa104351461067157600080fd5b80636d07e404146105c557806372267954146105e5578063745653de1461061257600080fd5b8063593d132c1161025f578063593d132c146105265780635a34bb15146105465780635c975abb146105665780635d9e085d1461058b57600080fd5b806352d1902d146104d15780635329512b146104e657806356a72dbf1461050657600080fd5b806334e19907116102f25780633e3a1560116102cc5780633e3a1560146104765780633f4ba83a1461049657806346eda749146104ab5780634f1ef286146104be57600080fd5b806334e199071461041f57806338fff2d0146104415780633b8ba8621461045657600080fd5b806301ffc9a7146103455780630ba819591461037a57806314a6bf0f1461039d5780631da71591146103b2578063289b3c0d146103d2578063342a87a1146103ff57600080fd5b3661034057005b600080fd5b34801561035157600080fd5b5061036561036036600461370b565b610a8a565b60405190151581526020015b60405180910390f35b34801561038657600080fd5b5061038f610ac1565b604051908152602001610371565b3480156103a957600080fd5b5061038f610add565b3480156103be57600080fd5b5061038f6103cd366004613735565b610b60565b3480156103de57600080fd5b506103e7610b73565b6040516001600160a01b039091168152602001610371565b34801561040b57600080fd5b5061038f61041a366004613768565b610b8e565b34801561042b57600080fd5b5061043f61043a366004613794565b610c28565b005b34801561044d57600080fd5b5061038f610cdb565b34801561046257600080fd5b5061038f61047136600461380a565b610cee565b34801561048257600080fd5b5061038f61049136600461386d565b610d99565b3480156104a257600080fd5b5061043f610e7f565b61038f6104b93660046138b9565b610ebc565b61043f6104cc3660046139b0565b610f93565b3480156104dd57600080fd5b5061038f610fb2565b3480156104f257600080fd5b506103e76105013660046139ff565b610fcf565b34801561051257600080fd5b5061038f610521366004613735565b610ff5565b34801561053257600080fd5b5061043f610541366004613735565b611011565b34801561055257600080fd5b5061038f610561366004613a2b565b611058565b34801561057257600080fd5b506000805160206143f28339815191525460ff16610365565b34801561059757600080fd5b5061038f6105a6366004613794565b60009081526000805160206143b2833981519152602052604090205490565b3480156105d157600080fd5b5061043f6105e0366004613a76565b61108f565b3480156105f157600080fd5b50610605610600366004613735565b61111a565b6040516103719190613af6565b34801561061e57600080fd5b5061038f611136565b34801561063357600080fd5b5061038f610642366004613b17565b61118d565b34801561065357600080fd5b5061043f6111d6565b34801561066857600080fd5b50610365611211565b34801561067d57600080fd5b5061038f61139c565b34801561069257600080fd5b5061043f6106a1366004613794565b6113b1565b61038f6106b4366004613b44565b61142c565b3480156106c557600080fd5b506106d96106d4366004613794565b61151a565b60405161037193929190613b91565b3480156106f457600080fd5b5061043f610703366004613bb8565b6115ea565b34801561071457600080fd5b506103e7610723366004613735565b611702565b34801561073457600080fd5b5061038f610743366004613c43565b61171e565b34801561075457600080fd5b50610605604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561078557600080fd5b5061078e6117b8565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610371565b3480156107d357600080fd5b5061043f6107e2366004613c7f565b6117ff565b3480156107f357600080fd5b5061043f611853565b34801561080857600080fd5b5061043f610817366004613c7f565b611a73565b34801561082857600080fd5b50610848610837366004613d10565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610371565b34801561086d57600080fd5b5061038f61087c3660046138b9565b611af6565b34801561088d57600080fd5b5061043f611b71565b3480156108a257600080fd5b506108b66108b1366004613794565b611bb4565b6040516103719190613dbd565b3480156108cf57600080fd5b5061038f611c74565b3480156108e457600080fd5b506108ed611c8a565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610371565b34801561094857600080fd5b5061095c610957366004613e0b565b611d14565b6040516103719190613e41565b34801561097557600080fd5b5061043f610984366004613c7f565b611dcd565b34801561099557600080fd5b5061038f6109a4366004613735565b611e21565b3480156109b557600080fd5b5061038f611e64565b3480156109ca57600080fd5b5061038f6109d9366004613e72565b611eaa565b3480156109ea57600080fd5b5061038f6109f93660046139ff565b611ed8565b348015610a0a57600080fd5b50610605610a193660046139ff565b611ef5565b348015610a2a57600080fd5b5061038f610a39366004613794565b611f12565b348015610a4a57600080fd5b50610848610a59366004613e8d565b63f23a6e6160e01b95945050505050565b348015610a7657600080fd5b5061095c610a85366004613794565b611f9b565b60006001600160e01b03198216630271189760e51b1480610abb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080610acc61202a565b9050610ad78161204e565b91505090565b600080610ae861202a565b6040516320487f3760e21b81526004810182905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90638121fcdc906024015b602060405180830381865af4158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613ef5565b6000610b6c8383612059565b9392505050565b600080610b7e612085565b546001600160a01b031692915050565b600080610b9961202a565b60405162a834bf60e41b8152600481018290526024810186905260ff8516604482015290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90630a834bf0906064015b602060405180830381865af4158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190613ef5565b949350505050565b610c30612085565b600101546001600160a01b03163314610c645760405162461bcd60e51b8152600401610c5b90613f0e565b60405180910390fd5b610c6c61202a565b60405163201c5a7d60e01b815260048101919091526024810182905273648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F9063201c5a7d906044015b60006040518083038186803b158015610cc057600080fd5b505af4158015610cd4573d6000803e3d6000fd5b5050505050565b6000610ce561202a565b60020154905090565b600080610cf9612085565b6040516318ffae5d60e21b815290915073EDC21cd663b77Dd21299638732A747d703553114906363feb97490610d4d9084906000805160206143b2833981519152908c908c908c908c908c90600401613f65565b602060405180830381865af4158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190613ef5565b979650505050505050565b6000610da36120a9565b610dab6120e1565b8180421115610dcc5760405162461bcd60e51b8152600401610c5b90613fad565b6000610dd661202a565b604051630fc067cb60e11b8152600481018290526024810189905260ff881660448201526064810187905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90631f80cf9690608401602060405180830381865af4158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190613ef5565b92505050610c20600160008051602061441283398151915255565b610e87612085565b600101546001600160a01b03163314610eb25760405162461bcd60e51b8152600401610c5b90613f0e565b610eba612126565b565b6000610ec66120a9565b610ece6120e1565b8180421115610eef5760405162461bcd60e51b8152600401610c5b90613fad565b6000610ef961202a565b6040516326ed844360e11b815290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90634ddb088690610f379084908a908a90600401613fda565b602060405180830381865af4158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613ef5565b92505050610b6c600160008051602061441283398151915255565b610f9b612186565b610fa482612214565b610fae8282612306565b5050565b6000610fbc6123c8565b506000805160206143d283398151915290565b60006000805160206143b2833981519152610fec81868686612411565b95945050505050565b60006000805160206143b2833981519152610c2081858561244f565b611019612085565b600101546001600160a01b031633146110445760405162461bcd60e51b8152600401610c5b90613f0e565b610fae828261105161202a565b9190612479565b600083838360405160200161106f93929190613ff7565b60408051601f198184030181529190528051602090910120949350505050565b6040516330b2175760e11b81526000805160206143b28339815191526004820152602481018390526001600160a01b038216604482015273EDC21cd663b77Dd21299638732A747d703553114906361642eae906064015b60006040518083038186803b1580156110fe57600080fd5b505af4158015611112573d6000803e3d6000fd5b505050505050565b60606000805160206143b2833981519152610c208185856126f3565b600080611141612085565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b60008061119861202a565b604051635587fcc560e01b815290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90635587fcc590610bdf9084908890889060040161401b565b6111de612085565b600101546001600160a01b031633146112095760405162461bcd60e51b8152600401610c5b90613f0e565b610eba6127a5565b600061122c6000805160206143f28339815191525460ff1690565b156112375750600190565b6000611241612085565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190613ef5565b8160050154146112c357600191505090565b6112cb6127ee565b60028201546001600160a01b039081169116146112ea57600191505090565b600181015481546001600160a01b0391821691166399ac48ba61130b610cdb565b6040516001600160e01b031960e084901b16815260048101919091526921a7a72a2927a62622a960b11b6024820152604401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e919061403a565b6001600160a01b03161461139457600191505090565b600091505090565b6000806113a7612085565b6005015492915050565b6113b9612085565b600101546001600160a01b031633146113e45760405162461bcd60e51b8152600401610c5b90613f0e565b6113ec61202a565b604051632395e8cb60e01b815260048101919091526024810182905273648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90632395e8cb90604401610ca8565b60006114366120a9565b61143e6120e1565b818042111561145f5760405162461bcd60e51b8152600401610c5b90613fad565b600061146961202a565b6040516309f9fc1360e01b81526004810182905260ff808b16602483015289166044820152606481018890526084810187905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F906309f9fc139060a401602060405180830381865af41580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190613ef5565b92505050610fec600160008051602061441283398151915255565b60008060606000611529612085565b905073EDC21cd663b77Dd21299638732A747d703553114636dc129ae826000805160206143b28339815191526040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af415801561159d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c5919081019061409c565b6004840154929650909450925083036115e2576115e2848661280a565b509193909250565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561162f5750825b90506000826001600160401b0316600114801561164b5750303b155b905081158015611659575080155b156116775760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116a157845460ff60401b1916600160401b1785555b6116af8b8b8b8b8b8b61282c565b83156116f557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b60006000805160206143b2833981519152610c2081858561290f565b60008061172961202a565b604051631b569c9760e01b81526004810182905260ff8088166024830152861660448201526064810185905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90631b569c9790608401602060405180830381865af4158015611794573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190613ef5565b6000806000806000806117c9612085565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b6000611809612085565b6040516361ac0f7160e11b8152600481018290526001600160a01b038416602482015290915073EDC21cd663b77Dd21299638732A747d7035531149063c3581ee2906044016110e6565b61185b612085565b600101546001600160a01b031633146118865760405162461bcd60e51b8152600401610c5b90613f0e565b6000611890612085565b805460408051634328603960e11b815290519293506001600160a01b03909116918291638650c0729160048083019260209291908290030181865afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190191906140f5565b156119475760405162461bcd60e51b81526020600482015260166024820152751314140e941bdc9d185b081a5cc81a5cdbdb185d195960521b6044820152606401610c5b565b600482810154604051630eca989d60e11b8152918201526001600160a01b03821690631d95313a90602401602060405180830381865afa15801561198f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b39190613ef5565b8260050154036119f75760405162461bcd60e51b815260206004820152600f60248201526e4c50503a6e6f20757067726164657360881b6044820152606401610c5b565b60048281015460405163e3099e0960e01b8152918201526000906001600160a01b0383169063e3099e09906024016020604051808303816000875af1158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a689190613ef5565b90506111128161151a565b611a7b612085565b600101546001600160a01b03163314611aa65760405162461bcd60e51b8152600401610c5b90613f0e565b611aae61202a565b604051633d1ff01560e01b815260048101919091526001600160a01b038216602482015273648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90633d1ff01590604401610ca8565b6000611b006120a9565b611b086120e1565b8180421115611b295760405162461bcd60e51b8152600401610c5b90613fad565b6000611b3361202a565b60405163ee18375560e01b815290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F9063ee18375590610f379084908a908a90600401613fda565b611b79612085565b600101546001600160a01b03163314611ba45760405162461bcd60e51b8152600401610c5b90613f0e565b610eba611baf61202a565b612943565b611be8604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000611bf2612085565b6040516337a3804160e11b8152600481018290526024810185905290915073EDC21cd663b77Dd21299638732A747d70355311490636f47008290604401600060405180830381865af4158015611c4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b6c9190810190614112565b600080611c7f61202a565b9050610ad781612a04565b600080600080600080600080600080611ca161202a565b90508060000160009054906101000a90046001600160a01b031699508060010160009054906101000a90046001600160a01b031698508060020154975080600301549650806004015495508060050154945080600601549350806007015492508060080154915050909192939495969798565b611d1c6136ed565b611d246120a9565b8180421115611d455760405162461bcd60e51b8152600401610c5b90613fad565b6000611d4f61202a565b604051631c894ec960e01b815290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90631c894ec990611d8d9084908a908a906004016141be565b6040805180830381865af4158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906141db565b6000611dd7612085565b6040516307c0451b60e11b8152600481018290526001600160a01b038416602482015290915073EDC21cd663b77Dd21299638732A747d70355311490630f808a36906044016110e6565b60008281526000805160206143b2833981519152602081905260408220805484908110611e5057611e5061425a565b906000526020600020015491505092915050565b600080611e6f61202a565b604051632cca48e160e01b81526004810182905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90632cca48e190602401610b1f565b600080611eb561202a565b9050806009018360ff1660028110611ecf57611ecf61425a565b01549392505050565b60006000805160206143b2833981519152610fec81868686612a1b565b60606000805160206143b2833981519152610fec81868686612a4a565b600080611f1d61202a565b60405163d5bc0b7b60e01b8152600481018290526024810185905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F9063d5bc0b7b90604401602060405180830381865af4158015611f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190613ef5565b611fa36136ed565b6000611fad61202a565b604051630f6d2ddf60e21b8152600481018290526024810185905290915073648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F90633db4b77c906044016040805180830381865af4158015612006573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c91906141db565b7fbf570a7b0f42d13b79178a015638486db13c20a3e56dc93ef0739ba4e0119a0090565b6000610abb82612b01565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b6000805160206144128339815191528054600119016120db57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206143f28339815191525460ff1615610eba5760405163d93c066560e01b815260040160405180910390fd5b600160008051602061441283398151915255565b61212e612bab565b6000805160206143f2833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806121f657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121ea6127ee565b6001600160a01b031614155b15610eba5760405163703e46dd60e11b815260040160405180910390fd5b600061221e612085565b905073EDC21cd663b77Dd21299638732A747d70355311463b57e6b0b82846122446127ee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af4158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba91906140f5565b610fae5760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401610c5b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612360575060408051601f3d908101601f1916820190925261235d91810190613ef5565b60015b61238857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610c5b565b6000805160206143d283398151915281146123b957604051632a87526960e21b815260048101829052602401610c5b565b6123c38383612bdb565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eba5760405163703e46dd60e11b815260040160405180910390fd5b600084600301600061242c846124278888612059565b612059565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006124618585612059565b81526020019081526020016000205490509392505050565b600583015461248b9062015180614286565b4210156124e55760405162461bcd60e51b815260206004820152602260248201527f414c3a57616974203120646179206265666f7265207374617274696e6720726160448201526106d760f41b6064820152608401610c5b565b6124f26212750042614286565b8110156125415760405162461bcd60e51b815260206004820152601960248201527f414c3a496e73756666696369656e742072616d702074696d65000000000000006044820152606401610c5b565b6000821180156125535750620f424082105b6125ab5760405162461bcd60e51b815260206004820152602360248201527f414c3a667574757265415f206d757374206265203e203020616e64203c204d41604482015262585f4160e81b6064820152608401610c5b565b60006125b684612b01565b905060006125c5606485614299565b90508181101561262e57816125db600283614299565b10156126295760405162461bcd60e51b815260206004820152601860248201527f414c3a667574757265415f20697320746f6f20736d616c6c00000000000000006044820152606401610c5b565b612688565b612639600283614299565b8111156126885760405162461bcd60e51b815260206004820152601860248201527f414c3a667574757265415f20697320746f6f206c6172676500000000000000006044820152606401610c5b565b600385018290556004850181905542600586018190556006860184905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a15050505050565b60608360020160006127058585612059565b8152602001908152602001600020805461271e906142b0565b80601f016020809104026020016040519081016040528092919081815260200182805461274a906142b0565b80156127975780601f1061276c57610100808354040283529160200191612797565b820191906000526020600020905b81548152906001019060200180831161277a57829003601f168201915b505050505090509392505050565b6127ad6120e1565b6000805160206143f2833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612168565b6000805160206143d2833981519152546001600160a01b031690565b6128238260405180602001604052806000815250610f93565b610fae81612c31565b612834612c75565b6128667f0000000000000000000000000000000000000000000000000000000000000000866000196127258888612cbe565b6129077f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000088603c6127106128c16402540be4006004614299565b6128cb91906142ea565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ce492505050565b611112612d12565b60008360030160006129218585612059565b81526020810191909152604001600020546001600160a01b0316949350505050565b428160060154116129965760405162461bcd60e51b815260206004820152601a60248201527f414c3a52616d7020697320616c72656164792073746f707065640000000000006044820152606401610c5b565b60006129a182612b01565b60038301819055600483018190554260058401819055600684018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938916129f891848252602082015260400190565b60405180910390a15050565b60006064612a1183612b01565b610abb91906142ea565b6000846001016000612a31846124278888612059565b8152602001908152602001600020549050949350505050565b6060846002016000612a60846124278888612059565b81526020019081526020016000208054612a79906142b0565b80601f0160208091040260200160405190810160405280929190818152602001828054612aa5906142b0565b8015612af25780601f10612ac757610100808354040283529160200191612af2565b820191906000526020600020905b815481529060010190602001808311612ad557829003601f168201915b50505050509050949350505050565b600681015460048201546000919042821115610b6c576005840154600385015480831115612b6f57612b33828561430c565b612b3d834261430c565b612b47838661430c565b612b519190614299565b612b5b91906142ea565b612b659082614286565b9695505050505050565b612b79828561430c565b612b83834261430c565b612b8d858461430c565b612b979190614299565b612ba191906142ea565b612b65908261430c565b6000805160206143f28339815191525460ff16610eba57604051638dfc202b60e01b815260040160405180910390fd5b612be482612d1a565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612c29576123c38282612d7f565b610fae612dec565b6000612c3b612085565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb906020016129f8565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610eba57604051631afcd79f60e31b815260040160405180910390fd5b612cc6612c75565b612cce612d12565b612cd6612d12565b611112868686868686612e0b565b612cec612c75565b612cf4613198565b612cfc6131a8565b612d04612d12565b6111128686868686866131b8565b610eba612c75565b806001600160a01b03163b600003612d5057604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610c5b565b6000805160206143d283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612d9c919061431f565b600060405180830381855af49150503d8060008114612dd7576040519150601f19603f3d011682016040523d82523d6000602084013e612ddc565b606091505b5091509150610fec858383613596565b3415610eba5760405163b398979f60e01b815260040160405180910390fd5b612e13612c75565b6001600160a01b038616612e695760405162461bcd60e51b815260206004820152601d60248201527f474d3a676f7665726e616e63652063616e206e6f74206265207a65726f0000006044820152606401610c5b565b6001600160a01b038516612ebf5760405162461bcd60e51b815260206004820152601960248201527f474d3a73656e6174652063616e206e6f74206265207a65726f000000000000006044820152606401610c5b565b428411612f045760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401610c5b565b82600003612f545760405162461bcd60e51b815260206004820152601e60248201527f474d3a7061636b616765547970652063616e206e6f74206265207a65726f00006044820152606401610c5b565b6000819003612fb15760405162461bcd60e51b815260206004820152602360248201527f474d3a696e697456657273696f6e4e616d652063616e206e6f7420626520656d60448201526270747960e81b6064820152608401610c5b565b6000612fbb612085565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000805160206143b2833981519152600073EDC21cd663b77Dd21299638732A747d7035531146363feb974848461301f6127ee565b8a8a8a620151806040518863ffffffff1660e01b81526004016130489796959493929190613f65565b602060405180830381865af4158015613065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130899190613ef5565b6040516336e094d760e11b815260048101859052602481018490526044810182905290915073EDC21cd663b77Dd21299638732A747d70355311490636dc129ae90606401600060405180830381865af41580156130ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613112919081019061409c565b50505061316061315b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060048601546135f2565b612c31565b505080546001600160a01b039788166001600160a01b0319918216178255600190910180549690971695169490941790945550505050565b6131a0612c75565b610eba613626565b6131b0612c75565b610eba61362e565b6131c0612c75565b6001600160a01b0386166132205760405162461bcd60e51b815260206004820152602160248201527f4c4d3a5f674554485f706f736974696f6e2063616e206e6f74206265207a65726044820152606f60f81b6064820152608401610c5b565b6001600160a01b0385166132845760405162461bcd60e51b815260206004820152602560248201527f4c4d3a5f6c70546f6b656e5f7265666572616e63652063616e206e6f74206265604482015264207a65726f60d81b6064820152608401610c5b565b836000036132de5760405162461bcd60e51b815260206004820152602160248201527f4c4d3a5f706f6f6c6564546f6b656e49642063616e206e6f74206265207a65726044820152606f60f81b6064820152608401610c5b565b826000036133265760405162461bcd60e51b81526020600482015260156024820152744c4d3a5f412063616e206e6f74206265207a65726f60581b6044820152606401610c5b565b620f424083106133705760405162461bcd60e51b81526020600482015260156024820152744c4d3a5f412065786365656473206d6178696d756d60581b6044820152606401610c5b565b61338060646402540be4006142ea565b82106133ce5760405162461bcd60e51b815260206004820152601b60248201527f4c4d3a5f737761704665652065786365656473206d6178696d756d00000000006044820152606401610c5b565b60006133d98661364f565b604080518082018252601081526f023b2b7b232902628102a37b5b2b71d160851b60208083019190915282518084018452600381526202d4c560ec1b81830152925193945090926001600160a01b03851691634cd88b769161343f91869189910161433b565b604051602081830303815290604052868460405160200161346192919061433b565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161348d92919061436a565b600060405180830381600087803b1580156134a757600080fd5b505af11580156134bb573d6000803e3d6000fd5b5050505060006134c961202a565b80546001600160a01b03808d166001600160a01b031992831617835560018301805491881691909216179055600281018990559050613509606488614299565b6003820155613519606488614299565b600482810191909155600782018790558154604051630492f6e160e01b81529182018a9052600160248301526001600160a01b031690630492f6e190604401600060405180830381600087803b15801561357257600080fd5b505af1158015613586573d6000803e3d6000fd5b5050505050505050505050505050565b6060826135ab576135a6826136c1565b610b6c565b81511580156135c257506001600160a01b0384163b155b156135eb57604051639996b31560e01b81526001600160a01b0385166004820152602401610c5b565b5080610b6c565b6000828260405160200161360792919061438f565b60408051601f1981840301815291905280516020909101209392505050565b612112612c75565b613636612c75565b6000805160206143f2833981519152805460ff19169055565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166136bc576040516330be1a3d60e21b815260040160405180910390fd5b919050565b8051156136d15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405180604001604052806002906020820280368337509192915050565b60006020828403121561371d57600080fd5b81356001600160e01b031981168114610b6c57600080fd5b6000806040838503121561374857600080fd5b50508035926020909101359150565b803560ff811681146136bc57600080fd5b6000806040838503121561377b57600080fd5b8235915061378b60208401613757565b90509250929050565b6000602082840312156137a657600080fd5b5035919050565b6001600160a01b03811681146136ea57600080fd5b60008083601f8401126137d457600080fd5b5081356001600160401b038111156137eb57600080fd5b60208301915083602082850101111561380357600080fd5b9250929050565b60008060008060006080868803121561382257600080fd5b853561382d816137ad565b94506020860135935060408601356001600160401b0381111561384f57600080fd5b61385b888289016137c2565b96999598509660600135949350505050565b6000806000806080858703121561388357600080fd5b8435935061389360208601613757565b93969395505050506040820135916060013590565b8060408101831015610abb57600080fd5b6000806000608084860312156138ce57600080fd5b6138d885856138a8565b95604085013595506060909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561392b5761392b6138ed565b604052919050565b60006001600160401b0382111561394c5761394c6138ed565b50601f01601f191660200190565b600082601f83011261396b57600080fd5b813561397e61397982613933565b613903565b81815284602083860101111561399357600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156139c357600080fd5b82356139ce816137ad565b915060208301356001600160401b038111156139e957600080fd5b6139f58582860161395a565b9150509250929050565b600080600060608486031215613a1457600080fd5b505081359360208301359350604090920135919050565b600080600060408486031215613a4057600080fd5b83356001600160401b03811115613a5657600080fd5b613a62868287016137c2565b909790965060209590950135949350505050565b60008060408385031215613a8957600080fd5b823591506020830135613a9b816137ad565b809150509250929050565b60005b83811015613ac1578181015183820152602001613aa9565b50506000910152565b60008151808452613ae2816020860160208601613aa6565b601f01601f19169290920160200192915050565b602081526000610b6c6020830184613aca565b80151581146136ea57600080fd5b60008060608385031215613b2a57600080fd5b613b3484846138a8565b91506040830135613a9b81613b09565b600080600080600060a08688031215613b5c57600080fd5b613b6586613757565b9450613b7360208701613757565b94979496505050506040830135926060810135926080909101359150565b60018060a01b0384168152826020820152606060408201526000610fec6060830184613aca565b60008060008060008060808789031215613bd157600080fd5b863595506020870135613be3816137ad565b945060408701356001600160401b0380821115613bff57600080fd5b613c0b8a838b016137c2565b90965094506060890135915080821115613c2457600080fd5b50613c3189828a016137c2565b979a9699509497509295939492505050565b600080600060608486031215613c5857600080fd5b613c6184613757565b9250613c6f60208501613757565b9150604084013590509250925092565b600060208284031215613c9157600080fd5b8135610b6c816137ad565b600082601f830112613cad57600080fd5b813560206001600160401b03821115613cc857613cc86138ed565b8160051b613cd7828201613903565b9283528481018201928281019087851115613cf157600080fd5b83870192505b84831015610d8e57823582529183019190830190613cf7565b600080600080600060a08688031215613d2857600080fd5b8535613d33816137ad565b94506020860135613d43816137ad565b935060408601356001600160401b0380821115613d5f57600080fd5b613d6b89838a01613c9c565b94506060880135915080821115613d8157600080fd5b613d8d89838a01613c9c565b93506080880135915080821115613da357600080fd5b50613db08882890161395a565b9150509295509295909350565b6020815260018060a01b038251166020820152602082015160408201526000604083015160806060840152613df560a0840182613aca565b9050606084015160808401528091505092915050565b600080600060808486031215613e2057600080fd5b83359250613e3185602086016138a8565b9150606084013590509250925092565b60408101818360005b6002811015613e69578151835260209283019290910190600101613e4a565b50505092915050565b600060208284031215613e8457600080fd5b610b6c82613757565b600080600080600060a08688031215613ea557600080fd5b8535613eb0816137ad565b94506020860135613ec0816137ad565b9350604086013592506060860135915060808601356001600160401b03811115613ee957600080fd5b613db08882890161395a565b600060208284031215613f0757600080fd5b5051919050565b6020808252601490820152732628281d39b2b73232b9102727aa1037bbb732b960611b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815286602082015260018060a01b038616604082015284606082015260c060808201526000613f9960c083018587613f3c565b90508260a083015298975050505050505050565b60208082526013908201527213134e911958591b1a5b99481b9bdd081b595d606a1b604082015260600190565b838152608081016040846020840137826060830152949350505050565b60408152600061400b604083018587613f3c565b9050826020830152949350505050565b8381526080810160408460208401378215156060830152949350505050565b60006020828403121561404c57600080fd5b8151610b6c816137ad565b600082601f83011261406857600080fd5b815161407661397982613933565b81815284602083860101111561408b57600080fd5b610c20826020830160208701613aa6565b6000806000606084860312156140b157600080fd5b83516140bc816137ad565b6020850151604086015191945092506001600160401b038111156140df57600080fd5b6140eb86828701614057565b9150509250925092565b60006020828403121561410757600080fd5b8151610b6c81613b09565b60006020828403121561412457600080fd5b81516001600160401b038082111561413b57600080fd5b908301906080828603121561414f57600080fd5b60405160808101818110838211171561416a5761416a6138ed565b6040528251614178816137ad565b81526020838101519082015260408301518281111561419657600080fd5b6141a287828601614057565b6040830152506060830151606082015280935050505092915050565b838152602081018390526080810160408381840137949350505050565b6000604082840312156141ed57600080fd5b82601f8301126141fc57600080fd5b604051604081018181106001600160401b038211171561421e5761421e6138ed565b806040525080604084018581111561423557600080fd5b845b8181101561424f578051835260209283019201614237565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610abb57610abb614270565b8082028115828204841417610abb57610abb614270565b600181811c908216806142c457607f821691505b6020821081036142e457634e487b7160e01b600052602260045260246000fd5b50919050565b60008261430757634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610abb57610abb614270565b60008251614331818460208701613aa6565b9190910192915050565b6000835161434d818460208801613aa6565b835190830190614361818360208801613aa6565b01949350505050565b60408152600061437d6040830185613aca565b8281036020840152610fec8185613aca565b6040815260006143a26040830185613aca565b9050826020830152939250505056fea3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c00360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122042cd8c27c5792c7dc02a739ffaf6593fe54fbc198119094e13e0959fbd73fb6c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106103395760003560e01c80638beb60b6116101ab578063c4db7fa0116100f7578063e25aa5fa11610095578063e768887e1161006f578063e768887e146109fe578063ef0a712f14610a1e578063f23a6e6114610a3e578063f2fad2b614610a6a57600080fd5b8063e25aa5fa146109a9578063e3a12480146109be578063e72b1d6d146109de57600080fd5b8063d4fd01ce116100d1578063d4fd01ce146108d8578063d6f0df621461093c578063dab840c714610969578063e02a52081461098957600080fd5b8063c4db7fa014610881578063c7f758a814610896578063d46300fd146108c357600080fd5b8063ad3cb1cc11610164578063aec988631161013e578063aec98863146107e7578063b0630715146107fc578063bc197c811461081c578063bfc65c9b1461086157600080fd5b8063ad3cb1cc14610748578063ad4ac4c414610779578063ad8655cb146107c757600080fd5b80638beb60b61461068657806391695586146106a657806398951b56146106b95780639934b281146106e857806399ac48ba14610708578063a95b089f1461072857600080fd5b806352d1902d116102855780636d07e404116102235780637e0ccbff116101fd5780637e0ccbff146106275780638456cb59146106475780638650c0721461065c5780638aa104351461067157600080fd5b80636d07e404146105c557806372267954146105e5578063745653de1461061257600080fd5b8063593d132c1161025f578063593d132c146105265780635a34bb15146105465780635c975abb146105665780635d9e085d1461058b57600080fd5b806352d1902d146104d15780635329512b146104e657806356a72dbf1461050657600080fd5b806334e19907116102f25780633e3a1560116102cc5780633e3a1560146104765780633f4ba83a1461049657806346eda749146104ab5780634f1ef286146104be57600080fd5b806334e199071461041f57806338fff2d0146104415780633b8ba8621461045657600080fd5b806301ffc9a7146103455780630ba819591461037a57806314a6bf0f1461039d5780631da71591146103b2578063289b3c0d146103d2578063342a87a1146103ff57600080fd5b3661034057005b600080fd5b34801561035157600080fd5b5061036561036036600461370b565b610a8a565b60405190151581526020015b60405180910390f35b34801561038657600080fd5b5061038f610ac1565b604051908152602001610371565b3480156103a957600080fd5b5061038f610add565b3480156103be57600080fd5b5061038f6103cd366004613735565b610b60565b3480156103de57600080fd5b506103e7610b73565b6040516001600160a01b039091168152602001610371565b34801561040b57600080fd5b5061038f61041a366004613768565b610b8e565b34801561042b57600080fd5b5061043f61043a366004613794565b610c28565b005b34801561044d57600080fd5b5061038f610cdb565b34801561046257600080fd5b5061038f61047136600461380a565b610cee565b34801561048257600080fd5b5061038f61049136600461386d565b610d99565b3480156104a257600080fd5b5061043f610e7f565b61038f6104b93660046138b9565b610ebc565b61043f6104cc3660046139b0565b610f93565b3480156104dd57600080fd5b5061038f610fb2565b3480156104f257600080fd5b506103e76105013660046139ff565b610fcf565b34801561051257600080fd5b5061038f610521366004613735565b610ff5565b34801561053257600080fd5b5061043f610541366004613735565b611011565b34801561055257600080fd5b5061038f610561366004613a2b565b611058565b34801561057257600080fd5b506000805160206143f28339815191525460ff16610365565b34801561059757600080fd5b5061038f6105a6366004613794565b60009081526000805160206143b2833981519152602052604090205490565b3480156105d157600080fd5b5061043f6105e0366004613a76565b61108f565b3480156105f157600080fd5b50610605610600366004613735565b61111a565b6040516103719190613af6565b34801561061e57600080fd5b5061038f611136565b34801561063357600080fd5b5061038f610642366004613b17565b61118d565b34801561065357600080fd5b5061043f6111d6565b34801561066857600080fd5b50610365611211565b34801561067d57600080fd5b5061038f61139c565b34801561069257600080fd5b5061043f6106a1366004613794565b6113b1565b61038f6106b4366004613b44565b61142c565b3480156106c557600080fd5b506106d96106d4366004613794565b61151a565b60405161037193929190613b91565b3480156106f457600080fd5b5061043f610703366004613bb8565b6115ea565b34801561071457600080fd5b506103e7610723366004613735565b611702565b34801561073457600080fd5b5061038f610743366004613c43565b61171e565b34801561075457600080fd5b50610605604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561078557600080fd5b5061078e6117b8565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610371565b3480156107d357600080fd5b5061043f6107e2366004613c7f565b6117ff565b3480156107f357600080fd5b5061043f611853565b34801561080857600080fd5b5061043f610817366004613c7f565b611a73565b34801561082857600080fd5b50610848610837366004613d10565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610371565b34801561086d57600080fd5b5061038f61087c3660046138b9565b611af6565b34801561088d57600080fd5b5061043f611b71565b3480156108a257600080fd5b506108b66108b1366004613794565b611bb4565b6040516103719190613dbd565b3480156108cf57600080fd5b5061038f611c74565b3480156108e457600080fd5b506108ed611c8a565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610371565b34801561094857600080fd5b5061095c610957366004613e0b565b611d14565b6040516103719190613e41565b34801561097557600080fd5b5061043f610984366004613c7f565b611dcd565b34801561099557600080fd5b5061038f6109a4366004613735565b611e21565b3480156109b557600080fd5b5061038f611e64565b3480156109ca57600080fd5b5061038f6109d9366004613e72565b611eaa565b3480156109ea57600080fd5b5061038f6109f93660046139ff565b611ed8565b348015610a0a57600080fd5b50610605610a193660046139ff565b611ef5565b348015610a2a57600080fd5b5061038f610a39366004613794565b611f12565b348015610a4a57600080fd5b50610848610a59366004613e8d565b63f23a6e6160e01b95945050505050565b348015610a7657600080fd5b5061095c610a85366004613794565b611f9b565b60006001600160e01b03198216630271189760e51b1480610abb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080610acc61202a565b9050610ad78161204e565b91505090565b600080610ae861202a565b6040516320487f3760e21b81526004810182905290915073__$a20667b2b08306ab755223556dc0492b72$__90638121fcdc906024015b602060405180830381865af4158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613ef5565b6000610b6c8383612059565b9392505050565b600080610b7e612085565b546001600160a01b031692915050565b600080610b9961202a565b60405162a834bf60e41b8152600481018290526024810186905260ff8516604482015290915073__$a20667b2b08306ab755223556dc0492b72$__90630a834bf0906064015b602060405180830381865af4158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190613ef5565b949350505050565b610c30612085565b600101546001600160a01b03163314610c645760405162461bcd60e51b8152600401610c5b90613f0e565b60405180910390fd5b610c6c61202a565b60405163201c5a7d60e01b815260048101919091526024810182905273__$a20667b2b08306ab755223556dc0492b72$__9063201c5a7d906044015b60006040518083038186803b158015610cc057600080fd5b505af4158015610cd4573d6000803e3d6000fd5b5050505050565b6000610ce561202a565b60020154905090565b600080610cf9612085565b6040516318ffae5d60e21b815290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__906363feb97490610d4d9084906000805160206143b2833981519152908c908c908c908c908c90600401613f65565b602060405180830381865af4158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190613ef5565b979650505050505050565b6000610da36120a9565b610dab6120e1565b8180421115610dcc5760405162461bcd60e51b8152600401610c5b90613fad565b6000610dd661202a565b604051630fc067cb60e11b8152600481018290526024810189905260ff881660448201526064810187905290915073__$a20667b2b08306ab755223556dc0492b72$__90631f80cf9690608401602060405180830381865af4158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190613ef5565b92505050610c20600160008051602061441283398151915255565b610e87612085565b600101546001600160a01b03163314610eb25760405162461bcd60e51b8152600401610c5b90613f0e565b610eba612126565b565b6000610ec66120a9565b610ece6120e1565b8180421115610eef5760405162461bcd60e51b8152600401610c5b90613fad565b6000610ef961202a565b6040516326ed844360e11b815290915073__$a20667b2b08306ab755223556dc0492b72$__90634ddb088690610f379084908a908a90600401613fda565b602060405180830381865af4158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613ef5565b92505050610b6c600160008051602061441283398151915255565b610f9b612186565b610fa482612214565b610fae8282612306565b5050565b6000610fbc6123c8565b506000805160206143d283398151915290565b60006000805160206143b2833981519152610fec81868686612411565b95945050505050565b60006000805160206143b2833981519152610c2081858561244f565b611019612085565b600101546001600160a01b031633146110445760405162461bcd60e51b8152600401610c5b90613f0e565b610fae828261105161202a565b9190612479565b600083838360405160200161106f93929190613ff7565b60408051601f198184030181529190528051602090910120949350505050565b6040516330b2175760e11b81526000805160206143b28339815191526004820152602481018390526001600160a01b038216604482015273__$dabd46e1bb7f0d62843614b2ceac53b60c$__906361642eae906064015b60006040518083038186803b1580156110fe57600080fd5b505af4158015611112573d6000803e3d6000fd5b505050505050565b60606000805160206143b2833981519152610c208185856126f3565b600080611141612085565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b60008061119861202a565b604051635587fcc560e01b815290915073__$a20667b2b08306ab755223556dc0492b72$__90635587fcc590610bdf9084908890889060040161401b565b6111de612085565b600101546001600160a01b031633146112095760405162461bcd60e51b8152600401610c5b90613f0e565b610eba6127a5565b600061122c6000805160206143f28339815191525460ff1690565b156112375750600190565b6000611241612085565b8054600480830154604051630eca989d60e11b8152918201529192506001600160a01b031690631d95313a90602401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190613ef5565b8160050154146112c357600191505090565b6112cb6127ee565b60028201546001600160a01b039081169116146112ea57600191505090565b600181015481546001600160a01b0391821691166399ac48ba61130b610cdb565b6040516001600160e01b031960e084901b16815260048101919091526921a7a72a2927a62622a960b11b6024820152604401602060405180830381865afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e919061403a565b6001600160a01b03161461139457600191505090565b600091505090565b6000806113a7612085565b6005015492915050565b6113b9612085565b600101546001600160a01b031633146113e45760405162461bcd60e51b8152600401610c5b90613f0e565b6113ec61202a565b604051632395e8cb60e01b815260048101919091526024810182905273__$a20667b2b08306ab755223556dc0492b72$__90632395e8cb90604401610ca8565b60006114366120a9565b61143e6120e1565b818042111561145f5760405162461bcd60e51b8152600401610c5b90613fad565b600061146961202a565b6040516309f9fc1360e01b81526004810182905260ff808b16602483015289166044820152606481018890526084810187905290915073__$a20667b2b08306ab755223556dc0492b72$__906309f9fc139060a401602060405180830381865af41580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190613ef5565b92505050610fec600160008051602061441283398151915255565b60008060606000611529612085565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__636dc129ae826000805160206143b28339815191526040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af415801561159d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c5919081019061409c565b6004840154929650909450925083036115e2576115e2848661280a565b509193909250565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561162f5750825b90506000826001600160401b0316600114801561164b5750303b155b905081158015611659575080155b156116775760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116a157845460ff60401b1916600160401b1785555b6116af8b8b8b8b8b8b61282c565b83156116f557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b60006000805160206143b2833981519152610c2081858561290f565b60008061172961202a565b604051631b569c9760e01b81526004810182905260ff8088166024830152861660448201526064810185905290915073__$a20667b2b08306ab755223556dc0492b72$__90631b569c9790608401602060405180830381865af4158015611794573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190613ef5565b6000806000806000806117c9612085565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b6000611809612085565b6040516361ac0f7160e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__9063c3581ee2906044016110e6565b61185b612085565b600101546001600160a01b031633146118865760405162461bcd60e51b8152600401610c5b90613f0e565b6000611890612085565b805460408051634328603960e11b815290519293506001600160a01b03909116918291638650c0729160048083019260209291908290030181865afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190191906140f5565b156119475760405162461bcd60e51b81526020600482015260166024820152751314140e941bdc9d185b081a5cc81a5cdbdb185d195960521b6044820152606401610c5b565b600482810154604051630eca989d60e11b8152918201526001600160a01b03821690631d95313a90602401602060405180830381865afa15801561198f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b39190613ef5565b8260050154036119f75760405162461bcd60e51b815260206004820152600f60248201526e4c50503a6e6f20757067726164657360881b6044820152606401610c5b565b60048281015460405163e3099e0960e01b8152918201526000906001600160a01b0383169063e3099e09906024016020604051808303816000875af1158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a689190613ef5565b90506111128161151a565b611a7b612085565b600101546001600160a01b03163314611aa65760405162461bcd60e51b8152600401610c5b90613f0e565b611aae61202a565b604051633d1ff01560e01b815260048101919091526001600160a01b038216602482015273__$a20667b2b08306ab755223556dc0492b72$__90633d1ff01590604401610ca8565b6000611b006120a9565b611b086120e1565b8180421115611b295760405162461bcd60e51b8152600401610c5b90613fad565b6000611b3361202a565b60405163ee18375560e01b815290915073__$a20667b2b08306ab755223556dc0492b72$__9063ee18375590610f379084908a908a90600401613fda565b611b79612085565b600101546001600160a01b03163314611ba45760405162461bcd60e51b8152600401610c5b90613f0e565b610eba611baf61202a565b612943565b611be8604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000611bf2612085565b6040516337a3804160e11b8152600481018290526024810185905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90636f47008290604401600060405180830381865af4158015611c4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b6c9190810190614112565b600080611c7f61202a565b9050610ad781612a04565b600080600080600080600080600080611ca161202a565b90508060000160009054906101000a90046001600160a01b031699508060010160009054906101000a90046001600160a01b031698508060020154975080600301549650806004015495508060050154945080600601549350806007015492508060080154915050909192939495969798565b611d1c6136ed565b611d246120a9565b8180421115611d455760405162461bcd60e51b8152600401610c5b90613fad565b6000611d4f61202a565b604051631c894ec960e01b815290915073__$a20667b2b08306ab755223556dc0492b72$__90631c894ec990611d8d9084908a908a906004016141be565b6040805180830381865af4158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906141db565b6000611dd7612085565b6040516307c0451b60e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90630f808a36906044016110e6565b60008281526000805160206143b2833981519152602081905260408220805484908110611e5057611e5061425a565b906000526020600020015491505092915050565b600080611e6f61202a565b604051632cca48e160e01b81526004810182905290915073__$a20667b2b08306ab755223556dc0492b72$__90632cca48e190602401610b1f565b600080611eb561202a565b9050806009018360ff1660028110611ecf57611ecf61425a565b01549392505050565b60006000805160206143b2833981519152610fec81868686612a1b565b60606000805160206143b2833981519152610fec81868686612a4a565b600080611f1d61202a565b60405163d5bc0b7b60e01b8152600481018290526024810185905290915073__$a20667b2b08306ab755223556dc0492b72$__9063d5bc0b7b90604401602060405180830381865af4158015611f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190613ef5565b611fa36136ed565b6000611fad61202a565b604051630f6d2ddf60e21b8152600481018290526024810185905290915073__$a20667b2b08306ab755223556dc0492b72$__90633db4b77c906044016040805180830381865af4158015612006573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c91906141db565b7fbf570a7b0f42d13b79178a015638486db13c20a3e56dc93ef0739ba4e0119a0090565b6000610abb82612b01565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b6000805160206144128339815191528054600119016120db57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206143f28339815191525460ff1615610eba5760405163d93c066560e01b815260040160405180910390fd5b600160008051602061441283398151915255565b61212e612bab565b6000805160206143f2833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806121f657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121ea6127ee565b6001600160a01b031614155b15610eba5760405163703e46dd60e11b815260040160405180910390fd5b600061221e612085565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__63b57e6b0b82846122446127ee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af4158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba91906140f5565b610fae5760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401610c5b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612360575060408051601f3d908101601f1916820190925261235d91810190613ef5565b60015b61238857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610c5b565b6000805160206143d283398151915281146123b957604051632a87526960e21b815260048101829052602401610c5b565b6123c38383612bdb565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eba5760405163703e46dd60e11b815260040160405180910390fd5b600084600301600061242c846124278888612059565b612059565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006124618585612059565b81526020019081526020016000205490509392505050565b600583015461248b9062015180614286565b4210156124e55760405162461bcd60e51b815260206004820152602260248201527f414c3a57616974203120646179206265666f7265207374617274696e6720726160448201526106d760f41b6064820152608401610c5b565b6124f26212750042614286565b8110156125415760405162461bcd60e51b815260206004820152601960248201527f414c3a496e73756666696369656e742072616d702074696d65000000000000006044820152606401610c5b565b6000821180156125535750620f424082105b6125ab5760405162461bcd60e51b815260206004820152602360248201527f414c3a667574757265415f206d757374206265203e203020616e64203c204d41604482015262585f4160e81b6064820152608401610c5b565b60006125b684612b01565b905060006125c5606485614299565b90508181101561262e57816125db600283614299565b10156126295760405162461bcd60e51b815260206004820152601860248201527f414c3a667574757265415f20697320746f6f20736d616c6c00000000000000006044820152606401610c5b565b612688565b612639600283614299565b8111156126885760405162461bcd60e51b815260206004820152601860248201527f414c3a667574757265415f20697320746f6f206c6172676500000000000000006044820152606401610c5b565b600385018290556004850181905542600586018190556006860184905560408051848152602081018490528082019290925260608201859052517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549181900360800190a15050505050565b60608360020160006127058585612059565b8152602001908152602001600020805461271e906142b0565b80601f016020809104026020016040519081016040528092919081815260200182805461274a906142b0565b80156127975780601f1061276c57610100808354040283529160200191612797565b820191906000526020600020905b81548152906001019060200180831161277a57829003601f168201915b505050505090509392505050565b6127ad6120e1565b6000805160206143f2833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612168565b6000805160206143d2833981519152546001600160a01b031690565b6128238260405180602001604052806000815250610f93565b610fae81612c31565b612834612c75565b6128667f0000000000000000000000000000000000000000000000000000000000000000866000196127258888612cbe565b6129077f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000088603c6127106128c16402540be4006004614299565b6128cb91906142ea565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ce492505050565b611112612d12565b60008360030160006129218585612059565b81526020810191909152604001600020546001600160a01b0316949350505050565b428160060154116129965760405162461bcd60e51b815260206004820152601a60248201527f414c3a52616d7020697320616c72656164792073746f707065640000000000006044820152606401610c5b565b60006129a182612b01565b60038301819055600483018190554260058401819055600684018190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938916129f891848252602082015260400190565b60405180910390a15050565b60006064612a1183612b01565b610abb91906142ea565b6000846001016000612a31846124278888612059565b8152602001908152602001600020549050949350505050565b6060846002016000612a60846124278888612059565b81526020019081526020016000208054612a79906142b0565b80601f0160208091040260200160405190810160405280929190818152602001828054612aa5906142b0565b8015612af25780601f10612ac757610100808354040283529160200191612af2565b820191906000526020600020905b815481529060010190602001808311612ad557829003601f168201915b50505050509050949350505050565b600681015460048201546000919042821115610b6c576005840154600385015480831115612b6f57612b33828561430c565b612b3d834261430c565b612b47838661430c565b612b519190614299565b612b5b91906142ea565b612b659082614286565b9695505050505050565b612b79828561430c565b612b83834261430c565b612b8d858461430c565b612b979190614299565b612ba191906142ea565b612b65908261430c565b6000805160206143f28339815191525460ff16610eba57604051638dfc202b60e01b815260040160405180910390fd5b612be482612d1a565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612c29576123c38282612d7f565b610fae612dec565b6000612c3b612085565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb906020016129f8565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610eba57604051631afcd79f60e31b815260040160405180910390fd5b612cc6612c75565b612cce612d12565b612cd6612d12565b611112868686868686612e0b565b612cec612c75565b612cf4613198565b612cfc6131a8565b612d04612d12565b6111128686868686866131b8565b610eba612c75565b806001600160a01b03163b600003612d5057604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610c5b565b6000805160206143d283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612d9c919061431f565b600060405180830381855af49150503d8060008114612dd7576040519150601f19603f3d011682016040523d82523d6000602084013e612ddc565b606091505b5091509150610fec858383613596565b3415610eba5760405163b398979f60e01b815260040160405180910390fd5b612e13612c75565b6001600160a01b038616612e695760405162461bcd60e51b815260206004820152601d60248201527f474d3a676f7665726e616e63652063616e206e6f74206265207a65726f0000006044820152606401610c5b565b6001600160a01b038516612ebf5760405162461bcd60e51b815260206004820152601960248201527f474d3a73656e6174652063616e206e6f74206265207a65726f000000000000006044820152606401610c5b565b428411612f045760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401610c5b565b82600003612f545760405162461bcd60e51b815260206004820152601e60248201527f474d3a7061636b616765547970652063616e206e6f74206265207a65726f00006044820152606401610c5b565b6000819003612fb15760405162461bcd60e51b815260206004820152602360248201527f474d3a696e697456657273696f6e4e616d652063616e206e6f7420626520656d60448201526270747960e81b6064820152608401610c5b565b6000612fbb612085565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000805160206143b2833981519152600073__$dabd46e1bb7f0d62843614b2ceac53b60c$__6363feb974848461301f6127ee565b8a8a8a620151806040518863ffffffff1660e01b81526004016130489796959493929190613f65565b602060405180830381865af4158015613065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130899190613ef5565b6040516336e094d760e11b815260048101859052602481018490526044810182905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$",
  "libraries": {
    "GeodeModuleLib": "0xEDC21cd663b77Dd21299638732A747d703553114",
    "LiquidityModuleLib": "0x648633aC0bA2Bfc29eDe0C47a5Dce3C02F611a2F"
  },
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "TYPE: PACKAGE_LIQUIDITY_POOLUtilizing IGeodePackage interface, meaning initialize function takes 3 parameters: * * poolOwner: will be assigned as the senate of the package * * pooledTokenId: used internally on LM and LML. * * data: referances 1 parameter: name. Used to generate lpTokenName and lpTokenSymbol for __LM_init.review: LM for StableSwap implementation. Also note: * initial and future A coefficients are set as 60 (LM) * trade fee set to 4 bips (LM) * owner fee is set to 0 (LM) * senate expiry is not effective (GM)review: GM for The Limited Upgradability through Dual Governance: * Governance is the Portal, package version controller. * Senate is the Staking Pool Owner.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ContractVersionSet(uint256)": {
        "custom:section": "** EVENTS **"
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "TokenSwap(address,uint256,uint256,uint128,uint128)": {
        "custom:section": "** EVENTS **"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "GeodeParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "LiquidityParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "addLiquidity(uint256[2],uint256,uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "deadline": "latest timestamp to accept this transaction",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "allIdsByType(uint256,uint256)": {
        "details": "useful for outside reach, shouldn't be used within contracts as a referance",
        "returns": {
          "_0": "allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index"
        }
      },
      "approveProposal(uint256)": {
        "details": "handles PACKAGE_TYPE proposals by upgrading the contract immediately.onlySenate is checked inside GML.approveProposal"
      },
      "calculateRemoveLiquidity(uint256)": {
        "params": {
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(uint256,uint8)": {
        "params": {
          "tokenAmount": "the amount of LP token to burn",
          "tokenIndex": "index of which token will be withdrawn"
        },
        "returns": {
          "availableTokenAmount": "calculated amount of underlying token available to withdraw"
        }
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "calculateTokenAmount(uint256[2],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "changeIdCONTROLLER(uint256,address)": {
        "custom:subsection": "** ONLY CONTROLLER **"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "generateId(string,uint256)": {
        "details": "id is generated by keccak(name, type)"
      },
      "getA()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "A parameter"
        }
      },
      "getAPrecise()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "getAdminBalance(uint256)": {
        "params": {
          "index": "Index of the pooled token"
        },
        "returns": {
          "_0": "admin's token balance in the token's precision"
        }
      },
      "getBalance(uint8)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "current balance of the pooled token at given index with token's native precision"
        }
      },
      "getDebt()": {
        "details": "result might change when price is in.",
        "returns": {
          "_0": "debt the half of the D StableSwap invariant when debt is needed to be payed."
        }
      },
      "getProposedVersion()": {
        "details": "GeodeModule override"
      },
      "getVirtualPrice()": {
        "returns": {
          "_0": "the virtual override price"
        }
      },
      "initialize(uint256,address,bytes,bytes)": {
        "params": {
          "data": "only poolName is required from Portal"
        }
      },
      "isolationMode()": {
        "custom:visibility": "-> view",
        "details": "GeodeModule override"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "propose(address,uint256,bytes,uint256)": {
        "custom:subsection": "** ONLY GOVERNANCE **"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "pullUpgrade()": {
        "details": "IGeodePackage override"
      },
      "readUintArray(uint256,bytes32,uint256)": {
        "custom:section": "** ARRAY GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "removeLiquidity(uint256,uint256[2],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "deadline": "latest timestamp to accept this transaction",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the token you want to receive",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "setSwapFee(uint256)": {
        "custom:subsection": "** LIQUIDITY POOL **",
        "details": "LM override"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "dx": "the amount of tokens the user wants to swap from",
          "minDy": "the min amount the user would like to receive, or revert.",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "LPP: Liquidity Pool Package: Geode Module + Liquidity Module",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[2],uint256,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(uint256,uint8)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "calculateTokenAmount(uint256[2],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "generateId(string,uint256)": {
        "notice": "useful function for string inputs - returns same with the DSML.generateId"
      },
      "getA()": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise()": {
        "notice": "Return A in its raw precision form"
      },
      "getAdminBalance(uint256)": {
        "notice": "Reads the accumulated amount of admin fees of the token with given index"
      },
      "getBalance(uint8)": {
        "notice": "Return current balance of the pooled token at given index"
      },
      "getDebt()": {
        "notice": "Debt, The amount of buyback for stable pricing (1=1)."
      },
      "getKey(uint256,bytes32)": {
        "notice": "useful view function for string inputs - returns same with the DSML.generateId"
      },
      "getPoolId()": {
        "notice": "get the gETH ID of the corresponding staking pool"
      },
      "getVirtualPrice()": {
        "notice": "Get the virtual override price, to help calculate profit"
      },
      "pause()": {
        "notice": "pausing the contract activates the isolationMode"
      },
      "removeLiquidity(uint256,uint256[2],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Swap two tokens using this pool"
      },
      "unpause()": {
        "notice": "unpausing the contract deactivates the isolationMode"
      }
    },
    "notice": "LPP is a package that provides a liquidity pool for a staking pool created through Portal.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}