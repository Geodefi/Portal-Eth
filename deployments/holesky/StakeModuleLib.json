{
  "address": "0xe5614F21772a3DB0F658a5860E153D09Ef1BF01B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitDelay",
          "type": "uint256"
        }
      ],
      "name": "BeaconDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "Delegation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtgETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedgETH",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "ExitRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "FallbackOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "FeeSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "InfrastructureFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "MaintainerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "StakeProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "ValidatorPeriodSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        }
      ],
      "name": "VisibilitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldReceiver",
          "type": "address"
        }
      ],
      "name": "YieldReceiverSet",
      "type": "event"
    }
  ],
  "transactionHash": "0x263c1f3b54ae408660cddd8e09f5990436a1f0893ad926c72d24b9d7254afaed",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0xe5614F21772a3DB0F658a5860E153D09Ef1BF01B",
    "transactionIndex": 1,
    "gasUsed": "4136519",
    "logsBloom": "0x
    "blockHash": "0x34f73a8326fc509d8cae91f2ef5507b8ee6be6dc7cd9783cc0836cc6cd23e424",
    "transactionHash": "0x263c1f3b54ae408660cddd8e09f5990436a1f0893ad926c72d24b9d7254afaed",
    "logs": [],
    "blockNumber": 852071,
    "cumulativeGasUsed": "4157519",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cfc92d910e56f99740a6d4737a3b72cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitDelay\",\"type\":\"uint256\"}],\"name\":\"BeaconDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"Delegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtgETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedgETH\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"ExitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"FallbackOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"FeeSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InfrastructureFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"StakeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"ValidatorPeriodSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"name\":\"VisibilitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldReceiver\",\"type\":\"address\"}],\"name\":\"YieldReceiverSet\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"review: DataStoreModule for the id based isolated storage logic.review: InitiatorExtensionLib for initiator functions.review: OracleExtensionLib for oracle logic.Every pool is isolated and every validator is unique. We segregate all the risk.CONTROLLER and Maintainer: CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important. maintainer is the worker, can be used to automate some daily tasks: * distributing validators for Staking Pools or creating validators for Operators. * not so crucial in terms of security.Users: Type 4 : Permissioned Operators * Needs to be onboarded by the Dual Governance (Senate + Governance). * Maintains Beacon Chain Validators on behalf of the Staking Pools. * Can participate in the Operator Marketplace after initiation. * Can utilize maintainers for staking operations. Type 5 : Permissionless Configurable Staking Pools * Permissionless to create. * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc. * Can be public or private, can use a whitelist if private. * Can utilize maintainers for validator distribution on Operator Marketplace. * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * accruing rewards and keeping Staked Ether safe and isolated.Packages: An ID can only point to one version of a Package at a time. Built by utilizing the Modules! Can be upgraded by a dual governance, via pullUpgrade. * A Package's dual governance consists of Portal(governance) and the pool owner(senate). Type 10011 : Withdrawal Contract * Mandatory. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Staking Pools are in \\\"Isolation Mode\\\" until their Withdrawal Contract is upgraded. * * Meaning, no more Depositing or Validator Proposal can happen. * Custodian of the validator funds after creation, including any type of rewards and fees. Type 10021 : Liquidity Pool implementation * Optional. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Liquidity Pools are in \\\"Isolation Mode\\\" until upgraded.Middlewares: Can support many different versions that can be utilized by the Pool Owners. No particular way to build one. Cannot be upgraded. Currently only gETHMiddlewares. Type 20011 : gETHMiddleware * Optional. * CONTROLLER is the implementation contract position (always) * Requires the approval of Senate * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeModuleLib.StakeModuleStorageFunctions are protected with authentication function\",\"events\":{\"InfrastructureFeeSet(uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"changeMaintainer(DataStoreModuleStorage storage,uint256,address)\":{\"details\":\"there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migrationwe don't use _authenticate here because malicious maintainers can imprison operators * and prevent them entering here, smh.\"},\"decreaseWalletBalance(DataStoreModuleStorage storage,uint256,uint256)\":{\"details\":\"only CONTROLLER can decrease the balance externally,\",\"returns\":{\"success\":\"if the amount was sent and deducted\"}},\"delegate(DataStoreModuleStorage storage,uint256,uint256[],uint256[])\":{\"details\":\"When decreased the approved validator count below current active+proposed validators, operator cannot create new validators.\",\"params\":{\"allowances\":\"the MAX number of validators that can be created by the Operator, for given Pool\",\"operatorIds\":\"array of Operator IDs to allow them create validators\",\"poolId\":\"the gETH id of the Pool\"}},\"deposit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,uint256,address)\":{\"details\":\"an example for minting + buybacks Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- * debt  msgValue * 100   10  => buyback * 100   100 => buyback * 10    100 => buyback + mint * 1     x   => mint * 0.5   x   => mint * 0     x   => mint\",\"params\":{\"deadline\":\"liquidity pool parameter\",\"mingETH\":\"liquidity pool parameter\",\"poolId\":\"id of the staking pool, liquidity pool and gETH to be used.\"}},\"finalizeExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)\":{\"details\":\"Strongly advised to be called right after the exiting process is over.Operators can exit at any time they want.Can only be called by the withdrawalContract of the pool given validator belongs to.\"},\"getMaintenanceFee(DataStoreModuleStorage storage,uint256)\":{\"details\":\"respecs to the switching delay.\",\"returns\":{\"fee\":\"= percentage * PERCENTAGE_DENOMINATOR / 100\"}},\"getValidatorPeriod(DataStoreModuleStorage storage,uint256)\":{\"custom:visibility\":\"-> view-public\"},\"increaseWalletBalance(DataStoreModuleStorage storage,uint256)\":{\"details\":\"anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\"},\"isPriceValid(StakeModuleStorage storage,uint256)\":{\"details\":\"known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false\"},\"isPrisoned(DataStoreModuleStorage storage,uint256)\":{\"details\":\"rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\"},\"isWhitelisted(DataStoreModuleStorage storage,uint256,address)\":{\"details\":\"Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set\"},\"operatorAllowance(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256)\":{\"details\":\"an operator cannot create new validators if: * 1. operator is a monopoly * 2. allowance is filled * * But if operator is set as a fallback, it can if set fallbackThreshold is reached on all allowances.If operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked.\"},\"proposeStake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"details\":\"DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"poolId\":\"the id of the staking pool\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that will be proposed\",\"signatures1\":\"Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance\",\"signatures31\":\"Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call\"}},\"requestExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)\":{\"details\":\"Prevents the request if validator is still within the MIN_VALIDATOR_PERIODOnly the active validators can be called for an exitCan only be called by the withdrawalContract of the pool given validator belongs to.\"},\"setBeaconDelays(StakeModuleStorage storage,uint256,uint256)\":{\"details\":\"high beacon delays will affect the ux negatively, low delays can cause issues for operators.\"},\"setFallbackOperator(DataStoreModuleStorage storage,uint256,uint256,uint256)\":{\"params\":{\"fallbackThreshold\":\"the percentage (with PERCENTAGE_DENOMINATOR) that fallback operator * is activated for given Pool. Should not be greater than 100.\",\"operatorId\":\"Operator ID to allow create validators\",\"poolId\":\"the gETH id of the Pool\"}},\"setInfrastructureFee(StakeModuleStorage storage,uint256,uint256)\":{\"details\":\"Changing the Staking Pool fee, only applies to the newly created validators.advise that 100% == PERCENTAGE_DENOMINATOR\"},\"setPoolVisibility(DataStoreModuleStorage storage,uint256,bool)\":{\"details\":\"whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again. Note private pools can whitelist addresses with the help of a third party contract.\",\"params\":{\"makePrivate\":\"true if pool should be private, false for public pools\"}},\"setWhitelist(DataStoreModuleStorage storage,uint256,address)\":{\"details\":\"Whitelisting contracts should implement IWhitelist interface.\"},\"setYieldReceiver(DataStoreModuleStorage storage,uint256,address)\":{\"details\":\"Only CONTROLLER of pool can set yield receier.\",\"params\":{\"poolId\":\"the gETH id of the Pool\",\"yieldReceiver\":\"address of the yield receiver\"}},\"stake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes[])\":{\"details\":\"To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  separate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\"}},\"switchMaintenanceFee(DataStoreModuleStorage storage,uint256,uint256)\":{\"details\":\"Cannot be called again while its currently switching.advise that 100% == PERCENTAGE_DENOMINATOR\"},\"switchValidatorPeriod(DataStoreModuleStorage storage,uint256,uint256)\":{\"details\":\"limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\"}},\"title\":\"SML: Stake Module Library (The Staking Library)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canStake(StakeModuleStorage storage,bytes)\":{\"notice\":\"external function to check if a validator can use the pool funds\"},\"changeMaintainer(DataStoreModuleStorage storage,uint256,address)\":{\"notice\":\"CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\"},\"decreaseWalletBalance(DataStoreModuleStorage storage,uint256,uint256)\":{\"notice\":\"external function to decrease the internal wallet balance\"},\"delegate(DataStoreModuleStorage storage,uint256,uint256[],uint256[])\":{\"notice\":\"To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future.\"},\"deposit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,uint256,address)\":{\"notice\":\"Allowing users to deposit into a staking pool.If a pool is not public, only the controller and if there is a whitelist contract, the whitelisted addresses can deposit.\"},\"finalizeExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)\":{\"notice\":\"Finalizes the exit process for a validator.\"},\"getMaintenanceFee(DataStoreModuleStorage storage,uint256)\":{\"notice\":\"Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\"},\"increaseWalletBalance(DataStoreModuleStorage storage,uint256)\":{\"notice\":\"external function to increase the internal wallet balance\"},\"isMintingAllowed(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256)\":{\"notice\":\"checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Isolation Mode, can have many reasons\"},\"isPriceValid(StakeModuleStorage storage,uint256)\":{\"notice\":\"returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update\"},\"isPrisoned(DataStoreModuleStorage storage,uint256)\":{\"notice\":\"Checks if the given operator is Prisoned\"},\"isPrivatePool(DataStoreModuleStorage storage,uint256)\":{\"notice\":\"returns true if the pool is private\"},\"isWhitelisted(DataStoreModuleStorage storage,uint256,address)\":{\"notice\":\"checks if the Whitelist allows staker to use given private pool\"},\"operatorAllowance(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256)\":{\"notice\":\"maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool\"},\"proposeStake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"notice\":\"Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools.\"},\"requestExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)\":{\"notice\":\"Notifies the node operator with ExitRequest event\"},\"setBeaconDelays(StakeModuleStorage storage,uint256,uint256)\":{\"notice\":\"Set the maxiumum allowed beacon delay for blaming validators on creation and exit.\"},\"setFallbackOperator(DataStoreModuleStorage storage,uint256,uint256,uint256)\":{\"notice\":\"To allow a Node Operator run validators for your Pool without a limit * after pool reaches a given treshold as percentage. * fallback operator and percentage can be set again at any given point in the future. * cannot set an operator as a fallback operator while it is currently in prison.\"},\"setInfrastructureFee(StakeModuleStorage storage,uint256,uint256)\":{\"notice\":\"Set a fee (denominated in PERCENTAGE_DENOMINATOR) for any given TYPE.\"},\"setPoolVisibility(DataStoreModuleStorage storage,uint256,bool)\":{\"notice\":\"changes the visibility of the pool\"},\"setWhitelist(DataStoreModuleStorage storage,uint256,address)\":{\"notice\":\"private pools can whitelist addresses with the help of a third party contract.\"},\"setYieldReceiver(DataStoreModuleStorage storage,uint256,address)\":{\"notice\":\"Set the yield receiver address to activate or deactivete yield separation logic. * If set other than address(0) separation will be activated, if set back to address(0) * separation will be deactivated again.\"},\"stake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes[])\":{\"notice\":\"Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet.\"},\"switchMaintenanceFee(DataStoreModuleStorage storage,uint256,uint256)\":{\"notice\":\"Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\"},\"switchValidatorPeriod(DataStoreModuleStorage storage,uint256,uint256)\":{\"notice\":\"updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\"}},\"notice\":\"Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool, improving the user experience for stakers and removing the \\\"need\\\" for centralized or decentralized intermediaries. * Exclusively contains functions related to: * 1. Pool and Operator management, after initiation (review IEL). * 2. Validator Delegation. * 3. Depositing. * 4. Staking Operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/StakeModule/libs/StakeModuleLib.sol\":\"StakeModuleLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT UPGRADE: proposal to change the given contract's implementation. TYPE should be package's TYPE.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPool and WithdrawalContract are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Cannot be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// --\\n\\n  /// @notice TYPE 3: Limit: exclusive, minimum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MIN_USER = 3;\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 9999: Limit: exclusive, maximum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MAX_USER = 9999;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10001: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Credential Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL_CONTRACT = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY_POOL = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20011: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x703e579cedf1a96736702958c414562d80fca21ed9f2eac7fe1957905a493493\",\"license\":\"MIT\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0x9d699aeaf6da35d188a5495eec188b28a990e09bd04fa7701d28c4ff9afba801\",\"license\":\"MIT\"},\"contracts/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition treshold calculated with given percentage value for fallback operator to be activated\\n   */\\n  bytes32 internal constant fallbackThreshold = \\\"fallbackThreshold\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the initiation timestamp of a \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity pool of a pool\\n   */\\n  bytes32 internal constant liquidityPool = \\\"liquidityPool\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition receiver address for yield seperation functionality\\n   * * will receive minted gETH to given receiver instead of increasing pricePerShare\\n   */\\n  bytes32 internal constant yieldReceiver = \\\"yieldReceiver\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition period that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for pool-operator pair.\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalContract = \\\"withdrawalContract\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalContract\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x62ab3086774ad8721fa9e571e663e6444bebe30020075898406ec92ab55146bb\",\"license\":\"MIT\"},\"contracts/globals/validator_state.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice VALIDATOR_STATE: keeping track of validators within The Staking Library.\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract.\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator.\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is called to be exited.\\n  uint8 internal constant EXIT_REQUESTED = 3;\\n\\n  /// @notice STATE 4: validator is fully exited.\\n  uint8 internal constant EXITED = 4;\\n\\n  /// @notice STATE 69: proposal was malicious(alien). Maybe faulty signatures or probably frontrunning (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xe3b6be931c93e3855d7dc1775870378652699745f7273f601dea102a7ce87546\",\"license\":\"MIT\"},\"contracts/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.20;\\n\\nlibrary BytesLib {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  ) internal pure returns (bytes memory) {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      // Get a location of some free memory and store it in tempBytes as\\n      // Solidity does for memory variables.\\n      tempBytes := mload(0x40)\\n\\n      // Store the length of the first bytes array at the beginning of\\n      // the memory for tempBytes.\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      // Maintain a memory counter for the current write location in the\\n      // temp bytes array by adding the 32 bytes for the array length to\\n      // the starting location.\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the\\n      // first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data,\\n        // 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\n        // at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Add the length of _postBytes to the current length of tempBytes\\n      // and store it as the new length in the first 32 bytes of the\\n      // tempBytes memory.\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the\\n      // actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined\\n      // length of the arrays.\\n      end := add(mc, length)\\n\\n      for {\\n        let cc := add(_postBytes, 0x20)\\n      } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Update the free-memory pointer by padding our last write location\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n      // next 32 byte block, then round down to the nearest multiple of\\n      // 32. If the sum of the length of the two arrays is zero then add\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          not(31) // Round down to the nearest 32 bytes.\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\n      // of the array. (We don't need to use the offset into the slot\\n      // because arrays use the entire slot.)\\n      let fslot := sload(_preBytes.slot)\\n      // Arrays of 31 bytes or less have an even value in their slot,\\n      // while longer arrays have an odd value. The actual length is\\n      // the slot divided by two for odd values, and the lowest order\\n      // byte divided by two for even values.\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\n      // two to get the length. If the slot is odd, bitwise and the slot\\n      // with -1 and divide by two.\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n      // slength can contain both the length and contents of the array\\n      // if length < 32 bytes so let's prepare for that\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        // Since the new array still fits in the slot, we just need to\\n        // update the contents of the slot.\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n        sstore(\\n          _preBytes.slot,\\n          // all the modifications to the slot are inside this\\n          // next block\\n          add(\\n            // we can just add to the slot contents because the\\n            // bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory\\n                  mload(add(_postBytes, 0x20)),\\n                  // zero all bytes to the right\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // increase length by the double of the memory\\n              // bytes length\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        // The stored value fits in the slot, but the combined value\\n        // will exceed it.\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // The contents of the _postBytes array start 32 bytes into\\n        // the structure. Our first read should obtain the `submod`\\n        // bytes that can fit into the unused space in the last word\\n        // of the stored array. To get this, we read 32 bytes starting\\n        // from `submod`, so the data we read overlaps with the array\\n        // contents by `submod` bytes. Masking the lowest-order\\n        // `submod` bytes allows us to add that value directly to the\\n        // stored value.\\n\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in\\n        // case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        // cb is a circuit breaker in the for loop since there's\\n        //  no said feature for inline assembly loops\\n        // cb = 1 - don't breaker\\n        // cb = 0 - break\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for {\\n          let cc := add(_postBytes, 0x20)\\n          // the next line is the loop condition:\\n          // while(uint256(mc < end) + cb == 2)\\n        } eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // if any of these checks fails then arrays are not equal\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  ) internal view returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      // we know _preBytes_offset is 0\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(slength, mlength)\\n      case 1 {\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // blank the last byte which is the length\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n            let cb := 1\\n\\n            // get the keccak hash to get the contents of the array\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // the next line is the loop condition:\\n            // while(uint256(mc < end) + cb == 2)\\n            for {\\n\\n            } eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x4ee3f6ef85baa41794fc1519522f7c135becd0e267980eadc68dd643e52b59c7\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IGeodeModule, IStakeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (uint256 id);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n}\\n\",\"keccak256\":\"0x012a8ed050ba68838eeb7463b75f32ba8fdf50c9e54e44dd37d4e87ca16ba78c\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/** This interface is designed to be compatible with the Vyper version.\\n * @notice This is the Ethereum 2.0 deposit contract interface.\\n * For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ninterface IDepositContract {\\n  /**\\n   * @notice Submit a Phase 0 DepositData object.\\n   * @param pubkey A BLS12-381 public key.\\n   * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n   * @param signature A BLS12-381 signature.\\n   * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n   *Used as a protection against malformed input.\\n   */\\n  function deposit(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x2db8802f8f888c62b147508e142e15c59775ff75906d09122e810483919bff27\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IWhitelist {\\n  function isAllowed(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd9a70c727b9cee59af99357d2ff7b04e8ef19372f6a72efd74a14091f836bdcb\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3ba6191b4a643bce171bb7dc9b39a55dd0c8c932934429902dec4eb7b6c3df9a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Proposal} from \\\"../../modules/GeodeModule/structs/utils.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getGovernance() external view returns (address);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x2eb0e5472c00c7d91443f0544ce349129266665dd59f1e4b0598173df1a9d1c5\",\"license\":\"MIT\"},\"contracts/interfaces/modules/ILiquidityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface ILiquidityModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function LiquidityParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address lpToken,\\n      uint256 pooledTokenId,\\n      uint256 initialA,\\n      uint256 futureA,\\n      uint256 initialATime,\\n      uint256 futureATime,\\n      uint256 swapFee,\\n      uint256 adminFee\\n    );\\n\\n  function getA() external view returns (uint256);\\n\\n  function getAPrecise() external view returns (uint256);\\n\\n  function getBalance(uint8 index) external view returns (uint256);\\n\\n  function getDebt() external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[2] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function withdrawAdminFees(address receiver) external;\\n\\n  function setAdminFee(uint256 newAdminFee) external;\\n\\n  function setSwapFee(uint256 newSwapFee) external;\\n\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n  function stopRampA() external;\\n}\\n\",\"keccak256\":\"0xee470aafacf0ec10f63efa53a3f4f8deaf03cd9b0d0aae178949464960ff397a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Validator} from \\\"../../modules/StakeModule/structs/utils.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external;\\n\\n  function setBeaconDelays(uint256 entry, uint256 exit) external;\\n\\n  function setInitiationDeposit(uint256 newInitiationDeposit) external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 beaconDelayEntry,\\n      uint256 beaconDelayExit,\\n      uint256 initiationDeposit,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function getPriceMerkleRoot() external view returns (bytes32);\\n\\n  function getBalancesMerkleRoot() external view returns (bytes32);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function getInfrastructureFee(uint256 _type) external view returns (uint256);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPool(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function setYieldReceiver(uint256 poolId, address yieldReceiver) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameExit(\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external;\\n\\n  function blameProposal(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function requestExit(uint256 poolId, bytes memory pk) external;\\n\\n  function finalizeExit(uint256 poolId, bytes memory pk) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc40b5a52176334fe7d2edd7fbd28fc529cf261d8ce3ffa138e0930899d545a03\",\"license\":\"MIT\"},\"contracts/interfaces/packages/IGeodePackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"../modules/IGeodeModule.sol\\\";\\nimport {IPortal} from \\\"../IPortal.sol\\\";\\n\\ninterface IGeodePackage is IGeodeModule {\\n  function initialize(\\n    uint256 poolId,\\n    address owner,\\n    bytes calldata versionName,\\n    bytes memory data\\n  ) external;\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function pullUpgrade() external;\\n}\\n\",\"keccak256\":\"0x9c854fab873502a768e5903e7f66b6697313f77bea4d5ca200aad8d0c3190ed9\",\"license\":\"MIT\"},\"contracts/interfaces/packages/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {ILiquidityModule} from \\\"../modules/ILiquidityModule.sol\\\";\\nimport {IGeodePackage} from \\\"./IGeodePackage.sol\\\";\\n\\ninterface ILiquidityPool is IGeodePackage, ILiquidityModule {}\\n\",\"keccak256\":\"0x75fe3f103131761db0210141774365c7eb975812178b262564343c7d660f9cb4\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\n// external - libraries\\n// external - contracts\\n// internal - globals\\n// internal - interfaces\\nimport {DataStoreModuleStorage} from \\\"../structs/storage.sol\\\";\\n\\n// internal - structs\\n// internal - libraries\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the DataStoreModuleStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is not mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.DataStoreModuleStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the DataStoreModuleStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encode(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0x5a3b3ca22504164ac53369e1fe1d7d7febb603c672fce147ce1a86b4875fd219\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Storage Struct for reading/writing operations for given (id, key) pairs.\\n *\\n * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n * @param uintData keccak(id, key) =>  returns uint256\\n * @param bytesData keccak(id, key) => returns bytes\\n * @param addressData keccak(id, key) =>  returns address\\n *\\n * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.DataStoreModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct DataStoreModuleStorage {\\n  mapping(uint256 => uint256[]) allIdsByType;\\n  mapping(bytes32 => uint256) uintData;\\n  mapping(bytes32 => bytes) bytesData;\\n  mapping(bytes32 => address) addressData;\\n}\\n\",\"keccak256\":\"0x10c4430d4d368abd4bd5488b4cf6c942c6e26e58ae52163926cd5daae3e0c77f\",\"license\":\"MIT\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals cannot be approved by Senate\\n * * Expired proposals cannot be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0xe3ec6ceacdbd2f960316b9c8b0bf930364c3f096fe9bf56849d9b4814c320643\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/libs/DepositContractLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IDepositContract} from \\\"../../../interfaces/helpers/IDepositContract.sol\\\";\\n// internal - libraries\\nimport {BytesLib} from \\\"../../../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @title DCL: Deposit Contract Library\\n *\\n * @notice Includes constants & functions that helps to the deposit process.\\n *\\n * @dev DEPOSIT_CONTRACT is chain specific and should be changed before deployments.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DepositContractLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0x4242424242424242424242424242424242424242);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @custom:section                           ** FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(_stakeAmount % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot))\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  /**\\n   * @notice converts an address to withdrawal credential, used on validator creation\\n   */\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return abi.encodePacked(bytes32(w) | bytes32(uint256(uint160(address(wcAddress)))));\\n  }\\n\\n  /**\\n   * @notice deposit to DEPOSIT_CONTRACT and initiate a validator.\\n   */\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x71fa2b28cf5299abb9cfd8d7b8130c84f104b7a74d3ee2d6f5274e2fcc9a7ab2\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/libs/StakeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {PERCENTAGE_DENOMINATOR, gETH_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {IGeodePackage} from \\\"../../../interfaces/packages/IGeodePackage.sol\\\";\\nimport {ILiquidityPool} from \\\"../../../interfaces/packages/ILiquidityPool.sol\\\";\\nimport {IWhitelist} from \\\"../../../interfaces/helpers/IWhitelist.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {ConstantValidatorData} from \\\"../structs/helpers.sol\\\";\\nimport {Validator} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {DepositContractLib as DCL} from \\\"./DepositContractLib.sol\\\";\\n\\n/**\\n * @title SML: Stake Module Library (The Staking Library)\\n *\\n * @notice Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool,\\n * improving the user experience for stakers and removing the \\\"need\\\" for centralized or decentralized intermediaries.\\n * * Exclusively contains functions related to:\\n * * 1. Pool and Operator management, after initiation (review IEL).\\n * * 2. Validator Delegation.\\n * * 3. Depositing.\\n * * 4. Staking Operations.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: InitiatorExtensionLib for initiator functions.\\n * @dev review: OracleExtensionLib for oracle logic.\\n *\\n * @dev Every pool is isolated and every validator is unique. We segregate all the risk.\\n *\\n * @dev CONTROLLER and Maintainer:\\n * CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important.\\n * maintainer is the worker, can be used to automate some daily tasks:\\n * * distributing validators for Staking Pools or creating validators for Operators.\\n * * not so crucial in terms of security.\\n *\\n * @dev Users:\\n * Type 4 : Permissioned Operators\\n * * Needs to be onboarded by the Dual Governance (Senate + Governance).\\n * * Maintains Beacon Chain Validators on behalf of the Staking Pools.\\n * * Can participate in the Operator Marketplace after initiation.\\n * * Can utilize maintainers for staking operations.\\n *\\n * Type 5 : Permissionless Configurable Staking Pools\\n * * Permissionless to create.\\n * * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc.\\n * * Can be public or private, can use a whitelist if private.\\n * * Can utilize maintainers for validator distribution on Operator Marketplace.\\n * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation,\\n * * accruing rewards and keeping Staked Ether safe and isolated.\\n *\\n * @dev Packages:\\n * An ID can only point to one version of a Package at a time.\\n * Built by utilizing the Modules!\\n * Can be upgraded by a dual governance, via pullUpgrade.\\n * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n *\\n * Type 10011 : Withdrawal Contract\\n * * Mandatory.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Staking Pools are in \\\"Isolation Mode\\\" until their Withdrawal Contract is upgraded.\\n * * * Meaning, no more Depositing or Validator Proposal can happen.\\n * * Custodian of the validator funds after creation, including any type of rewards and fees.\\n *\\n * Type 10021 : Liquidity Pool implementation\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Liquidity Pools are in \\\"Isolation Mode\\\" until upgraded.\\n *\\n * @dev Middlewares:\\n * Can support many different versions that can be utilized by the Pool Owners.\\n * No particular way to build one.\\n * Cannot be upgraded.\\n * Currently only gETHMiddlewares.\\n *\\n * Type 20011 : gETHMiddleware\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Requires the approval of Senate\\n * * Currently should be utilized on initiation.\\n *\\n * @dev Contracts relying on this library must initialize StakeModuleLib.StakeModuleStorage\\n *\\n * @dev Functions are protected with authentication function\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary StakeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice limiting the GOVERNANCE_FEE to 5%\\n  uint256 internal constant MAX_POOL_INFRASTRUCTURE_FEE = 5e8; // (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /// @notice limit the beacon delays on entry and exit since it can be adjusted by the governance.\\n  uint256 internal constant MAX_BEACON_DELAY = 90 days; // = MIN_VALIDATOR_PERIOD\\n\\n  /// @notice limiting the pool and operator maintenance fee, 10%\\n  uint256 internal constant MAX_MAINTENANCE_FEE = 1e9; // (PERCENTAGE_DENOMINATOR * 10) / 100;\\n\\n  /// @notice effective on allowance per operator, prevents overflow. Exclusive, save gas with +1.\\n  uint256 internal constant MAX_ALLOWANCE = 1e6;\\n\\n  /// @notice price of gETH is only valid for 24H, minting is not allowed afterwards.\\n  uint256 internal constant PRICE_EXPIRY = 24 hours;\\n\\n  /// @notice ignoring any buybacks if the Liquidity Pool has a low debt\\n  uint256 internal constant IGNORABLE_DEBT = 1 ether;\\n\\n  /// @notice limiting the operator.validatorPeriod, between 3 months to 2 years\\n  uint256 internal constant MIN_VALIDATOR_PERIOD = 90 days; // 3 * 30 days\\n  uint256 internal constant MAX_VALIDATOR_PERIOD = 730 days; // 2 * 365 days\\n\\n  /// @notice some parameter changes are effective after a delay\\n  uint256 internal constant SWITCH_LATENCY = 3 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event InfrastructureFeeSet(uint256 _type, uint256 fee);\\n  event BeaconDelaySet(uint256 entryDelay, uint256 exitDelay);\\n  event VisibilitySet(uint256 id, bool isPrivate);\\n  event YieldReceiverSet(uint256 indexed poolId, address yieldReceiver);\\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\\n  event ValidatorPeriodSwitched(uint256 indexed operatorId, uint256 period, uint256 effectiveAfter);\\n  event Delegation(uint256 poolId, uint256 indexed operatorId, uint256 allowance);\\n  event FallbackOperator(uint256 poolId, uint256 indexed operatorId, uint256 threshold);\\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\\n  event StakeProposal(uint256 poolId, uint256 operatorId, bytes[] pubkeys);\\n  event Stake(bytes[] pubkeys);\\n  event ExitRequest(bytes pubkey);\\n  event Exit(bytes pubkey);\\n\\n  /**\\n   * @custom:section                           ** GOVERNING **\\n   *\\n   * @custom:visibility -> external\\n   * @dev IMPORTANT! These functions should be governed by a governance! Which is not done here!\\n   */\\n\\n  /**\\n   * @notice Set the maxiumum allowed beacon delay for blaming validators on creation and exit.\\n   * @dev high beacon delays will affect the ux negatively, low delays can cause issues for operators.\\n   */\\n  function setBeaconDelays(StakeModuleStorage storage self, uint256 entry, uint256 exit) external {\\n    require(entry < MAX_BEACON_DELAY, \\\"SML:> MAX\\\");\\n    require(exit < MAX_BEACON_DELAY, \\\"SML:> MAX\\\");\\n\\n    self.BEACON_DELAY_ENTRY = entry;\\n    self.BEACON_DELAY_EXIT = exit;\\n\\n    emit BeaconDelaySet(entry, exit);\\n  }\\n\\n  /**\\n   * @notice Set a fee (denominated in PERCENTAGE_DENOMINATOR) for any given TYPE.\\n   * @dev Changing the Staking Pool fee, only applies to the newly created validators.\\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\n   */\\n  function setInfrastructureFee(\\n    StakeModuleStorage storage self,\\n    uint256 _type,\\n    uint256 fee\\n  ) external {\\n    if (_type == ID_TYPE.POOL) {\\n      require(fee <= MAX_POOL_INFRASTRUCTURE_FEE, \\\"PORTAL:> MAX\\\");\\n    } else {\\n      require(fee < PERCENTAGE_DENOMINATOR, \\\"SML:> 100%\\\");\\n    }\\n\\n    self.infrastructureFees[_type] = fee;\\n    emit InfrastructureFeeSet(_type, fee);\\n  }\\n\\n  /**\\n   * @custom:section                           ** AUTHENTICATION **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice restricts the access to given function based on TYPE and msg.sender\\n   * @param _expectCONTROLLER restricts the access to only CONTROLLER.\\n   * @param _expectMaintainer restricts the access to only maintainer.\\n   * @param _restrictionMap Restricts which TYPEs can pass the authentication.\\n   * * [0: Operator = TYPE(4), 1: Pool = TYPE(5)]\\n   * @dev can only be used after an ID is initiated\\n   * @dev CONTROLLERS and maintainers of the Prisoned Operators cannot access.\\n   */\\n  function _authenticate(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    bool _expectCONTROLLER,\\n    bool _expectMaintainer,\\n    bool[2] memory _restrictionMap\\n  ) internal view {\\n    require(DATASTORE.readUint(_id, rks.initiated) != 0, \\\"SML:not initiated\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(_id, rks.TYPE);\\n\\n    if (typeOfId == ID_TYPE.OPERATOR) {\\n      require(_restrictionMap[0], \\\"SML:TYPE not allowed\\\");\\n      if (_expectCONTROLLER || _expectMaintainer) {\\n        require(!isPrisoned(DATASTORE, _id), \\\"SML:prisoned, get in touch with governance\\\");\\n      }\\n    } else if (typeOfId == ID_TYPE.POOL) {\\n      require(_restrictionMap[1], \\\"SML:TYPE not allowed\\\");\\n    } else {\\n      revert(\\\"SML:invalid TYPE\\\");\\n    }\\n\\n    if (_expectMaintainer) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.maintainer),\\n        \\\"SML:sender not maintainer\\\"\\n      );\\n      return;\\n    }\\n\\n    if (_expectCONTROLLER) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.CONTROLLER),\\n        \\\"SML:sender not CONTROLLER\\\"\\n      );\\n      return;\\n    }\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** POOL VISIBILITY **\\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice changes the visibility of the pool\\n   * @param makePrivate true if pool should be private, false for public pools\\n   * @dev whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again.\\n   * Note private pools can whitelist addresses with the help of a third party contract.\\n   */\\n  function setPoolVisibility(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bool makePrivate\\n  ) public {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(makePrivate != isPrivatePool(DATASTORE, poolId), \\\"SML:already set\\\");\\n\\n    DATASTORE.writeUint(poolId, rks.privatePool, makePrivate ? 1 : 0);\\n\\n    if (!makePrivate) {\\n      DATASTORE.writeAddress(poolId, rks.whitelist, address(0));\\n    }\\n\\n    emit VisibilitySet(poolId, makePrivate);\\n  }\\n\\n  /**\\n   * @notice private pools can whitelist addresses with the help of a third party contract.\\n   * @dev Whitelisting contracts should implement IWhitelist interface.\\n   */\\n  function setWhitelist(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address whitelist\\n  ) external {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(isPrivatePool(DATASTORE, poolId), \\\"SML:must be private pool\\\");\\n\\n    DATASTORE.writeAddress(poolId, rks.whitelist, whitelist);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the pool is private\\n   */\\n  function isPrivatePool(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return (DATASTORE.readUint(poolId, rks.privatePool) == 1);\\n  }\\n\\n  /**\\n   * @notice checks if the Whitelist allows staker to use given private pool\\n   * @dev Owner of the pool doesn't need whitelisting\\n   * @dev Otherwise requires a whitelisting address to be set\\n   */\\n  function isWhitelisted(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address staker\\n  ) public view returns (bool) {\\n    if (DATASTORE.readAddress(poolId, rks.CONTROLLER) == staker) {\\n      return true;\\n    }\\n\\n    address whitelist = DATASTORE.readAddress(poolId, rks.whitelist);\\n    if (whitelist == address(0)) {\\n      return false;\\n    }\\n\\n    if (whitelist.code.length > 0) {\\n      try IWhitelist(whitelist).isAllowed(staker) returns (bool _isAllowed) {\\n        return _isAllowed;\\n      } catch {\\n        return false;\\n      }\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** ID MANAGEMENT **\\n   *\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** YIELD SEPARATION **\\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Set the yield receiver address to activate or deactivete yield separation logic.\\n   * * If set other than address(0) separation will be activated, if set back to address(0)\\n   * * separation will be deactivated again.\\n   * @param poolId the gETH id of the Pool\\n   * @param yieldReceiver address of the yield receiver\\n   * @dev Only CONTROLLER of pool can set yield receier.\\n   */\\n  function setYieldReceiver(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address yieldReceiver\\n  ) external {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n\\n    DATASTORE.writeAddress(poolId, rks.yieldReceiver, yieldReceiver);\\n    emit YieldReceiverSet(poolId, yieldReceiver);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** MAINTAINER **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Set the maintainer address on initiation or later\\n   * @param _newMaintainer address of the new maintainer\\n   */\\n  function _setMaintainer(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    address _newMaintainer\\n  ) internal {\\n    require(_newMaintainer != address(0), \\\"SML:maintainer cannot be zero\\\");\\n\\n    DATASTORE.writeAddress(_id, rks.maintainer, _newMaintainer);\\n    emit MaintainerChanged(_id, _newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\n   * @dev there can only be 1 maintainer per ID.\\n   * @dev it is wise to change the maintainer before the CONTROLLER, in case of any migration\\n   * @dev we don't use _authenticate here because malicious maintainers can imprison operators\\n   * * and prevent them entering here, smh.\\n   */\\n  function changeMaintainer(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newMaintainer\\n  ) external {\\n    require(DATASTORE.readUint(id, rks.initiated) != 0, \\\"SML:ID is not initiated\\\");\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"SML:sender not CONTROLLER\\\");\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(typeOfId == ID_TYPE.OPERATOR || typeOfId == ID_TYPE.POOL, \\\"SML:invalid TYPE\\\");\\n\\n    _setMaintainer(DATASTORE, id, newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** MAINTENANCE FEE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\\n   *\\n   * @dev respecs to the switching delay.\\n   *\\n   * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100\\n   */\\n  function getMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 fee) {\\n    if (DATASTORE.readUint(id, rks.feeSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorFee);\\n    }\\n    return DATASTORE.readUint(id, rks.fee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set fee with NO DELAY\\n   */\\n  function _setMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _newFee\\n  ) internal {\\n    require(_newFee <= MAX_MAINTENANCE_FEE, \\\"SML:> MAX_MAINTENANCE_FEE\\\");\\n    DATASTORE.writeUint(_id, rks.fee, _newFee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\\n   * @dev Cannot be called again while its currently switching.\\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\n   */\\n  function switchMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 newFee\\n  ) external {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(block.timestamp > DATASTORE.readUint(id, rks.feeSwitch), \\\"SML:currently switching\\\");\\n\\n    DATASTORE.writeUint(id, rks.priorFee, DATASTORE.readUint(id, rks.fee));\\n    DATASTORE.writeUint(id, rks.feeSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setMaintenanceFee(DATASTORE, id, newFee);\\n\\n    emit FeeSwitched(id, newFee, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** INTERNAL WALLET **\\n   *\\n   * @dev Internal wallet of an ID accrues fees over time.\\n   * It is also used by Node Operators to fund 1 ETH per validator proposal, which is reimbursed if/when activated.\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Simply increases the balance of an IDs Maintainer wallet\\n   * @param _value Ether (in Wei) amount to increase the wallet balance.\\n   */\\n  function _increaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    DATASTORE.addUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @notice To decrease the balance of an Operator's wallet internally\\n   * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\n   */\\n  function _decreaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    require(DATASTORE.readUint(_id, rks.wallet) >= _value, \\\"SML:insufficient wallet balance\\\");\\n    DATASTORE.subUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice external function to increase the internal wallet balance\\n   * @dev anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\\n   */\\n  function increaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, false, false, [true, true]);\\n    _increaseWalletBalance(DATASTORE, id, msg.value);\\n    success = true;\\n  }\\n\\n  /**\\n   * @notice external function to decrease the internal wallet balance\\n   * @dev only CONTROLLER can decrease the balance externally,\\n   * @return success if the amount was sent and deducted\\n   */\\n  function decreaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 value\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(address(this).balance >= value, \\\"SML:insufficient contract balance\\\");\\n\\n    _decreaseWalletBalance(DATASTORE, id, value);\\n    address controller = DATASTORE.readAddress(id, rks.CONTROLLER);\\n\\n    (success, ) = payable(controller).call{value: value}(\\\"\\\");\\n    require(success, \\\"SML:Failed to send ETH\\\");\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** OPERATORS PERIOD **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  function getValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 period) {\\n    if (DATASTORE.readUint(id, rks.periodSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorPeriod);\\n    }\\n    return DATASTORE.readUint(id, rks.validatorPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set validator period with NO DELAY\\n   */\\n  function _setValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    uint256 _newPeriod\\n  ) internal {\\n    require(_newPeriod >= MIN_VALIDATOR_PERIOD, \\\"SML:< MIN_VALIDATOR_PERIOD\\\");\\n    require(_newPeriod <= MAX_VALIDATOR_PERIOD, \\\"SML:> MAX_VALIDATOR_PERIOD\\\");\\n\\n    DATASTORE.writeUint(_operatorId, rks.validatorPeriod, _newPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\\n   * @dev limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\\n   */\\n  function switchValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId,\\n    uint256 newPeriod\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, true, false, [true, false]);\\n\\n    require(\\n      block.timestamp > DATASTORE.readUint(operatorId, rks.periodSwitch),\\n      \\\"SML:currently switching\\\"\\n    );\\n\\n    DATASTORE.writeUint(\\n      operatorId,\\n      rks.priorPeriod,\\n      DATASTORE.readUint(operatorId, rks.validatorPeriod)\\n    );\\n    DATASTORE.writeUint(operatorId, rks.periodSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setValidatorPeriod(DATASTORE, operatorId, newPeriod);\\n\\n    emit ValidatorPeriodSwitched(operatorId, newPeriod, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRISON **\\n   *\\n   * @custom:visibility -> view-public\\n   * @dev check OEL.blameProposal and OEL.blameExit for imprisonment details\\n   */\\n\\n  /**\\n   * @notice Checks if the given operator is Prisoned\\n   * @dev rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function isPrisoned(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId\\n  ) public view returns (bool) {\\n    return (block.timestamp < DATASTORE.readUint(operatorId, rks.release));\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR DELEGATION **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool\\n   * @dev an operator cannot create new validators if:\\n   * * 1. operator is a monopoly\\n   * * 2. allowance is filled\\n   * * * But if operator is set as a fallback, it can if set fallbackThreshold is reached on all allowances.\\n   * @dev If operator withdraws a validator, then able to create a new one.\\n   * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowance\\n   * @dev allowance doesn't change when new validators created or old ones are unstaked.\\n   */\\n  function operatorAllowance(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) public view returns (uint256 remValidators) {\\n    // monopoly check\\n    {\\n      // readUint for an array gives us length\\n      uint256 numOperatorValidators = DATASTORE.readUint(operatorId, rks.validators);\\n      uint256 monopoly_threshold = self.MONOPOLY_THRESHOLD;\\n      if (numOperatorValidators >= monopoly_threshold) {\\n        return 0;\\n      } else {\\n        remValidators = monopoly_threshold - numOperatorValidators;\\n      }\\n    }\\n\\n    // fallback check\\n    {\\n      if (operatorId == DATASTORE.readUint(poolId, rks.fallbackOperator)) {\\n        // readUint for an array gives us length\\n        uint256 numPoolValidators = DATASTORE.readUint(poolId, rks.validators);\\n        uint256 totalAllowance = DATASTORE.readUint(poolId, rks.totalAllowance);\\n\\n        if (\\n          totalAllowance == 0 ||\\n          (((numPoolValidators * PERCENTAGE_DENOMINATOR) / totalAllowance) >=\\n            DATASTORE.readUint(poolId, rks.fallbackThreshold))\\n        ) {\\n          return remValidators;\\n        }\\n      }\\n    }\\n\\n    // approval check\\n    {\\n      uint256 allowance = DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.allowance));\\n      uint256 pooledValidators = DATASTORE.readUint(\\n        poolId,\\n        DSML.getKey(operatorId, rks.proposedValidators)\\n      ) + DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.activeValidators));\\n      if (pooledValidators >= allowance) {\\n        return 0;\\n      } else {\\n        uint256 remAllowance = allowance - pooledValidators;\\n        if (remValidators > remAllowance) {\\n          remValidators = remAllowance;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice To give allowence to node operator for a pool. It re-sets the allowance with the given value.\\n   * @dev The value that is returned is not the new allowance, but the old one since it is required\\n   * * at the point where it is being returned.\\n   * @return oldAllowance to be used later, nothing is done with it within this function.\\n   */\\n  function _approveOperator(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 allowance\\n  ) internal returns (uint256 oldAllowance) {\\n    bytes32 allowanceKey = DSML.getKey(operatorId, rks.allowance);\\n\\n    oldAllowance = DATASTORE.readUint(poolId, allowanceKey);\\n    DATASTORE.writeUint(poolId, allowanceKey, allowance);\\n\\n    emit Delegation(poolId, operatorId, allowance);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool with a given number of validators.\\n   * * This number can be set again at any given point in the future.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorIds array of Operator IDs to allow them create validators\\n   * @param allowances the MAX number of validators that can be created by the Operator, for given Pool\\n   * @dev When decreased the approved validator count below current active+proposed validators,\\n   * operator cannot create new validators.\\n   */\\n  function delegate(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external {\\n    _authenticate(DATASTORE, poolId, false, true, [false, true]);\\n    uint256 operatorIdsLen = operatorIds.length;\\n    require(operatorIdsLen == allowances.length, \\\"SML:allowances should match\\\");\\n\\n    for (uint256 i; i < operatorIdsLen; ) {\\n      require(\\n        DATASTORE.readUint(operatorIds[i], rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:id not operator\\\"\\n      );\\n      require(allowances[i] <= MAX_ALLOWANCE, \\\"SML:> MAX_ALLOWANCE, set fallback\\\");\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    uint256 newCumulativeSubset;\\n    uint256 oldCumulativeSubset;\\n    for (uint256 i; i < operatorIdsLen; ) {\\n      newCumulativeSubset += allowances[i];\\n      oldCumulativeSubset += _approveOperator(DATASTORE, poolId, operatorIds[i], allowances[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    if (newCumulativeSubset > oldCumulativeSubset) {\\n      DATASTORE.addUint(poolId, rks.totalAllowance, newCumulativeSubset - oldCumulativeSubset);\\n    } else if (newCumulativeSubset < oldCumulativeSubset) {\\n      DATASTORE.subUint(poolId, rks.totalAllowance, oldCumulativeSubset - newCumulativeSubset);\\n    }\\n  }\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool without a limit\\n   * * after pool reaches a given treshold as percentage.\\n   * * fallback operator and percentage can be set again at any given point in the future.\\n   * * cannot set an operator as a fallback operator while it is currently in prison.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorId Operator ID to allow create validators\\n   * @param fallbackThreshold the percentage (with PERCENTAGE_DENOMINATOR) that fallback operator\\n   * * is activated for given Pool. Should not be greater than 100.\\n   */\\n  function setFallbackOperator(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external {\\n    _authenticate(DATASTORE, poolId, false, true, [false, true]);\\n\\n    if (operatorId == 0) {\\n      DATASTORE.writeUint(poolId, rks.fallbackOperator, 0);\\n      DATASTORE.writeUint(poolId, rks.fallbackThreshold, 0);\\n      emit FallbackOperator(poolId, 0, 0);\\n    } else {\\n      require(\\n        DATASTORE.readUint(operatorId, rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:fallback not operator\\\"\\n      );\\n\\n      require(\\n        fallbackThreshold <= PERCENTAGE_DENOMINATOR,\\n        \\\"SML:threshold cannot be greater than 100\\\"\\n      );\\n\\n      DATASTORE.writeUint(poolId, rks.fallbackThreshold, fallbackThreshold);\\n      DATASTORE.writeUint(poolId, rks.fallbackOperator, operatorId);\\n\\n      emit FallbackOperator(poolId, operatorId, fallbackThreshold);\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** POOLING  **\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT HELPERS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function _isGeodePackageIsolated(address _packageAddress) internal view returns (bool) {\\n    return IGeodePackage(_packageAddress).isolationMode();\\n  }\\n\\n  /**\\n   * @notice returns wrapped bound liquidity pool. If deployed, if not in isolationMode.\\n   * @dev returns address(0) if no pool or it is under isolation\\n   */\\n  function _getLiquidityPool(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) internal view returns (ILiquidityPool) {\\n    address liqPool = DATASTORE.readAddress(_poolId, rks.liquidityPool);\\n    if (liqPool == address(0)) {\\n      return ILiquidityPool(address(0));\\n    } else if (_isGeodePackageIsolated(liqPool)) {\\n      return ILiquidityPool(address(0));\\n    } else {\\n      return ILiquidityPool(liqPool);\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the price is valid:\\n   * - last price syncinc happened less than 24h\\n   * - there has been no oracle reports since the last update\\n   *\\n   * @dev known bug / feature: if there have been no oracle updates,\\n   * * this function will return true.\\n   *\\n   * lastupdate + PRICE_EXPIRY >= block.timestamp ? true\\n   *    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true\\n   *    : false\\n   */\\n  function isPriceValid(\\n    StakeModuleStorage storage self,\\n    uint256 poolId\\n  ) public view returns (bool isValid) {\\n    uint256 lastupdate = self.gETH.priceUpdateTimestamp(poolId);\\n    unchecked {\\n      isValid =\\n        lastupdate + PRICE_EXPIRY >= block.timestamp &&\\n        lastupdate >= self.ORACLE_UPDATE_TIMESTAMP;\\n    }\\n  }\\n\\n  /**\\n   * @notice checks if staking is allowed in given staking pool\\n   * @notice staking is not allowed if:\\n   * 1. Price is not valid\\n   * 2. WithdrawalContract is in Isolation Mode, can have many reasons\\n   */\\n  function isMintingAllowed(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return\\n      (isPriceValid(self, poolId)) &&\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalContract)));\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice mints gETH for a given ETH amount, keeps the tokens in Portal.\\n   * @dev fails if minting is not allowed: invalid price, or isolationMode.\\n   */\\n  function _mintgETH(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _ethAmount\\n  ) internal returns (uint256 mintedgETH) {\\n    require(isMintingAllowed(self, DATASTORE, _poolId), \\\"SML:minting is not allowed\\\");\\n\\n    uint256 price = self.gETH.pricePerShare(_poolId);\\n    require(price > 0, \\\"SML:price is zero?\\\");\\n\\n    mintedgETH = (((_ethAmount * gETH_DENOMINATOR) / price));\\n    self.gETH.mint(address(this), _poolId, mintedgETH, \\\"\\\");\\n    DATASTORE.addUint(_poolId, rks.surplus, _ethAmount);\\n  }\\n\\n  /**\\n   * @notice conducts a buyback using the given liquidity pool\\n   * @param _poolId id of the gETH that will be bought\\n   * @param _maxEthToSell max ETH amount to sell in the liq pool\\n   * @param _deadline TX is expected to revert by Swap.sol if not meet\\n   * @dev this function assumes that pool is deployed by deployLiquidityPool\\n   * as index 0 is ETH and index 1 is gETH!\\n   */\\n  function _buyback(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _maxEthToSell,\\n    uint256 _deadline\\n  ) internal returns (uint256 remETH, uint256 boughtgETH) {\\n    ILiquidityPool LP = _getLiquidityPool(DATASTORE, _poolId);\\n    // skip if no liquidity pool is found\\n    if (address(LP) != address(0)) {\\n      uint256 debt = LP.getDebt();\\n      // skip if debt is too low\\n      if (debt > IGNORABLE_DEBT) {\\n        if (_maxEthToSell > debt) {\\n          // if debt is lower, then only sell debt\\n          remETH = _maxEthToSell - debt;\\n        } else {\\n          // if eth is lower, then sell all eth, remETH already 0\\n          debt = _maxEthToSell;\\n        }\\n        // SWAP in LP\\n        boughtgETH = LP.swap{value: debt}(0, 1, debt, 0, _deadline);\\n      } else {\\n        remETH = _maxEthToSell;\\n      }\\n    } else {\\n      remETH = _maxEthToSell;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Allowing users to deposit into a staking pool.\\n   * @notice If a pool is not public, only the controller and if there is a whitelist contract, the whitelisted addresses can deposit.\\n   * @param poolId id of the staking pool, liquidity pool and gETH to be used.\\n   * @param mingETH liquidity pool parameter\\n   * @param deadline liquidity pool parameter\\n   * @dev an example for minting + buybacks\\n   * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\\n   * * debt  msgValue\\n   * * 100   10  => buyback\\n   * * 100   100 => buyback\\n   * * 10    100 => buyback + mint\\n   * * 1     x   => mint\\n   * * 0.5   x   => mint\\n   * * 0     x   => mint\\n   */\\n  function deposit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external returns (uint256 boughtgETH, uint256 mintedgETH) {\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(msg.value > 0, \\\"SML:msg.value cannot be zero\\\");\\n    require(deadline > block.timestamp, \\\"SML:deadline not met\\\");\\n    require(receiver != address(0), \\\"SML:receiver is zero address\\\");\\n\\n    if (isPrivatePool(DATASTORE, poolId)) {\\n      require(isWhitelisted(DATASTORE, poolId, msg.sender), \\\"SML:sender not whitelisted\\\");\\n    }\\n\\n    uint256 remEth = msg.value;\\n    (remEth, boughtgETH) = _buyback(DATASTORE, poolId, remEth, deadline);\\n\\n    if (remEth > 0) {\\n      mintedgETH = _mintgETH(self, DATASTORE, poolId, remEth);\\n    }\\n\\n    require(boughtgETH + mintedgETH >= mingETH, \\\"SML:less than minimum\\\");\\n\\n    // send back to user\\n    self.gETH.safeTransferFrom(address(this), receiver, poolId, boughtgETH + mintedgETH, \\\"\\\");\\n\\n    emit Deposit(poolId, boughtgETH, mintedgETH);\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR CREATION **\\n   *\\n   * @dev Creation of a Validator takes 2 steps: propose and beacon stake.\\n   * Before entering stake() function, _canStake verifies the eligibility of\\n   * given pubKey that is proposed by an operator with proposeStake function.\\n   * Eligibility is defined by an optimistic alienation, check OracleUtils._alienateValidator() for info.\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n\\n  /**\\n   * @notice internal function to check if a validator can use the pool funds\\n   *\\n   *  @param _pubkey BLS12-381 public key of the validator\\n   *  @return true if:\\n   *   - pubkey should be proposed\\n   *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\n   *   - the validator's index is already covered by VERIFICATION_INDEX. Updated by Telescope.\\n   */\\n  function _canStake(\\n    StakeModuleStorage storage self,\\n    bytes calldata _pubkey,\\n    uint256 _verificationIndex\\n  ) internal view returns (bool) {\\n    return\\n      (self.validators[_pubkey].state == VALIDATOR_STATE.PROPOSED) &&\\n      (self.validators[_pubkey].index <= _verificationIndex);\\n  }\\n\\n  /**\\n   * @notice external function to check if a validator can use the pool funds\\n   */\\n  function canStake(\\n    StakeModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    return _canStake(self, pubkey, self.VERIFICATION_INDEX);\\n  }\\n\\n  /**\\n   * @dev -> external\\n   */\\n\\n  /**\\n   * @notice Validator Credentials Proposal function, first step of crating validators.\\n   * * Once a pubKey is proposed and not alienated after verificationIndex updated,\\n   * * it is optimistically allowed to take funds from staking pools.\\n   *\\n   * @param poolId the id of the staking pool\\n   * @param operatorId the id of the Operator whose maintainer calling this function\\n   * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\\n   * @param signatures1 Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's\\n   * maintainer balance\\n   * @param signatures31 Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call\\n   *\\n   * @dev DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator.\\n   * 31 Ether will be staked after verification of oracles. 32 in total.\\n   * 1 ether will be sent back to Node Operator when the finalized deposit is successful.\\n   * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\\n   * @dev ProposeStake requires enough funds within Wallet.\\n   * @dev Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)\\n   */\\n  function proposeStake(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external {\\n    // checks\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalContract))),\\n      \\\"SML:withdrawalContract is isolated\\\"\\n    );\\n\\n    uint256 pkLen = pubkeys.length;\\n\\n    require((pkLen > 0) && (pkLen <= DCL.MAX_DEPOSITS_PER_CALL), \\\"SML:1 - 50 validators\\\");\\n\\n    require(\\n      pkLen == signatures1.length && pkLen == signatures31.length,\\n      \\\"SML:invalid input length\\\"\\n    );\\n\\n    require(\\n      operatorAllowance(self, DATASTORE, poolId, operatorId) >= pkLen,\\n      \\\"SML:insufficient allowance\\\"\\n    );\\n\\n    require(\\n      DATASTORE.readUint(poolId, rks.surplus) >= DCL.DEPOSIT_AMOUNT * pkLen,\\n      \\\"SML:not enough surplus\\\"\\n    );\\n\\n    _decreaseWalletBalance(DATASTORE, operatorId, (pkLen * DCL.DEPOSIT_AMOUNT_PRESTAKE));\\n\\n    for (uint256 i; i < pkLen; ) {\\n      require(pubkeys[i].length == DCL.PUBKEY_LENGTH, \\\"SML:PUBKEY_LENGTH ERROR\\\");\\n      require(signatures1[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n      require(signatures31[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    ConstantValidatorData memory valData = ConstantValidatorData({\\n      index: uint64(self.VALIDATORS_INDEX + 1),\\n      period: uint64(getValidatorPeriod(DATASTORE, operatorId)),\\n      poolFee: getMaintenanceFee(DATASTORE, poolId),\\n      operatorFee: getMaintenanceFee(DATASTORE, operatorId),\\n      infrastructureFee: self.infrastructureFees[ID_TYPE.POOL],\\n      withdrawalCredential: DATASTORE.readBytes(poolId, rks.withdrawalCredential)\\n    });\\n\\n    for (uint256 i; i < pkLen; ) {\\n      require(\\n        self.validators[pubkeys[i]].state == VALIDATOR_STATE.NONE,\\n        \\\"SML: used or alienated pk\\\"\\n      );\\n\\n      self.validators[pubkeys[i]] = Validator(\\n        VALIDATOR_STATE.PROPOSED,\\n        valData.index + uint64(i),\\n        uint64(block.timestamp),\\n        valData.period,\\n        poolId,\\n        operatorId,\\n        valData.poolFee,\\n        valData.operatorFee,\\n        valData.infrastructureFee,\\n        signatures31[i]\\n      );\\n\\n      DCL.depositValidator(\\n        pubkeys[i],\\n        valData.withdrawalCredential,\\n        signatures1[i],\\n        DCL.DEPOSIT_AMOUNT_PRESTAKE\\n      );\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    DATASTORE.subUint(poolId, rks.surplus, (pkLen * DCL.DEPOSIT_AMOUNT));\\n    DATASTORE.addUint(poolId, rks.secured, (pkLen * DCL.DEPOSIT_AMOUNT));\\n\\n    DATASTORE.addUint(poolId, DSML.getKey(operatorId, rks.proposedValidators), pkLen);\\n    DATASTORE.appendBytesArrayBatch(poolId, rks.validators, pubkeys);\\n    DATASTORE.appendBytesArrayBatch(operatorId, rks.validators, pubkeys);\\n\\n    self.VALIDATORS_INDEX += pkLen;\\n\\n    emit StakeProposal(poolId, operatorId, pubkeys);\\n  }\\n\\n  /**\\n   *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\\n   *  1 Eth per successful validator boostraping is returned back to Wallet.\\n   *\\n   *  @param operatorId the id of the Operator whose maintainer calling this function\\n   *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\\n   *\\n   *  @dev To save gas cost, pubkeys should be arranged by poolIds.\\n   *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\\n   *  pk1, pk2, pk3 from pool1\\n   *  pk4, pk5 from pool2\\n   *  pk6 from pool3\\n   *  separate them in similar groups as much as possible.\\n   *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)\\n   *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\\n   */\\n  function stake(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n\\n    require(\\n      (pubkeys.length > 0) && (pubkeys.length <= DCL.MAX_DEPOSITS_PER_CALL),\\n      \\\"SML:1 - 50 validators\\\"\\n    );\\n\\n    {\\n      uint256 pubkeysLen = pubkeys.length;\\n      uint256 _verificationIndex = self.VERIFICATION_INDEX;\\n      for (uint256 j; j < pubkeysLen; ) {\\n        require(\\n          _canStake(self, pubkeys[j], _verificationIndex),\\n          \\\"SML:not all pubkeys are stakeable\\\"\\n        );\\n\\n        require(\\n          self.validators[pubkeys[j]].operatorId == operatorId,\\n          \\\"SML:not all pubkeys belong to operator\\\"\\n        );\\n\\n        unchecked {\\n          j += 1;\\n        }\\n      }\\n    }\\n\\n    {\\n      bytes32 activeValKey = DSML.getKey(operatorId, rks.activeValidators);\\n      bytes32 proposedValKey = DSML.getKey(operatorId, rks.proposedValidators);\\n      uint256 poolId = self.validators[pubkeys[0]].poolId;\\n      bytes memory withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n\\n      uint256 lastIdChange = 0;\\n      for (uint256 i; i < pubkeys.length; ) {\\n        uint256 newPoolId = self.validators[pubkeys[i]].poolId;\\n        if (poolId != newPoolId) {\\n          uint256 sinceLastIdChange;\\n\\n          unchecked {\\n            sinceLastIdChange = i - lastIdChange;\\n          }\\n\\n          DATASTORE.subUint(poolId, rks.secured, (DCL.DEPOSIT_AMOUNT * (sinceLastIdChange)));\\n          DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n          DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n\\n          lastIdChange = i;\\n          poolId = newPoolId;\\n          withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n        }\\n\\n        DCL.depositValidator(\\n          pubkeys[i],\\n          withdrawalCredential,\\n          self.validators[pubkeys[i]].signature31,\\n          (DCL.DEPOSIT_AMOUNT - DCL.DEPOSIT_AMOUNT_PRESTAKE)\\n        );\\n\\n        self.validators[pubkeys[i]].state = VALIDATOR_STATE.ACTIVE;\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n      {\\n        uint256 sinceLastIdChange;\\n        unchecked {\\n          sinceLastIdChange = pubkeys.length - lastIdChange;\\n        }\\n\\n        DATASTORE.subUint(poolId, rks.secured, DCL.DEPOSIT_AMOUNT * (sinceLastIdChange));\\n        DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n        DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n      }\\n\\n      _increaseWalletBalance(DATASTORE, operatorId, DCL.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length);\\n\\n      emit Stake(pubkeys);\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR EXITS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Notifies the node operator with ExitRequest event\\n   * @dev Prevents the request if validator is still within the MIN_VALIDATOR_PERIOD\\n   * @dev Only the active validators can be called for an exit\\n   * @dev Can only be called by the withdrawalContract of the pool given validator belongs to.\\n   */\\n  function requestExit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external {\\n    require(\\n      block.timestamp > self.validators[pk].createdAt + MIN_VALIDATOR_PERIOD,\\n      \\\"SML:early exit not allowed\\\"\\n    );\\n    require(\\n      msg.sender == DATASTORE.readAddress(poolId, rks.withdrawalContract),\\n      \\\"SML:sender is not withdrawal contract\\\"\\n    );\\n    require(self.validators[pk].poolId == poolId, \\\"SML:incorrect poolId\\\");\\n    require(self.validators[pk].state == VALIDATOR_STATE.ACTIVE, \\\"SML:not an active validator\\\");\\n\\n    self.validators[pk].state = VALIDATOR_STATE.EXIT_REQUESTED;\\n\\n    emit ExitRequest(pk);\\n  }\\n\\n  /**\\n   * @notice Finalizes the exit process for a validator.\\n   * @dev Strongly advised to be called right after the exiting process is over.\\n   * @dev Operators can exit at any time they want.\\n   * @dev Can only be called by the withdrawalContract of the pool given validator belongs to.\\n   */\\n  function finalizeExit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external {\\n    require(\\n      msg.sender == DATASTORE.readAddress(poolId, rks.withdrawalContract),\\n      \\\"SML:sender is not withdrawal contract\\\"\\n    );\\n    require(self.validators[pk].poolId == poolId, \\\"SML:incorrect poolId\\\");\\n\\n    uint256 state = self.validators[pk].state;\\n    require(\\n      state == VALIDATOR_STATE.ACTIVE || state == VALIDATOR_STATE.EXIT_REQUESTED,\\n      \\\"SML:not an active validator\\\"\\n    );\\n\\n    self.validators[pk].state = VALIDATOR_STATE.EXITED;\\n\\n    emit Exit(pk);\\n  }\\n}\\n\",\"keccak256\":\"0xb2ad84e9da445ef750efde3a8a93c1d4585f259780b86b0f00d117884d49dd22\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Helper Struct to pack constant data that does not change per validator on batch proposals\\n * * needed for that famous Solidity feature.\\n */\\nstruct ConstantValidatorData {\\n  uint64 index;\\n  uint64 period;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes withdrawalCredential;\\n}\\n\",\"keccak256\":\"0x8286f4ad690287eafbab5c63f0fc4716dd00faac4a378a449feda104d50a9f5c\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\n// internal - structs\\nimport {Validator} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Pooled Liquid Staking logic\\n * @param gETH constant, ERC1155, all Geode Staking Derivatives.\\n * @param ORACLE_POSITION constant, address of the Oracle https://github.com/Geodefi/Telescope-Eth\\n * @param VALIDATORS_INDEX total number of validators that are proposed at any given point.\\n * * Includes all validators: proposed, active, alienated, exited.\\n * @param VERIFICATION_INDEX the highest index of the validators that are verified (as not alien) by the Holy Oracle.\\n * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated by the Holy Oracle.\\n * @param BEACON_DELAY_ENTRY allowed max delay between the creation of an (approved) proposal and stake() call, per the beaconchain entry queue.\\n * @param BEACON_DELAY_EXIT allowed max delay between an exit request and its finalization with finalizeExit() call, per the beaconchain exit queue.\\n * @param INITIATION_DEPOSIT the initial deposit amount that is required for a name to be reserved by the pool, prevents sybil attacks.\\n * @param ORACLE_UPDATE_TIMESTAMP timestamp of the latest oracle update\\n * @param DAILY_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval, per second.\\n * @param DAILY_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval, per second.\\n * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, updated by the Holy Oracle.\\n * @param GOVERNANCE_FEE **reserved** Although it is 0 right now, It can be updated in the future.\\n * @param BALANCE_MERKLE_ROOT merkle root of the balances and other validator related data, useful on withdrawals, updated by the Holy Oracle.\\n * @param validators pubkey => Validator, contains all the data about proposed, alienated, active, exit-called and fully exited validators.\\n * @param packages TYPE => version id, pointing to the latest versions of the given package.\\n * * Like default Withdrawal Contract version.\\n * @param middlewares TYPE => version id => isAllowed, useful to check if given version of the middleware can be used.\\n * * Like all the whitelisted gETHMiddlewares.\\n * @param fees TYPE->PERCENTAGE, we can set a fee for any defined TYPE then use it in related operations.\\n * * POOL type sets validator fees. Liqudity Pool Package type sets fee on swaps.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.StakeModule\\n * but compiler throws an error... So np for now, just MAKE SURE.\\n **/\\nstruct StakeModuleStorage {\\n  IgETH gETH;\\n  address ORACLE_POSITION;\\n  uint256 VALIDATORS_INDEX;\\n  uint256 VERIFICATION_INDEX;\\n  uint256 MONOPOLY_THRESHOLD;\\n  uint256 BEACON_DELAY_ENTRY;\\n  uint256 BEACON_DELAY_EXIT;\\n  uint256 INITIATION_DEPOSIT;\\n  uint256 ORACLE_UPDATE_TIMESTAMP;\\n  uint256 DAILY_PRICE_INCREASE_LIMIT;\\n  uint256 DAILY_PRICE_DECREASE_LIMIT;\\n  bytes32 PRICE_MERKLE_ROOT;\\n  bytes32 BALANCE_MERKLE_ROOT;\\n  mapping(bytes => Validator) validators;\\n  mapping(uint256 => uint256) packages;\\n  mapping(uint256 => mapping(uint256 => bool)) middlewares;\\n  mapping(uint256 => uint256) infrastructureFees;\\n}\\n\",\"keccak256\":\"0x94037907996f62bda5a6f36653b385b5fae51aba5dd73a08f19e5b303af23e18\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/**\\n * @param state state of the validator, refer to globals.sol\\n * @param index representing this validator's placement on the chronological order of the validators proposals\\n * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n * @param poolId needed for withdrawal_credential\\n * @param operatorId needed for staking after allowance\\n * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n * @param infrastructureFee all fees are crucial for the price calculation by the oracle, even if its zero.\\n * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n **/\\nstruct Validator {\\n  uint64 state;\\n  uint64 index;\\n  uint64 createdAt;\\n  uint64 period;\\n  uint256 poolId;\\n  uint256 operatorId;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes signature31;\\n}\\n\",\"keccak256\":\"0xbbd41f0da602f5bc6cfd7ff7d4feec259d3266f87c711a5c16070d529da441e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6149d861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101985760003560e01c806383c6b8e5116100e8578063b998dc09116100a1578063e2e96bde1161007b578063e2e96bde1461041a578063e84416531461043a578063ef5daee01461045a578063ffcba52e1461048f57600080fd5b8063b998dc09146103ba578063c1aa33c9146103da578063d5af43ba146103fa57600080fd5b806383c6b8e514610314578063846361021461033457806384bb212c1461034757806392e0c36f146103675780639f3000141461037a578063add729db1461039a57600080fd5b80634da2bf2911610155578063626f6c791161012f578063626f6c79146102ae5780637274f52b146102c15780637c295480146102e15780637e4a66ef146102f457600080fd5b80634da2bf291461025b57806353d5aaa71461027b5780635a24b9391461029b57600080fd5b806303318d7b1461019d5780631372531e146101c557806317c4bb1c146101d85780633b19e3c6146101fa5780633d363e591461021b5780634b3513211461023b575b600080fd5b6101b06101ab366004613f67565b6104a2565b60405190151581526020015b60405180910390f35b6101b06101d3366004613f67565b610536565b8180156101e457600080fd5b506101f86101f3366004613fd1565b61055d565b005b61020d610208366004613f67565b610736565b6040519081526020016101bc565b81801561022757600080fd5b506101f8610236366004614042565b61079d565b81801561024757600080fd5b506101f861025636600461407b565b61089d565b81801561026757600080fd5b506101f86102763660046140c3565b61095d565b81801561028757600080fd5b506101f86102963660046140c3565b6109e3565b6101b06102a9366004613f67565b610a7c565b6101b06102bc36600461407b565b610a9c565b8180156102cd57600080fd5b506101f86102dc36600461413c565b610ae0565b6101b06102ef3660046141be565b610d49565b81801561030057600080fd5b506101f861030f3660046140c3565b610d5b565b81801561032057600080fd5b506101f861032f36600461407b565b610eaa565b61020d610342366004614209565b610fdd565b81801561035357600080fd5b506101b061036236600461407b565b611193565b61020d610375366004613f67565b6112e1565b81801561038657600080fd5b506101b0610395366004613f67565b611328565b8180156103a657600080fd5b506101f86103b536600461423b565b611364565b8180156103c657600080fd5b506101f86103d5366004614209565b611c29565b8180156103e657600080fd5b506101f86103f5366004613fd1565b611e21565b81801561040657600080fd5b506101f86104153660046142fd565b612074565b81801561042657600080fd5b506101f861043536600461407b565b6125fb565b81801561044657600080fd5b506101f861045536600461407b565b6126fa565b81801561046657600080fd5b5061047a61047536600461434c565b6127d5565b604080519283526020830191909152016101bc565b6101b061049d3660046140c3565b612aa6565b815460405163908d67ed60e01b81526004810183905260009182916001600160a01b039091169063908d67ed90602401602060405180830381865afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610513919061439d565b9050426201518082011015801561052e575083600801548110155b949350505050565b600061055183836a1c1c9a5d985d19541bdbdb60aa1b612ba6565b60011490505b92915050565b61057d8484711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b612bd0565b6001600160a01b0316336001600160a01b0316146105b65760405162461bcd60e51b81526004016105ad906143b6565b60405180910390fd5b8285600d0183836040516105cb9291906143fb565b908152602001604051809103902060010154146106215760405162461bcd60e51b815260206004820152601460248201527314d3530e9a5b98dbdc9c9958dd081c1bdbdb125960621b60448201526064016105ad565b600085600d0183836040516106379291906143fb565b908152604051908190036020019020546001600160401b0316905060028114806106615750600381145b6106ad5760405162461bcd60e51b815260206004820152601b60248201527f534d4c3a6e6f7420616e206163746976652076616c696461746f72000000000060448201526064016105ad565b600460ff1686600d0184846040516106c69291906143fb565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557f9d77f605282dff03421d12e3eb09f6342971cc3c0a9108058e0e966529d8d696906107269085908590614434565b60405180910390a1505050505050565b60004261075384846b0e0cae4d2dec8a6eed2e8c6d60a31b612ba6565b11156107795761077283836a1c1c9a5bdc94195c9a5bd960aa1b612ba6565b9050610557565b61079683836e1d985b1a59185d1bdc94195c9a5bd9608a1b612ba6565b9392505050565b6040805180820190915260008082526001602083018190526107c3928692869291612c04565b6107cd8383610536565b1515811515036108115760405162461bcd60e51b815260206004820152600f60248201526e14d3530e985b1c9958591e481cd95d608a1b60448201526064016105ad565b61083f826a1c1c9a5d985d19541bdbdb60aa1b83610830576000610833565b60015b8692919060ff16612ed0565b8061085d5761085d8383681dda1a5d195b1a5cdd60ba1b6000612ef8565b6040805183815282151560208201527f86ba6fb9ba1b2952b69896940c9d8a35e8daefe421f499e41e43ee0e72330e1a91015b60405180910390a1505050565b6276a70082106108db5760405162461bcd60e51b81526020600482015260096024820152680a69a98747c409a82b60bb1b60448201526064016105ad565b6276a70081106109195760405162461bcd60e51b81526020600482015260096024820152680a69a98747c409a82b60bb1b60448201526064016105ad565b600583018290556006830181905560408051838152602081018390527f83d764e42c70da5530ced537b1b235e4eadcfa375d29ba5e76ad5f01eca5d0209101610890565b604080518082019091526000808252600160208301819052610983928692869291612c04565b61099f83836c3cb4b2b6322932b1b2b4bb32b960991b84612ef8565b6040516001600160a01b038216815282907fdca3f474e58df6ac9314862568e9a4c4c1346f518bcb42b631962960a384ca64906020015b60405180910390a2505050565b604080518082019091526000808252600160208301819052610a09928692869291612c04565b610a138383610536565b610a5f5760405162461bcd60e51b815260206004820152601860248201527f534d4c3a6d757374206265207072697661746520706f6f6c000000000000000060448201526064016105ad565b610a778383681dda1a5d195b1a5cdd60ba1b84612ef8565b505050565b6000610a9383836672656c6561736560c81b612ba6565b42109392505050565b6000610aa884836104a2565b801561052e5750610ad7610ad28484711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b612bd0565b612f41565b15949350505050565b604080518082019091526000808252600160208301819052610b0792899289929091612c04565b82818114610b575760405162461bcd60e51b815260206004820152601b60248201527f534d4c3a616c6c6f77616e6365732073686f756c64206d61746368000000000060448201526064016105ad565b60005b81811015610c51576004610b91878784818110610b7957610b79614448565b8c92602090910201359050635459504560e01b612ba6565b14610bd45760405162461bcd60e51b815260206004820152601360248201527229a6a61d34b2103737ba1037b832b930ba37b960691b60448201526064016105ad565b620f4240848483818110610bea57610bea614448565b905060200201351115610c495760405162461bcd60e51b815260206004820152602160248201527f534d4c3a3e204d41585f414c4c4f57414e43452c207365742066616c6c6261636044820152606b60f81b60648201526084016105ad565b600101610b5a565b5060008060005b83811015610cd657858582818110610c7257610c72614448565b9050602002013583610c849190614474565b9250610cc28a8a8a8a85818110610c9d57610c9d614448565b90506020020135898986818110610cb657610cb6614448565b90506020020135612fa5565b610ccc9083614474565b9150600101610c58565b5080821115610d0d57610d08886d746f74616c416c6c6f77616e636560901b610cff8486614487565b8c92919061301d565b610d3e565b80821015610d3e57610d3e886d746f74616c416c6c6f77616e636560901b610d358585614487565b8c929190613056565b505050505050505050565b600061052e8484848760030154613084565b610d728383681a5b9a5d1a585d195960ba1b612ba6565b600003610dc15760405162461bcd60e51b815260206004820152601760248201527f534d4c3a4944206973206e6f7420696e6974696174656400000000000000000060448201526064016105ad565b610dd983836921a7a72a2927a62622a960b11b612bd0565b6001600160a01b0316336001600160a01b031614610e355760405162461bcd60e51b815260206004820152601960248201527829a6a61d39b2b73232b9103737ba1021a7a72a2927a62622a960391b60448201526064016105ad565b6000610e498484635459504560e01b612ba6565b90506004811480610e5a5750600581145b610e995760405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016105ad565b610ea4848484613102565b50505050565b604080518082019091526001808252600060208301819052610ed192869286929091612c04565b610eeb83836b0e0cae4d2dec8a6eed2e8c6d60a31b612ba6565b4211610f335760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016105ad565b610f6c826a1c1c9a5bdc94195c9a5bd960aa1b610f6386836e1d985b1a59185d1bdc94195c9a5bd9608a1b612ba6565b86929190612ed0565b610f8d826b0e0cae4d2dec8a6eed2e8c6d60a31b610f636203f48042614474565b610f988383836131ac565b817f876113dea338eedc856851b937db5d25520a6013d424528e69b20a166879e35a82610fc86203f48042614474565b604080519283526020830191909152016109d6565b600080610ff885846976616c696461746f727360b01b612ba6565b60048701549091508082106110125760009250505061052e565b61101c8282614487565b92505061103f905084846f3330b6363130b1b5a7b832b930ba37b960811b612ba6565b82036110d457600061105f85856976616c696461746f727360b01b612ba6565b9050600061107f86866d746f74616c416c6c6f77616e636560901b612ba6565b90508015806110c557506110a886867019985b1b189858dad51a1c995cda1bdb19607a1b612ba6565b816110b86402540be4008561449a565b6110c291906144c7565b10155b156110d157505061052e565b50505b60006110f8846110f08568616c6c6f77616e636560b81b613271565b879190612ba6565b905060006111258561111d866f61637469766556616c696461746f727360801b613271565b889190612ba6565b61115086611148877170726f706f73656456616c696461746f727360701b613271565b899190612ba6565b61115a9190614474565b905081811061116e5760009250505061052e565b600061117a8284614487565b905080841115611188578093505b505050949350505050565b604080518082019091526001808252602082018190526000916111bc9186918691908590612c04565b814710156112165760405162461bcd60e51b815260206004820152602160248201527f534d4c3a696e73756666696369656e7420636f6e74726163742062616c616e636044820152606560f81b60648201526084016105ad565b61122184848461329d565b600061123b85856921a7a72a2927a62622a960b11b612bd0565b9050806001600160a01b03168360405160006040518083038185875af1925050503d8060008114611288576040519150601f19603f3d011682016040523d82523d6000602084013e61128d565b606091505b505080925050816112d95760405162461bcd60e51b81526020600482015260166024820152750a69a98748cc2d2d8cac840e8de40e6cadcc8408aa8960531b60448201526064016105ad565b509392505050565b6000426112fb8484680cccacaa6eed2e8c6d60bb1b612ba6565b1115611317576107728383677072696f7246656560c01b612ba6565b61079683836266656560e81b612ba6565b6040805180820190915260018082526020820152600090611350908490849084908190612c04565b61135b838334613315565b50600192915050565b60408051808201909152600180825260006020830181905261138a928c928b9291612c04565b604080518082019091526000808252600160208301526113af918b918b918190612c04565b6113d2610ad28a8a711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b612bd0565b1561142a5760405162461bcd60e51b815260206004820152602260248201527f534d4c3a7769746864726177616c436f6e74726163742069732069736f6c6174604482015261195960f21b60648201526084016105ad565b84801580159061143b575060328111155b61147f5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016105ad565b808414801561148d57508082145b6114d95760405162461bcd60e51b815260206004820152601860248201527f534d4c3a696e76616c696420696e707574206c656e677468000000000000000060448201526064016105ad565b806114e68c8c8c8c610fdd565b10156115345760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a696e73756666696369656e7420616c6c6f77616e636500000000000060448201526064016105ad565b611547816801bc16d674ec80000061449a565b61155c8b8b66737572706c757360c81b612ba6565b10156115a35760405162461bcd60e51b8152602060048201526016602482015275534d4c3a6e6f7420656e6f75676820737572706c757360501b60448201526064016105ad565b6115bf8a896115ba670de0b6b3a76400008561449a565b61329d565b60005b818110156117315760308888838181106115de576115de614448565b90506020028101906115f091906144db565b90501461163f5760405162461bcd60e51b815260206004820152601760248201527f534d4c3a5055424b45595f4c454e475448204552524f5200000000000000000060448201526064016105ad565b606086868381811061165357611653614448565b905060200281019061166591906144db565b9050146116b45760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016105ad565b60608484838181106116c8576116c8614448565b90506020028101906116da91906144db565b9050146117295760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016105ad565b6001016115c2565b5060006040518060c001604052808d6002015460016117509190614474565b6001600160401b031681526020016117688d8c610736565b6001600160401b031681526020016117808d8d6112e1565b815260200161178f8d8c6112e1565b81526005600090815260108f0160209081526040918290205490830152016117cf8d8d731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b61332a565b9052905060005b82811015611b00576000600d8e018a8a848181106117f6576117f6614448565b905060200281019061180891906144db565b6040516118169291906143fb565b908152604051908190036020019020546001600160401b03161461187c5760405162461bcd60e51b815260206004820152601960248201527f534d4c3a2075736564206f7220616c69656e6174656420706b0000000000000060448201526064016105ad565b604080516101408101909152600181528251602082019061189e908490614521565b6001600160401b03168152602001426001600160401b0316815260200183602001516001600160401b031681526020018c81526020018b815260200183604001518152602001836060015181526020018360800151815260200186868481811061190a5761190a614448565b905060200281019061191c91906144db565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250600d8e018a8a8481811061196857611968614448565b905060200281019061197a91906144db565b6040516119889291906143fb565b9081526040805191829003602090810190922083518154938501519285015160608601516001600160401b03908116600160c01b026001600160c01b03928216600160801b02929092166fffffffffffffffffffffffffffffffff958216600160401b026fffffffffffffffffffffffffffffffff1990971691909316179490941792909216919091179190911781556080820151600182015560a0820151600282015560c0820151600382015560e0820151600482015561010082015160058201556101208201516006820190611a6090826145d1565b50905050611af8898983818110611a7957611a79614448565b9050602002810190611a8b91906144db565b8460a001518a8a86818110611aa257611aa2614448565b9050602002810190611ab491906144db565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250670de0b6b3a764000092506133dc915050565b6001016117d6565b50611b2c8a66737572706c757360c81b611b236801bc16d674ec8000008661449a565b8e929190613056565b611b578a661cd958dd5c995960ca1b611b4e6801bc16d674ec8000008661449a565b8e92919061301d565b611b838a611b7a8b7170726f706f73656456616c696461746f727360701b613271565b8d91908561301d565b611ba88a6976616c696461746f727360b01b611b9f8a8c6146c0565b8e9291906134a1565b611bc4896976616c696461746f727360b01b611b9f8a8c6146c0565b818c6002016000828254611bd89190614474565b90915550506040517f4fa0073e48dccfe9a97fe60b530f2f680ffb8b7621e547381f187e12306fb2b790611c13908c908c908c908c90614825565b60405180910390a1505050505050505050505050565b604080518082019091526000808252600160208301819052611c5092879287929091612c04565b81600003611cda57611c7884846f3330b6363130b1b5a7b832b930ba37b960811b6000612ed0565b611c9984847019985b1b189858dad51a1c995cda1bdb19607a1b6000612ed0565b60408051848152600060208201819052917fb8af85d3393121aa960f603d794bbf10ccaf134c03d68587b9953b58001bf523910160405180910390a2610ea4565b6004611cee8584635459504560e01b612ba6565b14611d3b5760405162461bcd60e51b815260206004820152601960248201527f534d4c3a66616c6c6261636b206e6f74206f70657261746f720000000000000060448201526064016105ad565b6402540be400811115611da15760405162461bcd60e51b815260206004820152602860248201527f534d4c3a7468726573686f6c642063616e6e6f7420626520677265617465722060448201526707468616e203130360c41b60648201526084016105ad565b611dc184847019985b1b189858dad51a1c995cda1bdb19607a1b84612ed0565b611de084846f3330b6363130b1b5a7b832b930ba37b960811b85612ed0565b604080518481526020810183905283917fb8af85d3393121aa960f603d794bbf10ccaf134c03d68587b9953b58001bf523910160405180910390a250505050565b6276a70085600d018383604051611e399291906143fb565b90815260405190819003602001902054611e6491906001600160401b03600160801b90910416614474565b4211611eb25760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a6561726c792065786974206e6f7420616c6c6f77656400000000000060448201526064016105ad565b611ed28484711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b612bd0565b6001600160a01b0316336001600160a01b031614611f025760405162461bcd60e51b81526004016105ad906143b6565b8285600d018383604051611f179291906143fb565b90815260200160405180910390206001015414611f6d5760405162461bcd60e51b815260206004820152601460248201527314d3530e9a5b98dbdc9c9958dd081c1bdbdb125960621b60448201526064016105ad565b600260ff1685600d018383604051611f869291906143fb565b908152604051908190036020019020546001600160401b031614611fec5760405162461bcd60e51b815260206004820152601b60248201527f534d4c3a6e6f7420616e206163746976652076616c696461746f72000000000060448201526064016105ad565b600360ff1685600d0183836040516120059291906143fb565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557f32960fcb506e8fcc10c6da2a6d23fa842b5b89753a38433a14bcd3bbe2eeccba906120659084908490614434565b60405180910390a15050505050565b60408051808201909152600180825260006020830181905261209a928792879291612c04565b80158015906120aa575060328111155b6120ee5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016105ad565b6003850154819060005b828110156122315761212e8886868481811061211657612116614448565b905060200281019061212891906144db565b85613084565b6121845760405162461bcd60e51b815260206004820152602160248201527f534d4c3a6e6f7420616c6c207075626b65797320617265207374616b6561626c6044820152606560f81b60648201526084016105ad565b8588600d0186868481811061219b5761219b614448565b90506020028101906121ad91906144db565b6040516121bb9291906143fb565b908152602001604051809103902060020154146122295760405162461bcd60e51b815260206004820152602660248201527f534d4c3a6e6f7420616c6c207075626b6579732062656c6f6e6720746f206f7060448201526532b930ba37b960d11b60648201526084016105ad565b6001016120f8565b5050506000612253846f61637469766556616c696461746f727360801b613271565b90506000612276857170726f706f73656456616c696461746f727360701b613271565b9050600087600d018585600081811061229157612291614448565b90506020028101906122a391906144db565b6040516122b19291906143fb565b90815260405190819003602001902060010154905060006122ea8883731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b61332a565b90506000805b868110156125525760008b600d0189898481811061231057612310614448565b905060200281019061232291906144db565b6040516123309291906143fb565b90815260200160405180910390206001015490508085146123c75782820361237986661cd958dd5c995960ca1b612370846801bc16d674ec80000061449a565b8f929190613056565b6123858c878984613056565b6123918c878a8461301d565b8293508195506123c386731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b8e61332a9092919063ffffffff16565b9450505b6124e18989848181106123dc576123dc614448565b90506020028101906123ee91906144db565b868f600d018d8d8881811061240557612405614448565b905060200281019061241791906144db565b6040516124259291906143fb565b9081526020016040518091039020600601805461244190614557565b80601f016020809104026020016040519081016040528092919081815260200182805461246d90614557565b80156124ba5780601f1061248f576101008083540402835291602001916124ba565b820191906000526020600020905b81548152906001019060200180831161249d57829003601f168201915b5050505050670de0b6b3a76400006801bc16d674ec8000006124dc9190614487565b6133dc565b6002600d8d018a8a858181106124f9576124f9614448565b905060200281019061250b91906144db565b6040516125199291906143fb565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff19909216919091179055506001016122f0565b5080860361258184661cd958dd5c995960ca1b612578846801bc16d674ec80000061449a565b8d929190613056565b61258d8a858784613056565b6125998a85888461301d565b506125b689896125b189670de0b6b3a764000061449a565b613315565b7ff3bc9a49558b2409ef29bf09ea870b1478948cf4a349dfaa48d23cd15fb200a187876040516125e792919061484f565b60405180910390a150505050505050505050565b604080518082019091526001808252602082018190526126219185918591600090612c04565b6126388383680cccacaa6eed2e8c6d60bb1b612ba6565b42116126805760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016105ad565b6126a182677072696f7246656560c01b610f6386836266656560e81b612ba6565b6126bf82680cccacaa6eed2e8c6d60bb1b610f636203f48042614474565b6126ca838383613543565b817f331610f5071297e919aff9d24ba73d5c09c631f7c63a47096d051b7ab429c8bf82610fc86203f48042614474565b6005820361274a57631dcd65008111156127455760405162461bcd60e51b815260206004820152600c60248201526b0a09ea4a88298747c409a82b60a31b60448201526064016105ad565b61278b565b6402540be400811061278b5760405162461bcd60e51b815260206004820152600a602482015269534d4c3a3e203130302560b01b60448201526064016105ad565b600082815260108401602090815260409182902083905581518481529081018390527f64b60dcce7b3cee40b52dbc101bb81363c6e5a1b9550f8c7b012c695f071cf949101610890565b604080518082019091526000808252600160208301529081906127ff908890889084908190612c04565b6000341161284f5760405162461bcd60e51b815260206004820152601c60248201527f534d4c3a6d73672e76616c75652063616e6e6f74206265207a65726f0000000060448201526064016105ad565b4284116128955760405162461bcd60e51b815260206004820152601460248201527314d3530e991958591b1a5b99481b9bdd081b595d60621b60448201526064016105ad565b6001600160a01b0383166128eb5760405162461bcd60e51b815260206004820152601c60248201527f534d4c3a7265636569766572206973207a65726f20616464726573730000000060448201526064016105ad565b6128f58787610536565b1561295157612905878733612aa6565b6129515760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a73656e646572206e6f742077686974656c697374656400000000000060448201526064016105ad565b3461295e888883886135a9565b9350905080156129775761297489898984613703565b91505b856129828385614474565b10156129c85760405162461bcd60e51b8152602060048201526015602482015274534d4c3a6c657373207468616e206d696e696d756d60581b60448201526064016105ad565b88546001600160a01b031663f242432a30868a6129e58789614474565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b158015612a4757600080fd5b505af1158015612a5b573d6000803e3d6000fd5b505060408051868152602081018690528a93507f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec977092500160405180910390a250965096945050505050565b60006001600160a01b038216612aca85856921a7a72a2927a62622a960b11b612bd0565b6001600160a01b031603612ae057506001610796565b6000612af98585681dda1a5d195b1a5cdd60ba1b612bd0565b90506001600160a01b038116612b13576000915050610796565b6001600160a01b0381163b15612b9c5760405163babcc53960e01b81526001600160a01b03848116600483015282169063babcc53990602401602060405180830381865afa925050508015612b85575060408051601f3d908101601f19168201909252612b8291810190614863565b60015b612b93576000915050610796565b91506107969050565b6000915050610796565b6000836001016000612bb88585613271565b81526020019081526020016000205490509392505050565b6000836003016000612be28585613271565b81526020810191909152604001600020546001600160a01b0316949350505050565b612c1b8585681a5b9a5d1a585d195960ba1b612ba6565b600003612c5e5760405162461bcd60e51b815260206004820152601160248201527014d3530e9b9bdd081a5b9a5d1a585d1959607a1b60448201526064016105ad565b6000612c728686635459504560e01b612ba6565b905060048103612d3e578151612cc15760405162461bcd60e51b815260206004820152601460248201527314d3530e95165411481b9bdd08185b1b1bddd95960621b60448201526064016105ad565b8380612cca5750825b15612d3957612cd98686610a7c565b15612d395760405162461bcd60e51b815260206004820152602a60248201527f534d4c3a707269736f6e65642c2067657420696e20746f756368207769746820604482015269676f7665726e616e636560b01b60648201526084016105ad565b612dc9565b60058103612d8e576020820151612d395760405162461bcd60e51b815260206004820152601460248201527314d3530e95165411481b9bdd08185b1b1bddd95960621b60448201526064016105ad565b60405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016105ad565b8215612e4d57612de786866936b0b4b73a30b4b732b960b11b612bd0565b6001600160a01b0316336001600160a01b031614612e475760405162461bcd60e51b815260206004820152601960248201527f534d4c3a73656e646572206e6f74206d61696e7461696e65720000000000000060448201526064016105ad565b50612ec9565b8315612ec757612e6b86866921a7a72a2927a62622a960b11b612bd0565b6001600160a01b0316336001600160a01b031614612e475760405162461bcd60e51b815260206004820152601960248201527829a6a61d39b2b73232b9103737ba1021a7a72a2927a62622a960391b60448201526064016105ad565b505b5050505050565b80846001016000612ee18686613271565b815260208101919091526040016000205550505050565b80846003016000612f098686613271565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b6000816001600160a01b0316638650c0726040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190614863565b600080612fbe8468616c6c6f77616e636560b81b613271565b9050612fcb868683612ba6565b9150612fd986868386612ed0565b604080518681526020810185905285917f22d413fb5bc865837d8577bccf9aa8b2de36e0481c69792daac701c2edadebe3910160405180910390a250949350505050565b8084600101600061302e8686613271565b8152602001908152602001600020600082825461304b9190614474565b909155505050505050565b808460010160006130678686613271565b8152602001908152602001600020600082825461304b9190614487565b6000600160ff1685600d01858560405161309f9291906143fb565b908152604051908190036020019020546001600160401b03161480156130f957508185600d0185856040516130d59291906143fb565b908152604051908190036020019020546001600160401b03600160401b9091041611155b95945050505050565b6001600160a01b0381166131585760405162461bcd60e51b815260206004820152601d60248201527f534d4c3a6d61696e7461696e65722063616e6e6f74206265207a65726f00000060448201526064016105ad565b61317183836936b0b4b73a30b4b732b960b11b84612ef8565b6040516001600160a01b038216815282907f72774bc96991002276ea2f17557bc24e67733a3dcf2e8b390d38921daab1ab31906020016109d6565b6276a7008110156131ff5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3c204d494e5f56414c494441544f525f504552494f4400000000000060448201526064016105ad565b6303c267008111156132535760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3e204d41585f56414c494441544f525f504552494f4400000000000060448201526064016105ad565b610a7783836e1d985b1a59185d1bdc94195c9a5bd9608a1b84612ed0565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b806132b28484651dd85b1b195d60d21b612ba6565b10156133005760405162461bcd60e51b815260206004820152601f60248201527f534d4c3a696e73756666696369656e742077616c6c65742062616c616e63650060448201526064016105ad565b610a778383651dd85b1b195d60d21b84613056565b610a778383651dd85b1b195d60d21b8461301d565b606083600201600061333c8585613271565b8152602001908152602001600020805461335590614557565b80601f016020809104026020016040519081016040528092919081815260200182805461338190614557565b80156133ce5780601f106133a3576101008083540402835291602001916133ce565b820191906000526020600020905b8154815290600101906020018083116133b157829003601f168201915b505050505090509392505050565b7342424242424242424242424242424242424242426001600160a01b0316632289511882878787876134488c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508c90506138c8565b6040518763ffffffff1660e01b81526004016134689594939291906148d0565b6000604051808303818588803b15801561348157600080fd5b505af1158015613495573d6000803e3d6000fd5b50505050505050505050565b60006134ad8484613271565b6000818152600187016020526040812054845192935091905b81811015613527578481815181106134e0576134e0614448565b602002602001015188600201600061350486806134fc9061491d565b975088613271565b8152602001908152602001600020908161351e91906145d1565b506001016134c6565b5050600091825260019095016020526040902093909355505050565b633b9aca008111156135975760405162461bcd60e51b815260206004820152601960248201527f534d4c3a3e204d41585f4d41494e54454e414e43455f4645450000000000000060448201526064016105ad565b610a7783836266656560e81b84612ed0565b60008060006135b88787613cb4565b90506001600160a01b038116156136f5576000816001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362d919061439d565b9050670de0b6b3a76400008111156136eb5780861115613658576136518187614487565b935061365b565b50845b6040516348b4aac360e11b815260006004820181905260016024830152604482018390526064820152608481018690526001600160a01b03831690639169558690839060a40160206040518083038185885af11580156136bf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136e4919061439d565b92506136ef565b8593505b506136f9565b8492505b5094509492505050565b6000613710858585610a9c565b61375c5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a6d696e74696e67206973206e6f7420616c6c6f77656400000000000060448201526064016105ad565b845460405163f759cc3b60e01b8152600481018590526000916001600160a01b03169063f759cc3b90602401602060405180830381865afa1580156137a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c9919061439d565b9050600081116138105760405162461bcd60e51b8152602060048201526012602482015271534d4c3a7072696365206973207a65726f3f60701b60448201526064016105ad565b80613823670de0b6b3a76400008561449a565b61382d91906144c7565b865460405163731133e960e01b8152306004820152602481018790526044810183905260806064820152600060848201529193506001600160a01b03169063731133e99060a401600060405180830381600087803b15801561388e57600080fd5b505af11580156138a2573d6000803e3d6000fd5b506138bf925087915086905066737572706c757360c81b8661301d565b50949350505050565b6000670de0b6b3a76400008210156139315760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b60648201526084016105ad565b61393f633b9aca0083614936565b156139a85760405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b60648201526084016105ad565b60006139b8633b9aca00846144c7565b9050600060026139c788613d0b565b6040516139d4919061494a565b602060405180830381855afa1580156139f1573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613a14919061439d565b90506000600280613a288860006040613d98565b604051613a35919061494a565b602060405180830381855afa158015613a52573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613a75919061439d565b6002613a95613a908a6040613a8b816060614487565b613d98565b613d0b565b604051613aa2919061494a565b602060405180830381855afa158015613abf573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613ae2919061439d565b60408051602081019390935282015260600160408051601f1981840301815290829052613b0e9161494a565b602060405180830381855afa158015613b2b573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613b4e919061439d565b90506000600280848a604051602001613b68929190614966565b60408051601f1981840301815290829052613b829161494a565b602060405180830381855afa158015613b9f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613bc2919061439d565b6002613bcd87613ea4565b604080516020810192909252810186905260600160408051601f1981840301815290829052613bfb9161494a565b602060405180830381855afa158015613c18573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613c3b919061439d565b60408051602081019390935282015260600160408051601f1981840301815290829052613c679161494a565b602060405180830381855afa158015613c84573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190613ca7919061439d565b9998505050505050505050565b600080613cd284846c1b1a5c5d5a591a5d1e541bdbdb609a1b612bd0565b90506001600160a01b038116613cec576000915050610557565b613cf581612f41565b15610772576000915050610557565b5092915050565b60606020825110158015613d2157506040825111155b613d2d57613d2d61498c565b8151604003613d3a575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602003613d75576107968382613eea565b61079683613d8d83600087516040613a8b9190614487565b613eea565b50919050565b606081613da681601f614474565b1015613de55760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016105ad565b613def8284614474565b84511015613e335760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016105ad565b606082158015613e5257604051915060008252602082016040526138bf565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613e8b578051835260209283019201613e73565b5050858452601f01601f19166040525050949350505050565b600081815b6008811015613ed257600892831b60ff831617929190911c90613ecb8161491d565b9050613ea9565b508015613ee157613ee161498c565b5060c01b919050565b6060806040519050835180825260208201818101602087015b81831015613f1b578051835260209283019201613f03565b50855184518101855292509050808201602086015b81831015613f48578051835260209283019201613f30565b508651929092011591909101601f01601f191660405250905092915050565b60008060408385031215613f7a57600080fd5b50508035926020909101359150565b60008083601f840112613f9b57600080fd5b5081356001600160401b03811115613fb257600080fd5b602083019150836020828501011115613fca57600080fd5b9250929050565b600080600080600060808688031215613fe957600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111561401457600080fd5b61402088828901613f89565b969995985093965092949392505050565b801515811461403f57600080fd5b50565b60008060006060848603121561405757600080fd5b8335925060208401359150604084013561407081614031565b809150509250925092565b60008060006060848603121561409057600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b03811681146140be57600080fd5b919050565b6000806000606084860312156140d857600080fd5b83359250602084013591506140ef604085016140a7565b90509250925092565b60008083601f84011261410a57600080fd5b5081356001600160401b0381111561412157600080fd5b6020830191508360208260051b8501011115613fca57600080fd5b6000806000806000806080878903121561415557600080fd5b863595506020870135945060408701356001600160401b038082111561417a57600080fd5b6141868a838b016140f8565b9096509450606089013591508082111561419f57600080fd5b506141ac89828a016140f8565b979a9699509497509295939492505050565b6000806000604084860312156141d357600080fd5b8335925060208401356001600160401b038111156141f057600080fd5b6141fc86828701613f89565b9497909650939450505050565b6000806000806080858703121561421f57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060008060008060e08b8d03121561425a57600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b01356001600160401b038082111561428d57600080fd5b6142998e838f016140f8565b909850965060a08d01359150808211156142b257600080fd5b6142be8e838f016140f8565b909650945060c08d01359150808211156142d757600080fd5b506142e48d828e016140f8565b915080935050809150509295989b9194979a5092959850565b60008060008060006080868803121561431557600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111561434057600080fd5b614020888289016140f8565b60008060008060008060c0878903121561436557600080fd5b863595506020870135945060408701359350606087013592506080870135915061439160a088016140a7565b90509295509295509295565b6000602082840312156143af57600080fd5b5051919050565b60208082526025908201527f534d4c3a73656e646572206973206e6f74207769746864726177616c20636f6e6040820152641d1c9858dd60da1b606082015260800190565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061052e60208301848661440b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105575761055761445e565b818103818111156105575761055761445e565b80820281158282048414176105575761055761445e565b634e487b7160e01b600052601260045260246000fd5b6000826144d6576144d66144b1565b500490565b6000808335601e198436030181126144f257600080fd5b8301803591506001600160401b0382111561450c57600080fd5b602001915036819003821315613fca57600080fd5b6001600160401b03818116838216019080821115613d0457613d0461445e565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061456b57607f821691505b602082108103613d9257634e487b7160e01b600052602260045260246000fd5b601f821115610a7757600081815260208120601f850160051c810160208610156145b25750805b601f850160051c820191505b81811015612ec7578281556001016145be565b81516001600160401b038111156145ea576145ea614541565b6145fe816145f88454614557565b8461458b565b602080601f831160018114614633576000841561461b5750858301515b600019600386901b1c1916600185901b178555612ec7565b600085815260208120601f198616915b8281101561466257888601518255948401946001909101908401614643565b50858210156146805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604051601f8201601f191681016001600160401b03811182821017156146b8576146b8614541565b604052919050565b60006001600160401b03808411156146da576146da614541565b8360051b60206146eb818301614690565b86815291850191818101903684111561470357600080fd5b865b848110156147885780358681111561471d5760008081fd5b8801601f36818301126147305760008081fd5b81358881111561474257614742614541565b614753818301601f19168801614690565b9150808252368782850101111561476a5760008081fd5b80878401888401376000908201870152845250918301918301614705565b50979650505050505050565b81835260006020808501808196508560051b810191508460005b878110156148185782840389528135601e198836030181126147cf57600080fd5b870185810190356001600160401b038111156147ea57600080fd5b8036038213156147f957600080fd5b61480486828461440b565b9a87019a95505050908401906001016147ae565b5091979650505050505050565b848152836020820152606060408201526000614845606083018486614794565b9695505050505050565b60208152600061052e602083018486614794565b60006020828403121561487557600080fd5b815161079681614031565b60005b8381101561489b578181015183820152602001614883565b50506000910152565b600081518084526148bc816020860160208601614880565b601f01601f19169290920160200192915050565b6080815260006148e460808301878961440b565b82810360208401526148f681876148a4565b9050828103604084015261490a81866148a4565b9150508260608301529695505050505050565b60006001820161492f5761492f61445e565b5060010190565b600082614945576149456144b1565b500690565b6000825161495c818460208701614880565b9190910192915050565b8281526000825161497e816020850160208701614880565b919091016020019392505050565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220d012819f71150634d35b29ef681ff318eb95d2d2e61b92cfd9aefe83ecf1d3fc64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "review: DataStoreModule for the id based isolated storage logic.review: InitiatorExtensionLib for initiator functions.review: OracleExtensionLib for oracle logic.Every pool is isolated and every validator is unique. We segregate all the risk.CONTROLLER and Maintainer: CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important. maintainer is the worker, can be used to automate some daily tasks: * distributing validators for Staking Pools or creating validators for Operators. * not so crucial in terms of security.Users: Type 4 : Permissioned Operators * Needs to be onboarded by the Dual Governance (Senate + Governance). * Maintains Beacon Chain Validators on behalf of the Staking Pools. * Can participate in the Operator Marketplace after initiation. * Can utilize maintainers for staking operations. Type 5 : Permissionless Configurable Staking Pools * Permissionless to create. * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc. * Can be public or private, can use a whitelist if private. * Can utilize maintainers for validator distribution on Operator Marketplace. * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * accruing rewards and keeping Staked Ether safe and isolated.Packages: An ID can only point to one version of a Package at a time. Built by utilizing the Modules! Can be upgraded by a dual governance, via pullUpgrade. * A Package's dual governance consists of Portal(governance) and the pool owner(senate). Type 10011 : Withdrawal Contract * Mandatory. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Staking Pools are in \"Isolation Mode\" until their Withdrawal Contract is upgraded. * * Meaning, no more Depositing or Validator Proposal can happen. * Custodian of the validator funds after creation, including any type of rewards and fees. Type 10021 : Liquidity Pool implementation * Optional. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Liquidity Pools are in \"Isolation Mode\" until upgraded.Middlewares: Can support many different versions that can be utilized by the Pool Owners. No particular way to build one. Cannot be upgraded. Currently only gETHMiddlewares. Type 20011 : gETHMiddleware * Optional. * CONTROLLER is the implementation contract position (always) * Requires the approval of Senate * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeModuleLib.StakeModuleStorageFunctions are protected with authentication function",
    "events": {
      "InfrastructureFeeSet(uint256,uint256)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "changeMaintainer(DataStoreModuleStorage storage,uint256,address)": {
        "details": "there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migrationwe don't use _authenticate here because malicious maintainers can imprison operators * and prevent them entering here, smh."
      },
      "decreaseWalletBalance(DataStoreModuleStorage storage,uint256,uint256)": {
        "details": "only CONTROLLER can decrease the balance externally,",
        "returns": {
          "success": "if the amount was sent and deducted"
        }
      },
      "delegate(DataStoreModuleStorage storage,uint256,uint256[],uint256[])": {
        "details": "When decreased the approved validator count below current active+proposed validators, operator cannot create new validators.",
        "params": {
          "allowances": "the MAX number of validators that can be created by the Operator, for given Pool",
          "operatorIds": "array of Operator IDs to allow them create validators",
          "poolId": "the gETH id of the Pool"
        }
      },
      "deposit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,uint256,address)": {
        "details": "an example for minting + buybacks Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- * debt  msgValue * 100   10  => buyback * 100   100 => buyback * 10    100 => buyback + mint * 1     x   => mint * 0.5   x   => mint * 0     x   => mint",
        "params": {
          "deadline": "liquidity pool parameter",
          "mingETH": "liquidity pool parameter",
          "poolId": "id of the staking pool, liquidity pool and gETH to be used."
        }
      },
      "finalizeExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)": {
        "details": "Strongly advised to be called right after the exiting process is over.Operators can exit at any time they want.Can only be called by the withdrawalContract of the pool given validator belongs to."
      },
      "getMaintenanceFee(DataStoreModuleStorage storage,uint256)": {
        "details": "respecs to the switching delay.",
        "returns": {
          "fee": "= percentage * PERCENTAGE_DENOMINATOR / 100"
        }
      },
      "getValidatorPeriod(DataStoreModuleStorage storage,uint256)": {
        "custom:visibility": "-> view-public"
      },
      "increaseWalletBalance(DataStoreModuleStorage storage,uint256)": {
        "details": "anyone can increase the balance directly, useful for withdrawalContracts and fees etc."
      },
      "isPriceValid(StakeModuleStorage storage,uint256)": {
        "details": "known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false"
      },
      "isPrisoned(DataStoreModuleStorage storage,uint256)": {
        "details": "rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted"
      },
      "isWhitelisted(DataStoreModuleStorage storage,uint256,address)": {
        "details": "Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set"
      },
      "operatorAllowance(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256)": {
        "details": "an operator cannot create new validators if: * 1. operator is a monopoly * 2. allowance is filled * * But if operator is set as a fallback, it can if set fallbackThreshold is reached on all allowances.If operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked."
      },
      "proposeStake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "details": "DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "poolId": "the id of the staking pool",
          "pubkeys": "Array of BLS12-381 public keys of the validators that will be proposed",
          "signatures1": "Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance",
          "signatures31": "Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call"
        }
      },
      "requestExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)": {
        "details": "Prevents the request if validator is still within the MIN_VALIDATOR_PERIODOnly the active validators can be called for an exitCan only be called by the withdrawalContract of the pool given validator belongs to."
      },
      "setBeaconDelays(StakeModuleStorage storage,uint256,uint256)": {
        "details": "high beacon delays will affect the ux negatively, low delays can cause issues for operators."
      },
      "setFallbackOperator(DataStoreModuleStorage storage,uint256,uint256,uint256)": {
        "params": {
          "fallbackThreshold": "the percentage (with PERCENTAGE_DENOMINATOR) that fallback operator * is activated for given Pool. Should not be greater than 100.",
          "operatorId": "Operator ID to allow create validators",
          "poolId": "the gETH id of the Pool"
        }
      },
      "setInfrastructureFee(StakeModuleStorage storage,uint256,uint256)": {
        "details": "Changing the Staking Pool fee, only applies to the newly created validators.advise that 100% == PERCENTAGE_DENOMINATOR"
      },
      "setPoolVisibility(DataStoreModuleStorage storage,uint256,bool)": {
        "details": "whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again. Note private pools can whitelist addresses with the help of a third party contract.",
        "params": {
          "makePrivate": "true if pool should be private, false for public pools"
        }
      },
      "setWhitelist(DataStoreModuleStorage storage,uint256,address)": {
        "details": "Whitelisting contracts should implement IWhitelist interface."
      },
      "setYieldReceiver(DataStoreModuleStorage storage,uint256,address)": {
        "details": "Only CONTROLLER of pool can set yield receier.",
        "params": {
          "poolId": "the gETH id of the Pool",
          "yieldReceiver": "address of the yield receiver"
        }
      },
      "stake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes[])": {
        "details": "To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  separate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "pubkeys": "Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake."
        }
      },
      "switchMaintenanceFee(DataStoreModuleStorage storage,uint256,uint256)": {
        "details": "Cannot be called again while its currently switching.advise that 100% == PERCENTAGE_DENOMINATOR"
      },
      "switchValidatorPeriod(DataStoreModuleStorage storage,uint256,uint256)": {
        "details": "limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD"
      }
    },
    "title": "SML: Stake Module Library (The Staking Library)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canStake(StakeModuleStorage storage,bytes)": {
        "notice": "external function to check if a validator can use the pool funds"
      },
      "changeMaintainer(DataStoreModuleStorage storage,uint256,address)": {
        "notice": "CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS"
      },
      "decreaseWalletBalance(DataStoreModuleStorage storage,uint256,uint256)": {
        "notice": "external function to decrease the internal wallet balance"
      },
      "delegate(DataStoreModuleStorage storage,uint256,uint256[],uint256[])": {
        "notice": "To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future."
      },
      "deposit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,uint256,address)": {
        "notice": "Allowing users to deposit into a staking pool.If a pool is not public, only the controller and if there is a whitelist contract, the whitelisted addresses can deposit."
      },
      "finalizeExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)": {
        "notice": "Finalizes the exit process for a validator."
      },
      "getMaintenanceFee(DataStoreModuleStorage storage,uint256)": {
        "notice": "Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%"
      },
      "increaseWalletBalance(DataStoreModuleStorage storage,uint256)": {
        "notice": "external function to increase the internal wallet balance"
      },
      "isMintingAllowed(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256)": {
        "notice": "checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Isolation Mode, can have many reasons"
      },
      "isPriceValid(StakeModuleStorage storage,uint256)": {
        "notice": "returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update"
      },
      "isPrisoned(DataStoreModuleStorage storage,uint256)": {
        "notice": "Checks if the given operator is Prisoned"
      },
      "isPrivatePool(DataStoreModuleStorage storage,uint256)": {
        "notice": "returns true if the pool is private"
      },
      "isWhitelisted(DataStoreModuleStorage storage,uint256,address)": {
        "notice": "checks if the Whitelist allows staker to use given private pool"
      },
      "operatorAllowance(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256)": {
        "notice": "maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool"
      },
      "proposeStake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "notice": "Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools."
      },
      "requestExit(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes)": {
        "notice": "Notifies the node operator with ExitRequest event"
      },
      "setBeaconDelays(StakeModuleStorage storage,uint256,uint256)": {
        "notice": "Set the maxiumum allowed beacon delay for blaming validators on creation and exit."
      },
      "setFallbackOperator(DataStoreModuleStorage storage,uint256,uint256,uint256)": {
        "notice": "To allow a Node Operator run validators for your Pool without a limit * after pool reaches a given treshold as percentage. * fallback operator and percentage can be set again at any given point in the future. * cannot set an operator as a fallback operator while it is currently in prison."
      },
      "setInfrastructureFee(StakeModuleStorage storage,uint256,uint256)": {
        "notice": "Set a fee (denominated in PERCENTAGE_DENOMINATOR) for any given TYPE."
      },
      "setPoolVisibility(DataStoreModuleStorage storage,uint256,bool)": {
        "notice": "changes the visibility of the pool"
      },
      "setWhitelist(DataStoreModuleStorage storage,uint256,address)": {
        "notice": "private pools can whitelist addresses with the help of a third party contract."
      },
      "setYieldReceiver(DataStoreModuleStorage storage,uint256,address)": {
        "notice": "Set the yield receiver address to activate or deactivete yield separation logic. * If set other than address(0) separation will be activated, if set back to address(0) * separation will be deactivated again."
      },
      "stake(StakeModuleStorage storage,DataStoreModuleStorage storage,uint256,bytes[])": {
        "notice": "Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet."
      },
      "switchMaintenanceFee(DataStoreModuleStorage storage,uint256,uint256)": {
        "notice": "Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY."
      },
      "switchValidatorPeriod(DataStoreModuleStorage storage,uint256,uint256)": {
        "notice": "updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY."
      }
    },
    "notice": "Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool, improving the user experience for stakers and removing the \"need\" for centralized or decentralized intermediaries. * Exclusively contains functions related to: * 1. Pool and Operator management, after initiation (review IEL). * 2. Validator Delegation. * 3. Depositing. * 4. Staking Operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}