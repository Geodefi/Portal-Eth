{
  "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        }
      ],
      "name": "gETHInvalidMiddleware",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "gETHZeroId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "avoider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAvoid",
          "type": "bool"
        }
      ],
      "name": "Avoider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "MiddlewareSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIDDLEWARE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URI_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAvoid",
          "type": "bool"
        }
      ],
      "name": "avoidMiddlewares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isAvoider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isMiddleware",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "priceUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "setMiddleware",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "setPricePerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMiddlewareManager",
          "type": "address"
        }
      ],
      "name": "transferMiddlewareManagerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "transferMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "transferOracleRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "transferPauserRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUriSetter",
          "type": "address"
        }
      ],
      "name": "transferUriSetterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
    "transactionIndex": 1,
    "gasUsed": "2443506",
    "logsBloom": "0x
    "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a",
    "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a1",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1550542,
        "transactionHash": "0x08a97cab0e929a13ef18ce3fc76713a3c272cbc985108539c788926e418ac5a1",
        "address": "0xaFE4151bC01770B5D2298555D1cCdaf273bC9D2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef1",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5",
          "0x0000000000000000000000007b6fa217a374826fca50dccb87041ae0e34ba1f5"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x1f8e9fbf85d4e60e8f6d11b4caa939540c22fb948a0abe8fe8098f2c1d00cb4a"
      }
    ],
    "blockNumber": 1550542,
    "cumulativeGasUsed": "2464970",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Geodefi Staked Ether",
    "gETH",
    "https://api.geode.fi/geth"
  ],
  "numDeployments": 1,
  "solcInputHash": "983f26216548ae9c38be8d3a1167f02e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"}],\"name\":\"gETHInvalidMiddleware\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"gETHZeroId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"avoider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAvoid\",\"type\":\"bool\"}],\"name\":\"Avoider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"MiddlewareSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIDDLEWARE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvoid\",\"type\":\"bool\"}],\"name\":\"avoidMiddlewares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isAvoider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isMiddleware\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"priceUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setMiddleware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setPricePerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMiddlewareManager\",\"type\":\"address\"}],\"name\":\"transferMiddlewareManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"transferOracleRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"transferPauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUriSetter\",\"type\":\"address\"}],\"name\":\"transferUriSetterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"gETH is chain-agnostic, meaning it can be used on any evm chain (given the correct name and symbol).gETH is immutable, it cannot be upgraded.gETH is a special ERC1155 contract with additional functionalities: gETHMiddlewares: * Most important functionality gETH provides: * Allowing any other contract to provide additional functionality * around the balance and price data, such as using an ID like ERC20. * This addition effectively result in changes in * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() * functions, reasoning is in the comments. Avoiders: * If one wants to remain unbound from gETHMiddlewares, * it can be done so by calling \\\"avoidMiddlewares\\\" function. PricePerShare: * Keeping track of the ratio between the derivative * and the underlaying staked asset, Ether. Denominator: * ERC1155 does not have decimals and it is not wise to use the name convention * but we need to provide some information on how to denominate the balances, price, etc.review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"gETHZeroId()\":[{\"custom:section\":\"** ERRORS **\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PriceUpdated(uint256,uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"avoidMiddlewares(uint256,bool)\":{\"details\":\"ADDED for gETH*\",\"params\":{\"isAvoid\":\"true: restrict middlewares, false: allow middlewares\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"CHANGED for gETHADDED \\\"((!(isMiddleware(sender, id))) || (isAvoider(account, id)))\\\" pass conditionSee ERC1155Burnable burn: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L13C1-L19C6\"},\"constructor\":{\"params\":{\"_name\":\"chain specific name: Geode Staked Ether, geode Staked Avax etc.\",\"_symbol\":\"chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.*\"}},\"denominator()\":{\"details\":\"ERC1155 does not have a decimals, and it is not wise to use the same nameADDED for gETH\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isAvoider(address,uint256)\":{\"details\":\"ADDED for gETH*\",\"params\":{\"account\":\"the potential avoider\"}},\"isMiddleware(address,uint256)\":{\"details\":\"ADDED for gETH\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pricePerShare(uint256)\":{\"details\":\"ADDED for gETH\",\"returns\":{\"_0\":\"price of the derivative in terms of underlying token, Ether\"}},\"priceUpdateTimestamp(uint256)\":{\"details\":\"ADDED for gETH\",\"returns\":{\"_0\":\"timestamp of the latest price update for given ID\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"CHANGED for gETHADDED \\\"((!isMiddleware(sender, id)) || isAvoider(from, id))\\\" pass conditionSee ERC1155 safeTransferFrom: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/ERC1155.sol#L109C29-L109C29\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setMiddleware(address,uint256,bool)\":{\"details\":\"ADDED for gETH\",\"params\":{\"isSet\":\"true: sets as a middleware, false: unsets\",\"middleware\":\"Address of the contract that will act as a middleware\"}},\"setPricePerShare(uint256,uint256)\":{\"details\":\"ADDED for gETH\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"transferMiddlewareManagerRole(address)\":{\"details\":\"MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferMinterRole(address)\":{\"details\":\"MINTER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferOracleRole(address)\":{\"details\":\"ORACLE is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferPauserRole(address)\":{\"details\":\"PAUSER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferUriSetterRole(address)\":{\"details\":\"URI_SETTER is basically a superuser, there can be only 1 at a given time,intended as \\\"Governance/DAO\\\"\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"DENOMINATOR\":{\"custom:section\":\"** CONSTANTS **\"},\"_avoiders\":{\"details\":\"ADDED for gETH*\"},\"_middlewares\":{\"details\":\"There can be multiple Middlewares for 1 staking pool.ADDED for gETH*\"},\"_pricePerShare\":{\"details\":\"Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETHADDED for gETH*\"},\"_priceUpdateTimestamp\":{\"details\":\"ADDED for gETH*\"},\"name\":{\"custom:section\":\"** VARIABLES **\"}},\"title\":\"gETH : Geodefi Liquid Staking Derivatives\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avoidMiddlewares(uint256,bool)\":{\"notice\":\"Restrict any affect of middlewares on the tokens of caller\"},\"constructor\":{\"notice\":\"Sets name, symbol, uri and grants necessary roles.\"},\"denominator()\":{\"notice\":\"a centralized denominator for all contract using gETH\"},\"isAvoider(address,uint256)\":{\"notice\":\"Checks if the given address restricts the affect of the middlewares on their gETH\"},\"isMiddleware(address,uint256)\":{\"notice\":\"Check if an address is approved as a middleware for an ID\"},\"setMiddleware(address,uint256,bool)\":{\"notice\":\"Set an address of a contract that will act as a middleware on gETH contract for a specific ID\"},\"setPricePerShare(uint256,uint256)\":{\"notice\":\"Only ORACLE can call this function and set price\"},\"transferMiddlewareManagerRole(address)\":{\"notice\":\"transfers the authorized party for middleware management\"},\"transferMinterRole(address)\":{\"notice\":\"transfers the authorized party for Minting operations related to minting\"},\"transferOracleRole(address)\":{\"notice\":\"transfers the authorized party for Oracle operations related to pricing\"},\"transferPauserRole(address)\":{\"notice\":\"transfers the authorized party for Pausing operations.\"},\"transferUriSetterRole(address)\":{\"notice\":\"transfers the authorized party for setting a new uri.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gETH.sol\":\"gETH\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/gETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n// internal - globals\\nimport {gETH_DENOMINATOR} from \\\"./globals/macros.sol\\\";\\n// internal - interfaces\\nimport {IERC1155Burnable} from \\\"./interfaces/helpers/IERC1155PausableBurnableSupply.sol\\\";\\nimport {IgETH} from \\\"./interfaces/IgETH.sol\\\";\\n// internal - contracts\\nimport {ERC1155, ERC1155Burnable, ERC1155PausableBurnableSupply} from \\\"./helpers/ERC1155PausableBurnableSupply.sol\\\";\\n\\n/**\\n * @title gETH : Geodefi Liquid Staking Derivatives\\n *\\n * @dev gETH is chain-agnostic, meaning it can be used on any evm chain (given the correct name and symbol).\\n *\\n * @dev gETH is immutable, it cannot be upgraded.\\n *\\n * @dev gETH is a special ERC1155 contract with additional functionalities:\\n * gETHMiddlewares:\\n * * Most important functionality gETH provides:\\n * * Allowing any other contract to provide additional functionality\\n * * around the balance and price data, such as using an ID like ERC20.\\n * * This addition effectively result in changes in\\n * * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck()\\n * * functions, reasoning is in the comments.\\n * Avoiders:\\n * * If one wants to remain unbound from gETHMiddlewares,\\n * * it can be done so by calling \\\"avoidMiddlewares\\\" function.\\n * PricePerShare:\\n * * Keeping track of the ratio between the derivative\\n * * and the underlaying staked asset, Ether.\\n * Denominator:\\n * * ERC1155 does not have decimals and it is not wise to use the name convention\\n * * but we need to provide some information on how to denominate the balances, price, etc.\\n *\\n * @dev review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\ncontract gETH is IgETH, ERC1155PausableBurnableSupply {\\n  /**\\n   * @custom:section                           ** ERRORS **\\n   */\\n  error gETHZeroId();\\n  error gETHInvalidMiddleware(address middleware);\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  uint256 private immutable DENOMINATOR = gETH_DENOMINATOR;\\n  bytes32 public immutable MIDDLEWARE_MANAGER_ROLE = keccak256(\\\"MIDDLEWARE_MANAGER_ROLE\\\");\\n  bytes32 public immutable ORACLE_ROLE = keccak256(\\\"ORACLE_ROLE\\\");\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   */\\n\\n  string public name;\\n  string public symbol;\\n  /**\\n   * @notice Mapping from pool IDs to gETHMiddleware implementation addresses\\n   * @dev There can be multiple Middlewares for 1 staking pool.\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => mapping(address => bool)) private _middlewares;\\n\\n  /**\\n   * @notice Mapping of user addresses who chose to restrict the access of Middlewares\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(address => mapping(uint256 => bool)) private _avoiders;\\n\\n  /**\\n   * @notice shows the underlying ETH for 1 staked gETH for a given asset ID\\n   * @dev Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETH\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => uint256) private _pricePerShare;\\n  /**\\n   * @notice ID to timestamp, pointing the second that the latest price update happened\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => uint256) private _priceUpdateTimestamp;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event PriceUpdated(uint256 id, uint256 pricePerShare, uint256 updateTimestamp);\\n  event MiddlewareSet(uint256 id, address middleware, bool isSet);\\n  event Avoider(address avoider, uint256 id, bool isAvoid);\\n\\n  /**\\n   * @custom:section                           ** CONSTRUCTOR **\\n   */\\n  /**\\n   * @notice Sets name, symbol, uri and grants necessary roles.\\n   * @param _name chain specific name: Geode Staked Ether, geode Staked Avax etc.\\n   * @param _symbol chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.\\n   **/\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC1155PausableBurnableSupply(_uri) {\\n    name = _name;\\n    symbol = _symbol;\\n\\n    _grantRole(keccak256(\\\"MIDDLEWARE_MANAGER_ROLE\\\"), _msgSender());\\n    _grantRole(keccak256(\\\"ORACLE_ROLE\\\"), _msgSender());\\n  }\\n\\n  /**\\n   * @custom:section                           ** DENOMINATOR **\\n   *\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice a centralized denominator for all contract using gETH\\n   * @dev ERC1155 does not have a decimals, and it is not wise to use the same name\\n   * @dev ADDED for gETH\\n   */\\n  function denominator() public view virtual override returns (uint256) {\\n    return DENOMINATOR;\\n  }\\n\\n  /**\\n   * @custom:section                           ** MIDDLEWARES **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Check if an address is approved as a middleware for an ID\\n   * @dev ADDED for gETH\\n   */\\n  function isMiddleware(\\n    address middleware,\\n    uint256 id\\n  ) public view virtual override returns (bool) {\\n    return _middlewares[id][middleware];\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @dev Only authorized parties should set the middleware\\n   * @dev ADDED for gETH\\n   */\\n  function _setMiddleware(address _middleware, uint256 _id, bool _isSet) internal virtual {\\n    _middlewares[_id][_middleware] = _isSet;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice Set an address of a contract that will\\n   * act as a middleware on gETH contract for a specific ID\\n   * @param middleware Address of the contract that will act as a middleware\\n   * @param isSet true: sets as a middleware, false: unsets\\n   * @dev ADDED for gETH\\n   */\\n  function setMiddleware(\\n    address middleware,\\n    uint256 id,\\n    bool isSet\\n  ) external virtual override onlyRole(MIDDLEWARE_MANAGER_ROLE) {\\n    if (middleware == address(0) || middleware.code.length == 0) {\\n      revert gETHInvalidMiddleware(middleware);\\n    }\\n\\n    _setMiddleware(middleware, id, isSet);\\n\\n    emit MiddlewareSet(id, middleware, isSet);\\n  }\\n\\n  /**\\n   * @custom:section                           ** AVOIDERS **\\n   */\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n  /**\\n   * @notice Checks if the given address restricts the affect of the middlewares on their gETH\\n   * @param account the potential avoider\\n   * @dev ADDED for gETH\\n   **/\\n  function isAvoider(address account, uint256 id) public view virtual override returns (bool) {\\n    return _avoiders[account][id];\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice Restrict any affect of middlewares on the tokens of caller\\n   * @param isAvoid true: restrict middlewares, false: allow middlewares\\n   * @dev ADDED for gETH\\n   **/\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external virtual override {\\n    address account = _msgSender();\\n\\n    _avoiders[account][id] = isAvoid;\\n\\n    emit Avoider(account, id, isAvoid);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRICE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev ADDED for gETH\\n   * @return price of the derivative in terms of underlying token, Ether\\n   */\\n  function pricePerShare(uint256 id) external view virtual override returns (uint256) {\\n    return _pricePerShare[id];\\n  }\\n\\n  /**\\n   * @dev ADDED for gETH\\n   * @return timestamp of the latest price update for given ID\\n   */\\n  function priceUpdateTimestamp(uint256 id) external view virtual override returns (uint256) {\\n    return _priceUpdateTimestamp[id];\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev ADDED for gETH\\n   */\\n  function _setPricePerShare(uint256 _price, uint256 _id) internal virtual {\\n    _pricePerShare[_id] = _price;\\n    _priceUpdateTimestamp[_id] = block.timestamp;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Only ORACLE can call this function and set price\\n   * @dev ADDED for gETH\\n   */\\n  function setPricePerShare(\\n    uint256 price,\\n    uint256 id\\n  ) external virtual override onlyRole(ORACLE_ROLE) {\\n    if (id == 0) {\\n      revert gETHZeroId();\\n    }\\n\\n    _setPricePerShare(price, id);\\n\\n    emit PriceUpdated(id, price, block.timestamp);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ROLES **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice transfers the authorized party for setting a new uri.\\n   * @dev URI_SETTER is basically a superuser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Governance/DAO\\\"\\n   */\\n  function transferUriSetterRole(\\n    address newUriSetter\\n  ) external virtual override onlyRole(URI_SETTER_ROLE) {\\n    _grantRole(URI_SETTER_ROLE, newUriSetter);\\n    renounceRole(URI_SETTER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Pausing operations.\\n   * @dev PAUSER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferPauserRole(address newPauser) external virtual override onlyRole(PAUSER_ROLE) {\\n    _grantRole(PAUSER_ROLE, newPauser);\\n    renounceRole(PAUSER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Minting operations related to minting\\n   * @dev MINTER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferMinterRole(address newMinter) external virtual override onlyRole(MINTER_ROLE) {\\n    _grantRole(MINTER_ROLE, newMinter);\\n    renounceRole(MINTER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Oracle operations related to pricing\\n   * @dev ORACLE is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferOracleRole(address newOracle) external virtual override onlyRole(ORACLE_ROLE) {\\n    _grantRole(ORACLE_ROLE, newOracle);\\n    renounceRole(ORACLE_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for middleware management\\n   * @dev MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferMiddlewareManagerRole(\\n    address newMiddlewareManager\\n  ) external virtual override onlyRole(MIDDLEWARE_MANAGER_ROLE) {\\n    _grantRole(MIDDLEWARE_MANAGER_ROLE, newMiddlewareManager);\\n    renounceRole(MIDDLEWARE_MANAGER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @custom:section                           ** OVERRIDES **\\n   *\\n   * @dev middleware of a specific ID can move funds between accounts without approval.\\n   * So, we will be overriding 2 functions:\\n   * * safeTransferFrom\\n   * * burn\\n   * note safeBatchTransferFrom is not need to be overriden,\\n   * as a middleware should not do batch transfers.\\n   *\\n   * @dev middlewares should handle transfer checks internally.\\n   * Because of this we want to remove the SafeTransferAcceptanceCheck if the caller is a middleware.\\n   * However, overriding _doSafeTransferAcceptanceCheck was not possible, so we copy pasted OZ contracts and\\n   * made it internal virtual.\\n   * note _doSafeBatchTransferAcceptanceCheck is not need to be overriden,\\n   * as a middleware should not do batch transfers.\\n   */\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED if (!isMiddleware) check\\n   * @dev See ERC1155 _doSafeTransferAcceptanceCheck:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/ERC1155.sol#L381\\n   */\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual override {\\n    if (!(isMiddleware(operator, id))) {\\n      super._doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n  }\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED \\\"((!isMiddleware(sender, id)) || isAvoider(from, id))\\\" pass condition\\n   * @dev See ERC1155 safeTransferFrom:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/ERC1155.sol#L109C29-L109C29\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value,\\n    bytes memory data\\n  ) public virtual override(ERC1155, IERC1155) {\\n    address sender = _msgSender();\\n\\n    if (from != sender && !isApprovedForAll(from, sender)) {\\n      if ((!isMiddleware(sender, id)) || isAvoider(from, id)) {\\n        revert ERC1155MissingApprovalForAll(sender, from);\\n      }\\n    }\\n\\n    _safeTransferFrom(from, to, id, value, data);\\n  }\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED \\\"((!(isMiddleware(sender, id))) || (isAvoider(account, id)))\\\" pass condition\\n   * @dev See ERC1155Burnable burn:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L13C1-L19C6\\n   */\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) public virtual override(ERC1155Burnable, IERC1155Burnable) {\\n    address sender = _msgSender();\\n\\n    if (account != sender && !isApprovedForAll(account, sender)) {\\n      if ((!isMiddleware(sender, id)) || isAvoider(account, id)) {\\n        revert ERC1155MissingApprovalForAll(sender, account);\\n      }\\n    }\\n\\n    _burn(account, id, value);\\n  }\\n}\\n\",\"keccak256\":\"0x41b5f35077750cd75074e8afbeca1f6cb7e6131e0284d041da84c53f2aef9506\",\"license\":\"BUSL-1.1\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0xdcbe1faa8712a653a87f4e185afb598388c2bbe62a750989df57afeac2848168\",\"license\":\"BUSL-1.1\"},\"contracts/helpers/ERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\n// External\\n// Dependencies: ERC1155\\n//  * interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n//  * libraries\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\n//  * contracts\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n// Dependencies: ERC1155Pausable\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n// Dependencies: ERC1155PausableBurnableSupply\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// Internal - interfaces\\nimport {IERC1155Burnable, IERC1155Supply, IERC1155PausableBurnableSupply} from \\\"../interfaces/helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  using Arrays for uint256[];\\n  using Arrays for address[];\\n\\n  mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n  mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  constructor(string memory uri_) {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(IERC1155).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256 /* id */) public view virtual returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(\\n    address[] memory accounts,\\n    uint256[] memory ids\\n  ) public view virtual returns (uint256[] memory) {\\n    if (accounts.length != ids.length) {\\n      revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n    }\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value,\\n    bytes memory data\\n  ) public virtual {\\n    address sender = _msgSender();\\n    if (from != sender && !isApprovedForAll(from, sender)) {\\n      revert ERC1155MissingApprovalForAll(sender, from);\\n    }\\n    _safeTransferFrom(from, to, id, value, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values,\\n    bytes memory data\\n  ) public virtual {\\n    address sender = _msgSender();\\n    if (from != sender && !isApprovedForAll(from, sender)) {\\n      revert ERC1155MissingApprovalForAll(sender, from);\\n    }\\n    _safeBatchTransferFrom(from, to, ids, values, data);\\n  }\\n\\n  /**\\n   * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n   * (or `to`) is the zero address.\\n   *\\n   * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n   *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n   * - `ids` and `values` must have the same length.\\n   *\\n   * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n   */\\n  function _update(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) internal virtual {\\n    if (ids.length != values.length) {\\n      revert ERC1155InvalidArrayLength(ids.length, values.length);\\n    }\\n\\n    address operator = _msgSender();\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids.unsafeMemoryAccess(i);\\n      uint256 value = values.unsafeMemoryAccess(i);\\n\\n      if (from != address(0)) {\\n        uint256 fromBalance = _balances[id][from];\\n        if (fromBalance < value) {\\n          revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n        }\\n        unchecked {\\n          // Overflow not possible: value <= fromBalance\\n          _balances[id][from] = fromBalance - value;\\n        }\\n      }\\n\\n      if (to != address(0)) {\\n        _balances[id][to] += value;\\n      }\\n    }\\n\\n    if (ids.length == 1) {\\n      uint256 id = ids.unsafeMemoryAccess(0);\\n      uint256 value = values.unsafeMemoryAccess(0);\\n      emit TransferSingle(operator, from, to, id, value);\\n    } else {\\n      emit TransferBatch(operator, from, to, ids, values);\\n    }\\n  }\\n\\n  /**\\n   * @dev Version of {_update} that performs the token acceptance check by calling\\n   * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n   * contains code (eg. is a smart contract at the moment of execution).\\n   *\\n   * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n   * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n   * overriding {_update} instead.\\n   */\\n  function _updateWithAcceptanceCheck(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values,\\n    bytes memory data\\n  ) internal virtual {\\n    _update(from, to, ids, values);\\n    if (to != address(0)) {\\n      address operator = _msgSender();\\n      if (ids.length == 1) {\\n        uint256 id = ids.unsafeMemoryAccess(0);\\n        uint256 value = values.unsafeMemoryAccess(0);\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n      } else {\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value,\\n    bytes memory data\\n  ) internal {\\n    if (to == address(0)) {\\n      revert ERC1155InvalidReceiver(address(0));\\n    }\\n    if (from == address(0)) {\\n      revert ERC1155InvalidSender(address(0));\\n    }\\n    (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n    _updateWithAcceptanceCheck(from, to, ids, values, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   * - `ids` and `values` must have the same length.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values,\\n    bytes memory data\\n  ) internal {\\n    if (to == address(0)) {\\n      revert ERC1155InvalidReceiver(address(0));\\n    }\\n    if (from == address(0)) {\\n      revert ERC1155InvalidSender(address(0));\\n    }\\n    _updateWithAcceptanceCheck(from, to, ids, values, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the values in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n    if (to == address(0)) {\\n      revert ERC1155InvalidReceiver(address(0));\\n    }\\n    (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n    _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `values` must have the same length.\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values,\\n    bytes memory data\\n  ) internal {\\n    if (to == address(0)) {\\n      revert ERC1155InvalidReceiver(address(0));\\n    }\\n    _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n  }\\n\\n  /**\\n   * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `value` amount of tokens of type `id`.\\n   */\\n  function _burn(address from, uint256 id, uint256 value) internal {\\n    if (from == address(0)) {\\n      revert ERC1155InvalidSender(address(0));\\n    }\\n    (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n    _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `value` amount of tokens of type `id`.\\n   * - `ids` and `values` must have the same length.\\n   */\\n  function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n    if (from == address(0)) {\\n      revert ERC1155InvalidSender(address(0));\\n    }\\n    _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `operator` cannot be the zero address.\\n   */\\n  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n    if (operator == address(0)) {\\n      revert ERC1155InvalidOperator(address(0));\\n    }\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n   * if it contains code at the moment of execution.\\n   */\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value,\\n    bytes memory data\\n  ) internal virtual {\\n    if (to.code.length > 0) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\n          // Tokens rejected\\n          revert ERC1155InvalidReceiver(to);\\n        }\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          // non-ERC1155Receiver implementer\\n          revert ERC1155InvalidReceiver(to);\\n        } else {\\n          /// @solidity memory-safe-assembly\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n   * if it contains code at the moment of execution.\\n   */\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values,\\n    bytes memory data\\n  ) private {\\n    if (to.code.length > 0) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n          // Tokens rejected\\n          revert ERC1155InvalidReceiver(to);\\n        }\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          // non-ERC1155Receiver implementer\\n          revert ERC1155InvalidReceiver(to);\\n        } else {\\n          /// @solidity memory-safe-assembly\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Creates an array in memory with only one value for each of the elements provided.\\n   */\\n  function _asSingletonArrays(\\n    uint256 element1,\\n    uint256 element2\\n  ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      // Load the free memory pointer\\n      array1 := mload(0x40)\\n      // Set array length to 1\\n      mstore(array1, 1)\\n      // Store the single element at the next word after the length (where content starts)\\n      mstore(add(array1, 0x20), element1)\\n\\n      // Repeat for next array locating it right after the first array\\n      array2 := add(array1, 0x40)\\n      mstore(array2, 1)\\n      mstore(add(array2, 0x20), element2)\\n\\n      // Update the free memory pointer by pointing after the second array\\n      mstore(0x40, add(array2, 0x40))\\n    }\\n  }\\n}\\n\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n  /**\\n   * @dev See {ERC1155-_update}.\\n   *\\n   * Requirements:\\n   *\\n   * - the contract must not be paused.\\n   */\\n  function _update(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) internal virtual override whenNotPaused {\\n    super._update(from, to, ids, values);\\n  }\\n}\\n\\nabstract contract ERC1155Burnable is IERC1155Burnable, ERC1155 {\\n  function burn(address account, uint256 id, uint256 value) public virtual override {\\n    if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n      revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n    }\\n\\n    _burn(account, id, value);\\n  }\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) public virtual {\\n    if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n      revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n    }\\n\\n    _burnBatch(account, ids, values);\\n  }\\n}\\n\\nabstract contract ERC1155Supply is IERC1155Supply, ERC1155 {\\n  mapping(uint256 id => uint256) private _totalSupply;\\n  uint256 private _totalSupplyAll;\\n\\n  /**\\n   * @dev Total value of tokens in with a given id.\\n   */\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev Total value of tokens.\\n   */\\n  function totalSupply() public view virtual returns (uint256) {\\n    return _totalSupplyAll;\\n  }\\n\\n  /**\\n   * @dev Indicates whether any token exist with a given id, or not.\\n   */\\n  function exists(uint256 id) public view virtual returns (bool) {\\n    return totalSupply(id) > 0;\\n  }\\n\\n  /**\\n   * @dev See {ERC1155-_update}.\\n   */\\n  function _update(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) internal virtual override {\\n    super._update(from, to, ids, values);\\n\\n    if (from == address(0)) {\\n      uint256 totalMintValue = 0;\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 value = values[i];\\n        // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n        _totalSupply[ids[i]] += value;\\n        totalMintValue += value;\\n      }\\n      // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n      _totalSupplyAll += totalMintValue;\\n    }\\n\\n    if (to == address(0)) {\\n      uint256 totalBurnValue = 0;\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 value = values[i];\\n\\n        unchecked {\\n          // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n          _totalSupply[ids[i]] -= value;\\n          // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n          totalBurnValue += value;\\n        }\\n      }\\n      unchecked {\\n        // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n        _totalSupplyAll -= totalBurnValue;\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @notice Base contract for gETH.\\n * @dev Above contracts are taken from Openzeppelin.\\n * @dev Only difference is _doSafeTransferAcceptanceCheck is being internal virtual instead of private, because we want to be able to override it in gETH:\\n * ERC1155:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/ERC1155.sol#1\\n * ERC1155Pausable:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/37afdc8910f2853426c20e504ecfe5d992e21813/contracts/token/ERC1155/extensions/ERC1155Pausable.sol#L1\\n * ERC1155Burnable:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/37afdc8910f2853426c20e504ecfe5d992e21813/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L1\\n * ERC1155Supply:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/37afdc8910f2853426c20e504ecfe5d992e21813/contracts/token/ERC1155/extensions/ERC1155Supply.sol#L1\\n *\\n * @dev Below contract ERC1155PausableBurnableSupply is created with openzeppelin wizard:\\n * + Mintable\\n * + Burnable\\n * + Supply Tracking\\n * + Pausable\\n * + Updatable URI\\n * + Roles\\n * Additionally, its constructor is changed for some gas savings.\\n */\\ncontract ERC1155PausableBurnableSupply is\\n  IERC1155PausableBurnableSupply,\\n  ERC1155,\\n  AccessControl,\\n  ERC1155Pausable,\\n  ERC1155Burnable,\\n  ERC1155Supply\\n{\\n  bytes32 public immutable URI_SETTER_ROLE = keccak256(\\\"URI_SETTER_ROLE\\\");\\n  bytes32 public immutable PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  bytes32 public immutable MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n  constructor(string memory uri_) ERC1155(uri_) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _grantRole(keccak256(\\\"URI_SETTER_ROLE\\\"), msg.sender);\\n    _grantRole(keccak256(\\\"PAUSER_ROLE\\\"), msg.sender);\\n    _grantRole(keccak256(\\\"MINTER_ROLE\\\"), msg.sender);\\n  }\\n\\n  function setURI(string memory newuri) public override onlyRole(URI_SETTER_ROLE) {\\n    _setURI(newuri);\\n  }\\n\\n  function pause() public override onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  function unpause() public override onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public override onlyRole(MINTER_ROLE) {\\n    _mint(account, id, amount, data);\\n  }\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public override onlyRole(MINTER_ROLE) {\\n    _mintBatch(to, ids, amounts, data);\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function _update(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) internal override(ERC1155, ERC1155Pausable, ERC1155Supply) {\\n    super._update(from, to, ids, values);\\n  }\\n\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view override(ERC1155, AccessControl, IERC165) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xb76c0ea8cd2679e5e4fd0ca893b9c058fa0aed271ca526971434ba28ebbd4c4d\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61014060405260008051602062002cf283398151915260805260008051602062002d1283398151915260a05260008051602062002d3283398151915260c052670de0b6b3a764000060e05260008051602062002d528339815191526101005260008051602062002cd2833981519152610120523480156200007f57600080fd5b5060405162002d7238038062002d72833981016040819052620000a29162000307565b8080620000af816200017d565b506004805460ff19169055620000c76000336200018f565b50620000e360008051602062002cf2833981519152336200018f565b50620000ff60008051602062002d12833981519152336200018f565b506200011b60008051602062002d32833981519152336200018f565b50600790506200012c848262000427565b5060086200013b838262000427565b506200015760008051602062002d52833981519152336200018f565b506200017360008051602062002cd2833981519152336200018f565b50505050620004f3565b60026200018b828262000427565b5050565b60008281526003602090815260408083206001600160a01b038516845290915281205460ff16620002385760008381526003602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620001ef3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200023c565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026a57600080fd5b81516001600160401b038082111562000287576200028762000242565b604051601f8301601f19908116603f01168101908282118183101715620002b257620002b262000242565b81604052838152602092508683858801011115620002cf57600080fd5b600091505b83821015620002f35785820183015181830184015290820190620002d4565b600093810190920192909252949350505050565b6000806000606084860312156200031d57600080fd5b83516001600160401b03808211156200033557600080fd5b620003438783880162000258565b945060208601519150808211156200035a57600080fd5b620003688783880162000258565b935060408601519150808211156200037f57600080fd5b506200038e8682870162000258565b9150509250925092565b600181811c90821680620003ad57607f821691505b602082108103620003ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042257600081815260208120601f850160051c81016020861015620003fd5750805b601f850160051c820191505b818110156200041e5782815560010162000409565b5050505b505050565b81516001600160401b0381111562000443576200044362000242565b6200045b8162000454845462000398565b84620003d4565b602080601f8311600181146200049357600084156200047a5750858301515b600019600386901b1c1916600185901b1785556200041e565b600085815260208120601f198616915b82811015620004c457888601518255948401946001909101908401620004a3565b5085821015620004e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516126f5620005dd60003960008181610321015281816108f101528181610dcc01528181610df90152610e2401526000818161062401528181610c1801528181610f8c01528181610fb90152610fe4015260006105130152600081816105b0015281816108b401528181610d6401528181610e8e01528181610ebb0152610ee60152600081816105ea01528181610ae401528181610d9a01528181610f0d01528181610f3a0152610f65015260008181610499015281816106c101528181610a3101528181610a5e0152610a8901526126f56000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c80636b20c4541161015c578063b8bf60f9116100ce578063e63ab1e911610087578063e63ab1e9146105e5578063e985e9c51461060c578063eef37fd51461061f578063f242432a14610646578063f5298aca14610659578063f759cc3b1461066c57600080fd5b8063b8bf60f914610552578063bad383a614610565578063bd85b03914610578578063c7bddb1e14610598578063d5391393146105ab578063d547741f146105d257600080fd5b8063908d67ed11610120578063908d67ed146104d657806391d14854146104f657806395d89b411461050957806396ce079514610511578063a217fddf14610537578063a22cb4651461053f57600080fd5b80636b20c4541461046e578063731133e9146104815780637f345710146104945780638456cb59146104bb5780638801b9b8146104c357600080fd5b8063248a9ca3116101f55780633f4ba83a116101b95780633f4ba83a146103f35780634d280a55146103fb5780634e1273f41461040e5780634f558e791461042e578063512be796146104505780635c975abb1461046357600080fd5b8063248a9ca3146103845780632eb2c2d6146103a75780632f2ff15d146103ba5780633106fde8146103cd57806336568abe146103e057600080fd5b8063072650d211610247578063072650d21461030957806307e2cea51461031c5780630e89341c1461034357806318160ddd146103565780631f7fdffa1461035e57806322af59971461037157600080fd5b8062fdd58e1461028357806301ffc9a7146102a957806302fe5305146102cc5780630492f6e1146102e157806306fdde03146102f4575b600080fd5b610296610291366004611ce6565b61068c565b6040519081526020015b60405180910390f35b6102bc6102b7366004611d26565b6106b4565b60405190151581526020016102a0565b6102df6102da366004611de9565b6106bf565b005b6102df6102ef366004611e4a565b6106f6565b6102fc610765565b6040516102a09190611ebc565b6102bc610317366004611ce6565b6107f3565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102fc610351366004611ecf565b61081e565b600654610296565b6102df61036c366004611f97565b6108b2565b6102df61037f366004612030565b6108ef565b610296610392366004611ecf565b60009081526003602052604090206001015490565b6102df6103b5366004612052565b610998565b6102df6103c83660046120fc565b610a04565b6102df6103db36600461211f565b610a2f565b6102df6103ee3660046120fc565b610aaa565b6102df610ae2565b6102bc610409366004611ce6565b610b17565b61042161041c36600461213a565b610b41565b6040516102a09190612235565b6102bc61043c366004611ecf565b600090815260056020526040902054151590565b6102df61045e366004612248565b610c16565b60045460ff166102bc565b6102df61047c366004612284565b610d08565b6102df61048f3660046122f8565b610d62565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df610d98565b6102df6104d136600461211f565b610dca565b6102966104e4366004611ecf565b6000908152600c602052604090205490565b6102bc6105043660046120fc565b610e49565b6102fc610e74565b7f0000000000000000000000000000000000000000000000000000000000000000610296565b610296600081565b6102df61054d36600461234d565b610e81565b6102df61056036600461211f565b610e8c565b6102df61057336600461211f565b610f0b565b610296610586366004611ecf565b60009081526005602052604090205490565b6102df6105a636600461211f565b610f8a565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df6105e03660046120fc565b611009565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102bc61061a366004612377565b61102e565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df6106543660046123a1565b61105c565b6102df610667366004612406565b6110db565b61029661067a366004611ecf565b6000908152600b602052604090205490565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006106ae82611158565b7f00000000000000000000000000000000000000000000000000000000000000006106e98161117d565b6106f282611187565b5050565b336000818152600a60209081526040808320868452825291829020805460ff19168515159081179091558251848152918201869052918101919091527f78738b8c4717822a58cc752d3b2d657f2d706db6042748d69d2048438ff07e2c906060015b60405180910390a1505050565b6007805461077290612439565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612439565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081565b6001600160a01b03919091166000908152600a60209081526040808320938352929052205460ff1690565b60606002805461082d90612439565b80601f016020809104026020016040519081016040528092919081815260200182805461085990612439565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b50505050509050919050565b7f00000000000000000000000000000000000000000000000000000000000000006108dc8161117d565b6108e885858585611193565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006109198161117d565b8160000361093a5760405163dcef3bd560e01b815260040160405180910390fd5b6000828152600b60209081526040808320869055600c9091529020429055604080518381526020810185905242918101919091527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc4890606001610758565b336001600160a01b03861681148015906109b957506109b7868261102e565b155b156109ef5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b6109fc86868686866111cb565b505050505050565b600082815260036020526040902060010154610a1f8161117d565b610a29838361122b565b50505050565b7f0000000000000000000000000000000000000000000000000000000000000000610a598161117d565b610a837f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f0000000000000000000000000000000000000000000000000000000000000000335b6001600160a01b0381163314610ad35760405163334bd91960e11b815260040160405180910390fd5b610add82826112bf565b505050565b7f0000000000000000000000000000000000000000000000000000000000000000610b0c8161117d565b610b1461132c565b50565b60009081526009602090815260408083206001600160a01b03949094168352929052205460ff1690565b60608151835114610b725781518351604051635b05999160e01b8152600481019290925260248201526044016109e6565b6000835167ffffffffffffffff811115610b8e57610b8e611d4a565b604051908082528060200260200182016040528015610bb7578160200160208202803683370190505b50905060005b8451811015610c0e57602080820286010151610be19060208084028701015161068c565b828281518110610bf357610bf3612473565b6020908102919091010152610c078161249f565b9050610bbd565b509392505050565b7f0000000000000000000000000000000000000000000000000000000000000000610c408161117d565b6001600160a01b0384161580610c5e57506001600160a01b0384163b155b15610c8757604051630789b04160e41b81526001600160a01b03851660048201526024016109e6565b60008381526009602090815260408083206001600160a01b03881684529091529020805460ff1916831515179055604080518481526001600160a01b0386166020820152831515918101919091527fc3c7dc5ac1b5d811719dbd5be732967d24ed27897351a8a123e526f6b53dc5249060600160405180910390a150505050565b6001600160a01b0383163314801590610d285750610d26833361102e565b155b15610d575760405163711bec9160e11b81523360048201526001600160a01b03841660248201526044016109e6565b610add83838361137e565b7f0000000000000000000000000000000000000000000000000000000000000000610d8c8161117d565b6108e8858585856113c4565b7f0000000000000000000000000000000000000000000000000000000000000000610dc28161117d565b610b14611421565b7f0000000000000000000000000000000000000000000000000000000000000000610df48161117d565b610e1e7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008805461077290612439565b6106f233838361145e565b7f0000000000000000000000000000000000000000000000000000000000000000610eb68161117d565b610ee07f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b7f0000000000000000000000000000000000000000000000000000000000000000610f358161117d565b610f5f7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b7f0000000000000000000000000000000000000000000000000000000000000000610fb48161117d565b610fde7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b6000828152600360205260409020600101546110248161117d565b610a2983836112bf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b038616811480159061107d575061107b868261102e565b155b156110ce5761108c8185610b17565b158061109d575061109d86856107f3565b156110ce5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e6565b6109fc86868686866114f4565b336001600160a01b03841681148015906110fc57506110fa848261102e565b155b1561114d5761110b8184610b17565b158061111c575061111c84846107f3565b1561114d5760405163711bec9160e11b81526001600160a01b038083166004830152851660248201526044016109e6565b610a29848484611582565b60006001600160e01b03198216637965db0b60e01b14806106ae57506106ae826115ea565b610b14813361163a565b60026106f282826124fe565b6001600160a01b0384166111bd57604051632bfa23e760e11b8152600060048201526024016109e6565b610a29600085858585611673565b6001600160a01b0384166111f557604051632bfa23e760e11b8152600060048201526024016109e6565b6001600160a01b03851661121e57604051626a0d4560e21b8152600060048201526024016109e6565b6108e88585858585611673565b60006112378383610e49565b6112b75760008381526003602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561126f3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016106ae565b5060006106ae565b60006112cb8383610e49565b156112b75760008381526003602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016106ae565b6113346116c6565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166113a757604051626a0d4560e21b8152600060048201526024016109e6565b610add836000848460405180602001604052806000815250611673565b6001600160a01b0384166113ee57604051632bfa23e760e11b8152600060048201526024016109e6565b604080516001808252602082018690528183019081526060820185905260808201909252906109fc600087848487611673565b6114296116eb565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113613390565b6001600160a01b0382166114875760405162ced3e160e81b8152600060048201526024016109e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661151e57604051632bfa23e760e11b8152600060048201526024016109e6565b6001600160a01b03851661154757604051626a0d4560e21b8152600060048201526024016109e6565b604080516001808252602082018690528183019081526060820185905260808201909252906115798787848487611673565b50505050505050565b6001600160a01b0383166115ab57604051626a0d4560e21b8152600060048201526024016109e6565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916108e891879185908590611673565b60006001600160e01b03198216636cdb3d1360e11b148061161b57506001600160e01b031982166303a24d0760e21b145b806106ae57506301ffc9a760e01b6001600160e01b03198316146106ae565b6116448282610e49565b6106f25760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016109e6565b61167f8585858561170f565b6001600160a01b038416156108e857825133906001036116b857602084810151908401516116b183898985858961171b565b50506109fc565b6109fc818787878787611737565b60045460ff166116e957604051638dfc202b60e01b815260040160405180910390fd5b565b60045460ff16156116e95760405163d93c066560e01b815260040160405180910390fd5b610a298484848461185b565b6117258684610b17565b6109fc576109fc8686868686866119b5565b6001600160a01b0384163b156109fc5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061177b90899089908890889088906004016125be565b6020604051808303816000875af19250505080156117b6575060408051601f3d908101601f191682019092526117b39181019061261c565b60015b61181f573d8080156117e4576040519150601f19603f3d011682016040523d82523d6000602084013e6117e9565b606091505b50805160000361181757604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b805181602001fd5b6001600160e01b0319811663bc197c8160e01b1461157957604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b61186784848484611a9e565b6001600160a01b03841661191a576000805b835181101561190057600083828151811061189657611896612473565b6020026020010151905080600560008785815181106118b7576118b7612473565b6020026020010151815260200190815260200160002060008282546118dc9190612639565b909155506118ec90508184612639565b925050806118f99061249f565b9050611879565b5080600660008282546119139190612639565b9091555050505b6001600160a01b038316610a29576000805b83518110156119a457600083828151811061194957611949612473565b60200260200101519050806005600087858151811061196a5761196a612473565b60200260200101518152602001908152602001600020600082825403925050819055508083019250508061199d9061249f565b905061192c565b506006805491909103905550505050565b6001600160a01b0384163b156109fc5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906119f9908990899088908890889060040161264c565b6020604051808303816000875af1925050508015611a34575060408051601f3d908101601f19168201909252611a319181019061261c565b60015b611a62573d8080156117e4576040519150601f19603f3d011682016040523d82523d6000602084013e6117e9565b6001600160e01b0319811663f23a6e6160e01b1461157957604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b611aa66116eb565b610a29848484848051825114611adc5781518151604051635b05999160e01b8152600481019290925260248201526044016109e6565b3360005b8351811015611beb576020818102858101820151908501909101516001600160a01b03881615611b93576000828152602081815260408083206001600160a01b038c16845290915290205481811015611b6c576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016109e6565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615611bd8576000828152602081815260408083206001600160a01b038b16845290915281208054839290611bd2908490612639565b90915550505b505080611be49061249f565b9050611ae0565b508251600103611c6c5760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611c5d929190918252602082015260400190565b60405180910390a450506108e8565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611cbb929190612691565b60405180910390a45050505050565b80356001600160a01b0381168114611ce157600080fd5b919050565b60008060408385031215611cf957600080fd5b611d0283611cca565b946020939093013593505050565b6001600160e01b031981168114610b1457600080fd5b600060208284031215611d3857600080fd5b8135611d4381611d10565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8957611d89611d4a565b604052919050565b600067ffffffffffffffff831115611dab57611dab611d4a565b611dbe601f8401601f1916602001611d60565b9050828152838383011115611dd257600080fd5b828260208301376000602084830101529392505050565b600060208284031215611dfb57600080fd5b813567ffffffffffffffff811115611e1257600080fd5b8201601f81018413611e2357600080fd5b611e3284823560208401611d91565b949350505050565b80358015158114611ce157600080fd5b60008060408385031215611e5d57600080fd5b82359150611e6d60208401611e3a565b90509250929050565b6000815180845260005b81811015611e9c57602081850181015186830182015201611e80565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d436020830184611e76565b600060208284031215611ee157600080fd5b5035919050565b600067ffffffffffffffff821115611f0257611f02611d4a565b5060051b60200190565b600082601f830112611f1d57600080fd5b81356020611f32611f2d83611ee8565b611d60565b82815260059290921b84018101918181019086841115611f5157600080fd5b8286015b84811015611f6c5780358352918301918301611f55565b509695505050505050565b600082601f830112611f8857600080fd5b611d4383833560208501611d91565b60008060008060808587031215611fad57600080fd5b611fb685611cca565b9350602085013567ffffffffffffffff80821115611fd357600080fd5b611fdf88838901611f0c565b94506040870135915080821115611ff557600080fd5b61200188838901611f0c565b9350606087013591508082111561201757600080fd5b5061202487828801611f77565b91505092959194509250565b6000806040838503121561204357600080fd5b50508035926020909101359150565b600080600080600060a0868803121561206a57600080fd5b61207386611cca565b945061208160208701611cca565b9350604086013567ffffffffffffffff8082111561209e57600080fd5b6120aa89838a01611f0c565b945060608801359150808211156120c057600080fd5b6120cc89838a01611f0c565b935060808801359150808211156120e257600080fd5b506120ef88828901611f77565b9150509295509295909350565b6000806040838503121561210f57600080fd5b82359150611e6d60208401611cca565b60006020828403121561213157600080fd5b611d4382611cca565b6000806040838503121561214d57600080fd5b823567ffffffffffffffff8082111561216557600080fd5b818501915085601f83011261217957600080fd5b81356020612189611f2d83611ee8565b82815260059290921b840181019181810190898411156121a857600080fd5b948201945b838610156121cd576121be86611cca565b825294820194908201906121ad565b965050860135925050808211156121e357600080fd5b506121f085828601611f0c565b9150509250929050565b600081518084526020808501945080840160005b8381101561222a5781518752958201959082019060010161220e565b509495945050505050565b602081526000611d4360208301846121fa565b60008060006060848603121561225d57600080fd5b61226684611cca565b92506020840135915061227b60408501611e3a565b90509250925092565b60008060006060848603121561229957600080fd5b6122a284611cca565b9250602084013567ffffffffffffffff808211156122bf57600080fd5b6122cb87838801611f0c565b935060408601359150808211156122e157600080fd5b506122ee86828701611f0c565b9150509250925092565b6000806000806080858703121561230e57600080fd5b61231785611cca565b93506020850135925060408501359150606085013567ffffffffffffffff81111561234157600080fd5b61202487828801611f77565b6000806040838503121561236057600080fd5b61236983611cca565b9150611e6d60208401611e3a565b6000806040838503121561238a57600080fd5b61239383611cca565b9150611e6d60208401611cca565b600080600080600060a086880312156123b957600080fd5b6123c286611cca565b94506123d060208701611cca565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123fa57600080fd5b6120ef88828901611f77565b60008060006060848603121561241b57600080fd5b61242484611cca565b95602085013595506040909401359392505050565b600181811c9082168061244d57607f821691505b60208210810361246d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016124b1576124b1612489565b5060010190565b601f821115610add57600081815260208120601f850160051c810160208610156124df5750805b601f850160051c820191505b818110156109fc578281556001016124eb565b815167ffffffffffffffff81111561251857612518611d4a565b61252c816125268454612439565b846124b8565b602080601f83116001811461256157600084156125495750858301515b600019600386901b1c1916600185901b1785556109fc565b600085815260208120601f198616915b8281101561259057888601518255948401946001909101908401612571565b50858210156125ae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0386811682528516602082015260a0604082018190526000906125ea908301866121fa565b82810360608401526125fc81866121fa565b905082810360808401526126108185611e76565b98975050505050505050565b60006020828403121561262e57600080fd5b8151611d4381611d10565b808201808211156106ae576106ae612489565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061268690830184611e76565b979650505050505050565b6040815260006126a460408301856121fa565b82810360208401526126b681856121fa565b9594505050505056fea26469706673582212209bbed32d6721c64ceba3b65442c0f787ab50f64f5b2a41faa37ab3dca6a0375c64736f6c6343000814003368e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef17804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6f04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a1",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027e5760003560e01c80636b20c4541161015c578063b8bf60f9116100ce578063e63ab1e911610087578063e63ab1e9146105e5578063e985e9c51461060c578063eef37fd51461061f578063f242432a14610646578063f5298aca14610659578063f759cc3b1461066c57600080fd5b8063b8bf60f914610552578063bad383a614610565578063bd85b03914610578578063c7bddb1e14610598578063d5391393146105ab578063d547741f146105d257600080fd5b8063908d67ed11610120578063908d67ed146104d657806391d14854146104f657806395d89b411461050957806396ce079514610511578063a217fddf14610537578063a22cb4651461053f57600080fd5b80636b20c4541461046e578063731133e9146104815780637f345710146104945780638456cb59146104bb5780638801b9b8146104c357600080fd5b8063248a9ca3116101f55780633f4ba83a116101b95780633f4ba83a146103f35780634d280a55146103fb5780634e1273f41461040e5780634f558e791461042e578063512be796146104505780635c975abb1461046357600080fd5b8063248a9ca3146103845780632eb2c2d6146103a75780632f2ff15d146103ba5780633106fde8146103cd57806336568abe146103e057600080fd5b8063072650d211610247578063072650d21461030957806307e2cea51461031c5780630e89341c1461034357806318160ddd146103565780631f7fdffa1461035e57806322af59971461037157600080fd5b8062fdd58e1461028357806301ffc9a7146102a957806302fe5305146102cc5780630492f6e1146102e157806306fdde03146102f4575b600080fd5b610296610291366004611ce6565b61068c565b6040519081526020015b60405180910390f35b6102bc6102b7366004611d26565b6106b4565b60405190151581526020016102a0565b6102df6102da366004611de9565b6106bf565b005b6102df6102ef366004611e4a565b6106f6565b6102fc610765565b6040516102a09190611ebc565b6102bc610317366004611ce6565b6107f3565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102fc610351366004611ecf565b61081e565b600654610296565b6102df61036c366004611f97565b6108b2565b6102df61037f366004612030565b6108ef565b610296610392366004611ecf565b60009081526003602052604090206001015490565b6102df6103b5366004612052565b610998565b6102df6103c83660046120fc565b610a04565b6102df6103db36600461211f565b610a2f565b6102df6103ee3660046120fc565b610aaa565b6102df610ae2565b6102bc610409366004611ce6565b610b17565b61042161041c36600461213a565b610b41565b6040516102a09190612235565b6102bc61043c366004611ecf565b600090815260056020526040902054151590565b6102df61045e366004612248565b610c16565b60045460ff166102bc565b6102df61047c366004612284565b610d08565b6102df61048f3660046122f8565b610d62565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df610d98565b6102df6104d136600461211f565b610dca565b6102966104e4366004611ecf565b6000908152600c602052604090205490565b6102bc6105043660046120fc565b610e49565b6102fc610e74565b7f0000000000000000000000000000000000000000000000000000000000000000610296565b610296600081565b6102df61054d36600461234d565b610e81565b6102df61056036600461211f565b610e8c565b6102df61057336600461211f565b610f0b565b610296610586366004611ecf565b60009081526005602052604090205490565b6102df6105a636600461211f565b610f8a565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df6105e03660046120fc565b611009565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102bc61061a366004612377565b61102e565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6102df6106543660046123a1565b61105c565b6102df610667366004612406565b6110db565b61029661067a366004611ecf565b6000908152600b602052604090205490565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006106ae82611158565b7f00000000000000000000000000000000000000000000000000000000000000006106e98161117d565b6106f282611187565b5050565b336000818152600a60209081526040808320868452825291829020805460ff19168515159081179091558251848152918201869052918101919091527f78738b8c4717822a58cc752d3b2d657f2d706db6042748d69d2048438ff07e2c906060015b60405180910390a1505050565b6007805461077290612439565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612439565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081565b6001600160a01b03919091166000908152600a60209081526040808320938352929052205460ff1690565b60606002805461082d90612439565b80601f016020809104026020016040519081016040528092919081815260200182805461085990612439565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b50505050509050919050565b7f00000000000000000000000000000000000000000000000000000000000000006108dc8161117d565b6108e885858585611193565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006109198161117d565b8160000361093a5760405163dcef3bd560e01b815260040160405180910390fd5b6000828152600b60209081526040808320869055600c9091529020429055604080518381526020810185905242918101919091527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc4890606001610758565b336001600160a01b03861681148015906109b957506109b7868261102e565b155b156109ef5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b6109fc86868686866111cb565b505050505050565b600082815260036020526040902060010154610a1f8161117d565b610a29838361122b565b50505050565b7f0000000000000000000000000000000000000000000000000000000000000000610a598161117d565b610a837f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f0000000000000000000000000000000000000000000000000000000000000000335b6001600160a01b0381163314610ad35760405163334bd91960e11b815260040160405180910390fd5b610add82826112bf565b505050565b7f0000000000000000000000000000000000000000000000000000000000000000610b0c8161117d565b610b1461132c565b50565b60009081526009602090815260408083206001600160a01b03949094168352929052205460ff1690565b60608151835114610b725781518351604051635b05999160e01b8152600481019290925260248201526044016109e6565b6000835167ffffffffffffffff811115610b8e57610b8e611d4a565b604051908082528060200260200182016040528015610bb7578160200160208202803683370190505b50905060005b8451811015610c0e57602080820286010151610be19060208084028701015161068c565b828281518110610bf357610bf3612473565b6020908102919091010152610c078161249f565b9050610bbd565b509392505050565b7f0000000000000000000000000000000000000000000000000000000000000000610c408161117d565b6001600160a01b0384161580610c5e57506001600160a01b0384163b155b15610c8757604051630789b04160e41b81526001600160a01b03851660048201526024016109e6565b60008381526009602090815260408083206001600160a01b03881684529091529020805460ff1916831515179055604080518481526001600160a01b0386166020820152831515918101919091527fc3c7dc5ac1b5d811719dbd5be732967d24ed27897351a8a123e526f6b53dc5249060600160405180910390a150505050565b6001600160a01b0383163314801590610d285750610d26833361102e565b155b15610d575760405163711bec9160e11b81523360048201526001600160a01b03841660248201526044016109e6565b610add83838361137e565b7f0000000000000000000000000000000000000000000000000000000000000000610d8c8161117d565b6108e8858585856113c4565b7f0000000000000000000000000000000000000000000000000000000000000000610dc28161117d565b610b14611421565b7f0000000000000000000000000000000000000000000000000000000000000000610df48161117d565b610e1e7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008805461077290612439565b6106f233838361145e565b7f0000000000000000000000000000000000000000000000000000000000000000610eb68161117d565b610ee07f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b7f0000000000000000000000000000000000000000000000000000000000000000610f358161117d565b610f5f7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b7f0000000000000000000000000000000000000000000000000000000000000000610fb48161117d565b610fde7f00000000000000000000000000000000000000000000000000000000000000008361122b565b506106f27f000000000000000000000000000000000000000000000000000000000000000033610aaa565b6000828152600360205260409020600101546110248161117d565b610a2983836112bf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b038616811480159061107d575061107b868261102e565b155b156110ce5761108c8185610b17565b158061109d575061109d86856107f3565b156110ce5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e6565b6109fc86868686866114f4565b336001600160a01b03841681148015906110fc57506110fa848261102e565b155b1561114d5761110b8184610b17565b158061111c575061111c84846107f3565b1561114d5760405163711bec9160e11b81526001600160a01b038083166004830152851660248201526044016109e6565b610a29848484611582565b60006001600160e01b03198216637965db0b60e01b14806106ae57506106ae826115ea565b610b14813361163a565b60026106f282826124fe565b6001600160a01b0384166111bd57604051632bfa23e760e11b8152600060048201526024016109e6565b610a29600085858585611673565b6001600160a01b0384166111f557604051632bfa23e760e11b8152600060048201526024016109e6565b6001600160a01b03851661121e57604051626a0d4560e21b8152600060048201526024016109e6565b6108e88585858585611673565b60006112378383610e49565b6112b75760008381526003602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561126f3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016106ae565b5060006106ae565b60006112cb8383610e49565b156112b75760008381526003602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016106ae565b6113346116c6565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166113a757604051626a0d4560e21b8152600060048201526024016109e6565b610add836000848460405180602001604052806000815250611673565b6001600160a01b0384166113ee57604051632bfa23e760e11b8152600060048201526024016109e6565b604080516001808252602082018690528183019081526060820185905260808201909252906109fc600087848487611673565b6114296116eb565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113613390565b6001600160a01b0382166114875760405162ced3e160e81b8152600060048201526024016109e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661151e57604051632bfa23e760e11b8152600060048201526024016109e6565b6001600160a01b03851661154757604051626a0d4560e21b8152600060048201526024016109e6565b604080516001808252602082018690528183019081526060820185905260808201909252906115798787848487611673565b50505050505050565b6001600160a01b0383166115ab57604051626a0d4560e21b8152600060048201526024016109e6565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916108e891879185908590611673565b60006001600160e01b03198216636cdb3d1360e11b148061161b57506001600160e01b031982166303a24d0760e21b145b806106ae57506301ffc9a760e01b6001600160e01b03198316146106ae565b6116448282610e49565b6106f25760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016109e6565b61167f8585858561170f565b6001600160a01b038416156108e857825133906001036116b857602084810151908401516116b183898985858961171b565b50506109fc565b6109fc818787878787611737565b60045460ff166116e957604051638dfc202b60e01b815260040160405180910390fd5b565b60045460ff16156116e95760405163d93c066560e01b815260040160405180910390fd5b610a298484848461185b565b6117258684610b17565b6109fc576109fc8686868686866119b5565b6001600160a01b0384163b156109fc5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061177b90899089908890889088906004016125be565b6020604051808303816000875af19250505080156117b6575060408051601f3d908101601f191682019092526117b39181019061261c565b60015b61181f573d8080156117e4576040519150601f19603f3d011682016040523d82523d6000602084013e6117e9565b606091505b50805160000361181757604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b805181602001fd5b6001600160e01b0319811663bc197c8160e01b1461157957604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b61186784848484611a9e565b6001600160a01b03841661191a576000805b835181101561190057600083828151811061189657611896612473565b6020026020010151905080600560008785815181106118b7576118b7612473565b6020026020010151815260200190815260200160002060008282546118dc9190612639565b909155506118ec90508184612639565b925050806118f99061249f565b9050611879565b5080600660008282546119139190612639565b9091555050505b6001600160a01b038316610a29576000805b83518110156119a457600083828151811061194957611949612473565b60200260200101519050806005600087858151811061196a5761196a612473565b60200260200101518152602001908152602001600020600082825403925050819055508083019250508061199d9061249f565b905061192c565b506006805491909103905550505050565b6001600160a01b0384163b156109fc5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906119f9908990899088908890889060040161264c565b6020604051808303816000875af1925050508015611a34575060408051601f3d908101601f19168201909252611a319181019061261c565b60015b611a62573d8080156117e4576040519150601f19603f3d011682016040523d82523d6000602084013e6117e9565b6001600160e01b0319811663f23a6e6160e01b1461157957604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e6565b611aa66116eb565b610a29848484848051825114611adc5781518151604051635b05999160e01b8152600481019290925260248201526044016109e6565b3360005b8351811015611beb576020818102858101820151908501909101516001600160a01b03881615611b93576000828152602081815260408083206001600160a01b038c16845290915290205481811015611b6c576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016109e6565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615611bd8576000828152602081815260408083206001600160a01b038b16845290915281208054839290611bd2908490612639565b90915550505b505080611be49061249f565b9050611ae0565b508251600103611c6c5760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611c5d929190918252602082015260400190565b60405180910390a450506108e8565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611cbb929190612691565b60405180910390a45050505050565b80356001600160a01b0381168114611ce157600080fd5b919050565b60008060408385031215611cf957600080fd5b611d0283611cca565b946020939093013593505050565b6001600160e01b031981168114610b1457600080fd5b600060208284031215611d3857600080fd5b8135611d4381611d10565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8957611d89611d4a565b604052919050565b600067ffffffffffffffff831115611dab57611dab611d4a565b611dbe601f8401601f1916602001611d60565b9050828152838383011115611dd257600080fd5b828260208301376000602084830101529392505050565b600060208284031215611dfb57600080fd5b813567ffffffffffffffff811115611e1257600080fd5b8201601f81018413611e2357600080fd5b611e3284823560208401611d91565b949350505050565b80358015158114611ce157600080fd5b60008060408385031215611e5d57600080fd5b82359150611e6d60208401611e3a565b90509250929050565b6000815180845260005b81811015611e9c57602081850181015186830182015201611e80565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d436020830184611e76565b600060208284031215611ee157600080fd5b5035919050565b600067ffffffffffffffff821115611f0257611f02611d4a565b5060051b60200190565b600082601f830112611f1d57600080fd5b81356020611f32611f2d83611ee8565b611d60565b82815260059290921b84018101918181019086841115611f5157600080fd5b8286015b84811015611f6c5780358352918301918301611f55565b509695505050505050565b600082601f830112611f8857600080fd5b611d4383833560208501611d91565b60008060008060808587031215611fad57600080fd5b611fb685611cca565b9350602085013567ffffffffffffffff80821115611fd357600080fd5b611fdf88838901611f0c565b94506040870135915080821115611ff557600080fd5b61200188838901611f0c565b9350606087013591508082111561201757600080fd5b5061202487828801611f77565b91505092959194509250565b6000806040838503121561204357600080fd5b50508035926020909101359150565b600080600080600060a0868803121561206a57600080fd5b61207386611cca565b945061208160208701611cca565b9350604086013567ffffffffffffffff8082111561209e57600080fd5b6120aa89838a01611f0c565b945060608801359150808211156120c057600080fd5b6120cc89838a01611f0c565b935060808801359150808211156120e257600080fd5b506120ef88828901611f77565b9150509295509295909350565b6000806040838503121561210f57600080fd5b82359150611e6d60208401611cca565b60006020828403121561213157600080fd5b611d4382611cca565b6000806040838503121561214d57600080fd5b823567ffffffffffffffff8082111561216557600080fd5b818501915085601f83011261217957600080fd5b81356020612189611f2d83611ee8565b82815260059290921b840181019181810190898411156121a857600080fd5b948201945b838610156121cd576121be86611cca565b825294820194908201906121ad565b965050860135925050808211156121e357600080fd5b506121f085828601611f0c565b9150509250929050565b600081518084526020808501945080840160005b8381101561222a5781518752958201959082019060010161220e565b509495945050505050565b602081526000611d4360208301846121fa565b60008060006060848603121561225d57600080fd5b61226684611cca565b92506020840135915061227b60408501611e3a565b90509250925092565b60008060006060848603121561229957600080fd5b6122a284611cca565b9250602084013567ffffffffffffffff808211156122bf57600080fd5b6122cb87838801611f0c565b935060408601359150808211156122e157600080fd5b506122ee86828701611f0c565b9150509250925092565b6000806000806080858703121561230e57600080fd5b61231785611cca565b93506020850135925060408501359150606085013567ffffffffffffffff81111561234157600080fd5b61202487828801611f77565b6000806040838503121561236057600080fd5b61236983611cca565b9150611e6d60208401611e3a565b6000806040838503121561238a57600080fd5b61239383611cca565b9150611e6d60208401611cca565b600080600080600060a086880312156123b957600080fd5b6123c286611cca565b94506123d060208701611cca565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123fa57600080fd5b6120ef88828901611f77565b60008060006060848603121561241b57600080fd5b61242484611cca565b95602085013595506040909401359392505050565b600181811c9082168061244d57607f821691505b60208210810361246d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016124b1576124b1612489565b5060010190565b601f821115610add57600081815260208120601f850160051c810160208610156124df5750805b601f850160051c820191505b818110156109fc578281556001016124eb565b815167ffffffffffffffff81111561251857612518611d4a565b61252c816125268454612439565b846124b8565b602080601f83116001811461256157600084156125495750858301515b600019600386901b1c1916600185901b1785556109fc565b600085815260208120601f198616915b8281101561259057888601518255948401946001909101908401612571565b50858210156125ae5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0386811682528516602082015260a0604082018190526000906125ea908301866121fa565b82810360608401526125fc81866121fa565b905082810360808401526126108185611e76565b98975050505050505050565b60006020828403121561262e57600080fd5b8151611d4381611d10565b808201808211156106ae576106ae612489565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061268690830184611e76565b979650505050505050565b6040815260006126a460408301856121fa565b82810360208401526126b681856121fa565b9594505050505056fea26469706673582212209bbed32d6721c64ceba3b65442c0f787ab50f64f5b2a41faa37ab3dca6a0375c64736f6c63430008140033",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "gETH is chain-agnostic, meaning it can be used on any evm chain (given the correct name and symbol).gETH is immutable, it cannot be upgraded.gETH is a special ERC1155 contract with additional functionalities: gETHMiddlewares: * Most important functionality gETH provides: * Allowing any other contract to provide additional functionality * around the balance and price data, such as using an ID like ERC20. * This addition effectively result in changes in * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() * functions, reasoning is in the comments. Avoiders: * If one wants to remain unbound from gETHMiddlewares, * it can be done so by calling \"avoidMiddlewares\" function. PricePerShare: * Keeping track of the ratio between the derivative * and the underlaying staked asset, Ether. Denominator: * ERC1155 does not have decimals and it is not wise to use the name convention * but we need to provide some information on how to denominate the balances, price, etc.review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "gETHZeroId()": [
        {
          "custom:section": "** ERRORS **"
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PriceUpdated(uint256,uint256,uint256)": {
        "custom:section": "** EVENTS **"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "avoidMiddlewares(uint256,bool)": {
        "details": "ADDED for gETH*",
        "params": {
          "isAvoid": "true: restrict middlewares, false: allow middlewares"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "CHANGED for gETHADDED \"((!(isMiddleware(sender, id))) || (isAvoider(account, id)))\" pass conditionSee ERC1155Burnable burn: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L13C1-L19C6"
      },
      "constructor": {
        "params": {
          "_name": "chain specific name: Geode Staked Ether, geode Staked Avax etc.",
          "_symbol": "chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.*"
        }
      },
      "denominator()": {
        "details": "ERC1155 does not have a decimals, and it is not wise to use the same nameADDED for gETH"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isAvoider(address,uint256)": {
        "details": "ADDED for gETH*",
        "params": {
          "account": "the potential avoider"
        }
      },
      "isMiddleware(address,uint256)": {
        "details": "ADDED for gETH"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pricePerShare(uint256)": {
        "details": "ADDED for gETH",
        "returns": {
          "_0": "price of the derivative in terms of underlying token, Ether"
        }
      },
      "priceUpdateTimestamp(uint256)": {
        "details": "ADDED for gETH",
        "returns": {
          "_0": "timestamp of the latest price update for given ID"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "CHANGED for gETHADDED \"((!isMiddleware(sender, id)) || isAvoider(from, id))\" pass conditionSee ERC1155 safeTransferFrom: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cffb2f1ddcd87efd68effc92cfd336c5145acabd/contracts/token/ERC1155/ERC1155.sol#L109C29-L109C29"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setMiddleware(address,uint256,bool)": {
        "details": "ADDED for gETH",
        "params": {
          "isSet": "true: sets as a middleware, false: unsets",
          "middleware": "Address of the contract that will act as a middleware"
        }
      },
      "setPricePerShare(uint256,uint256)": {
        "details": "ADDED for gETH"
      },
      "totalSupply()": {
        "details": "Total value of tokens."
      },
      "totalSupply(uint256)": {
        "details": "Total value of tokens in with a given id."
      },
      "transferMiddlewareManagerRole(address)": {
        "details": "MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferMinterRole(address)": {
        "details": "MINTER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferOracleRole(address)": {
        "details": "ORACLE is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferPauserRole(address)": {
        "details": "PAUSER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferUriSetterRole(address)": {
        "details": "URI_SETTER is basically a superuser, there can be only 1 at a given time,intended as \"Governance/DAO\""
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "DENOMINATOR": {
        "custom:section": "** CONSTANTS **"
      },
      "_avoiders": {
        "details": "ADDED for gETH*"
      },
      "_middlewares": {
        "details": "There can be multiple Middlewares for 1 staking pool.ADDED for gETH*"
      },
      "_pricePerShare": {
        "details": "Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETHADDED for gETH*"
      },
      "_priceUpdateTimestamp": {
        "details": "ADDED for gETH*"
      },
      "name": {
        "custom:section": "** VARIABLES **"
      }
    },
    "title": "gETH : Geodefi Liquid Staking Derivatives",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "avoidMiddlewares(uint256,bool)": {
        "notice": "Restrict any affect of middlewares on the tokens of caller"
      },
      "constructor": {
        "notice": "Sets name, symbol, uri and grants necessary roles."
      },
      "denominator()": {
        "notice": "a centralized denominator for all contract using gETH"
      },
      "isAvoider(address,uint256)": {
        "notice": "Checks if the given address restricts the affect of the middlewares on their gETH"
      },
      "isMiddleware(address,uint256)": {
        "notice": "Check if an address is approved as a middleware for an ID"
      },
      "setMiddleware(address,uint256,bool)": {
        "notice": "Set an address of a contract that will act as a middleware on gETH contract for a specific ID"
      },
      "setPricePerShare(uint256,uint256)": {
        "notice": "Only ORACLE can call this function and set price"
      },
      "transferMiddlewareManagerRole(address)": {
        "notice": "transfers the authorized party for middleware management"
      },
      "transferMinterRole(address)": {
        "notice": "transfers the authorized party for Minting operations related to minting"
      },
      "transferOracleRole(address)": {
        "notice": "transfers the authorized party for Oracle operations related to pricing"
      },
      "transferPauserRole(address)": {
        "notice": "transfers the authorized party for Pausing operations."
      },
      "transferUriSetterRole(address)": {
        "notice": "transfers the authorized party for setting a new uri."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20481,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20487,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20489,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1398,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1393_storage)"
      },
      {
        "astId": 3182,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 21608,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21610,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_totalSupplyAll",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 19305,
        "contract": "contracts/gETH.sol:gETH",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 19307,
        "contract": "contracts/gETH.sol:gETH",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 19314,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_middlewares",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 19321,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_avoiders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 19326,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_pricePerShare",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19331,
        "contract": "contracts/gETH.sol:gETH",
        "label": "_priceUpdateTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1393_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1393_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)1393_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1390,
            "contract": "contracts/gETH.sol:gETH",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1392,
            "contract": "contracts/gETH.sol:gETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}