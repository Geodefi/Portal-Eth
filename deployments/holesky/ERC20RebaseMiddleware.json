{
  "address": "0x4f60997B891557692200ac1963363394D5000122",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC1155_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gETH_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71e4aa8163d2a2d195a0ac4aa2d5061d03b1500f24ad46f5b86d75e51aeca80f",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0x4f60997B891557692200ac1963363394D5000122",
    "transactionIndex": 2,
    "gasUsed": "1070845",
    "logsBloom": "0x
    "blockHash": "0x21fbf8e861471b28bf8d8193c75b105e52b9417078ab635983ee718752103bd6",
    "transactionHash": "0x71e4aa8163d2a2d195a0ac4aa2d5061d03b1500f24ad46f5b86d75e51aeca80f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 852082,
        "transactionHash": "0x71e4aa8163d2a2d195a0ac4aa2d5061d03b1500f24ad46f5b86d75e51aeca80f",
        "address": "0x4f60997B891557692200ac1963363394D5000122",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x21fbf8e861471b28bf8d8193c75b105e52b9417078ab635983ee718752103bd6"
      }
    ],
    "blockNumber": 852082,
    "cumulativeGasUsed": "1112845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cfc92d910e56f99740a6d4737a3b72cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1155_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gETH_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract should only be used for user interaction when ERC1155 is not an option.As a known bug, not all Transfer events are logged here. Please listen the underlying ERC1155 for the correct data.differences between ERC20RebaseMiddleware and ERC20Middleware can be seen observed at: -> totalSupply, balanceOf, _update. diffchecker: https://www.diffchecker.com/VQPmW62g/decimals is 18 onlyif erc1155.denominator = 1e18\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Same as ERC20Middleware, but balances represent underlying balances, instead of ERC1155 balances. which means it represents the staked ether amount, instead of gETH amount.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/middlewares/ERC20RebaseMiddleware.sol\":\"ERC20RebaseMiddleware\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0x9d699aeaf6da35d188a5495eec188b28a990e09bd04fa7701d28c4ff9afba801\",\"license\":\"MIT\"},\"contracts/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.20;\\n\\nlibrary BytesLib {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  ) internal pure returns (bytes memory) {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      // Get a location of some free memory and store it in tempBytes as\\n      // Solidity does for memory variables.\\n      tempBytes := mload(0x40)\\n\\n      // Store the length of the first bytes array at the beginning of\\n      // the memory for tempBytes.\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      // Maintain a memory counter for the current write location in the\\n      // temp bytes array by adding the 32 bytes for the array length to\\n      // the starting location.\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the\\n      // first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data,\\n        // 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\n        // at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Add the length of _postBytes to the current length of tempBytes\\n      // and store it as the new length in the first 32 bytes of the\\n      // tempBytes memory.\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the\\n      // actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined\\n      // length of the arrays.\\n      end := add(mc, length)\\n\\n      for {\\n        let cc := add(_postBytes, 0x20)\\n      } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Update the free-memory pointer by padding our last write location\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n      // next 32 byte block, then round down to the nearest multiple of\\n      // 32. If the sum of the length of the two arrays is zero then add\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          not(31) // Round down to the nearest 32 bytes.\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\n      // of the array. (We don't need to use the offset into the slot\\n      // because arrays use the entire slot.)\\n      let fslot := sload(_preBytes.slot)\\n      // Arrays of 31 bytes or less have an even value in their slot,\\n      // while longer arrays have an odd value. The actual length is\\n      // the slot divided by two for odd values, and the lowest order\\n      // byte divided by two for even values.\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\n      // two to get the length. If the slot is odd, bitwise and the slot\\n      // with -1 and divide by two.\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n      // slength can contain both the length and contents of the array\\n      // if length < 32 bytes so let's prepare for that\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        // Since the new array still fits in the slot, we just need to\\n        // update the contents of the slot.\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n        sstore(\\n          _preBytes.slot,\\n          // all the modifications to the slot are inside this\\n          // next block\\n          add(\\n            // we can just add to the slot contents because the\\n            // bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory\\n                  mload(add(_postBytes, 0x20)),\\n                  // zero all bytes to the right\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // increase length by the double of the memory\\n              // bytes length\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        // The stored value fits in the slot, but the combined value\\n        // will exceed it.\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // The contents of the _postBytes array start 32 bytes into\\n        // the structure. Our first read should obtain the `submod`\\n        // bytes that can fit into the unused space in the last word\\n        // of the stored array. To get this, we read 32 bytes starting\\n        // from `submod`, so the data we read overlaps with the array\\n        // contents by `submod` bytes. Masking the lowest-order\\n        // `submod` bytes allows us to add that value directly to the\\n        // stored value.\\n\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in\\n        // case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        // cb is a circuit breaker in the for loop since there's\\n        //  no said feature for inline assembly loops\\n        // cb = 1 - don't breaker\\n        // cb = 0 - break\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for {\\n          let cc := add(_postBytes, 0x20)\\n          // the next line is the loop condition:\\n          // while(uint256(mc < end) + cb == 2)\\n        } eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // if any of these checks fails then arrays are not equal\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  ) internal view returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      // we know _preBytes_offset is 0\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(slength, mlength)\\n      case 1 {\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // blank the last byte which is the length\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n            let cb := 1\\n\\n            // get the keccak hash to get the contents of the array\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // the next line is the loop condition:\\n            // while(uint256(mc < end) + cb == 2)\\n            for {\\n\\n            } eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x4ee3f6ef85baa41794fc1519522f7c135becd0e267980eadc68dd643e52b59c7\",\"license\":\"Unlicense\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/middlewares/IgETHMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IgETHMiddleware {\\n  function initialize(uint256 id_, address erc1155_, bytes memory data) external;\\n\\n  function ERC1155() external view returns (address);\\n\\n  function ERC1155_ID() external view returns (uint256);\\n\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b94e7cf38487d607c720d311578fa0b777a75050113b3533b8e4e22fe6ab61c\",\"license\":\"MIT\"},\"contracts/middlewares/ERC20RebaseMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n// external - interfaces\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n// external - contracts\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n// internal - globals\\nimport {gETH_DENOMINATOR} from \\\"../globals/macros.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../interfaces/IgETH.sol\\\";\\nimport {IgETHMiddleware} from \\\"../interfaces/middlewares/IgETHMiddleware.sol\\\";\\n// internal - libraries\\nimport {BytesLib} from \\\"../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @notice Same as ERC20Middleware, but balances represent underlying balances, instead of ERC1155 balances.\\n * which means it represents the staked ether amount, instead of gETH amount.\\n *\\n * @dev This contract should only be used for user interaction when ERC1155 is not an option.\\n * @dev As a known bug, not all Transfer events are logged here. Please listen the underlying ERC1155 for the correct data.\\n *\\n * @dev differences between ERC20RebaseMiddleware and ERC20Middleware can be seen observed at:\\n * -> totalSupply, balanceOf, _update.\\n *\\n * diffchecker: https://www.diffchecker.com/VQPmW62g/\\n *\\n * @dev decimals is 18 onlyif erc1155.denominator = 1e18\\n */\\ncontract ERC20RebaseMiddleware is\\n  Initializable,\\n  ContextUpgradeable,\\n  IgETHMiddleware,\\n  IERC20,\\n  IERC20Metadata,\\n  IERC20Errors\\n{\\n  /// @custom:storage-location erc7201:geode.storage.ERC20RebaseMiddleware\\n  struct ERC20RebaseMiddlewareStorage {\\n    // mapping(address account => uint256) _balances; -> use ERC1155\\n    mapping(address account => mapping(address spender => uint256)) _allowances;\\n    // uint256 _totalSupply; -> use ERC1155\\n    string _name;\\n    string _symbol;\\n    IgETH ERC1155;\\n    uint256 ERC1155_ID;\\n  }\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.ERC20RebaseMiddleware\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant ERC20RebaseMiddlewareStorageLocation =\\n    0x033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db2500;\\n\\n  function _getERC20RebaseMiddlewareStorage()\\n    private\\n    pure\\n    returns (ERC20RebaseMiddlewareStorage storage $)\\n  {\\n    assembly {\\n      $.slot := ERC20RebaseMiddlewareStorageLocation\\n    }\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    uint256 id_,\\n    address gETH_,\\n    bytes calldata data\\n  ) public virtual override initializer {\\n    uint256 nameLen = uint256(bytes32(BytesLib.slice(data, 0, 32)));\\n    __ERC20RebaseMiddleware_init(\\n      id_,\\n      gETH_,\\n      string(BytesLib.slice(data, 32, nameLen)),\\n      string(BytesLib.slice(data, 32 + nameLen, data.length - (32 + nameLen)))\\n    );\\n  }\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol} based on provided data:\\n   * * First 32 bytes indicate the lenght of the name, one therefore can find out\\n   * * which byte the name ends and symbol starts.\\n   */\\n  function __ERC20RebaseMiddleware_init(\\n    uint256 id_,\\n    address gETH_,\\n    string memory name_,\\n    string memory symbol_\\n  ) internal onlyInitializing {\\n    __ERC20RebaseMiddleware_init_unchained(id_, gETH_, name_, symbol_);\\n  }\\n\\n  function __ERC20RebaseMiddleware_init_unchained(\\n    uint256 id_,\\n    address gETH_,\\n    string memory name_,\\n    string memory symbol_\\n  ) internal onlyInitializing {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    $._name = name_;\\n    $._symbol = symbol_;\\n    $.ERC1155 = IgETH(gETH_);\\n    $.ERC1155_ID = id_;\\n  }\\n\\n  function name() public view virtual returns (string memory) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return $._name;\\n  }\\n\\n  function symbol() public view virtual returns (string memory) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return $._symbol;\\n  }\\n\\n  function ERC1155() public view virtual override returns (address) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return address($.ERC1155);\\n  }\\n\\n  function ERC1155_ID() public view virtual override returns (uint256) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return $.ERC1155_ID;\\n  }\\n\\n  function pricePerShare() public view virtual override returns (uint256) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return $.ERC1155.pricePerShare($.ERC1155_ID);\\n  }\\n\\n  function decimals() public view virtual returns (uint8) {\\n    return 18;\\n  }\\n\\n  function totalSupply() public view virtual returns (uint256) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n\\n    uint256 id = $.ERC1155_ID;\\n    return ($.ERC1155.totalSupply(id) * $.ERC1155.pricePerShare(id)) / gETH_DENOMINATOR;\\n  }\\n\\n  function balanceOf(address account) public view virtual returns (uint256) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n\\n    uint256 id = $.ERC1155_ID;\\n    return ($.ERC1155.balanceOf(account, id) * $.ERC1155.pricePerShare(id)) / gETH_DENOMINATOR;\\n  }\\n\\n  function transfer(address to, uint256 value) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, value);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) public view virtual returns (uint256) {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    return $._allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 value) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, value);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, value);\\n    _transfer(from, to, value);\\n    return true;\\n  }\\n\\n  function _transfer(address from, address to, uint256 value) internal {\\n    if (from == address(0)) {\\n      revert ERC20InvalidSender(address(0));\\n    }\\n    if (to == address(0)) {\\n      revert ERC20InvalidReceiver(address(0));\\n    }\\n    _update(from, to, value);\\n  }\\n\\n  function _update(address from, address to, uint256 value) internal virtual {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n\\n    uint256 fromBalance = balanceOf(from);\\n    if (fromBalance < value) {\\n      revert ERC20InsufficientBalance(from, fromBalance, value);\\n    }\\n\\n    uint256 id = $.ERC1155_ID;\\n    uint256 transferAmount = (value * gETH_DENOMINATOR) / $.ERC1155.pricePerShare(id);\\n    $.ERC1155.safeTransferFrom(from, to, id, transferAmount, \\\"\\\");\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(address owner, address spender, uint256 value) internal {\\n    _approve(owner, spender, value, true);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    bool emitEvent\\n  ) internal virtual {\\n    ERC20RebaseMiddlewareStorage storage $ = _getERC20RebaseMiddlewareStorage();\\n    if (owner == address(0)) {\\n      revert ERC20InvalidApprover(address(0));\\n    }\\n    if (spender == address(0)) {\\n      revert ERC20InvalidSpender(address(0));\\n    }\\n    $._allowances[owner][spender] = value;\\n    if (emitEvent) {\\n      emit Approval(owner, spender, value);\\n    }\\n  }\\n\\n  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      if (currentAllowance < value) {\\n        revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n      }\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - value, false);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc8b59b888cb81935865b18b53e59d1e479c29c702f7933d33399a662edbcfe64\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635c2f8aa01161008c57806399530b061161006657806399530b06146101c9578063a9059cbb146101d1578063dd62ed3e146101e4578063e209b646146101f757600080fd5b80635c2f8aa01461018757806370a08231146101ae57806395d89b41146101c157600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd1461012b5780632d2554711461013e578063313ce56714610178575b600080fd5b6100dc61020c565b6040516100e99190610ddb565b60405180910390f35b610105610100366004610e45565b6102cf565b60405190151581526020016100e9565b61011d6102e9565b6040519081526020016100e9565b610105610139366004610e6f565b610407565b7f033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db2503546040516001600160a01b0390911681526020016100e9565b604051601281526020016100e9565b7f033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db25045461011d565b61011d6101bc366004610eab565b61042b565b6100dc610550565b61011d61058f565b6101056101df366004610e45565b61061a565b61011d6101f2366004610ecd565b610628565b61020a610205366004610f00565b610660565b005b7f033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db250180546060916000805160206111988339815191529161024b90610f87565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610f87565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b505050505091505090565b6000336102dd81858561086c565b60019150505b92915050565b600080600080516020611198833981519152600481810154600383015460405163f759cc3b60e01b815292830182905292935091670de0b6b3a7640000916001600160a01b039091169063f759cc3b90602401602060405180830381865afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190610fc1565b600384015460405163bd85b03960e01b8152600481018590526001600160a01b039091169063bd85b03990602401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610fc1565b6103f69190610ff0565b6104009190611007565b9250505090565b60003361041585828561087e565b6104208585856108e9565b506001949350505050565b600080600080516020611198833981519152600481810154600383015460405163f759cc3b60e01b815292830182905292935091670de0b6b3a7640000916001600160a01b039091169063f759cc3b90602401602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190610fc1565b6003840154604051627eeac760e11b81526001600160a01b038881166004830152602482018690529091169062fdd58e90604401602060405180830381865afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190610fc1565b61053e9190610ff0565b6105489190611007565b949350505050565b7f033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db250280546060916000805160206111988339815191529161024b90610f87565b600080600080516020611198833981519152600381015460048083015460405163f759cc3b60e01b8152918201529192506001600160a01b03169063f759cc3b90602401602060405180830381865afa1580156105f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106149190610fc1565b91505090565b6000336102dd8185856108e9565b6001600160a01b0391821660009081526000805160206111988339815191526020908152604080832093909416825291909152205490565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156106a65750825b905060008267ffffffffffffffff1660011480156106c35750303b155b9050811580156106d1575080155b156106ef5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561071957845460ff60401b1916600160401b1785555b600061075d88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250602091506109489050565b61076690611029565b60001c905061081a8a8a6107b48b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250602092508891506109489050565b6108158c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107fb92508991506020905061104d565b61080688602061104d565b610810908f611060565b610948565b610a55565b50831561086157845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6108798383836001610a69565b505050565b600061088a8484610628565b905060001981146108e357818110156108d457604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6108e384848484036000610a69565b50505050565b6001600160a01b03831661091357604051634b637e8f60e11b8152600060048201526024016108cb565b6001600160a01b03821661093d5760405163ec442f0560e01b8152600060048201526024016108cb565b610879838383610b4d565b60608161095681601f61104d565b10156109955760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016108cb565b61099f828461104d565b845110156109e35760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016108cb565b606082158015610a025760405191506000825260208201604052610a4c565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610a3b578051835260209283019201610a23565b5050858452601f01601f1916604052505b50949350505050565b610a5d610d13565b6108e384848484610d5e565b6000805160206111988339815191526001600160a01b038516610aa25760405163e602df0560e01b8152600060048201526024016108cb565b6001600160a01b038416610acc57604051634a1406b160e11b8152600060048201526024016108cb565b6001600160a01b038086166000908152602083815260408083209388168352929052208390558115610b4657836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051610b3d91815260200190565b60405180910390a35b5050505050565b6000805160206111988339815191526000610b678561042b565b905082811015610ba35760405163391434e360e21b81526001600160a01b038616600482015260248101829052604481018490526064016108cb565b600482810154600384015460405163f759cc3b60e01b815292830182905290916000916001600160a01b03169063f759cc3b90602401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a9190610fc1565b610c2c670de0b6b3a764000087610ff0565b610c369190611007565b6003850154604051637921219560e11b81526001600160a01b038a811660048301528981166024830152604482018690526064820184905260a06084830152600060a483015292935091169063f242432a9060c401600060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b50505050856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef87604051610d0291815260200190565b60405180910390a350505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d5c57604051631afcd79f60e31b815260040160405180910390fd5b565b610d66610d13565b6000805160206111988339815191527f033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db2501610da084826110d7565b5060028101610daf83826110d7565b506003810180546001600160a01b0319166001600160a01b039590951694909417909355505060040155565b600060208083528351808285015260005b81811015610e0857858101830151858201604001528201610dec565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610e4057600080fd5b919050565b60008060408385031215610e5857600080fd5b610e6183610e29565b946020939093013593505050565b600080600060608486031215610e8457600080fd5b610e8d84610e29565b9250610e9b60208501610e29565b9150604084013590509250925092565b600060208284031215610ebd57600080fd5b610ec682610e29565b9392505050565b60008060408385031215610ee057600080fd5b610ee983610e29565b9150610ef760208401610e29565b90509250929050565b60008060008060608587031215610f1657600080fd5b84359350610f2660208601610e29565b9250604085013567ffffffffffffffff80821115610f4357600080fd5b818701915087601f830112610f5757600080fd5b813581811115610f6657600080fd5b886020828501011115610f7857600080fd5b95989497505060200194505050565b600181811c90821680610f9b57607f821691505b602082108103610fbb57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610fd357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102e3576102e3610fda565b60008261102457634e487b7160e01b600052601260045260246000fd5b500490565b80516020808301519190811015610fbb5760001960209190910360031b1b16919050565b808201808211156102e3576102e3610fda565b818103818111156102e3576102e3610fda565b634e487b7160e01b600052604160045260246000fd5b601f82111561087957600081815260208120601f850160051c810160208610156110b05750805b601f850160051c820191505b818110156110cf578281556001016110bc565b505050505050565b815167ffffffffffffffff8111156110f1576110f1611073565b611105816110ff8454610f87565b84611089565b602080601f83116001811461113a57600084156111225750858301515b600019600386901b1c1916600185901b1785556110cf565b600085815260208120601f198616915b828110156111695788860151825594840194600190910190840161114a565b50858210156111875787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe033cdebea869703c4621de9e95304f18ae23301f1ffc0c9d2917741e54db2500a26469706673582212208bedefa35dcfe9dc25806aa513e694b665b63fc148827fcce68a212b0dd16e5d64736f6c63430008140033",
  "devdoc": {
    "details": "This contract should only be used for user interaction when ERC1155 is not an option.As a known bug, not all Transfer events are logged here. Please listen the underlying ERC1155 for the correct data.differences between ERC20RebaseMiddleware and ERC20Middleware can be seen observed at: -> totalSupply, balanceOf, _update. diffchecker: https://www.diffchecker.com/VQPmW62g/decimals is 18 onlyif erc1155.denominator = 1e18",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the value of tokens owned by `account`."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the value of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Same as ERC20Middleware, but balances represent underlying balances, instead of ERC1155 balances. which means it represents the staked ether amount, instead of gETH amount.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}