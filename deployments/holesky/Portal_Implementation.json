{
  "address": "0xBba7134FF9FA0F760992b869cA1D1c2b32663289",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "Alienated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitDelay",
          "type": "uint256"
        }
      ],
      "name": "BeaconDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ContractVersionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "Delegation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtgETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedgETH",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "FallbackOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "FeeSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "proofs",
          "type": "bytes"
        }
      ],
      "name": "FeeTheft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        }
      ],
      "name": "IdInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "InfrastructureFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initiationDeposit",
          "type": "uint256"
        }
      ],
      "name": "InitiationDepositSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "MaintainerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "MiddlewareDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "priceMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balanceMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "monopolyThreshold",
          "type": "uint256"
        }
      ],
      "name": "OracleReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "packageType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "PackageDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Prisoned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "StakeProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "ValidatorPeriodSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorVerificationIndex",
          "type": "uint256"
        }
      ],
      "name": "VerificationIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        }
      ],
      "name": "VisibilitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "YieldDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldReceiver",
          "type": "address"
        }
      ],
      "name": "YieldReceiverSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GeodeParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approvedUpgrade",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "senateExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "packageType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "StakeParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "gETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oraclePosition",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validatorsIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monopolyThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beaconDelayEntry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beaconDelayExit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initiationDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyPriceIncreaseLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyPriceDecreaseLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "allIdsByType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "allIdsByTypeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pk",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "beaconBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "balanceProof",
          "type": "bytes32[]"
        }
      ],
      "name": "blameExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pk",
          "type": "bytes"
        }
      ],
      "name": "blameProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "canStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "changeIdCONTROLLER",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "changeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "changeSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "decreaseWalletBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "operatorIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allowances",
          "type": "uint256[]"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "deployLiquidityPackage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "priceProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "mingETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boughtgETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedgETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pk",
          "type": "bytes"
        }
      ],
      "name": "finalizeExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "generateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalancesMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "getInfrastructureFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_param",
          "type": "bytes32"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getMaintenanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "getPackageVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "CONTROLLER",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TYPE",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "NAME",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proposal",
          "name": "proposal",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "state",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "createdAt",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "period",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operatorId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operatorFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "infrastructureFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature31",
              "type": "bytes"
            }
          ],
          "internalType": "struct Validator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getValidatorPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "increaseWalletBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_senate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle_position",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "versionName",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validatorPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        }
      ],
      "name": "initiateOperator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "middlewareVersion",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "NAME",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "middleware_data",
          "type": "bytes"
        },
        {
          "internalType": "bool[3]",
          "name": "config",
          "type": "bool[3]"
        }
      ],
      "name": "initiatePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "isMiddleware",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "isMintingAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "isPriceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "isPrisoned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "isPrivatePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isolationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "operatorAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausegETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "priceProof",
          "type": "bytes32[]"
        }
      ],
      "name": "priceSync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "poolIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "priceProofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "priceSyncBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_TYPE",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_NAME",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures1",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures31",
          "type": "bytes[]"
        }
      ],
      "name": "proposeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "packageType",
          "type": "uint256"
        }
      ],
      "name": "pushUpgrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readAddressArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readBytesArray",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "readUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "readUintArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "feeThefts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "regulateOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "releasePrisoned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "priceMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balanceMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "allValidatorsCount",
          "type": "uint256"
        }
      ],
      "name": "reportBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pk",
          "type": "bytes"
        }
      ],
      "name": "requestExit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSenate",
          "type": "address"
        }
      ],
      "name": "rescueSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exit",
          "type": "uint256"
        }
      ],
      "name": "setBeaconDelays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fallbackThreshold",
          "type": "uint256"
        }
      ],
      "name": "setFallbackOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setInfrastructureFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInitiationDeposit",
          "type": "uint256"
        }
      ],
      "name": "setInitiationDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "makePrivate",
          "type": "bool"
        }
      ],
      "name": "setPoolVisibility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "whitelist",
          "type": "address"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldReceiver",
          "type": "address"
        }
      ],
      "name": "setYieldReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "switchMaintenanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "switchValidatorPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausegETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "validatorVerificationIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "alienatedPubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "updateVerificationIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x932b87e0fbacd39292efba8a114227182bcd57abd3e79558dce2ac1091aed1a7",
  "receipt": {
    "to": null,
    "from": "0x7B6fA217a374826FCa50dccB87041AE0e34Ba1f5",
    "contractAddress": "0xBba7134FF9FA0F760992b869cA1D1c2b32663289",
    "transactionIndex": 0,
    "gasUsed": "4681503",
    "logsBloom": "0x
    "blockHash": "0x74524e85e8165275f690d8e71aad66829466be9f8dac6a35d0a4324c389f961d",
    "transactionHash": "0x932b87e0fbacd39292efba8a114227182bcd57abd3e79558dce2ac1091aed1a7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1226894,
        "transactionHash": "0x932b87e0fbacd39292efba8a114227182bcd57abd3e79558dce2ac1091aed1a7",
        "address": "0xBba7134FF9FA0F760992b869cA1D1c2b32663289",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x74524e85e8165275f690d8e71aad66829466be9f8dac6a35d0a4324c389f961d"
      }
    ],
    "blockNumber": 1226894,
    "cumulativeGasUsed": "4681503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f37d23c7f369dde887557e5b9b00ccf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"Alienated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitDelay\",\"type\":\"uint256\"}],\"name\":\"BeaconDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ContractVersionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"Delegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtgETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedgETH\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"FallbackOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"FeeSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proofs\",\"type\":\"bytes\"}],\"name\":\"FeeTheft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"}],\"name\":\"IdInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InfrastructureFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiationDeposit\",\"type\":\"uint256\"}],\"name\":\"InitiationDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"MiddlewareDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"priceMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balanceMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monopolyThreshold\",\"type\":\"uint256\"}],\"name\":\"OracleReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"PackageDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Prisoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"StakeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"ValidatorPeriodSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorVerificationIndex\",\"type\":\"uint256\"}],\"name\":\"VerificationIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"name\":\"VisibilitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldReceiver\",\"type\":\"address\"}],\"name\":\"YieldReceiverSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GeodeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvedUpgrade\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senateExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oraclePosition\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatorsIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monopolyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beaconDelayEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beaconDelayExit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initiationDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyPriceIncreaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyPriceDecreaseLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"allIdsByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"allIdsByTypeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pk\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"beaconBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"balanceProof\",\"type\":\"bytes32[]\"}],\"name\":\"blameExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pk\",\"type\":\"bytes\"}],\"name\":\"blameProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"changeIdCONTROLLER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"changeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"changeSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseWalletBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"operatorIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"deployLiquidityPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"mingETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtgETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedgETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pk\",\"type\":\"bytes\"}],\"name\":\"finalizeExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"generateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancesMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getInfrastructureFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_param\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMaintenanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getPackageVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"state\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"infrastructureFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature31\",\"type\":\"bytes\"}],\"internalType\":\"struct Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getValidatorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"increaseWalletBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_senate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle_position\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"versionName\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"initiateOperator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"middlewareVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"NAME\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"middleware_data\",\"type\":\"bytes\"},{\"internalType\":\"bool[3]\",\"name\":\"config\",\"type\":\"bool[3]\"}],\"name\":\"initiatePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"isMiddleware\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"isMintingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"isPriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"isPrisoned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"isPrivatePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isolationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"operatorAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausegETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceProof\",\"type\":\"bytes32[]\"}],\"name\":\"priceSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"priceProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"priceSyncBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_TYPE\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_NAME\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures1\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures31\",\"type\":\"bytes[]\"}],\"name\":\"proposeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageType\",\"type\":\"uint256\"}],\"name\":\"pushUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readBytesArray\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"readUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"readUintArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeThefts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"regulateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"releasePrisoned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"priceMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balanceMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"allValidatorsCount\",\"type\":\"uint256\"}],\"name\":\"reportBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pk\",\"type\":\"bytes\"}],\"name\":\"requestExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSenate\",\"type\":\"address\"}],\"name\":\"rescueSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exit\",\"type\":\"uint256\"}],\"name\":\"setBeaconDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackThreshold\",\"type\":\"uint256\"}],\"name\":\"setFallbackOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInfrastructureFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInitiationDeposit\",\"type\":\"uint256\"}],\"name\":\"setInitiationDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"makePrivate\",\"type\":\"bool\"}],\"name\":\"setPoolVisibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldReceiver\",\"type\":\"address\"}],\"name\":\"setYieldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"switchMaintenanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"switchValidatorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausegETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorVerificationIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"alienatedPubkeys\",\"type\":\"bytes[]\"}],\"name\":\"updateVerificationIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"TYPE: PACKAGE_PORTALPortal is a special package that is deployed once. Does not utilize IGeodePackage interface.review: GM for The Limited Upgradability through Dual Governance: * Governance is a governance token. * Senate is a multisig, planned to be a contract that allows pool CONTROLLERs to maintain power. * Senate expiry is effective.review: SM for Staking logic.There are 2 functionalities that are implemented here: * Special Governance functions for Portal: * * Pausing gETH, pausing Portal, releasing prisoned operators,and seting a governance fee. * Push end of the version management logic via pull->push. * * approveProposal changes the package version or allows specified middleware. * * pushUpgrade creates a package type proposal on the package to upgrade the contract, and requires package owner to approve it.authentication: * GeodeModule has OnlyGovernance, OnlySenate and OnlyController checks with modifiers. * StakeModuleLib has \\\"authenticate()\\\" function which checks for Maintainers, Controllers, and TYPE. * OracleModuleLib has OnlyOracle checks with a modifier. * Portal has OnlyGovernance checks on : pause, unpause, pausegETH, unpausegETH, setInfrastructureFee, setBeaconDelays, setInitiationDeposit, releasePrisoned.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ContractVersionSet(uint256)\":{\"custom:section\":\"** EVENTS **\"},\"IdInitiated(uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Released(uint256)\":{\"custom:section\":\"** EVENTS **\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"GeodeParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"StakeParams()\":{\"custom:section\":\"** GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"allIdsByType(uint256,uint256)\":{\"details\":\"useful for outside reach, shouldn't be used within contracts as a referance\",\"returns\":{\"_0\":\"allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index\"}},\"approveProposal(uint256)\":{\"details\":\"OnlySenate is checked inside the GeodeModule\"},\"blameProposal(bytes)\":{\"custom:section\":\"** PRISON **\",\"custom:visibility\":\"-> external\"},\"canStake(bytes)\":{\"custom:visibility\":\"-> view\"},\"changeIdCONTROLLER(uint256,address)\":{\"custom:subsection\":\"** ONLY CONTROLLER **\"},\"changeMaintainer(uint256,address)\":{\"custom:subsection\":\"** MAINTAINER **\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"delegate(uint256,uint256[],uint256[])\":{\"custom:section\":\"** DELEGATION **\",\"custom:visibility\":\"-> external\"},\"deployLiquidityPackage(uint256)\":{\"custom:subsection\":\"** BOUND LIQUIDITY PACKAGE **\"},\"deposit(uint256,uint256,bytes32[],uint256,uint256,address)\":{\"custom:section\":\"** POOLING OPERATIONS **\",\"custom:visibility\":\"-> external\"},\"generateId(string,uint256)\":{\"details\":\"id is generated by keccak(name, type)\"},\"getMaintenanceFee(uint256)\":{\"custom:visibility\":\"-> view\"},\"getValidatorPeriod(uint256)\":{\"custom:visibility\":\"-> view\"},\"increaseWalletBalance(uint256)\":{\"custom:section\":\"** INTERNAL WALLET **\"},\"initiateOperator(uint256,uint256,uint256,address)\":{\"custom:section\":\"** OPERATOR INITIATOR **\",\"custom:visibility\":\"-> external\"},\"initiatePool(uint256,uint256,address,bytes,bytes,bool[3])\":{\"custom:section\":\"** STAKING POOL INITIATOR **\",\"custom:visibility\":\"-> external\"},\"isPriceValid(uint256)\":{\"custom:section\":\"** DEPOSIT GETTERS **\",\"custom:visibility\":\"-> view-external\"},\"isPrisoned(uint256)\":{\"custom:visibility\":\"-> view\"},\"isPrivatePool(uint256)\":{\"custom:visibility\":\"-> view\"},\"isolationMode()\":{\"details\":\"GeodeModule override\",\"returns\":{\"_0\":\"isRecovering true if isolationMode is active: * 1. Portal is paused * 2. Portal needs to be upgraded * 3. Senate expired\"}},\"operatorAllowance(uint256,uint256)\":{\"custom:visibility\":\"-> view\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pausegETH()\":{\"custom:section\":\"** GOVERNANCE FUNCTIONS **\",\"custom:visibility\":\"-> external\"},\"propose(address,uint256,bytes,uint256)\":{\"custom:subsection\":\"** ONLY GOVERNANCE **\"},\"proposeStake(uint256,uint256,bytes[],bytes[],bytes[])\":{\"custom:section\":\"** VALIDATOR CREATION **\",\"custom:visibility\":\"-> external\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"readUintArray(uint256,bytes32,uint256)\":{\"custom:section\":\"** ARRAY GETTER FUNCTIONS **\",\"custom:visibility\":\"-> view-external\"},\"releasePrisoned(uint256)\":{\"details\":\"in different situations such as a faulty imprisonment or coordinated testing periods * Governance can release the prisonersonlyGovernance SHOULD be checked in Portal\"},\"requestExit(uint256,bytes)\":{\"custom:section\":\"** VALIDATOR EXITS **\",\"custom:visibility\":\"-> external\"},\"setPoolVisibility(uint256,bool)\":{\"custom:subsection\":\"** POOL VISIBILITY **\"},\"setYieldReceiver(uint256,address)\":{\"custom:subsection\":\"** YIELD SEPARATION **\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"switchMaintenanceFee(uint256,uint256)\":{\"custom:subsection\":\"** FEE **\"},\"switchValidatorPeriod(uint256,uint256)\":{\"custom:section\":\"** OPERATORS PERIOD **\",\"custom:visibility\":\"-> external\"},\"updateVerificationIndex(uint256,bytes[])\":{\"custom:section\":\"** ORACLE OPERATIONS **\",\"custom:visibility\":\"-> external\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Geode Portal: Geode Module + Stake Module\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveProposal(uint256)\":{\"notice\":\"approves a specific proposal\"},\"generateId(string,uint256)\":{\"notice\":\"useful function for string inputs - returns same with the DSML.generateId\"},\"getKey(uint256,bytes32)\":{\"notice\":\"useful view function for string inputs - returns same with the DSML.generateId\"},\"isolationMode()\":{\"notice\":\"Isolation Mode is an external view function signaling other contracts * to isolate themselves from Portal. For example, Withdrawal Package of the pool will not fetch upgrades.\"},\"releasePrisoned(uint256)\":{\"notice\":\"releases an imprisoned operator immediately\"}},\"notice\":\"Global standard for staking with on chain delegation and customizable staking pools. Management of the state of the protocol governance through dual governance and proposals. Version management and distribution of packages used by the staking pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal.sol\":\"Portal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155HolderUpgradeable is Initializable, ERC165Upgradeable, IERC1155Receiver {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd5cd13424ae387f7356676f7b90081cc63af46eac66ef15efeaca6177863eb83\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xbfb6695731de677140fbf76c772ab08c4233a122fb51ac28ac120fc49bbbc4ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Portal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n//   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557\\n//  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d      \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\n//  \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2551     \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n//   \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n//\\n\\n// external - library\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"./globals/id_type.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"./interfaces/modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./interfaces/modules/IStakeModule.sol\\\";\\nimport {IPortal} from \\\"./interfaces/IPortal.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"./modules/DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"./modules/GeodeModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"./modules/StakeModule/structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"./modules/DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {GeodeModuleLib as GML} from \\\"./modules/GeodeModule/libs/GeodeModuleLib.sol\\\";\\nimport {StakeModuleLib as SML} from \\\"./modules/StakeModule/libs/StakeModuleLib.sol\\\";\\nimport {InitiatorExtensionLib as IEL} from \\\"./modules/StakeModule/libs/InitiatorExtensionLib.sol\\\";\\n// internal - contracts\\nimport {GeodeModule} from \\\"./modules/GeodeModule/GeodeModule.sol\\\";\\nimport {StakeModule} from \\\"./modules/StakeModule/StakeModule.sol\\\";\\n\\n/**\\n * @title Geode Portal: Geode Module + Stake Module\\n *\\n * @notice Global standard for staking with on chain delegation and customizable staking pools.\\n * Management of the state of the protocol governance through dual governance and proposals.\\n * Version management and distribution of packages used by the staking pools.\\n *\\n * @dev TYPE: PACKAGE_PORTAL\\n * @dev Portal is a special package that is deployed once. Does not utilize IGeodePackage interface.\\n *\\n * @dev review: GM for The Limited Upgradability through Dual Governance:\\n * * Governance is a governance token.\\n * * Senate is a multisig, planned to be a contract that allows pool CONTROLLERs to maintain power.\\n * * Senate expiry is effective.\\n *\\n * @dev review: SM for Staking logic.\\n *\\n * @dev There are 2 functionalities that are implemented here:\\n * * Special Governance functions for Portal:\\n * * * Pausing gETH, pausing Portal, releasing prisoned operators,and seting a governance fee.\\n * * Push end of the version management logic via pull->push.\\n * * * approveProposal changes the package version or allows specified middleware.\\n * * * pushUpgrade creates a package type proposal on the package to upgrade the contract, and requires package owner to approve it.\\n *\\n * @dev authentication:\\n * * GeodeModule has OnlyGovernance, OnlySenate and OnlyController checks with modifiers.\\n * * StakeModuleLib has \\\"authenticate()\\\" function which checks for Maintainers, Controllers, and TYPE.\\n * * OracleModuleLib has OnlyOracle checks with a modifier.\\n * * Portal has OnlyGovernance checks on : pause, unpause, pausegETH, unpausegETH, setInfrastructureFee, setBeaconDelays, setInitiationDeposit, releasePrisoned.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\ncontract Portal is IPortal, GeodeModule, StakeModule {\\n  using DSML for DataStoreModuleStorage;\\n  using GML for GeodeModuleStorage;\\n  using SML for StakeModuleStorage;\\n  using IEL for StakeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Released(uint256 operatorId);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance() {\\n    require(msg.sender == _getGeodeModuleStorage().GOVERNANCE, \\\"PORTAL:sender not governance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  ///@custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address _governance,\\n    address _senate,\\n    address _gETH,\\n    address _oracle_position,\\n    bytes calldata versionName\\n  ) public virtual initializer {\\n    __Portal_init(_governance, _senate, _gETH, _oracle_position, versionName);\\n  }\\n\\n  function __Portal_init(\\n    address _governance,\\n    address _senate,\\n    address _gETH,\\n    address _oracle_position,\\n    bytes calldata versionName\\n  ) internal onlyInitializing {\\n    __GeodeModule_init(\\n      _governance,\\n      _senate,\\n      block.timestamp + GML.MAX_SENATE_PERIOD,\\n      ID_TYPE.PACKAGE_PORTAL,\\n      versionName\\n    );\\n    __StakeModule_init(_gETH, _oracle_position);\\n    __Portal_init_unchained();\\n  }\\n\\n  function __Portal_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev GeodeModule override\\n   *\\n   * @notice Isolation Mode is an external view function signaling other contracts\\n   * * to isolate themselves from Portal. For example, Withdrawal Package of the pool will not fetch upgrades.\\n   * @return isRecovering true if isolationMode is active:\\n   * * 1. Portal is paused\\n   * * 2. Portal needs to be upgraded\\n   * * 3. Senate expired\\n   */\\n  function isolationMode()\\n    external\\n    view\\n    virtual\\n    override(GeodeModule, IGeodeModule)\\n    returns (bool)\\n  {\\n    GeodeModuleStorage storage GMStorage = _getGeodeModuleStorage();\\n    return (paused() ||\\n      GMStorage.APPROVED_UPGRADE != ERC1967Utils.getImplementation() ||\\n      block.timestamp > GMStorage.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GOVERNANCE FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function pausegETH() external virtual override onlyGovernance {\\n    _getStakeModuleStorage().gETH.pause();\\n  }\\n\\n  function unpausegETH() external virtual override onlyGovernance {\\n    _getStakeModuleStorage().gETH.unpause();\\n  }\\n\\n  function pause() external virtual override(StakeModule, IStakeModule) onlyGovernance {\\n    _pause();\\n  }\\n\\n  function unpause() external virtual override(StakeModule, IStakeModule) onlyGovernance {\\n    _unpause();\\n  }\\n\\n  function setInfrastructureFee(\\n    uint256 _type,\\n    uint256 fee\\n  ) external virtual override(StakeModule, IStakeModule) onlyGovernance {\\n    _getStakeModuleStorage().setInfrastructureFee(_type, fee);\\n  }\\n\\n  function setBeaconDelays(\\n    uint256 entry,\\n    uint256 exit\\n  ) external virtual override(StakeModule, IStakeModule) onlyGovernance {\\n    _getStakeModuleStorage().setBeaconDelays(entry, exit);\\n  }\\n\\n  function setInitiationDeposit(\\n    uint256 newInitiationDeposit\\n  ) external virtual override(StakeModule, IStakeModule) onlyGovernance {\\n    _getStakeModuleStorage().setInitiationDeposit(newInitiationDeposit);\\n  }\\n\\n  /**\\n   * @notice releases an imprisoned operator immediately\\n   * @dev in different situations such as a faulty imprisonment or coordinated testing periods\\n   * * Governance can release the prisoners\\n   * @dev onlyGovernance SHOULD be checked in Portal\\n   */\\n  function releasePrisoned(uint256 operatorId) external virtual override onlyGovernance {\\n    _getDataStoreModuleStorage().writeUint(operatorId, \\\"release\\\", block.timestamp);\\n\\n    emit Released(operatorId);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PACKAGE VERSION MANAGEMENT **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a specific proposal\\n   * @dev OnlySenate is checked inside the GeodeModule\\n   */\\n  function approveProposal(\\n    uint256 id\\n  )\\n    public\\n    virtual\\n    override(GeodeModule, IGeodeModule)\\n    returns (address _controller, uint256 _type, bytes memory _name)\\n  {\\n    (_controller, _type, _name) = super.approveProposal(id);\\n\\n    if (_type > ID_TYPE.LIMIT_MIN_PACKAGE && _type < ID_TYPE.LIMIT_MAX_PACKAGE) {\\n      _getStakeModuleStorage().packages[_type] = id;\\n    } else if (_type > ID_TYPE.LIMIT_MIN_MIDDLEWARE && _type < ID_TYPE.LIMIT_MAX_MIDDLEWARE) {\\n      _getStakeModuleStorage().middlewares[_type][id] = true;\\n    }\\n  }\\n\\n  function pushUpgrade(\\n    uint256 packageType\\n  ) external virtual override nonReentrant whenNotPaused returns (uint256 id) {\\n    require(\\n      packageType > ID_TYPE.LIMIT_MIN_PACKAGE && packageType < ID_TYPE.LIMIT_MAX_PACKAGE,\\n      \\\"PORTAL:invalid package type\\\"\\n    );\\n\\n    uint256 currentPackageVersion = _getStakeModuleStorage().packages[packageType];\\n\\n    DataStoreModuleStorage storage DSMStorage = _getDataStoreModuleStorage();\\n\\n    id = IGeodeModule(msg.sender).propose(\\n      DSMStorage.readAddress(currentPackageVersion, \\\"CONTROLLER\\\"),\\n      packageType,\\n      DSMStorage.readBytes(currentPackageVersion, \\\"NAME\\\"),\\n      GML.MAX_PROPOSAL_DURATION\\n    );\\n\\n    require(id > 0, \\\"PORTAL:cannot push upgrade\\\");\\n  }\\n\\n  /**\\n   * @notice fallback functions: receive\\n   */\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x057c484dae6a7f3799246064bdd65aa2be95bfd3af26e54564b22cfe95df22fd\",\"license\":\"BUSL-1.1\"},\"contracts/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT UPGRADE: proposal to change the given contract's implementation. TYPE should be package's TYPE.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPackage and WithdrawalPackage are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Cannot be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// --\\n\\n  /// @notice TYPE 3: Limit: exclusive, minimum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MIN_USER = 3;\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 9999: Limit: exclusive, maximum TYPE that will be percieved as a user\\n  uint256 internal constant LIMIT_MAX_USER = 9999;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10001: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20011: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x14e68dc40a8b7a3d6737f0a3f7d3154b6debb7e4d92564c54ec82a082cc9df2a\",\"license\":\"BUSL-1.1\"},\"contracts/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 1e10;\\n\\nuint256 constant gETH_DENOMINATOR = 1e18;\\n\",\"keccak256\":\"0xdcbe1faa8712a653a87f4e185afb598388c2bbe62a750989df57afeac2848168\",\"license\":\"BUSL-1.1\"},\"contracts/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition treshold calculated with given percentage value for fallback operator to be activated\\n   */\\n  bytes32 internal constant fallbackThreshold = \\\"fallbackThreshold\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the initiation timestamp of a \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity package of a staking pool\\n   */\\n  bytes32 internal constant liquidityPackage = \\\"liquidityPackage\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition receiver address for yield seperation functionality\\n   * * will receive minted gETH to given receiver instead of increasing pricePerShare\\n   */\\n  bytes32 internal constant yieldReceiver = \\\"yieldReceiver\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition period that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for pool-operator pair.\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalPackage = \\\"withdrawalPackage\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalPackage address of the pool\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x7444cee1d8a60065e2ef6f64693ee2456484565ef41c2300337c0b997e294726\",\"license\":\"BUSL-1.1\"},\"contracts/globals/validator_state.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice VALIDATOR_STATE: keeping track of validators within The Staking Library.\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract.\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator.\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is called to be exited.\\n  uint8 internal constant EXIT_REQUESTED = 3;\\n\\n  /// @notice STATE 4: validator is fully exited.\\n  uint8 internal constant EXITED = 4;\\n\\n  /// @notice STATE 69: proposal was malicious(alien). Maybe faulty signatures or probably frontrunning (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xbba746dcad490d11ebc3a69b334c7284a546902392b565162a45d5b8a53d291d\",\"license\":\"BUSL-1.1\"},\"contracts/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.20;\\n\\nlibrary BytesLib {\\n  function concat(\\n    bytes memory _preBytes,\\n    bytes memory _postBytes\\n  ) internal pure returns (bytes memory) {\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      // Get a location of some free memory and store it in tempBytes as\\n      // Solidity does for memory variables.\\n      tempBytes := mload(0x40)\\n\\n      // Store the length of the first bytes array at the beginning of\\n      // the memory for tempBytes.\\n      let length := mload(_preBytes)\\n      mstore(tempBytes, length)\\n\\n      // Maintain a memory counter for the current write location in the\\n      // temp bytes array by adding the 32 bytes for the array length to\\n      // the starting location.\\n      let mc := add(tempBytes, 0x20)\\n      // Stop copying when the memory counter reaches the length of the\\n      // first bytes array.\\n      let end := add(mc, length)\\n\\n      for {\\n        // Initialize a copy counter to the start of the _preBytes data,\\n        // 32 bytes into its memory.\\n        let cc := add(_preBytes, 0x20)\\n      } lt(mc, end) {\\n        // Increase both counters by 32 bytes each iteration.\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\n        // at a time.\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Add the length of _postBytes to the current length of tempBytes\\n      // and store it as the new length in the first 32 bytes of the\\n      // tempBytes memory.\\n      length := mload(_postBytes)\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n      // Move the memory counter back from a multiple of 0x20 to the\\n      // actual end of the _preBytes data.\\n      mc := end\\n      // Stop copying when the memory counter reaches the new combined\\n      // length of the arrays.\\n      end := add(mc, length)\\n\\n      for {\\n        let cc := add(_postBytes, 0x20)\\n      } lt(mc, end) {\\n        mc := add(mc, 0x20)\\n        cc := add(cc, 0x20)\\n      } {\\n        mstore(mc, mload(cc))\\n      }\\n\\n      // Update the free-memory pointer by padding our last write location\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n      // next 32 byte block, then round down to the nearest multiple of\\n      // 32. If the sum of the length of the two arrays is zero then add\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n      mstore(\\n        0x40,\\n        and(\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n          not(31) // Round down to the nearest 32 bytes.\\n        )\\n      )\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n    assembly {\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\n      // of the array. (We don't need to use the offset into the slot\\n      // because arrays use the entire slot.)\\n      let fslot := sload(_preBytes.slot)\\n      // Arrays of 31 bytes or less have an even value in their slot,\\n      // while longer arrays have an odd value. The actual length is\\n      // the slot divided by two for odd values, and the lowest order\\n      // byte divided by two for even values.\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\n      // two to get the length. If the slot is odd, bitwise and the slot\\n      // with -1 and divide by two.\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n      let newlength := add(slength, mlength)\\n      // slength can contain both the length and contents of the array\\n      // if length < 32 bytes so let's prepare for that\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n      switch add(lt(slength, 32), lt(newlength, 32))\\n      case 2 {\\n        // Since the new array still fits in the slot, we just need to\\n        // update the contents of the slot.\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n        sstore(\\n          _preBytes.slot,\\n          // all the modifications to the slot are inside this\\n          // next block\\n          add(\\n            // we can just add to the slot contents because the\\n            // bytes we want to change are the LSBs\\n            fslot,\\n            add(\\n              mul(\\n                div(\\n                  // load the bytes from memory\\n                  mload(add(_postBytes, 0x20)),\\n                  // zero all bytes to the right\\n                  exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n              ),\\n              // increase length by the double of the memory\\n              // bytes length\\n              mul(mlength, 2)\\n            )\\n          )\\n        )\\n      }\\n      case 1 {\\n        // The stored value fits in the slot, but the combined value\\n        // will exceed it.\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // The contents of the _postBytes array start 32 bytes into\\n        // the structure. Our first read should obtain the `submod`\\n        // bytes that can fit into the unused space in the last word\\n        // of the stored array. To get this, we read 32 bytes starting\\n        // from `submod`, so the data we read overlaps with the array\\n        // contents by `submod` bytes. Masking the lowest-order\\n        // `submod` bytes allows us to add that value directly to the\\n        // stored value.\\n\\n        let submod := sub(32, slength)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(\\n          sc,\\n          add(\\n            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n            and(mload(mc), mask)\\n          )\\n        )\\n\\n        for {\\n          mc := add(mc, 0x20)\\n          sc := add(sc, 1)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n      default {\\n        // get the keccak hash to get the contents of the array\\n        mstore(0x0, _preBytes.slot)\\n        // Start copying to the last used word of the stored array.\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n        // save new length\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n        // Copy over the first `submod` bytes of the new data as in\\n        // case 1 above.\\n        let slengthmod := mod(slength, 32)\\n        let mlengthmod := mod(mlength, 32)\\n        let submod := sub(32, slengthmod)\\n        let mc := add(_postBytes, submod)\\n        let end := add(_postBytes, mlength)\\n        let mask := sub(exp(0x100, submod), 1)\\n\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n        for {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } lt(mc, end) {\\n          sc := add(sc, 1)\\n          mc := add(mc, 0x20)\\n        } {\\n          sstore(sc, mload(mc))\\n        }\\n\\n        mask := exp(0x100, sub(mc, end))\\n\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\n      }\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n    uint8 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n    uint16 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n    uint32 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n    uint64 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n    uint96 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n    uint128 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n    bytes32 tempBytes32;\\n\\n    assembly {\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempBytes32;\\n  }\\n\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      let length := mload(_preBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(length, mload(_postBytes))\\n      case 1 {\\n        // cb is a circuit breaker in the for loop since there's\\n        //  no said feature for inline assembly loops\\n        // cb = 1 - don't breaker\\n        // cb = 0 - break\\n        let cb := 1\\n\\n        let mc := add(_preBytes, 0x20)\\n        let end := add(mc, length)\\n\\n        for {\\n          let cc := add(_postBytes, 0x20)\\n          // the next line is the loop condition:\\n          // while(uint256(mc < end) + cb == 2)\\n        } eq(add(lt(mc, end), cb), 2) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          // if any of these checks fails then arrays are not equal\\n          if iszero(eq(mload(mc), mload(cc))) {\\n            // unsuccess:\\n            success := 0\\n            cb := 0\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function equalStorage(\\n    bytes storage _preBytes,\\n    bytes memory _postBytes\\n  ) internal view returns (bool) {\\n    bool success = true;\\n\\n    assembly {\\n      // we know _preBytes_offset is 0\\n      let fslot := sload(_preBytes.slot)\\n      // Decode the length of the stored array like in concatStorage().\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n      let mlength := mload(_postBytes)\\n\\n      // if lengths don't match the arrays are not equal\\n      switch eq(slength, mlength)\\n      case 1 {\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n        if iszero(iszero(slength)) {\\n          switch lt(slength, 32)\\n          case 1 {\\n            // blank the last byte which is the length\\n            fslot := mul(div(fslot, 0x100), 0x100)\\n\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n              // unsuccess:\\n              success := 0\\n            }\\n          }\\n          default {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n            let cb := 1\\n\\n            // get the keccak hash to get the contents of the array\\n            mstore(0x0, _preBytes.slot)\\n            let sc := keccak256(0x0, 0x20)\\n\\n            let mc := add(_postBytes, 0x20)\\n            let end := add(mc, mlength)\\n\\n            // the next line is the loop condition:\\n            // while(uint256(mc < end) + cb == 2)\\n            for {\\n\\n            } eq(add(lt(mc, end), cb), 2) {\\n              sc := add(sc, 1)\\n              mc := add(mc, 0x20)\\n            } {\\n              if iszero(eq(sload(sc), mload(mc))) {\\n                // unsuccess:\\n                success := 0\\n                cb := 0\\n              }\\n            }\\n          }\\n        }\\n      }\\n      default {\\n        // unsuccess:\\n        success := 0\\n      }\\n    }\\n\\n    return success;\\n  }\\n}\\n\",\"keccak256\":\"0x4ee3f6ef85baa41794fc1519522f7c135becd0e267980eadc68dd643e52b59c7\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IGeodeModule, IStakeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (uint256 id);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n}\\n\",\"keccak256\":\"0x012a8ed050ba68838eeb7463b75f32ba8fdf50c9e54e44dd37d4e87ca16ba78c\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0xa093b769e8ba42091d3db8a9e4ddc1be066f4aa92f61ee552983c22a0e9f29d8\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/** This interface is designed to be compatible with the Vyper version.\\n * @notice This is the Ethereum 2.0 deposit contract interface.\\n * For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ninterface IDepositContract {\\n  /**\\n   * @notice Submit a Phase 0 DepositData object.\\n   * @param pubkey A BLS12-381 public key.\\n   * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n   * @param signature A BLS12-381 signature.\\n   * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n   *Used as a protection against malformed input.\\n   */\\n  function deposit(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x2db8802f8f888c62b147508e142e15c59775ff75906d09122e810483919bff27\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n/// @dev IERC1155 inherits IERC165\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\n\\ninterface IERC1155Burnable is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8b0a02fdbc8d54c815d68e122f6869348217b5efd853c8b833c59d2053998ef0\",\"license\":\"MIT\"},\"contracts/interfaces/helpers/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IWhitelist {\\n  function isAllowed(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd9a70c727b9cee59af99357d2ff7b04e8ef19372f6a72efd74a14091f836bdcb\",\"license\":\"MIT\"},\"contracts/interfaces/middlewares/IgETHMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IgETHMiddleware {\\n  function initialize(uint256 id_, address erc1155_, bytes memory data) external;\\n\\n  function ERC1155() external view returns (address);\\n\\n  function ERC1155_ID() external view returns (uint256);\\n\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b94e7cf38487d607c720d311578fa0b777a75050113b3533b8e4e22fe6ab61c\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3ba6191b4a643bce171bb7dc9b39a55dd0c8c932934429902dec4eb7b6c3df9a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Proposal} from \\\"../../modules/GeodeModule/structs/utils.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getGovernance() external view returns (address);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x2eb0e5472c00c7d91443f0544ce349129266665dd59f1e4b0598173df1a9d1c5\",\"license\":\"MIT\"},\"contracts/interfaces/modules/ILiquidityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\ninterface ILiquidityModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function LiquidityParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address lpToken,\\n      uint256 pooledTokenId,\\n      uint256 initialA,\\n      uint256 futureA,\\n      uint256 initialATime,\\n      uint256 futureATime,\\n      uint256 swapFee,\\n      uint256 adminFee\\n    );\\n\\n  function getA() external view returns (uint256);\\n\\n  function getAPrecise() external view returns (uint256);\\n\\n  function getBalance(uint8 index) external view returns (uint256);\\n\\n  function getDebt() external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[2] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function withdrawAdminFees(address receiver) external;\\n\\n  function setAdminFee(uint256 newAdminFee) external;\\n\\n  function setSwapFee(uint256 newSwapFee) external;\\n\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n  function stopRampA() external;\\n}\\n\",\"keccak256\":\"0xee470aafacf0ec10f63efa53a3f4f8deaf03cd9b0d0aae178949464960ff397a\",\"license\":\"MIT\"},\"contracts/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {Validator} from \\\"../../modules/StakeModule/structs/utils.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external;\\n\\n  function setBeaconDelays(uint256 entry, uint256 exit) external;\\n\\n  function setInitiationDeposit(uint256 newInitiationDeposit) external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 beaconDelayEntry,\\n      uint256 beaconDelayExit,\\n      uint256 initiationDeposit,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function getPriceMerkleRoot() external view returns (bytes32);\\n\\n  function getBalancesMerkleRoot() external view returns (bytes32);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function getInfrastructureFee(uint256 _type) external view returns (uint256);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPackage(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function setYieldReceiver(uint256 poolId, address yieldReceiver) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameExit(\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external;\\n\\n  function blameProposal(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function requestExit(uint256 poolId, bytes memory pk) external returns (bool);\\n\\n  function finalizeExit(uint256 poolId, bytes memory pk) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0x102393bdd245b4745032b3d21ba59ba7ee45dfc9fc2b152ee5cd014ab9403370\",\"license\":\"MIT\"},\"contracts/interfaces/packages/IGeodePackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {IGeodeModule} from \\\"../modules/IGeodeModule.sol\\\";\\nimport {IPortal} from \\\"../IPortal.sol\\\";\\n\\ninterface IGeodePackage is IGeodeModule {\\n  function initialize(\\n    uint256 poolId,\\n    address owner,\\n    bytes calldata versionName,\\n    bytes memory data\\n  ) external;\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function pullUpgrade() external;\\n}\\n\",\"keccak256\":\"0x9c854fab873502a768e5903e7f66b6697313f77bea4d5ca200aad8d0c3190ed9\",\"license\":\"MIT\"},\"contracts/interfaces/packages/ILiquidityPackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {ILiquidityModule} from \\\"../modules/ILiquidityModule.sol\\\";\\nimport {IGeodePackage} from \\\"./IGeodePackage.sol\\\";\\n\\ninterface ILiquidityPackage is IGeodePackage, ILiquidityModule {}\\n\",\"keccak256\":\"0x30c75b5615ac108f4709e57483a83508a27dc5691892f323a9f5de2403a3dfdd\",\"license\":\"MIT\"},\"contracts/modules/DataStoreModule/DataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// internal - interfaces\\nimport {IDataStoreModule} from \\\"../../interfaces/modules/IDataStoreModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"./structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"./libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title DSM: DataStore Module\\n *\\n * @notice A storage management tool designed to create a safe and scalable storage layout\\n * for upgradable contracts with various types of data classes (users, packages, definitions).\\n *\\n * @dev review: this module delegates its functionality to DSML (DataStoreModuleLib).\\n * DSM or DSML has NO access control.\\n *\\n * @dev There are no additional functionalities implemented apart from the library.\\n *\\n * @dev NO function needs to be overriden when inherited.\\n *\\n * @dev __DataStoreModule_init (or _unchained) call is not necessary when inherited.\\n *\\n * @dev No storage-altering external/public functions are exposed here, only view/pure external functions.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract DataStoreModule is IDataStoreModule, Initializable {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.DataStoreModule\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant DataStoreModuleStorageLocation =\\n    0xa3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c00;\\n\\n  function _getDataStoreModuleStorage() internal pure returns (DataStoreModuleStorage storage $) {\\n    assembly {\\n      $.slot := DataStoreModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __DataStoreModule_init() internal onlyInitializing {}\\n\\n  function __DataStoreModule_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @custom:section                           ** HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> pure-external\\n   */\\n\\n  /**\\n   * @notice useful function for string inputs - returns same with the DSML.generateId\\n   * @dev id is generated by keccak(name, type)\\n   */\\n  function generateId(\\n    string calldata _name,\\n    uint256 _type\\n  ) external pure virtual override returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice useful view function for string inputs - returns same with the DSML.generateId\\n   */\\n  function getKey(\\n    uint256 _id,\\n    bytes32 _param\\n  ) external pure virtual override returns (bytes32 key) {\\n    return DSML.getKey(_id, _param);\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev useful for outside reach, shouldn't be used within contracts as a referance\\n   * @return allIdsByType is an array of IDs of the given TYPE from Datastore,\\n   * returns a specific index\\n   */\\n  function allIdsByType(\\n    uint256 _type,\\n    uint256 _index\\n  ) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type][_index];\\n  }\\n\\n  function allIdsByTypeLength(uint256 _type) external view virtual override returns (uint256) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    return $.allIdsByType[_type].length;\\n  }\\n\\n  function readUint(uint256 id, bytes32 key) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUint(id, key);\\n  }\\n\\n  function readAddress(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddress(id, key);\\n  }\\n\\n  function readBytes(\\n    uint256 id,\\n    bytes32 key\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytes(id, key);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (uint256 data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readUintArray(id, key, index);\\n  }\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (bytes memory data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readBytesArray(id, key, index);\\n  }\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view virtual override returns (address data) {\\n    DataStoreModuleStorage storage $ = _getDataStoreModuleStorage();\\n    data = $.readAddressArray(id, key, index);\\n  }\\n}\\n\",\"keccak256\":\"0x25eb0dd1c0e7484c36320629bac60f346ab3cd138ace7940b296a87a25c10b39\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n// external - interfaces\\n// external - libraries\\n// external - contracts\\n// internal - globals\\n// internal - interfaces\\nimport {DataStoreModuleStorage} from \\\"../structs/storage.sol\\\";\\n\\n// internal - structs\\n// internal - libraries\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the DataStoreModuleStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is not mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.DataStoreModuleStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encode(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the DataStoreModuleStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encode(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    DataStoreModuleStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    uint256 _dataLen = _data.length;\\n    for (uint256 i; i < _dataLen; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0x51807687607c0b53afa9408b86d3f6523c5869802700624299fddac68fde381c\",\"license\":\"BUSL-1.1\"},\"contracts/modules/DataStoreModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Storage Struct for reading/writing operations for given (id, key) pairs.\\n *\\n * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n * @param uintData keccak(id, key) =>  returns uint256\\n * @param bytesData keccak(id, key) => returns bytes\\n * @param addressData keccak(id, key) =>  returns address\\n *\\n * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.DataStoreModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n */\\nstruct DataStoreModuleStorage {\\n  mapping(uint256 => uint256[]) allIdsByType;\\n  mapping(bytes32 => uint256) uintData;\\n  mapping(bytes32 => bytes) bytesData;\\n  mapping(bytes32 => address) addressData;\\n}\\n\",\"keccak256\":\"0x75890780f8cc5d9d0b6c84b9647b098d6c1d75083774f77e945fd307fcc10b86\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/GeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - library\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\n// external - contracts\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../globals/id_type.sol\\\";\\n// internal - interfaces\\nimport {IGeodeModule} from \\\"../../interfaces/modules/IGeodeModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"./structs/storage.sol\\\";\\nimport {Proposal} from \\\"./structs/utils.sol\\\";\\n// internal - libraries\\nimport {GeodeModuleLib as GML} from \\\"./libs/GeodeModuleLib.sol\\\";\\nimport {DataStoreModuleLib as DSML} from \\\"../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n// internal - contracts\\nimport {DataStoreModule} from \\\"../DataStoreModule/DataStoreModule.sol\\\";\\n\\n/**\\n * @title GM: Geode Module\\n *\\n * @notice Base logic for Upgradable Packages:\\n * * Dual Governance with Senate+Governance: Governance proposes, Senate approves.\\n * * Limited Upgradability built on top of UUPS via Dual Governance.\\n *\\n * @dev review: this module delegates its functionality to GML (GeodeModuleLib):\\n * GML has onlyGovernance, onlySenate, onlyController modifiers for access control.\\n *\\n * @dev There is 1 additional functionality implemented apart from the library:\\n * Mutating UUPS pattern to fit Limited Upgradability:\\n * 1. New implementation contract is proposed with its own package type within the limits, refer to globals/id_type.sol.\\n * 2. Proposal is approved by the contract owner, Senate.\\n * 3. approveProposal calls _handleUpgrade which mimics UUPS.upgradeTo:\\n * 3.1. Checks the implementation address with _authorizeUpgrade, also preventing any UUPS upgrades.\\n * 3.2. Upgrades the contract with no function to call afterwards.\\n * 3.3. Sets contract version. Note that it does not increase linearly like one might expect.\\n *\\n * @dev 1 function needs to be overriden when inherited: isolationMode. (also refer to approveProposal)\\n *\\n * @dev __GeodeModule_init (or _unchained) call is NECESSARY when inherited.\\n * However, deployer MUST call initializer after upgradeTo call,\\n * should not call initializer on upgradeToAndCall or new ERC1967Proxy calls.\\n *\\n * @dev This module inherits DataStoreModule.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract GeodeModule is IGeodeModule, UUPSUpgradeable, DataStoreModule {\\n  using GML for GeodeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.GeodeModuleStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant GeodeModuleStorageLocation =\\n    0x121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b04200;\\n\\n  function _getGeodeModuleStorage() internal pure returns (GeodeModuleStorage storage $) {\\n    assembly {\\n      $.slot := GeodeModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event ContractVersionSet(uint256 version);\\n\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   */\\n  function isolationMode() external view virtual override returns (bool);\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n\\n  function __GeodeModule_init(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    __UUPSUpgradeable_init();\\n    __DataStoreModule_init();\\n    __GeodeModule_init_unchained(governance, senate, senateExpiry, packageType, initVersionName);\\n  }\\n\\n  /**\\n   * @dev This function uses _getImplementation(), clearly deployer should not call initializer on\\n   * upgradeToAndCall or new ERC1967Proxy calls. _getImplementation() returns 0 then.\\n   * @dev GOVERNANCE and SENATE set to msg.sender at beginning, cannot propose+approve otherwise.\\n   * @dev native approveProposal(public) is not used here. Because it has an _handleUpgrade,\\n   * however initialization does not require UUPS.upgradeTo.\\n   */\\n  function __GeodeModule_init_unchained(\\n    address governance,\\n    address senate,\\n    uint256 senateExpiry,\\n    uint256 packageType,\\n    bytes calldata initVersionName\\n  ) internal onlyInitializing {\\n    require(governance != address(0), \\\"GM:governance cannot be zero\\\");\\n    require(senate != address(0), \\\"GM:senate cannot be zero\\\");\\n    require(senateExpiry > block.timestamp, \\\"GM:low senateExpiry\\\");\\n    require(packageType != 0, \\\"GM:packageType cannot be zero\\\");\\n    require(initVersionName.length != 0, \\\"GM:initVersionName cannot be empty\\\");\\n\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.GOVERNANCE = msg.sender;\\n    $.SENATE = msg.sender;\\n\\n    $.SENATE_EXPIRY = senateExpiry;\\n    $.PACKAGE_TYPE = packageType;\\n\\n    DataStoreModuleStorage storage DSMStorage = _getDataStoreModuleStorage();\\n\\n    uint256 initVersion = $.propose(\\n      DSMStorage,\\n      ERC1967Utils.getImplementation(),\\n      packageType,\\n      initVersionName,\\n      1 days\\n    );\\n\\n    $.approveProposal(DSMStorage, initVersion);\\n\\n    _setContractVersion(DSML.generateId(initVersionName, $.PACKAGE_TYPE));\\n\\n    $.GOVERNANCE = governance;\\n    $.SENATE = senate;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev required by the OZ UUPS module, improved by the Geode Module.\\n   */\\n  function _authorizeUpgrade(address proposed_implementation) internal virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    require(\\n      $.isUpgradeAllowed(proposed_implementation, ERC1967Utils.getImplementation()),\\n      \\\"GM:not allowed to upgrade\\\"\\n    );\\n  }\\n\\n  function _setContractVersion(uint256 id) internal virtual {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.CONTRACT_VERSION = id;\\n    emit ContractVersionSet(id);\\n  }\\n\\n  /**\\n   * @dev Would use the public upgradeTo() call, which does _authorizeUpgrade and _upgradeToAndCallUUPS,\\n   * but it is external, OZ have not made it public yet.\\n   */\\n  function _handleUpgrade(address proposed_implementation, uint256 id) internal virtual {\\n    UUPSUpgradeable.upgradeToAndCall(proposed_implementation, \\\"\\\");\\n    _setContractVersion(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function GeodeParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    )\\n  {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n\\n    governance = $.GOVERNANCE;\\n    senate = $.SENATE;\\n    approvedUpgrade = $.APPROVED_UPGRADE;\\n    senateExpiry = $.SENATE_EXPIRY;\\n    packageType = $.PACKAGE_TYPE;\\n  }\\n\\n  function getGovernance() external view virtual override returns (address) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.GOVERNANCE;\\n  }\\n\\n  function getContractVersion() public view virtual override returns (uint256) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    return $.CONTRACT_VERSION;\\n  }\\n\\n  function getProposal(\\n    uint256 id\\n  ) external view virtual override returns (Proposal memory proposal) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    proposal = $.getProposal(id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> public/external\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   */\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) public virtual override returns (uint256 id) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    id = $.propose(_getDataStoreModuleStorage(), _CONTROLLER, _TYPE, _NAME, duration);\\n  }\\n\\n  function rescueSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.rescueSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   */\\n\\n  /**\\n   * @dev handles PACKAGE_TYPE proposals by upgrading the contract immediately.\\n   * @dev onlySenate is checked inside GML.approveProposal\\n   */\\n  function approveProposal(\\n    uint256 id\\n  ) public virtual override returns (address _controller, uint256 _type, bytes memory _name) {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    (_controller, _type, _name) = $.approveProposal(_getDataStoreModuleStorage(), id);\\n\\n    if (_type == $.PACKAGE_TYPE) {\\n      _handleUpgrade(_controller, id);\\n    }\\n  }\\n\\n  function changeSenate(address _newSenate) external virtual override {\\n    GeodeModuleStorage storage $ = _getGeodeModuleStorage();\\n    $.changeSenate(_newSenate);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY CONTROLLER **\\n   */\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external virtual override {\\n    GML.changeIdCONTROLLER(_getDataStoreModuleStorage(), id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0x3bf367a4430addb6eac18d4dd1f58add98e4b5d72a43d51eb585dc59f2f3b43e\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/libs/GeodeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {GeodeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {Proposal} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title GML: Geode Module Library\\n *\\n * @notice Dual Governance & Limited Upgradability:\\n * Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate.\\n * Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPackage.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n *\\n * @dev SENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.\\n *\\n * @dev There are 3 ways to set a new Senate:\\n * 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry.\\n * 2. Current Senate can call changeSenate, which doesn't change the expiry\\n * 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.\\n * @dev Currently, there are no way to set a new Governance.\\n *\\n *\\n * @dev Contracts relying on this library must use GeodeModuleLib.GeodeModuleStorage\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary GeodeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice a proposal can have a duration between 1 days to 4 weeks (inclusive)\\n  uint32 internal constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 internal constant MAX_PROPOSAL_DURATION = 4 weeks;\\n\\n  /// @notice if expiry is utilized, a senate can be active for a year.\\n  /// @dev \\\"MAX\\\" underlines a new senate can be set without expecting an expiry\\n  uint32 internal constant MAX_SENATE_PERIOD = 365 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GML:GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlySenate(GeodeModuleStorage storage self) {\\n    require(msg.sender == self.SENATE, \\\"GML:SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GML:SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DataStoreModuleStorage storage DATASTORE, uint256 id) {\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"GML:CONTROLLER role needed\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Check if it is allowed to change the package version to given proposedImplementation.\\n   * @dev provided for _authorizeUpgrade\\n   * @dev currentImplementation should always be UUPS._getImplementation()\\n   * @dev currentImplementation or zero as proposedImplementation will return false\\n   **/\\n  function isUpgradeAllowed(\\n    GeodeModuleStorage storage self,\\n    address proposedImplementation,\\n    address currentImplementation\\n  ) external view returns (bool) {\\n    return\\n      (self.APPROVED_UPGRADE != address(0)) &&\\n      (proposedImplementation != currentImplementation) &&\\n      (self.APPROVED_UPGRADE == proposedImplementation);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function getProposal(\\n    GeodeModuleStorage storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self.proposals[id];\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** INTERNAL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n  function _setSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    require(_newSenate != address(0), \\\"GML:Senate cannot be zero address\\\");\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   */\\n  function propose(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSML.generateId(_NAME, _TYPE);\\n\\n    require(self.proposals[id].deadline == 0, \\\"GML:already proposed\\\");\\n    require((DATASTORE.readBytes(id, rks.NAME)).length == 0, \\\"GML:ID already exist\\\");\\n    require(_CONTROLLER != address(0), \\\"GML:CONTROLLER cannot be ZERO\\\");\\n    require((_TYPE != ID_TYPE.NONE) && (_TYPE != ID_TYPE.POOL), \\\"GML:TYPE is NONE or POOL\\\");\\n    require(\\n      (duration >= MIN_PROPOSAL_DURATION) && (duration <= MAX_PROPOSAL_DURATION),\\n      \\\"GML:invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self.proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(_TYPE, id, _CONTROLLER, _deadline);\\n  }\\n\\n  /**\\n   * @notice changes Senate in a scenerio where the current Senate acts maliciously!\\n   * * We are sure this will not be the case, but creating a method for possible recovery is a must.\\n   * @notice Normally, Governance creates Senate Proposals frequently to signal it does not have\\n   * * any intent of malicious overtake.\\n   * note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY,\\n   * * we recommend users to take their money out.\\n   * @dev Obviously, Governance needs to wait for SENATE_EXPIRY.\\n   * @dev Refreshes the expiry\\n   */\\n  function rescueSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlyGovernance(self) {\\n    require(block.timestamp > self.SENATE_EXPIRY, \\\"GML:cannot rescue yet\\\");\\n\\n    _setSenate(self, _newSenate, block.timestamp + MAX_SENATE_PERIOD);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a proposal and records given data to DataStore\\n   * @notice specific changes for the reserved types (1, 2, 3) are implemented here,\\n   * any other addition should take place in Portal, as not related.\\n   * Note that GM has additional logic for package type approvals.\\n   * @param id given ID proposal that has will be approved by Senate\\n   * @dev Senate is not able to approve approved proposals\\n   * @dev Senate is not able to approve expired proposals\\n   */\\n  function approveProposal(\\n    GeodeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (address _controller, uint256 _type, bytes memory _name) {\\n    require(self.proposals[id].deadline > block.timestamp, \\\"GML:not an active proposal\\\");\\n\\n    _controller = self.proposals[id].CONTROLLER;\\n    _type = self.proposals[id].TYPE;\\n    _name = self.proposals[id].NAME;\\n\\n    DATASTORE.writeUint(id, rks.TYPE, _type);\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, _controller);\\n    DATASTORE.writeBytes(id, rks.NAME, _name);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.SENATE) {\\n      _setSenate(self, _controller, block.timestamp + MAX_SENATE_PERIOD);\\n    } else if (_type == self.PACKAGE_TYPE) {\\n      self.APPROVED_UPGRADE = _controller;\\n    }\\n\\n    // important\\n    self.proposals[id].deadline = block.timestamp;\\n\\n    emit Approved(id);\\n  }\\n\\n  /**\\n   * @notice It is useful to be able to change the Senate's address without changing the expiry.\\n   * @dev Does not change the expiry\\n   */\\n  function changeSenate(\\n    GeodeModuleStorage storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ONLY CONTROLLER **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice change the CONTROLLER of an ID\\n   * @dev this operation cannot be reverted by the old CONTROLLER!!!\\n   * @dev cannot provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GML:CONTROLLER cannot be zero\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(\\n      typeOfId > ID_TYPE.LIMIT_MIN_USER && typeOfId < ID_TYPE.LIMIT_MAX_USER,\\n      \\\"GML:ID TYPE is not user\\\"\\n    );\\n\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0xe512a12a6b8972f526dfc4028517d5ea3a00ed0004833d7ef35fe12479ff8c9f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - structs\\nimport {Proposal} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Dual Governance logic\\n * @dev Dual Governance allows 2 parties to manage a package with proposals and approvals.\\n * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n * Suggests updates, such as new operators, contract/package upgrades, a new Senate (without any permission to force them)\\n * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n * @param APPROVED_UPGRADE only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Might not be utilized. Limited by MAX_SENATE_PERIOD\\n * @param PACKAGE_TYPE every package has a specific TYPE. Defined in globals/id_type.sol\\n * @param CONTRACT_VERSION always refers to the upgrade proposal ID. Does not increase uniformly like one might expect.\\n * @param proposals till approved, proposals are kept separated from the Isolated Storage\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.GeodeModule\\n * but compiler throws an error... So np for now, just effects dev ex.\\n **/\\nstruct GeodeModuleStorage {\\n  address GOVERNANCE;\\n  address SENATE;\\n  address APPROVED_UPGRADE;\\n  uint256 SENATE_EXPIRY;\\n  uint256 PACKAGE_TYPE;\\n  uint256 CONTRACT_VERSION;\\n  mapping(uint256 => Proposal) proposals;\\n}\\n\",\"keccak256\":\"0xed6ca1f88ad9b514c2fd8004c1b191b6b8baca81376e1f0c701381e30617cec3\",\"license\":\"BUSL-1.1\"},\"contracts/modules/GeodeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n *\\n * @param TYPE: refer to globals/id_type.sol\\n * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n * @param NAME: DataStore generates ID by keccak(name, type)\\n * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n * * Expired proposals cannot be approved by Senate\\n * * Expired proposals cannot be overriden by new proposals\\n **/\\nstruct Proposal {\\n  address CONTROLLER;\\n  uint256 TYPE;\\n  bytes NAME;\\n  uint256 deadline;\\n}\\n\",\"keccak256\":\"0xcaa2a8bae465cbfe7ecfa41fa0e54a83d1e50475a6d0e5864a3169bf0d537577\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/StakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {ERC1155HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n// internal - globals\\nimport {PERCENTAGE_DENOMINATOR} from \\\"../../globals/macros.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../interfaces/IgETH.sol\\\";\\nimport {IStakeModule} from \\\"../../interfaces/modules/IStakeModule.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../DataStoreModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"./structs/storage.sol\\\";\\nimport {Validator} from \\\"./structs/utils.sol\\\";\\n// internal - libraries\\nimport {StakeModuleLib as SML} from \\\"./libs/StakeModuleLib.sol\\\";\\nimport {InitiatorExtensionLib as IEL} from \\\"./libs/InitiatorExtensionLib.sol\\\";\\nimport {OracleExtensionLib as OEL} from \\\"./libs/OracleExtensionLib.sol\\\";\\n// internal - contracts\\nimport {DataStoreModule} from \\\"../DataStoreModule/DataStoreModule.sol\\\";\\n\\n/**\\n * @title SM: Stake Module\\n *\\n * @notice Liquid staking for everyone.\\n * * pooling and staking for staking derivatives\\n * * validator delegation and operator onboarding\\n * * oracle operations such as pricing\\n *\\n * @dev review: this module delegates its functionality to SML (StakeModuleLib).\\n * * SML has authenticate function for access control.\\n * @dev review: OEL (OracleExtensionLib) is an extension for oracle operations.\\n * @dev review: DCL (DepositContractLib) is an helper for validator creation.\\n *\\n * @dev There is 1 additional functionality implemented apart from the library:\\n * * check price validity and accept proofs for updating the price (refer to deposit function).\\n * * However, this module inherits and implements nonReentrant & whenNotPaused modifiers.\\n * * SM has pausability and expects inheriting contract to provide the access control mechanism.\\n *\\n * @dev 4 functions need to be overriden when inherited: pause, unpause, setInfrastructureFee, setBeaconDelays.\\n *\\n * @dev __StakeModule_init (or _unchained) call is NECESSARY when inherited.\\n *\\n * @dev This module inherits DataStoreModule.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nabstract contract StakeModule is\\n  IStakeModule,\\n  ERC1155HolderUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable,\\n  DataStoreModule\\n{\\n  using SML for StakeModuleStorage;\\n  using IEL for StakeModuleStorage;\\n  using OEL for StakeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   *\\n   * @dev Do not add any other variables here. Modules do not have a gap.\\n   * Library's main struct has a gap, providing up to 16 storage slots for this module.\\n   */\\n  // keccak256(abi.encode(uint256(keccak256(\\\"geode.storage.StakeModuleStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant StakeModuleStorageLocation =\\n    0x642b1534be65022221e9e6919fcbcd097fefb6d9d9b7897cee77332e470da700;\\n\\n  function _getStakeModuleStorage() internal pure returns (StakeModuleStorage storage $) {\\n    assembly {\\n      $.slot := StakeModuleStorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event IdInitiated(uint256 id, uint256 indexed TYPE);\\n  event MiddlewareDeployed(uint256 poolId, uint256 version);\\n  event PackageDeployed(uint256 poolId, uint256 packageType, address instance);\\n  event InfrastructureFeeSet(uint256 _type, uint256 fee);\\n  event BeaconDelaySet(uint256 entryDelay, uint256 exitDelay);\\n  event InitiationDepositSet(uint256 initiationDeposit);\\n  event VisibilitySet(uint256 id, bool isPrivate);\\n  event YieldReceiverSet(uint256 indexed poolId, address yieldReceiver);\\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\\n  event ValidatorPeriodSwitched(uint256 indexed operatorId, uint256 period, uint256 effectiveAfter);\\n  event Delegation(uint256 poolId, uint256 indexed operatorId, uint256 allowance);\\n  event FallbackOperator(uint256 poolId, uint256 indexed operatorId, uint256 threshold);\\n  event Prisoned(uint256 indexed operatorId, bytes proof, uint256 releaseTimestamp);\\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\\n  event StakeProposal(uint256 poolId, uint256 operatorId, bytes[] pubkeys);\\n  event Stake(bytes[] pubkeys);\\n\\n  event Alienated(bytes pubkey);\\n  event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\n  event FeeTheft(uint256 indexed id, bytes proofs);\\n  event YieldDistributed(uint256 indexed poolId, uint256 amount);\\n  event OracleReported(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 monopolyThreshold\\n  );\\n\\n  /**\\n   * @custom:section                           ** ABSTRACT FUNCTIONS **\\n   */\\n  function pause() external virtual override;\\n\\n  function unpause() external virtual override;\\n\\n  function setInfrastructureFee(uint256 _type, uint256 fee) external virtual override;\\n\\n  function setBeaconDelays(uint256 _type, uint256 fee) external virtual override;\\n\\n  function setInitiationDeposit(uint256 newInitiationDeposit) external virtual override;\\n\\n  /**\\n   * @custom:section                           ** INITIALIZING **\\n   */\\n  function __StakeModule_init(address _gETH, address _oracle_position) internal onlyInitializing {\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC1155Holder_init();\\n    __DataStoreModule_init();\\n    __StakeModule_init_unchained(_gETH, _oracle_position);\\n  }\\n\\n  function __StakeModule_init_unchained(\\n    address _gETH,\\n    address _oracle_position\\n  ) internal onlyInitializing {\\n    require(_gETH != address(0), \\\"SM:gETH cannot be zero address\\\");\\n    require(_oracle_position != address(0), \\\"SM:oracle cannot be zero address\\\");\\n\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n\\n    $.gETH = IgETH(_gETH);\\n    $.ORACLE_POSITION = _oracle_position;\\n\\n    $.BEACON_DELAY_ENTRY = 14 days;\\n    $.BEACON_DELAY_EXIT = 14 days;\\n\\n    $.INITIATION_DEPOSIT = 32 ether; // initially 32 eth\\n\\n    $.DAILY_PRICE_INCREASE_LIMIT = (7 * PERCENTAGE_DENOMINATOR) / 100;\\n    $.DAILY_PRICE_DECREASE_LIMIT = (7 * PERCENTAGE_DENOMINATOR) / 100;\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function StakeParams()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 beaconDelayEntry,\\n      uint256 beaconDelayExit,\\n      uint256 initiationDeposit,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit\\n    )\\n  {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    gETH = address($.gETH);\\n    oraclePosition = $.ORACLE_POSITION;\\n    validatorsIndex = $.VALIDATORS_INDEX;\\n    verificationIndex = $.VERIFICATION_INDEX;\\n    monopolyThreshold = $.MONOPOLY_THRESHOLD;\\n    beaconDelayEntry = $.BEACON_DELAY_ENTRY;\\n    beaconDelayExit = $.BEACON_DELAY_EXIT;\\n    initiationDeposit = $.INITIATION_DEPOSIT;\\n    oracleUpdateTimestamp = $.ORACLE_UPDATE_TIMESTAMP;\\n    dailyPriceIncreaseLimit = $.DAILY_PRICE_INCREASE_LIMIT;\\n    dailyPriceDecreaseLimit = $.DAILY_PRICE_DECREASE_LIMIT;\\n  }\\n\\n  function getValidator(\\n    bytes calldata pubkey\\n  ) external view virtual override returns (Validator memory) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.validators[pubkey];\\n  }\\n\\n  function getBalancesMerkleRoot() external view virtual override returns (bytes32) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.BALANCE_MERKLE_ROOT;\\n  }\\n\\n  function getPriceMerkleRoot() external view virtual override returns (bytes32) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.PRICE_MERKLE_ROOT;\\n  }\\n\\n  function getPackageVersion(uint256 _type) external view virtual override returns (uint256) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.packages[_type];\\n  }\\n\\n  function isMiddleware(\\n    uint256 _type,\\n    uint256 _version\\n  ) external view virtual override returns (bool) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.middlewares[_type][_version];\\n  }\\n\\n  function getInfrastructureFee(uint256 _type) external view virtual override returns (uint256) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.infrastructureFees[_type];\\n  }\\n\\n  /**\\n   * @custom:section                           ** OPERATOR INITIATOR **\\n   *\\n   * @custom:visibility -> external\\n   */\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable virtual override nonReentrant whenNotPaused {\\n    IEL.initiateOperator(_getDataStoreModuleStorage(), id, fee, validatorPeriod, maintainer);\\n  }\\n\\n  /**\\n   * @custom:section                           ** STAKING POOL INITIATOR **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable virtual override whenNotPaused returns (uint256 poolId) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    poolId = $.initiatePool(\\n      _getDataStoreModuleStorage(),\\n      fee,\\n      middlewareVersion,\\n      maintainer,\\n      NAME,\\n      middleware_data,\\n      config\\n    );\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** POOL VISIBILITY **\\n   */\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external virtual override {\\n    SML.setPoolVisibility(_getDataStoreModuleStorage(), poolId, makePrivate);\\n  }\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external virtual override {\\n    SML.setWhitelist(_getDataStoreModuleStorage(), poolId, whitelist);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function isPrivatePool(uint256 poolId) external view virtual override returns (bool) {\\n    return SML.isPrivatePool(_getDataStoreModuleStorage(), poolId);\\n  }\\n\\n  function isWhitelisted(\\n    uint256 poolId,\\n    address staker\\n  ) external view virtual override returns (bool) {\\n    return SML.isWhitelisted(_getDataStoreModuleStorage(), poolId, staker);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** BOUND LIQUIDITY PACKAGE **\\n   */\\n\\n  function deployLiquidityPackage(uint256 poolId) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.deployLiquidityPackage(_getDataStoreModuleStorage(), poolId);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** YIELD SEPARATION **\\n   */\\n\\n  function setYieldReceiver(\\n    uint256 poolId,\\n    address yieldReceiver\\n  ) external virtual override whenNotPaused {\\n    SML.setYieldReceiver(_getDataStoreModuleStorage(), poolId, yieldReceiver);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ID MANAGEMENT **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** MAINTAINER **\\n   */\\n\\n  function changeMaintainer(\\n    uint256 id,\\n    address newMaintainer\\n  ) external virtual override whenNotPaused {\\n    SML.changeMaintainer(_getDataStoreModuleStorage(), id, newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** FEE **\\n   */\\n\\n  function switchMaintenanceFee(\\n    uint256 id,\\n    uint256 newFee\\n  ) external virtual override whenNotPaused {\\n    SML.switchMaintenanceFee(_getDataStoreModuleStorage(), id, newFee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function getMaintenanceFee(uint256 id) external view virtual override returns (uint256) {\\n    return SML.getMaintenanceFee(_getDataStoreModuleStorage(), id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** INTERNAL WALLET **\\n   */\\n\\n  function increaseWalletBalance(\\n    uint256 id\\n  ) external payable virtual override nonReentrant whenNotPaused returns (bool) {\\n    return SML.increaseWalletBalance(_getDataStoreModuleStorage(), id);\\n  }\\n\\n  function decreaseWalletBalance(\\n    uint256 id,\\n    uint256 value\\n  ) external virtual override nonReentrant returns (bool) {\\n    return SML.decreaseWalletBalance(_getDataStoreModuleStorage(), id, value);\\n  }\\n\\n  /**\\n   * @custom:section                           ** OPERATORS PERIOD **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function switchValidatorPeriod(\\n    uint256 operatorId,\\n    uint256 newPeriod\\n  ) external virtual override whenNotPaused {\\n    SML.switchValidatorPeriod(_getDataStoreModuleStorage(), operatorId, newPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function getValidatorPeriod(uint256 id) external view virtual override returns (uint256) {\\n    return SML.getValidatorPeriod(_getDataStoreModuleStorage(), id);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRISON **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function blameProposal(bytes calldata pk) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.blameProposal(_getDataStoreModuleStorage(), pk);\\n  }\\n\\n  function blameExit(\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.blameExit(_getDataStoreModuleStorage(), pk, beaconBalance, withdrawnBalance, balanceProof);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function isPrisoned(uint256 operatorId) external view virtual override returns (bool) {\\n    return SML.isPrisoned(_getDataStoreModuleStorage(), operatorId);\\n  }\\n\\n  /**\\n   * @custom:section                           ** DELEGATION **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external virtual override whenNotPaused {\\n    SML.delegate(_getDataStoreModuleStorage(), poolId, operatorIds, allowances);\\n  }\\n\\n  function setFallbackOperator(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external virtual override whenNotPaused {\\n    SML.setFallbackOperator(_getDataStoreModuleStorage(), poolId, operatorId, fallbackThreshold);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function operatorAllowance(\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) external view virtual override returns (uint256) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.operatorAllowance(_getDataStoreModuleStorage(), poolId, operatorId);\\n  }\\n\\n  /**\\n   * @custom:section                           ** DEPOSIT GETTERS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function isPriceValid(uint256 poolId) external view virtual override returns (bool) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.isPriceValid(poolId);\\n  }\\n\\n  function isMintingAllowed(uint256 poolId) external view virtual override returns (bool) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.isMintingAllowed(_getDataStoreModuleStorage(), poolId);\\n  }\\n\\n  /**\\n   * @custom:section                           ** POOLING OPERATIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  )\\n    external\\n    payable\\n    virtual\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 boughtgETH, uint256 mintedgETH)\\n  {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    DataStoreModuleStorage storage DSMStorage = _getDataStoreModuleStorage();\\n    if (!$.isPriceValid(poolId)) {\\n      $.priceSync(DSMStorage, poolId, price, priceProof);\\n    }\\n\\n    (boughtgETH, mintedgETH) = $.deposit(\\n      _getDataStoreModuleStorage(),\\n      poolId,\\n      mingETH,\\n      deadline,\\n      receiver\\n    );\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR CREATION **\\n   *\\n   * @custom:visibility -> external\\n   */\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.proposeStake(\\n      _getDataStoreModuleStorage(),\\n      poolId,\\n      operatorId,\\n      pubkeys,\\n      signatures1,\\n      signatures31\\n    );\\n  }\\n\\n  function stake(\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.stake(_getDataStoreModuleStorage(), operatorId, pubkeys);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n  function canStake(bytes calldata pubkey) external view virtual override returns (bool) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.canStake(pubkey);\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR EXITS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function requestExit(\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external virtual override nonReentrant whenNotPaused returns (bool) {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    return $.requestExit(_getDataStoreModuleStorage(), poolId, pk);\\n  }\\n\\n  function finalizeExit(\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external virtual override nonReentrant whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.finalizeExit(_getDataStoreModuleStorage(), poolId, pk);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ORACLE OPERATIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.updateVerificationIndex(\\n      _getDataStoreModuleStorage(),\\n      validatorVerificationIndex,\\n      alienatedPubkeys\\n    );\\n  }\\n\\n  function regulateOperators(\\n    uint256[] calldata feeThefts,\\n    bytes[] calldata proofs\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.regulateOperators(_getDataStoreModuleStorage(), feeThefts, proofs);\\n  }\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.reportBeacon(priceMerkleRoot, balanceMerkleRoot, allValidatorsCount);\\n  }\\n\\n  function priceSync(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.priceSync(_getDataStoreModuleStorage(), poolId, price, priceProof);\\n  }\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external virtual override whenNotPaused {\\n    StakeModuleStorage storage $ = _getStakeModuleStorage();\\n    $.priceSyncBatch(_getDataStoreModuleStorage(), poolIds, prices, priceProofs);\\n  }\\n}\\n\",\"keccak256\":\"0x54620587a8dac9187320d19b83a70cdc2c52ef02f7fb75e11368d4d95e9b4a6f\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/libs/DepositContractLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IDepositContract} from \\\"../../../interfaces/helpers/IDepositContract.sol\\\";\\n// internal - libraries\\nimport {BytesLib} from \\\"../../../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @title DCL: Deposit Contract Library\\n *\\n * @notice Includes constants & functions that helps to the deposit process.\\n *\\n * @dev DEPOSIT_CONTRACT is chain specific and should be changed before deployments.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DepositContractLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0x4242424242424242424242424242424242424242);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @custom:section                           ** FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(_stakeAmount % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot))\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  /**\\n   * @notice converts an address to withdrawal credential, used on validator creation\\n   */\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return abi.encodePacked(bytes32(w) | bytes32(uint256(uint160(address(wcAddress)))));\\n  }\\n\\n  /**\\n   * @notice deposit to DEPOSIT_CONTRACT and initiate a validator.\\n   */\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x71fa2b28cf5299abb9cfd8d7b8130c84f104b7a74d3ee2d6f5274e2fcc9a7ab2\",\"license\":\"MIT\"},\"contracts/modules/StakeModule/libs/InitiatorExtensionLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - contracts\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - interfaces\\nimport {IgETHMiddleware} from \\\"../../../interfaces/middlewares/IgETHMiddleware.sol\\\";\\nimport {IGeodePackage} from \\\"../../../interfaces/packages/IGeodePackage.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"../structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {DepositContractLib as DCL} from \\\"./DepositContractLib.sol\\\";\\nimport {StakeModuleLib as SML} from \\\"./StakeModuleLib.sol\\\";\\n\\n/**\\n * @title IEL: Initiator Extension Library\\n *\\n * @notice An extension to SML.\\n * @notice This library is responsible from:\\n * * 1. Node Operator Initiator for permissioned IDs\\n * * 2. Configurable Staking Pools Initiator and its helpers.\\n * * 3. Bound Liquidity Package deployment after pool initiation.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: StakeModuleLib for base staking logic.\\n *\\n * @dev This library utilizes the '_authenticate' function on the external deployLiquidityPackage,\\n *  Compared to gETHMiddleware(optional) and WithdrawalPackage(mandatory), LP be activated after\\n * the pool initiation.\\n *\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary InitiatorExtensionLib {\\n  using DSML for DataStoreModuleStorage;\\n  using SML for StakeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event InitiationDepositSet(uint256 initiationDeposit);\\n  event IdInitiated(uint256 id, uint256 indexed TYPE);\\n  event MiddlewareDeployed(uint256 poolId, uint256 version);\\n  event PackageDeployed(uint256 poolId, uint256 packageType, address instance);\\n\\n  /**\\n   * @custom:section                           ** GOVERNING **\\n   *\\n   * @custom:visibility -> external\\n   * @dev IMPORTANT! These functions should be governed by a governance! Which is not done here!\\n   */\\n\\n  /**\\n   * @notice Set the required amount for a pool initiation.\\n   * @dev note that, could have been used to prevent pool creation if there were no limits.\\n   */\\n  function setInitiationDeposit(\\n    StakeModuleStorage storage self,\\n    uint256 initiationDeposit\\n  ) external {\\n    require(initiationDeposit <= DCL.DEPOSIT_AMOUNT);\\n\\n    self.INITIATION_DEPOSIT = initiationDeposit;\\n\\n    emit InitiationDepositSet(initiationDeposit);\\n  }\\n\\n  /**\\n   * @custom:section                           ** OPERATOR INITIATOR **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice initiates ID as a Permissionned Node Operator\\n   * @notice requires ID to be approved as a node operator with a specific CONTROLLER\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR represents 100%\\n   * @param validatorPeriod the expected maximum staking interval. This value should between\\n   * * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above.\\n   * Operator can unstake at any given point before this period ends.\\n   * If operator disobeys this rule, it can be prisoned with blameProposal()\\n   * @param maintainer an address that automates daily operations, a script, a contract...\\n   * @dev operators can fund their internal wallet on initiation by simply sending some ether.\\n   */\\n  function initiateOperator(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external {\\n    require(DATASTORE.readUint(id, rks.initiated) == 0, \\\"SML:already initiated\\\");\\n    require(DATASTORE.readUint(id, rks.TYPE) == ID_TYPE.OPERATOR, \\\"SML:TYPE not allowed\\\");\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"SML:sender not CONTROLLER\\\");\\n\\n    DATASTORE.writeUint(id, rks.initiated, block.timestamp);\\n\\n    SML._setMaintenanceFee(DATASTORE, id, fee);\\n    SML._setValidatorPeriod(DATASTORE, id, validatorPeriod);\\n    SML._setMaintainer(DATASTORE, id, maintainer);\\n    SML._increaseWalletBalance(DATASTORE, id, msg.value);\\n\\n    emit IdInitiated(id, ID_TYPE.OPERATOR);\\n  }\\n\\n  /**\\n   * @custom:section                           ** STAKING POOL INITIATOR **\\n   *\\n   * @dev this section also contains the helper functions for packages and middlewares.\\n   */\\n\\n  /**\\n   * @notice Creates a Configurable Trustless Staking Pool!\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\\n   * @param middlewareVersion Pool creators can choose any allowed version as their gETHMiddleware\\n   * @param maintainer an address that automates daily operations, a script, a contract... not so critical.\\n   * @param name is utilized while generating an ID for the Pool, similar to any other ID generation.\\n   * @param middleware_data middlewares might require additional data on initialization; like name, symbol, etc.\\n   * @param config array(3)= [private(true) or public(false), deploy a middleware(if true), deploy liquidity package(if true)]\\n   * @dev checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.\\n   * @dev requires INITIATION_DEPOSIT worth of funds (currently 1 validator) to be deposited on initiation, prevent sybil attacks.\\n   */\\n  function initiatePool(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata name,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external returns (uint256 poolId) {\\n    require(msg.value == self.INITIATION_DEPOSIT, \\\"SML:need 1 validator worth of funds\\\");\\n\\n    poolId = DSML.generateId(name, ID_TYPE.POOL);\\n    require(DATASTORE.readUint(poolId, rks.initiated) == 0, \\\"SML:already initiated\\\");\\n    require(poolId > 1e9, \\\"SML:Wow! Low poolId\\\");\\n\\n    DATASTORE.writeUint(poolId, rks.initiated, block.timestamp);\\n\\n    DATASTORE.writeUint(poolId, rks.TYPE, ID_TYPE.POOL);\\n    DATASTORE.writeAddress(poolId, rks.CONTROLLER, msg.sender);\\n    DATASTORE.writeBytes(poolId, rks.NAME, name);\\n    DATASTORE.allIdsByType[ID_TYPE.POOL].push(poolId);\\n\\n    SML._setMaintainer(DATASTORE, poolId, maintainer);\\n    SML._setMaintenanceFee(DATASTORE, poolId, fee);\\n\\n    // deploy a withdrawal package - mandatory\\n    _deployWithdrawalPackage(self, DATASTORE, poolId);\\n\\n    if (config[0]) {\\n      // set pool to private\\n      SML.setPoolVisibility(DATASTORE, poolId, true);\\n    }\\n    if (config[1]) {\\n      // deploy a gETH middleware(erc20 etc.) - optional\\n      _deploygETHMiddleware(self, DATASTORE, poolId, middlewareVersion, middleware_data);\\n    }\\n    if (config[2]) {\\n      // deploy a bound liquidity package - optional\\n      _deployLiquidityPackage(self, DATASTORE, poolId);\\n    }\\n\\n    // initially 1 ETHER = 1 ETHER\\n    self.gETH.setPricePerShare(1 ether, poolId);\\n\\n    // mint gETH and send back to the caller\\n    uint256 mintedgETH = SML._mintgETH(self, DATASTORE, poolId, msg.value);\\n    self.gETH.safeTransferFrom(address(this), msg.sender, poolId, mintedgETH, \\\"\\\");\\n\\n    emit IdInitiated(poolId, ID_TYPE.POOL);\\n  }\\n\\n  /**\\n   * @custom:section                           ** POOL INITIATOR HELPERS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** gETH MIDDLEWARES **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set a gETHMiddleware\\n   * @param _middleware address of the new gETHMiddleware for given ID\\n   * @dev every middleware has a unique index within the middlewares dynamic array.\\n   * @dev if ever unset, SHOULD replace the implementation with address(0) for obvious security reasons.\\n   */\\n  function _setgETHMiddleware(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address _middleware\\n  ) internal {\\n    require(!self.gETH.isMiddleware(_middleware, id), \\\"SML:already middleware\\\");\\n\\n    DATASTORE.appendAddressArray(id, rks.middlewares, _middleware);\\n\\n    self.gETH.setMiddleware(_middleware, id, true);\\n  }\\n\\n  /**\\n   * @notice deploys a new gETHMiddleware by cloning (no upgradability)\\n   * @param _id gETH id, also required for IgETHMiddleware.initialize\\n   * @param _versionId provided version id, can use any as a middleware if allowed for TYPE = MIDDLEWARE_GETH\\n   * @param _middleware_data middlewares might require additional data on initialization; like name, symbol, etc.\\n   * @dev currrently, cannot deploy a middleware after initiation, thus only used by the initiator.\\n   * @dev currrently, cannot unset a middleware.\\n   */\\n  function _deploygETHMiddleware(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _versionId,\\n    bytes calldata _middleware_data\\n  ) internal {\\n    require(_versionId > 0, \\\"SML:versionId cannot be 0\\\");\\n    require(self.middlewares[ID_TYPE.MIDDLEWARE_GETH][_versionId], \\\"SML:not a middleware\\\");\\n\\n    address newgETHMiddleware = Clones.clone(DATASTORE.readAddress(_versionId, rks.CONTROLLER));\\n\\n    IgETHMiddleware(newgETHMiddleware).initialize(_id, address(self.gETH), _middleware_data);\\n\\n    _setgETHMiddleware(self, DATASTORE, _id, newgETHMiddleware);\\n\\n    // isolate the contract from middleware risk for ID\\n    self.gETH.avoidMiddlewares(_id, true);\\n\\n    emit MiddlewareDeployed(_id, _versionId);\\n  }\\n\\n  /**\\n   * @notice deploys a new package for given id with given type from packages mapping.\\n   * @param _type given package type\\n   * @param _poolId pool id, required for IGeodePackage.initialize\\n   * @param _package_data packages might require additional data on initialization\\n   * @dev no cloning because GeodePackages has Limited Upgradability (based on UUPS)\\n   */\\n  function _deployGeodePackage(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _type,\\n    bytes memory _package_data\\n  ) internal returns (address packageInstance) {\\n    uint256 versionId = self.packages[_type];\\n    require(versionId > 0, \\\"SML:versionId cannot be 0\\\");\\n\\n    packageInstance = address(\\n      new ERC1967Proxy(DATASTORE.readAddress(versionId, rks.CONTROLLER), \\\"\\\")\\n    );\\n    // we don't call on deployment because initialize uses _getImplementation() which is not available\\n    IGeodePackage(packageInstance).initialize(\\n      _poolId,\\n      DATASTORE.readAddress(_poolId, rks.CONTROLLER),\\n      DATASTORE.readBytes(versionId, rks.NAME),\\n      _package_data\\n    );\\n\\n    emit PackageDeployed(_poolId, _type, packageInstance);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** WITHDRAWAL PACKAGE **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Deploys a Withdrawal Package that will be used as a withdrawal credential on validator creation\\n   * @dev every pool requires a Withdrawal Package, thus this function is only used by the initiator\\n   */\\n  function _deployWithdrawalPackage(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) internal {\\n    address wp = _deployGeodePackage(\\n      self,\\n      DATASTORE,\\n      _poolId,\\n      ID_TYPE.PACKAGE_WITHDRAWAL,\\n      bytes(\\\"\\\")\\n    );\\n\\n    DATASTORE.writeAddress(_poolId, rks.withdrawalPackage, wp);\\n    DATASTORE.writeBytes(_poolId, rks.withdrawalCredential, DCL.addressToWC(wp));\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BOUND LIQUIDITY PACKAGE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice deploys a bound liquidity package for a staking pool.\\n   * @dev gives full allowance to the pool (should not be a problem as Portal only temporarily holds gETH)\\n   * @dev unlike withdrawal package, a controller can deploy a liquidity package after initiation as well\\n   * @dev _package_data of a liquidity package is only the staking pool's name, used on LPToken.\\n   */\\n  function _deployLiquidityPackage(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) internal {\\n    address lp = _deployGeodePackage(\\n      self,\\n      DATASTORE,\\n      poolId,\\n      ID_TYPE.PACKAGE_LIQUIDITY,\\n      DATASTORE.readBytes(poolId, rks.NAME)\\n    );\\n\\n    DATASTORE.writeAddress(poolId, rks.liquidityPackage, lp);\\n    // approve gETH so we can use it in buybacks\\n    self.gETH.setApprovalForAll(lp, true);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice allows pools to deploy a Liquidity Package after initiation, if it does not have one.\\n   */\\n  function deployLiquidityPackage(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public {\\n    SML._authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(\\n      DATASTORE.readAddress(poolId, rks.liquidityPackage) == address(0),\\n      \\\"SML:already deployed\\\"\\n    );\\n\\n    _deployLiquidityPackage(self, DATASTORE, poolId);\\n  }\\n}\\n\",\"keccak256\":\"0x608e4aeaabdd629a468061398cd6f053602fa8183e55a63660a5dcaf6924860c\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/libs/OracleExtensionLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// external - libraries\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n// internal - globals\\nimport {PERCENTAGE_DENOMINATOR, gETH_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"../structs/storage.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {DepositContractLib as DCL} from \\\"./DepositContractLib.sol\\\";\\nimport {StakeModuleLib as SML} from \\\"./StakeModuleLib.sol\\\";\\n\\n/**\\n * @title OEL: Oracle Extension Library\\n *\\n * @notice An extension to SML\\n * @notice Oracle, named Telescope, handles some operations for The Staking Library,\\n * * using the logic explained below.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: StakeModuleLib for base staking logic.\\n *\\n * @dev Telescope is currently responsible for 4 tasks:\\n * * Updating the on-chain price of all pools with a MerkleRoot for minting operations\\n * * Updating the on-chain balances info of all validators with a MerkleRoot for withdrawal operations\\n * * Confirming validator proposals\\n * * Regulating the Node Operators\\n *\\n * 1. updateVerificationIndex: Confirming validator proposals\\n * * 2 step process is essential to prevent the frontrunning with a problematic withdrawalCredential: https://bit.ly/3Tkc6UC\\n * * Simply, all proposed validator has an index bound to them,\\n * * n representing the latest proposal: (0,n]\\n * * Telescope verifies the validator data provided in proposeStake:\\n * * especially sig1, sig31 and withdrawal credentials.\\n * * Telescope confirms the latest index verified and states the faulty validator proposals (aliens)\\n * * If a validator proposal is faulty then it's state is set to 69, refer to globals/validator_state.sol\\n *\\n * 2. regulateOperators: Regulating the Operators\\n * * Operators can act faulty in many different ways. To prevent such actions,\\n * * Telescope regulates them with well defined limitations.\\n * * Currently only issue is the fee theft, meaning operators have not\\n * * used the withdrawal package for miner fees or MEV boost.\\n * * There can be other restrictions in the future.\\n *\\n * 2. reportBeacon: Continous Data from Beacon chain: Price Merkle Root & Balances Merkle Root & # of active validators\\n * * 1. Oracle Nodes calculate the price of its derivative, according to the validator data such as balance and fees.\\n * * 2. If a pool doesn't have a validator, the price is kept the same.\\n * * 3. A merkle tree is constructed with the order of allIdsByType array.\\n * * 4. A watcher collects all the signatures from Multiple Oracle Nodes, and submits the merkle root.\\n * * 5. Anyone can update the price of the derivative  by calling priceSync() functions with correct merkle proofs\\n * * 6. Minting is allowed within PRICE_EXPIRY (24H) after the last price update.\\n * * 7. Updates the regulation around Monopolies and provides BALANCE_MERKLE_ROOT to be used within withdrawal process.\\n *\\n * @dev Most external functions have OracleOnly modifier. Except: priceSync, priceSyncBatch, blameExit and blameProposal.\\n *\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary OracleExtensionLib {\\n  using DSML for DataStoreModuleStorage;\\n  using SML for StakeModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators: Set to 1%\\n  uint256 internal constant MONOPOLY_RATIO = 1e8; // PERCENTAGE_DENOMINATOR / 100;\\n\\n  /// @notice sensible value for the minimum beacon chain validators. No reasoning.\\n  uint256 internal constant MIN_VALIDATOR_COUNT = 50000;\\n\\n  /// @notice limiting the access for Operators in case of bad/malicious/faulty behaviour\\n  uint256 internal constant PRISON_SENTENCE = 14 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Alienated(bytes pubkey);\\n  event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\n  event FeeTheft(uint256 indexed id, bytes proofs);\\n  event Prisoned(uint256 indexed operatorId, bytes proof, uint256 releaseTimestamp);\\n  event YieldDistributed(uint256 indexed poolId, uint256 amount);\\n  event OracleReported(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 monopolyThreshold\\n  );\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyOracle(StakeModuleStorage storage self) {\\n    require(msg.sender == self.ORACLE_POSITION, \\\"OEL:sender not ORACLE\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                                       ** VERIFICATION INDEX **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   *\\n   * @notice \\\"Alien\\\" is a validator that is created with a faulty withdrawal\\n   * credential or signatures, this is a malicious act.\\n   * @notice Alienation results in imprisonment for the operator of the faulty validator proposal.\\n   * @dev While alienating a validator we should adjust the 'surplus' and 'secured'\\n   * balances of the pool accordingly\\n   * @dev We should adjust the 'proposedValidators' to fix allowances.\\n   */\\n  function _alienateValidator(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 verificationIndex,\\n    bytes calldata _pk\\n  ) internal {\\n    require(self.validators[_pk].index <= verificationIndex, \\\"OEL:unexpected index\\\");\\n    require(\\n      self.validators[_pk].state == VALIDATOR_STATE.PROPOSED,\\n      \\\"OEL:not all pubkeys are pending\\\"\\n    );\\n\\n    uint256 operatorId = self.validators[_pk].operatorId;\\n    _imprison(DATASTORE, operatorId, _pk);\\n\\n    uint256 poolId = self.validators[_pk].poolId;\\n    DATASTORE.subUint(poolId, rks.secured, DCL.DEPOSIT_AMOUNT);\\n    DATASTORE.addUint(poolId, rks.surplus, DCL.DEPOSIT_AMOUNT);\\n\\n    DATASTORE.subUint(poolId, DSML.getKey(operatorId, rks.proposedValidators), 1);\\n    DATASTORE.addUint(poolId, DSML.getKey(operatorId, rks.alienValidators), 1);\\n\\n    self.validators[_pk].state = VALIDATOR_STATE.ALIENATED;\\n\\n    emit Alienated(_pk);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   *\\n   * @notice Updating VERIFICATION_INDEX, signaling that it is safe to activate\\n   * the validator proposals with lower index than new VERIFICATION_INDEX\\n   * @param validatorVerificationIndex (inclusive) index of the highest validator that is verified to be activated\\n   * @param alienatedPubkeys faulty proposals within the range of new and old verification indexes.\\n   */\\n  function updateVerificationIndex(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external onlyOracle(self) {\\n    require(self.VALIDATORS_INDEX >= validatorVerificationIndex, \\\"OEL:high VERIFICATION_INDEX\\\");\\n    require(validatorVerificationIndex > self.VERIFICATION_INDEX, \\\"OEL:low VERIFICATION_INDEX\\\");\\n\\n    uint256 alienatedPubkeysLen = alienatedPubkeys.length;\\n    for (uint256 i; i < alienatedPubkeysLen; ) {\\n      _alienateValidator(self, DATASTORE, validatorVerificationIndex, alienatedPubkeys[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.VERIFICATION_INDEX = validatorVerificationIndex;\\n    emit VerificationIndexUpdated(validatorVerificationIndex);\\n  }\\n\\n  /**\\n   * @dev                                       ** REGULATING OPERATORS **\\n   */\\n\\n  /**\\n   * @custom:section                           ** PRISON **\\n   *\\n   * When node operators act in a malicious way, which can also be interpreted as\\n   * an honest mistake like using a faulty signature, Oracle imprisons the operator.\\n   * These conditions are:\\n   * * 1. Created a malicious validator(alien): faulty withdrawal credential, faulty signatures etc.\\n   * * 2. Have not respect the validatorPeriod (or blamed for some other valid case)\\n   * * 3. Stole block fees or MEV boost rewards from the pool\\n   *\\n   * @dev this section lacks a potential punishable act, for now early exits are not enforced:\\n   * While state is EXIT_REQUESTED: validator requested exit, but it hasn't been executed.\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Put an operator in prison\\n   * @dev rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function _imprison(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    bytes calldata _proof\\n  ) internal {\\n    SML._authenticate(DATASTORE, _operatorId, false, false, [true, false]);\\n\\n    DATASTORE.writeUint(_operatorId, rks.release, block.timestamp + PRISON_SENTENCE);\\n\\n    emit Prisoned(_operatorId, _proof, block.timestamp + PRISON_SENTENCE);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice imprisoning an Operator if the validator proposal is approved but have not been executed.\\n   * @dev anyone can call this function while the state is PROPOSED\\n   * @dev this check can be problematic in the case the beaconchain deposit delay is > BEACON_DELAY_ENTRY,\\n   * * depending on the expected delay of telescope approvals. However, BEACON_DELAY_ENTRY can be adjusted by the Governance.\\n   * @dev _canStake checks == VALIDATOR_STATE.PROPOSED.\\n   */\\n  function blameProposal(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    bytes calldata pk\\n  ) external {\\n    uint256 verificationIndex = self.VERIFICATION_INDEX;\\n    require(self._canStake(pk, verificationIndex), \\\"OEL:cannot blame proposal\\\");\\n    require(\\n      block.timestamp > self.validators[pk].createdAt + self.BEACON_DELAY_ENTRY,\\n      \\\"OEL:acceptable delay\\\"\\n    );\\n\\n    _alienateValidator(self, DATASTORE, verificationIndex, pk);\\n  }\\n\\n  /**\\n   * @notice imprisoning an Operator if the validator have not been exited until expected exit\\n   * @dev normally, oracle should verify the signed exit request on beacon chain for a (deterministic) epoch\\n   * * before approval. This function enforces it further for the stakers.\\n   * @dev anyone can call this function while the state is ACTIVE or EXIT_REQUESTED\\n   * @dev if operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned\\n   */\\n  function blameExit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    bytes calldata pk,\\n    uint256 beaconBalance,\\n    uint256 withdrawnBalance,\\n    bytes32[] calldata balanceProof\\n  ) external {\\n    uint64 state = self.validators[pk].state;\\n    require(\\n      state == VALIDATOR_STATE.ACTIVE || state == VALIDATOR_STATE.EXIT_REQUESTED,\\n      \\\"OEL:unexpected validator state\\\"\\n    );\\n    require(\\n      block.timestamp >\\n        self.validators[pk].createdAt + self.validators[pk].period + self.BEACON_DELAY_EXIT,\\n      \\\"OEL:validator is active or acceptable delay\\\"\\n    );\\n\\n    // verify balances\\n    bytes32 leaf = keccak256(\\n      bytes.concat(keccak256(abi.encode(pk, beaconBalance, withdrawnBalance)))\\n    );\\n    require(\\n      MerkleProof.verify(balanceProof, self.BALANCE_MERKLE_ROOT, leaf),\\n      \\\"OEL:proof not valid\\\"\\n    );\\n\\n    require(beaconBalance != 0, \\\"OEL:already exited\\\");\\n\\n    _imprison(DATASTORE, self.validators[pk].operatorId, pk);\\n  }\\n\\n  /**\\n  \\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice regulating operators, currently only regulation is towards fee theft, can add more stuff in the future.\\n   * @param feeThefts Operator ids who have stolen MEV or block rewards detected\\n   * @param proofs  BlockNumber, tx or any other referance as a proof\\n   * @dev Stuff here result in imprisonment\\n   */\\n  function regulateOperators(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256[] calldata feeThefts,\\n    bytes[] calldata proofs\\n  ) external onlyOracle(self) {\\n    require(feeThefts.length == proofs.length, \\\"OEL:invalid proofs\\\");\\n\\n    uint256 feeTheftsLen = feeThefts.length;\\n    for (uint256 i; i < feeTheftsLen; ) {\\n      _imprison(DATASTORE, feeThefts[i], proofs[i]);\\n\\n      emit FeeTheft(feeThefts[i], proofs[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** CONTINUOUS UPDATES **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT.\\n   * Also reports all of the validator balances with a BALANCE_MERKLE_ROOT.\\n   * Then, updates the ORACLE_UPDATE_TIMESTAMP and MONOPOLY_THRESHOLD\\n   *\\n   * @param allValidatorsCount Number of all validators within BeaconChain, all of them.\\n   * Prevents monopolies.\\n   */\\n  function reportBeacon(\\n    StakeModuleStorage storage self,\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external onlyOracle(self) {\\n    require(allValidatorsCount > MIN_VALIDATOR_COUNT, \\\"OEL:low validator count\\\");\\n\\n    self.PRICE_MERKLE_ROOT = priceMerkleRoot;\\n    self.BALANCE_MERKLE_ROOT = balanceMerkleRoot;\\n    self.ORACLE_UPDATE_TIMESTAMP = block.timestamp;\\n\\n    uint256 newThreshold = (allValidatorsCount * MONOPOLY_RATIO) / PERCENTAGE_DENOMINATOR;\\n    self.MONOPOLY_THRESHOLD = newThreshold;\\n\\n    emit OracleReported(priceMerkleRoot, balanceMerkleRoot, newThreshold);\\n  }\\n\\n  /**\\n   * @custom:section                           **  PRICE UPDATE **\\n   *\\n   * @dev Permissionless.\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   *\\n   * @dev in order to prevent faulty updates to the derivative prices there are boundaries to price updates.\\n   * 1. Price should not be increased more than DAILY_PRICE_INCREASE_LIMIT\\n   *  with the factor of how many days since priceUpdateTimestamp has past.\\n   * 2. Price should not be decreased more than DAILY_PRICE_DECREASE_LIMIT\\n   *  with the factor of how many days since priceUpdateTimestamp has past.\\n   *\\n   * @dev Worth noting, if price drops more than x%, UP TO (slashing percentage/x) days deposits/withdrawals are halted.\\n   * Example:\\n   * * A pool can have only one validator, it can get slashed.\\n   * * Lets say max decrease is 5%, and 50% is slashed.\\n   * * Then deposits/withdrawals are halted for 10 days.\\n   * This is not a bug, but a safe circuit-breaker.\\n   * This logic have effects the withdrawal package logic.\\n   */\\n  function _sanityCheck(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _newPrice\\n  ) internal view {\\n    require(DATASTORE.readUint(_id, rks.TYPE) == ID_TYPE.POOL, \\\"OEL:not a pool?\\\");\\n\\n    uint256 lastUpdate = self.gETH.priceUpdateTimestamp(_id);\\n    uint256 dayPercentSinceUpdate = ((block.timestamp - lastUpdate) * PERCENTAGE_DENOMINATOR) /\\n      1 days;\\n\\n    uint256 curPrice = self.gETH.pricePerShare(_id);\\n\\n    uint256 maxPriceIncrease = ((curPrice *\\n      self.DAILY_PRICE_INCREASE_LIMIT *\\n      dayPercentSinceUpdate) / PERCENTAGE_DENOMINATOR) / PERCENTAGE_DENOMINATOR;\\n\\n    uint256 maxPriceDecrease = ((curPrice *\\n      self.DAILY_PRICE_DECREASE_LIMIT *\\n      dayPercentSinceUpdate) / PERCENTAGE_DENOMINATOR) / PERCENTAGE_DENOMINATOR;\\n\\n    require(\\n      (_newPrice + maxPriceDecrease >= curPrice) && (_newPrice <= curPrice + maxPriceIncrease),\\n      \\\"OEL:price is insane, price update is halted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   *\\n   * @notice syncing the price of g-derivatives after checking the merkle proofs and the sanity of the price.\\n   * @param _price price of the derivative denominated in gETH.denominator()\\n   * @param _priceProof merkle proofs\\n   */\\n  function _priceSync(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _price,\\n    bytes32[] calldata _priceProof\\n  ) internal {\\n    require(\\n      self.ORACLE_UPDATE_TIMESTAMP > self.gETH.priceUpdateTimestamp(_poolId),\\n      \\\"OEL:no price change\\\"\\n    );\\n\\n    bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(_poolId, _price))));\\n    require(\\n      MerkleProof.verify(_priceProof, self.PRICE_MERKLE_ROOT, leaf),\\n      \\\"OEL:not all proofs are valid\\\"\\n    );\\n\\n    _sanityCheck(self, DATASTORE, _poolId, _price);\\n\\n    address yieldReceiver = DATASTORE.readAddress(_poolId, rks.yieldReceiver);\\n\\n    if (yieldReceiver == address(0)) {\\n      self.gETH.setPricePerShare(_price, _poolId);\\n    } else {\\n      uint256 currentPrice = self.gETH.pricePerShare(_poolId);\\n      if (_price > currentPrice) {\\n        uint256 supplyDiff = ((_price - currentPrice) * self.gETH.totalSupply(_poolId)) /\\n          gETH_DENOMINATOR;\\n        self.gETH.mint(address(this), _poolId, supplyDiff, \\\"\\\");\\n        self.gETH.safeTransferFrom(address(this), yieldReceiver, _poolId, supplyDiff, \\\"\\\");\\n        emit YieldDistributed(_poolId, supplyDiff);\\n      } else {\\n        self.gETH.setPricePerShare(_price, _poolId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   *\\n   * @notice external function to set a derivative price on Portal\\n   * @param price price of the derivative denominated in gETH.denominator()\\n   * @param priceProof merkle proofs\\n   */\\n  function priceSync(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof\\n  ) external {\\n    _priceSync(self, DATASTORE, poolId, price, priceProof);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   *\\n   * @notice external function to set a multiple derivatives price at once, saves gas.\\n   * @param prices price of the derivative denominated in gETH.denominator()\\n   * @param priceProofs merkle proofs\\n   */\\n  function priceSyncBatch(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external {\\n    require(poolIds.length == prices.length, \\\"OEL:array lengths not equal\\\");\\n    require(poolIds.length == priceProofs.length, \\\"OEL:array lengths not equal\\\");\\n\\n    uint256 poolIdsLen = poolIds.length;\\n    for (uint256 i; i < poolIdsLen; ) {\\n      _priceSync(self, DATASTORE, poolIds[i], prices[i], priceProofs[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x87a4151cc30ce2d2e1c0c2ec45b0b3ff126e706e89e7d69512a58cc7e42d2a57\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/libs/StakeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - globals\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {PERCENTAGE_DENOMINATOR, gETH_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {IGeodePackage} from \\\"../../../interfaces/packages/IGeodePackage.sol\\\";\\nimport {ILiquidityPackage} from \\\"../../../interfaces/packages/ILiquidityPackage.sol\\\";\\nimport {IWhitelist} from \\\"../../../interfaces/helpers/IWhitelist.sol\\\";\\n// internal - structs\\nimport {DataStoreModuleStorage} from \\\"../../DataStoreModule/structs/storage.sol\\\";\\nimport {StakeModuleStorage} from \\\"../structs/storage.sol\\\";\\nimport {ConstantValidatorData} from \\\"../structs/helpers.sol\\\";\\nimport {Validator} from \\\"../structs/utils.sol\\\";\\n// internal - libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {DepositContractLib as DCL} from \\\"./DepositContractLib.sol\\\";\\n\\n/**\\n * @title SML: Stake Module Library (The Staking Library)\\n *\\n * @notice Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool,\\n * improving the user experience for stakers and removing the \\\"need\\\" for centralized or decentralized intermediaries.\\n * * Exclusively contains functions related to:\\n * * 1. Pool and Operator management, after initiation (review IEL).\\n * * 2. Validator Delegation.\\n * * 3. Depositing.\\n * * 4. Staking Operations.\\n *\\n * @dev review: DataStoreModule for the id based isolated storage logic.\\n * @dev review: InitiatorExtensionLib for initiator functions.\\n * @dev review: OracleExtensionLib for oracle logic.\\n *\\n * @dev Every pool is isolated and every validator is unique. We segregate all the risk.\\n *\\n * @dev CONTROLLER and Maintainer:\\n * CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important.\\n * maintainer is the worker, can be used to automate some daily tasks:\\n * * distributing validators for Staking Pools or creating validators for Operators.\\n * * not so crucial in terms of security.\\n *\\n * @dev Users:\\n * Type 4 : Permissioned Operators\\n * * Needs to be onboarded by the Dual Governance (Senate + Governance).\\n * * Maintains Beacon Chain Validators on behalf of the Staking Pools.\\n * * Can participate in the Operator Marketplace after initiation.\\n * * Can utilize maintainers for staking operations.\\n *\\n * Type 5 : Permissionless Configurable Staking Pools\\n * * Permissionless to create.\\n * * Can utilize powers of packages and middlewares such as Bound Liquidity Packages, gETHMiddlewares etc.\\n * * Can be public or private, can use a whitelist if private.\\n * * Can utilize maintainers for validator distribution on Operator Marketplace.\\n * * Uses a Withdrawal Package to be given as withdrawalCredential on validator creation,\\n * * accruing rewards and keeping Staked Ether safe and isolated.\\n *\\n * @dev Packages:\\n * An ID can only point to one version of a Package at a time.\\n * Built by utilizing the Modules!\\n * Can be upgraded by a dual governance, via pullUpgrade.\\n * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n *\\n * Type 10011 : Withdrawal Package\\n * * Mandatory.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Staking Pools are in \\\"Isolation Mode\\\" until their Withdrawal Package is upgraded.\\n * * * Meaning, no more Depositing or Validator Proposal can happen.\\n * * Custodian of the validator funds after creation, including any type of rewards and fees.\\n *\\n * Type 10021 : Liquidity Package implementation\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Liquidity Packages are in \\\"Isolation Mode\\\" until upgraded.\\n *\\n * @dev Middlewares:\\n * Can support many different versions that can be utilized by the Pool Owners.\\n * No particular way to build one.\\n * Cannot be upgraded.\\n * Currently only gETHMiddlewares.\\n *\\n * Type 20011 : gETHMiddleware\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Requires the approval of Senate\\n * * Currently should be utilized on initiation.\\n *\\n * @dev Contracts relying on this library must initialize StakeModuleLib.StakeModuleStorage\\n *\\n * @dev Functions are protected with authentication function\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary StakeModuleLib {\\n  using DSML for DataStoreModuleStorage;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice limiting the GOVERNANCE_FEE to 5%\\n  uint256 internal constant MAX_POOL_INFRASTRUCTURE_FEE = 5e8; // (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /// @notice limit the beacon delays on entry and exit since it can be adjusted by the governance.\\n  uint256 internal constant MAX_BEACON_DELAY = 90 days; // = MIN_VALIDATOR_PERIOD\\n\\n  /// @notice limiting the pool and operator maintenance fee, 10%\\n  uint256 internal constant MAX_MAINTENANCE_FEE = 1e9; // (PERCENTAGE_DENOMINATOR * 10) / 100;\\n\\n  /// @notice effective on allowance per operator, prevents overflow. Exclusive, save gas with +1.\\n  uint256 internal constant MAX_ALLOWANCE = 1e6;\\n\\n  /// @notice price of gETH is only valid for 24H, minting is not allowed afterwards.\\n  uint256 internal constant PRICE_EXPIRY = 24 hours;\\n\\n  /// @notice ignoring any buybacks if the Liquidity Package has a low debt\\n  uint256 internal constant IGNORABLE_DEBT = 1 ether;\\n\\n  /// @notice limiting the operator.validatorPeriod, between 3 months to 2 years\\n  uint256 internal constant MIN_VALIDATOR_PERIOD = 90 days; // 3 * 30 days\\n  uint256 internal constant MAX_VALIDATOR_PERIOD = 730 days; // 2 * 365 days\\n\\n  /// @notice some parameter changes are effective after a delay\\n  uint256 internal constant SWITCH_LATENCY = 3 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event InfrastructureFeeSet(uint256 _type, uint256 fee);\\n  event BeaconDelaySet(uint256 entryDelay, uint256 exitDelay);\\n  event VisibilitySet(uint256 id, bool isPrivate);\\n  event YieldReceiverSet(uint256 indexed poolId, address yieldReceiver);\\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\\n  event ValidatorPeriodSwitched(uint256 indexed operatorId, uint256 period, uint256 effectiveAfter);\\n  event Delegation(uint256 poolId, uint256 indexed operatorId, uint256 allowance);\\n  event FallbackOperator(uint256 poolId, uint256 indexed operatorId, uint256 threshold);\\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\\n  event StakeProposal(uint256 poolId, uint256 operatorId, bytes[] pubkeys);\\n  event Stake(bytes[] pubkeys);\\n  event ExitRequest(bytes pubkey);\\n  event Exit(bytes pubkey);\\n\\n  /**\\n   * @custom:section                           ** GOVERNING **\\n   *\\n   * @custom:visibility -> external\\n   * @dev IMPORTANT! These functions should be governed by a governance! Which is not done here!\\n   */\\n\\n  /**\\n   * @notice Set the maxiumum allowed beacon delay for blaming validators on creation and exit.\\n   * @dev high beacon delays will affect the ux negatively, low delays can cause issues for operators.\\n   */\\n  function setBeaconDelays(StakeModuleStorage storage self, uint256 entry, uint256 exit) external {\\n    require(entry < MAX_BEACON_DELAY, \\\"SML:> MAX\\\");\\n    require(exit < MAX_BEACON_DELAY, \\\"SML:> MAX\\\");\\n\\n    self.BEACON_DELAY_ENTRY = entry;\\n    self.BEACON_DELAY_EXIT = exit;\\n\\n    emit BeaconDelaySet(entry, exit);\\n  }\\n\\n  /**\\n   * @notice Set a fee (denominated in PERCENTAGE_DENOMINATOR) for any given TYPE.\\n   * @dev Changing the Staking Pool fee, only applies to the newly created validators.\\n   * @dev advise that there can be other fees within the package, thus we will never allow\\n   * * governance to take more than x%, while x<80(at least). For now, 50% limit on all fees\\n   * * makes sense to us. However, it can be adjusted to any value between 0-80 in the future.\\n   */\\n  function setInfrastructureFee(\\n    StakeModuleStorage storage self,\\n    uint256 _type,\\n    uint256 fee\\n  ) external {\\n    if (_type == ID_TYPE.POOL) {\\n      require(fee <= MAX_POOL_INFRASTRUCTURE_FEE, \\\"PORTAL:> MAX\\\");\\n    } else {\\n      require(fee < PERCENTAGE_DENOMINATOR / 2, \\\"SML:> 50%\\\");\\n    }\\n\\n    self.infrastructureFees[_type] = fee;\\n    emit InfrastructureFeeSet(_type, fee);\\n  }\\n\\n  /**\\n   * @custom:section                           ** AUTHENTICATION **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice restricts the access to given function based on TYPE and msg.sender\\n   * @param _expectCONTROLLER restricts the access to only CONTROLLER.\\n   * @param _expectMaintainer restricts the access to only maintainer.\\n   * @param _restrictionMap Restricts which TYPEs can pass the authentication.\\n   * * [0: Operator = TYPE(4), 1: Pool = TYPE(5)]\\n   * @dev can only be used after an ID is initiated\\n   * @dev CONTROLLERS and maintainers of the Prisoned Operators cannot access.\\n   */\\n  function _authenticate(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    bool _expectCONTROLLER,\\n    bool _expectMaintainer,\\n    bool[2] memory _restrictionMap\\n  ) internal view {\\n    require(DATASTORE.readUint(_id, rks.initiated) != 0, \\\"SML:not initiated\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(_id, rks.TYPE);\\n\\n    if (typeOfId == ID_TYPE.OPERATOR) {\\n      require(_restrictionMap[0], \\\"SML:TYPE not allowed\\\");\\n      if (_expectCONTROLLER || _expectMaintainer) {\\n        require(!isPrisoned(DATASTORE, _id), \\\"SML:prisoned, get in touch with governance\\\");\\n      }\\n    } else if (typeOfId == ID_TYPE.POOL) {\\n      require(_restrictionMap[1], \\\"SML:TYPE not allowed\\\");\\n    } else {\\n      revert(\\\"SML:invalid TYPE\\\");\\n    }\\n\\n    if (_expectMaintainer) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.maintainer),\\n        \\\"SML:sender not maintainer\\\"\\n      );\\n      return;\\n    }\\n\\n    if (_expectCONTROLLER) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.CONTROLLER),\\n        \\\"SML:sender not CONTROLLER\\\"\\n      );\\n      return;\\n    }\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** POOL VISIBILITY **\\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice changes the visibility of the pool\\n   * @param makePrivate true if pool should be private, false for public pools\\n   * @dev whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again.\\n   * Note private pools can whitelist addresses with the help of a third party contract.\\n   */\\n  function setPoolVisibility(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bool makePrivate\\n  ) public {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(makePrivate != isPrivatePool(DATASTORE, poolId), \\\"SML:already set\\\");\\n\\n    DATASTORE.writeUint(poolId, rks.privatePool, makePrivate ? 1 : 0);\\n\\n    if (!makePrivate) {\\n      DATASTORE.writeAddress(poolId, rks.whitelist, address(0));\\n    }\\n\\n    emit VisibilitySet(poolId, makePrivate);\\n  }\\n\\n  /**\\n   * @notice private pools can whitelist addresses with the help of a third party contract.\\n   * @dev Whitelisting contracts should implement IWhitelist interface.\\n   */\\n  function setWhitelist(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address whitelist\\n  ) external {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(isPrivatePool(DATASTORE, poolId), \\\"SML:must be private pool\\\");\\n\\n    DATASTORE.writeAddress(poolId, rks.whitelist, whitelist);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the pool is private\\n   */\\n  function isPrivatePool(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return (DATASTORE.readUint(poolId, rks.privatePool) == 1);\\n  }\\n\\n  /**\\n   * @notice checks if the Whitelist allows staker to use given private pool\\n   * @dev Owner of the pool doesn't need whitelisting\\n   * @dev Otherwise requires a whitelisting address to be set\\n   */\\n  function isWhitelisted(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address staker\\n  ) public view returns (bool) {\\n    if (DATASTORE.readAddress(poolId, rks.CONTROLLER) == staker) {\\n      return true;\\n    }\\n\\n    address whitelist = DATASTORE.readAddress(poolId, rks.whitelist);\\n    if (whitelist == address(0)) {\\n      return false;\\n    }\\n\\n    if (whitelist.code.length > 0) {\\n      try IWhitelist(whitelist).isAllowed(staker) returns (bool _isAllowed) {\\n        return _isAllowed;\\n      } catch {\\n        return false;\\n      }\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** ID MANAGEMENT **\\n   *\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** YIELD SEPARATION **\\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Set the yield receiver address to activate or deactivete yield separation logic.\\n   * * If set other than address(0) separation will be activated, if set back to address(0)\\n   * * separation will be deactivated again.\\n   * @param poolId the gETH id of the Pool\\n   * @param yieldReceiver address of the yield receiver\\n   * @dev Only CONTROLLER of pool can set yield receier.\\n   */\\n  function setYieldReceiver(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    address yieldReceiver\\n  ) external {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n\\n    DATASTORE.writeAddress(poolId, rks.yieldReceiver, yieldReceiver);\\n    emit YieldReceiverSet(poolId, yieldReceiver);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** MAINTAINER **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Set the maintainer address on initiation or later\\n   * @param _newMaintainer address of the new maintainer\\n   */\\n  function _setMaintainer(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    address _newMaintainer\\n  ) internal {\\n    require(_newMaintainer != address(0), \\\"SML:maintainer cannot be zero\\\");\\n\\n    DATASTORE.writeAddress(_id, rks.maintainer, _newMaintainer);\\n    emit MaintainerChanged(_id, _newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\n   * @dev there can only be 1 maintainer per ID.\\n   * @dev it is wise to change the maintainer before the CONTROLLER, in case of any migration\\n   * @dev we don't use _authenticate here because malicious maintainers can imprison operators\\n   * * and prevent them entering here, smh.\\n   */\\n  function changeMaintainer(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    address newMaintainer\\n  ) external {\\n    require(DATASTORE.readUint(id, rks.initiated) != 0, \\\"SML:ID is not initiated\\\");\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"SML:sender not CONTROLLER\\\");\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(typeOfId == ID_TYPE.OPERATOR || typeOfId == ID_TYPE.POOL, \\\"SML:invalid TYPE\\\");\\n\\n    _setMaintainer(DATASTORE, id, newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** MAINTENANCE FEE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\\n   *\\n   * @dev respecs to the switching delay.\\n   *\\n   * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100\\n   */\\n  function getMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 fee) {\\n    if (DATASTORE.readUint(id, rks.feeSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorFee);\\n    }\\n    return DATASTORE.readUint(id, rks.fee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set fee with NO DELAY\\n   */\\n  function _setMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _newFee\\n  ) internal {\\n    require(_newFee <= MAX_MAINTENANCE_FEE, \\\"SML:> MAX_MAINTENANCE_FEE\\\");\\n    DATASTORE.writeUint(_id, rks.fee, _newFee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\\n   * @dev Cannot be called again while its currently switching.\\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\n   */\\n  function switchMaintenanceFee(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 newFee\\n  ) external {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(block.timestamp > DATASTORE.readUint(id, rks.feeSwitch), \\\"SML:currently switching\\\");\\n\\n    DATASTORE.writeUint(id, rks.priorFee, DATASTORE.readUint(id, rks.fee));\\n    DATASTORE.writeUint(id, rks.feeSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setMaintenanceFee(DATASTORE, id, newFee);\\n\\n    emit FeeSwitched(id, newFee, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** INTERNAL WALLET **\\n   *\\n   * @dev Internal wallet of an ID accrues fees over time.\\n   * It is also used by Node Operators to fund 1 ETH per validator proposal, which is reimbursed if/when activated.\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Simply increases the balance of an IDs Maintainer wallet\\n   * @param _value Ether (in Wei) amount to increase the wallet balance.\\n   */\\n  function _increaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    DATASTORE.addUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @notice To decrease the balance of an Operator's wallet internally\\n   * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\n   */\\n  function _decreaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    require(DATASTORE.readUint(_id, rks.wallet) >= _value, \\\"SML:insufficient wallet balance\\\");\\n    DATASTORE.subUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice external function to increase the internal wallet balance\\n   * @dev anyone can increase the balance directly, useful for Withdrawal Packages and distributed fees etc.\\n   */\\n  function increaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, false, false, [true, true]);\\n    _increaseWalletBalance(DATASTORE, id, msg.value);\\n    success = true;\\n  }\\n\\n  /**\\n   * @notice external function to decrease the internal wallet balance\\n   * @dev only CONTROLLER can decrease the balance externally,\\n   * @return success if the amount was sent and deducted\\n   */\\n  function decreaseWalletBalance(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 value\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(address(this).balance >= value, \\\"SML:insufficient contract balance\\\");\\n\\n    _decreaseWalletBalance(DATASTORE, id, value);\\n    address controller = DATASTORE.readAddress(id, rks.CONTROLLER);\\n\\n    (success, ) = payable(controller).call{value: value}(\\\"\\\");\\n    require(success, \\\"SML:Failed to send ETH\\\");\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** OPERATORS PERIOD **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  function getValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 period) {\\n    if (DATASTORE.readUint(id, rks.periodSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorPeriod);\\n    }\\n    return DATASTORE.readUint(id, rks.validatorPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set validator period with NO DELAY\\n   */\\n  function _setValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    uint256 _newPeriod\\n  ) internal {\\n    require(_newPeriod >= MIN_VALIDATOR_PERIOD, \\\"SML:< MIN_VALIDATOR_PERIOD\\\");\\n    require(_newPeriod <= MAX_VALIDATOR_PERIOD, \\\"SML:> MAX_VALIDATOR_PERIOD\\\");\\n\\n    DATASTORE.writeUint(_operatorId, rks.validatorPeriod, _newPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\\n   * @dev limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\\n   */\\n  function switchValidatorPeriod(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId,\\n    uint256 newPeriod\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, true, false, [true, false]);\\n\\n    require(\\n      block.timestamp > DATASTORE.readUint(operatorId, rks.periodSwitch),\\n      \\\"SML:currently switching\\\"\\n    );\\n\\n    DATASTORE.writeUint(\\n      operatorId,\\n      rks.priorPeriod,\\n      DATASTORE.readUint(operatorId, rks.validatorPeriod)\\n    );\\n    DATASTORE.writeUint(operatorId, rks.periodSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setValidatorPeriod(DATASTORE, operatorId, newPeriod);\\n\\n    emit ValidatorPeriodSwitched(operatorId, newPeriod, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRISON **\\n   *\\n   * @custom:visibility -> view-public\\n   * @dev check OEL.blameProposal and OEL.blameExit for imprisonment details\\n   */\\n\\n  /**\\n   * @notice Checks if the given operator is Prisoned\\n   * @dev rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function isPrisoned(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId\\n  ) public view returns (bool) {\\n    return (block.timestamp < DATASTORE.readUint(operatorId, rks.release));\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR DELEGATION **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool\\n   * @dev an operator cannot create new validators if:\\n   * * 1. operator is a monopoly\\n   * * 2. allowance is filled\\n   * * * But if operator is set as a fallback, it can if set fallbackThreshold is reached on all allowances.\\n   * @dev If operator withdraws a validator, then able to create a new one.\\n   * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowance\\n   * @dev allowance doesn't change when new validators created or old ones are unstaked.\\n   */\\n  function operatorAllowance(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) public view returns (uint256 remValidators) {\\n    // monopoly check\\n    {\\n      // readUint for an array gives us length\\n      uint256 numOperatorValidators = DATASTORE.readUint(operatorId, rks.validators);\\n      uint256 monopoly_threshold = self.MONOPOLY_THRESHOLD;\\n      if (numOperatorValidators >= monopoly_threshold) {\\n        return 0;\\n      } else {\\n        remValidators = monopoly_threshold - numOperatorValidators;\\n      }\\n    }\\n\\n    // fallback check\\n    {\\n      if (operatorId == DATASTORE.readUint(poolId, rks.fallbackOperator)) {\\n        // readUint for an array gives us length\\n        uint256 numPoolValidators = DATASTORE.readUint(poolId, rks.validators);\\n        uint256 totalAllowance = DATASTORE.readUint(poolId, rks.totalAllowance);\\n\\n        if (\\n          totalAllowance == 0 ||\\n          (((numPoolValidators * PERCENTAGE_DENOMINATOR) / totalAllowance) >=\\n            DATASTORE.readUint(poolId, rks.fallbackThreshold))\\n        ) {\\n          return remValidators;\\n        }\\n      }\\n    }\\n\\n    // approval check\\n    {\\n      uint256 allowance = DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.allowance));\\n      uint256 pooledValidators = DATASTORE.readUint(\\n        poolId,\\n        DSML.getKey(operatorId, rks.proposedValidators)\\n      ) + DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.activeValidators));\\n      if (pooledValidators >= allowance) {\\n        return 0;\\n      } else {\\n        uint256 remAllowance = allowance - pooledValidators;\\n        if (remValidators > remAllowance) {\\n          remValidators = remAllowance;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice To give allowence to node operator for a pool. It re-sets the allowance with the given value.\\n   * @dev The value that is returned is not the new allowance, but the old one since it is required\\n   * * at the point where it is being returned.\\n   * @return oldAllowance to be used later, nothing is done with it within this function.\\n   */\\n  function _approveOperator(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 allowance\\n  ) internal returns (uint256 oldAllowance) {\\n    bytes32 allowanceKey = DSML.getKey(operatorId, rks.allowance);\\n\\n    oldAllowance = DATASTORE.readUint(poolId, allowanceKey);\\n    DATASTORE.writeUint(poolId, allowanceKey, allowance);\\n\\n    emit Delegation(poolId, operatorId, allowance);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool with a given number of validators.\\n   * * This number can be set again at any given point in the future.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorIds array of Operator IDs to allow them create validators\\n   * @param allowances the MAX number of validators that can be created by the Operator, for given Pool\\n   * @dev When decreased the approved validator count below current active+proposed validators,\\n   * operator cannot create new validators.\\n   */\\n  function delegate(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external {\\n    _authenticate(DATASTORE, poolId, false, true, [false, true]);\\n    uint256 operatorIdsLen = operatorIds.length;\\n    require(operatorIdsLen == allowances.length, \\\"SML:allowances should match\\\");\\n\\n    for (uint256 i; i < operatorIdsLen; ) {\\n      require(\\n        DATASTORE.readUint(operatorIds[i], rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:id not operator\\\"\\n      );\\n      require(allowances[i] <= MAX_ALLOWANCE, \\\"SML:> MAX_ALLOWANCE, set fallback\\\");\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    uint256 newCumulativeSubset;\\n    uint256 oldCumulativeSubset;\\n    for (uint256 i; i < operatorIdsLen; ) {\\n      newCumulativeSubset += allowances[i];\\n      oldCumulativeSubset += _approveOperator(DATASTORE, poolId, operatorIds[i], allowances[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    if (newCumulativeSubset > oldCumulativeSubset) {\\n      DATASTORE.addUint(poolId, rks.totalAllowance, newCumulativeSubset - oldCumulativeSubset);\\n    } else if (newCumulativeSubset < oldCumulativeSubset) {\\n      DATASTORE.subUint(poolId, rks.totalAllowance, oldCumulativeSubset - newCumulativeSubset);\\n    }\\n  }\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool without a limit\\n   * * after pool reaches a given treshold as percentage.\\n   * * fallback operator and percentage can be set again at any given point in the future.\\n   * * cannot set an operator as a fallback operator while it is currently in prison.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorId Operator ID to allow create validators\\n   * @param fallbackThreshold the percentage (with PERCENTAGE_DENOMINATOR) that fallback operator\\n   * * is activated for given Pool. Should not be greater than 100.\\n   */\\n  function setFallbackOperator(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 fallbackThreshold\\n  ) external {\\n    _authenticate(DATASTORE, poolId, false, true, [false, true]);\\n\\n    if (operatorId == 0) {\\n      DATASTORE.writeUint(poolId, rks.fallbackOperator, 0);\\n      DATASTORE.writeUint(poolId, rks.fallbackThreshold, 0);\\n      emit FallbackOperator(poolId, 0, 0);\\n    } else {\\n      require(\\n        DATASTORE.readUint(operatorId, rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:fallback not operator\\\"\\n      );\\n\\n      require(\\n        fallbackThreshold <= PERCENTAGE_DENOMINATOR,\\n        \\\"SML:threshold cannot be greater than 100\\\"\\n      );\\n\\n      DATASTORE.writeUint(poolId, rks.fallbackThreshold, fallbackThreshold);\\n      DATASTORE.writeUint(poolId, rks.fallbackOperator, operatorId);\\n\\n      emit FallbackOperator(poolId, operatorId, fallbackThreshold);\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** POOLING  **\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT HELPERS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function _isGeodePackageIsolated(address _packageAddress) internal view returns (bool) {\\n    return IGeodePackage(_packageAddress).isolationMode();\\n  }\\n\\n  /**\\n   * @notice returns wrapped bound liquidity package. If deployed, if not in isolationMode.\\n   * @dev returns address(0) if no pool or it is under isolation\\n   */\\n  function _getLiquidityPackage(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) internal view returns (ILiquidityPackage) {\\n    address liqPool = DATASTORE.readAddress(_poolId, rks.liquidityPackage);\\n    if (liqPool == address(0)) {\\n      return ILiquidityPackage(address(0));\\n    } else if (_isGeodePackageIsolated(liqPool)) {\\n      return ILiquidityPackage(address(0));\\n    } else {\\n      return ILiquidityPackage(liqPool);\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the price is valid:\\n   * - last price syncinc happened less than 24h\\n   * - there has been no oracle reports since the last update\\n   *\\n   * @dev known bug / feature: if there have been no oracle updates,\\n   * * this function will return true.\\n   *\\n   * lastupdate + PRICE_EXPIRY >= block.timestamp ? true\\n   *    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true\\n   *    : false\\n   */\\n  function isPriceValid(\\n    StakeModuleStorage storage self,\\n    uint256 poolId\\n  ) public view returns (bool isValid) {\\n    uint256 lastupdate = self.gETH.priceUpdateTimestamp(poolId);\\n    unchecked {\\n      isValid =\\n        lastupdate + PRICE_EXPIRY >= block.timestamp &&\\n        lastupdate >= self.ORACLE_UPDATE_TIMESTAMP;\\n    }\\n  }\\n\\n  /**\\n   * @notice checks if staking is allowed in given staking pool\\n   * @notice staking is not allowed if:\\n   * 1. Price is not valid\\n   * 2. WithdrawalPackage is in Isolation Mode, can have many reasons\\n   */\\n  function isMintingAllowed(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return\\n      (isPriceValid(self, poolId)) &&\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalPackage)));\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice mints gETH for a given ETH amount, keeps the tokens in Portal.\\n   * @dev fails if minting is not allowed: invalid price, or isolationMode.\\n   */\\n  function _mintgETH(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _ethAmount\\n  ) internal returns (uint256 mintedgETH) {\\n    require(isMintingAllowed(self, DATASTORE, _poolId), \\\"SML:minting is not allowed\\\");\\n\\n    uint256 price = self.gETH.pricePerShare(_poolId);\\n    require(price > 0, \\\"SML:price is zero?\\\");\\n\\n    mintedgETH = (((_ethAmount * gETH_DENOMINATOR) / price));\\n    self.gETH.mint(address(this), _poolId, mintedgETH, \\\"\\\");\\n    DATASTORE.addUint(_poolId, rks.surplus, _ethAmount);\\n  }\\n\\n  /**\\n   * @notice conducts a buyback using the given liquidity package\\n   * @param _poolId id of the gETH that will be bought\\n   * @param _maxEthToSell max ETH amount to sell in the liq pool\\n   * @param _deadline TX is expected to revert by Swap.sol if not meet\\n   * @dev this function assumes that pool is deployed by deployLiquidityPackage\\n   * as index 0 is ETH and index 1 is gETH!\\n   */\\n  function _buyback(\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _maxEthToSell,\\n    uint256 _deadline\\n  ) internal returns (uint256 remETH, uint256 boughtgETH) {\\n    ILiquidityPackage LP = _getLiquidityPackage(DATASTORE, _poolId);\\n    // skip if no liquidity package is found\\n    if (address(LP) != address(0)) {\\n      uint256 debt = LP.getDebt();\\n      // skip if debt is too low\\n      if (debt > IGNORABLE_DEBT) {\\n        if (_maxEthToSell > debt) {\\n          // if debt is lower, then only sell debt\\n          remETH = _maxEthToSell - debt;\\n        } else {\\n          // if eth is lower, then sell all eth, remETH already 0\\n          debt = _maxEthToSell;\\n        }\\n        // SWAP in LP\\n        boughtgETH = LP.swap{value: debt}(0, 1, debt, 0, _deadline);\\n      } else {\\n        remETH = _maxEthToSell;\\n      }\\n    } else {\\n      remETH = _maxEthToSell;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Allowing users to deposit into a staking pool.\\n   * @notice If a pool is not public, only the controller and if there is a whitelist contract, the whitelisted addresses can deposit.\\n   * @param poolId id of the staking pool, liquidity package and gETH to be used.\\n   * @param mingETH liquidity package parameter\\n   * @param deadline liquidity package parameter\\n   * @dev an example for minting + buybacks\\n   * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\\n   * * debt  msgValue\\n   * * 100   10  => buyback\\n   * * 100   100 => buyback\\n   * * 10    100 => buyback + mint\\n   * * 1     x   => mint\\n   * * 0.5   x   => mint\\n   * * 0     x   => mint\\n   */\\n  function deposit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external returns (uint256 boughtgETH, uint256 mintedgETH) {\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(msg.value > 0, \\\"SML:msg.value cannot be zero\\\");\\n    require(deadline > block.timestamp, \\\"SML:deadline not met\\\");\\n    require(receiver != address(0), \\\"SML:receiver is zero address\\\");\\n\\n    if (isPrivatePool(DATASTORE, poolId)) {\\n      require(isWhitelisted(DATASTORE, poolId, msg.sender), \\\"SML:sender not whitelisted\\\");\\n    }\\n\\n    uint256 remEth = msg.value;\\n    (remEth, boughtgETH) = _buyback(DATASTORE, poolId, remEth, deadline);\\n\\n    if (remEth > 0) {\\n      mintedgETH = _mintgETH(self, DATASTORE, poolId, remEth);\\n    }\\n\\n    require(boughtgETH + mintedgETH >= mingETH, \\\"SML:less than minimum\\\");\\n\\n    // send back to user\\n    self.gETH.safeTransferFrom(address(this), receiver, poolId, boughtgETH + mintedgETH, \\\"\\\");\\n\\n    emit Deposit(poolId, boughtgETH, mintedgETH);\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR CREATION **\\n   *\\n   * @dev Creation of a Validator takes 2 steps: propose and beacon stake.\\n   * Before entering stake() function, _canStake verifies the eligibility of\\n   * given pubKey that is proposed by an operator with proposeStake function.\\n   * Eligibility is defined by an optimistic alienation, check OracleUtils._alienateValidator() for info.\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n\\n  /**\\n   * @notice internal function to check if a validator can use the pool funds\\n   *\\n   *  @param _pubkey BLS12-381 public key of the validator\\n   *  @return true if:\\n   *   - pubkey should be proposed\\n   *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\n   *   - the validator's index is already covered by VERIFICATION_INDEX. Updated by Telescope.\\n   */\\n  function _canStake(\\n    StakeModuleStorage storage self,\\n    bytes calldata _pubkey,\\n    uint256 _verificationIndex\\n  ) internal view returns (bool) {\\n    return\\n      (self.validators[_pubkey].state == VALIDATOR_STATE.PROPOSED) &&\\n      (self.validators[_pubkey].index <= _verificationIndex);\\n  }\\n\\n  /**\\n   * @notice external function to check if a validator can use the pool funds\\n   */\\n  function canStake(\\n    StakeModuleStorage storage self,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    return _canStake(self, pubkey, self.VERIFICATION_INDEX);\\n  }\\n\\n  /**\\n   * @dev -> external\\n   */\\n\\n  /**\\n   * @notice Validator Credentials Proposal function, first step of crating validators.\\n   * * Once a pubKey is proposed and not alienated after verificationIndex updated,\\n   * * it is optimistically allowed to take funds from staking pools.\\n   *\\n   * @param poolId the id of the staking pool\\n   * @param operatorId the id of the Operator whose maintainer calling this function\\n   * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\\n   * @param signatures1 Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's\\n   * maintainer balance\\n   * @param signatures31 Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call\\n   *\\n   * @dev DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator.\\n   * 31 Ether will be staked after verification of oracles. 32 in total.\\n   * 1 ether will be sent back to Node Operator when the finalized deposit is successful.\\n   * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\\n   * @dev ProposeStake requires enough funds within Wallet.\\n   * @dev Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)\\n   */\\n  function proposeStake(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external {\\n    // checks\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalPackage))),\\n      \\\"SML:withdrawalPackage is isolated\\\"\\n    );\\n\\n    uint256 pkLen = pubkeys.length;\\n\\n    require((pkLen > 0) && (pkLen <= DCL.MAX_DEPOSITS_PER_CALL), \\\"SML:1 - 50 validators\\\");\\n\\n    require(\\n      pkLen == signatures1.length && pkLen == signatures31.length,\\n      \\\"SML:invalid input length\\\"\\n    );\\n\\n    require(\\n      operatorAllowance(self, DATASTORE, poolId, operatorId) >= pkLen,\\n      \\\"SML:insufficient allowance\\\"\\n    );\\n\\n    require(\\n      DATASTORE.readUint(poolId, rks.surplus) >= DCL.DEPOSIT_AMOUNT * pkLen,\\n      \\\"SML:not enough surplus\\\"\\n    );\\n\\n    _decreaseWalletBalance(DATASTORE, operatorId, (pkLen * DCL.DEPOSIT_AMOUNT_PRESTAKE));\\n\\n    for (uint256 i; i < pkLen; ) {\\n      require(pubkeys[i].length == DCL.PUBKEY_LENGTH, \\\"SML:PUBKEY_LENGTH ERROR\\\");\\n      require(signatures1[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n      require(signatures31[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    ConstantValidatorData memory valData = ConstantValidatorData({\\n      index: uint64(self.VALIDATORS_INDEX + 1),\\n      period: uint64(getValidatorPeriod(DATASTORE, operatorId)),\\n      poolFee: getMaintenanceFee(DATASTORE, poolId),\\n      operatorFee: getMaintenanceFee(DATASTORE, operatorId),\\n      infrastructureFee: self.infrastructureFees[ID_TYPE.POOL],\\n      withdrawalCredential: DATASTORE.readBytes(poolId, rks.withdrawalCredential)\\n    });\\n\\n    for (uint256 i; i < pkLen; ) {\\n      require(\\n        self.validators[pubkeys[i]].state == VALIDATOR_STATE.NONE,\\n        \\\"SML: used or alienated pk\\\"\\n      );\\n\\n      self.validators[pubkeys[i]] = Validator(\\n        VALIDATOR_STATE.PROPOSED,\\n        valData.index + uint64(i),\\n        uint64(block.timestamp),\\n        valData.period,\\n        poolId,\\n        operatorId,\\n        valData.poolFee,\\n        valData.operatorFee,\\n        valData.infrastructureFee,\\n        signatures31[i]\\n      );\\n\\n      DCL.depositValidator(\\n        pubkeys[i],\\n        valData.withdrawalCredential,\\n        signatures1[i],\\n        DCL.DEPOSIT_AMOUNT_PRESTAKE\\n      );\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    DATASTORE.subUint(poolId, rks.surplus, (pkLen * DCL.DEPOSIT_AMOUNT));\\n    DATASTORE.addUint(poolId, rks.secured, (pkLen * DCL.DEPOSIT_AMOUNT));\\n\\n    DATASTORE.addUint(poolId, DSML.getKey(operatorId, rks.proposedValidators), pkLen);\\n    DATASTORE.appendBytesArrayBatch(poolId, rks.validators, pubkeys);\\n    DATASTORE.appendBytesArrayBatch(operatorId, rks.validators, pubkeys);\\n\\n    self.VALIDATORS_INDEX += pkLen;\\n\\n    emit StakeProposal(poolId, operatorId, pubkeys);\\n  }\\n\\n  /**\\n   *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\\n   *  1 Eth per successful validator boostraping is returned back to Wallet.\\n   *\\n   *  @param operatorId the id of the Operator whose maintainer calling this function\\n   *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\\n   *\\n   *  @dev To save gas cost, pubkeys should be arranged by poolIds.\\n   *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\\n   *  pk1, pk2, pk3 from pool1\\n   *  pk4, pk5 from pool2\\n   *  pk6 from pool3\\n   *  separate them in similar groups as much as possible.\\n   *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)\\n   *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\\n   */\\n  function stake(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n\\n    require(\\n      (pubkeys.length > 0) && (pubkeys.length <= DCL.MAX_DEPOSITS_PER_CALL),\\n      \\\"SML:1 - 50 validators\\\"\\n    );\\n\\n    {\\n      uint256 pubkeysLen = pubkeys.length;\\n      uint256 _verificationIndex = self.VERIFICATION_INDEX;\\n      for (uint256 j; j < pubkeysLen; ) {\\n        require(\\n          _canStake(self, pubkeys[j], _verificationIndex),\\n          \\\"SML:not all pubkeys are stakeable\\\"\\n        );\\n\\n        require(\\n          self.validators[pubkeys[j]].operatorId == operatorId,\\n          \\\"SML:not all pubkeys belong to operator\\\"\\n        );\\n\\n        unchecked {\\n          j += 1;\\n        }\\n      }\\n    }\\n\\n    {\\n      bytes32 activeValKey = DSML.getKey(operatorId, rks.activeValidators);\\n      bytes32 proposedValKey = DSML.getKey(operatorId, rks.proposedValidators);\\n      uint256 poolId = self.validators[pubkeys[0]].poolId;\\n      bytes memory withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n\\n      uint256 lastIdChange = 0;\\n      for (uint256 i; i < pubkeys.length; ) {\\n        uint256 newPoolId = self.validators[pubkeys[i]].poolId;\\n        if (poolId != newPoolId) {\\n          uint256 sinceLastIdChange;\\n\\n          unchecked {\\n            sinceLastIdChange = i - lastIdChange;\\n          }\\n\\n          DATASTORE.subUint(poolId, rks.secured, (DCL.DEPOSIT_AMOUNT * (sinceLastIdChange)));\\n          DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n          DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n\\n          lastIdChange = i;\\n          poolId = newPoolId;\\n          withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n        }\\n\\n        DCL.depositValidator(\\n          pubkeys[i],\\n          withdrawalCredential,\\n          self.validators[pubkeys[i]].signature31,\\n          (DCL.DEPOSIT_AMOUNT - DCL.DEPOSIT_AMOUNT_PRESTAKE)\\n        );\\n\\n        self.validators[pubkeys[i]].state = VALIDATOR_STATE.ACTIVE;\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n      {\\n        uint256 sinceLastIdChange;\\n        unchecked {\\n          sinceLastIdChange = pubkeys.length - lastIdChange;\\n        }\\n\\n        DATASTORE.subUint(poolId, rks.secured, DCL.DEPOSIT_AMOUNT * (sinceLastIdChange));\\n        DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n        DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n      }\\n\\n      _increaseWalletBalance(DATASTORE, operatorId, DCL.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length);\\n\\n      emit Stake(pubkeys);\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR EXITS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Notifies the node operator with ExitRequest event\\n   * @dev Prevents the request if validator is still within the MIN_VALIDATOR_PERIOD\\n   * @dev Only the active validators can be called for an exit\\n   * @dev Can only be called by the withdrawalPackage of the pool given validator belongs to.\\n   * @dev fails in case the tx is submitted without a secure medium, withdrawal package of the correct pool\\n   * @return true if operation is successful, false if early exit.\\n   */\\n  function requestExit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external returns (bool) {\\n    if (self.validators[pk].createdAt + MIN_VALIDATOR_PERIOD > block.timestamp) {\\n      return false;\\n    }\\n\\n    require(\\n      msg.sender == DATASTORE.readAddress(poolId, rks.withdrawalPackage),\\n      \\\"SML:sender is not withdrawal package\\\"\\n    );\\n    require(self.validators[pk].poolId == poolId, \\\"SML:incorrect poolId\\\");\\n    require(self.validators[pk].state == VALIDATOR_STATE.ACTIVE, \\\"SML:not an active validator\\\");\\n\\n    self.validators[pk].state = VALIDATOR_STATE.EXIT_REQUESTED;\\n    emit ExitRequest(pk);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Finalizes the exit process for a validator.\\n   * @dev Strongly advised to be called right after the exiting process is over.\\n   * @dev Operators can exit at any time they want.\\n   * @dev Can only be called by the withdrawalPackage of the pool given validator belongs to.\\n   */\\n  function finalizeExit(\\n    StakeModuleStorage storage self,\\n    DataStoreModuleStorage storage DATASTORE,\\n    uint256 poolId,\\n    bytes calldata pk\\n  ) external {\\n    require(\\n      msg.sender == DATASTORE.readAddress(poolId, rks.withdrawalPackage),\\n      \\\"SML:sender is not withdrawal package\\\"\\n    );\\n    require(self.validators[pk].poolId == poolId, \\\"SML:incorrect poolId\\\");\\n\\n    uint256 state = self.validators[pk].state;\\n    require(\\n      state == VALIDATOR_STATE.ACTIVE || state == VALIDATOR_STATE.EXIT_REQUESTED,\\n      \\\"SML:not an active validator\\\"\\n    );\\n\\n    self.validators[pk].state = VALIDATOR_STATE.EXITED;\\n\\n    emit Exit(pk);\\n  }\\n}\\n\",\"keccak256\":\"0xc51a7594bb02505534e97537003dafae0913e25d17500d4219dcf6d94246beca\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/structs/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @notice Helper Struct to pack constant data that does not change per validator on batch proposals\\n * * needed for that famous Solidity feature.\\n */\\nstruct ConstantValidatorData {\\n  uint64 index;\\n  uint64 period;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes withdrawalCredential;\\n}\\n\",\"keccak256\":\"0x73f8b05a27695ba52270433d368245bffa9cc50ce9e8b537a57d4486dffe12e4\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/structs/storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n// internal - interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\n// internal - structs\\nimport {Validator} from \\\"./utils.sol\\\";\\n\\n/**\\n * @notice Storage struct for the Pooled Liquid Staking logic\\n * @param gETH constant, ERC1155, all Geode Staking Derivatives.\\n * @param ORACLE_POSITION constant, address of the Oracle https://github.com/Geodefi/Telescope-Eth\\n * @param VALIDATORS_INDEX total number of validators that are proposed at any given point.\\n * * Includes all validators: proposed, active, alienated, exited.\\n * @param VERIFICATION_INDEX the highest index of the validators that are verified (as not alien) by the Holy Oracle.\\n * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated by the Holy Oracle.\\n * @param BEACON_DELAY_ENTRY allowed max delay between the creation of an (approved) proposal and stake() call, per the beaconchain entry queue.\\n * @param BEACON_DELAY_EXIT allowed max delay between an exit request and its finalization with finalizeExit() call, per the beaconchain exit queue.\\n * @param INITIATION_DEPOSIT the initial deposit amount that is required for a name to be reserved by the pool, prevents sybil attacks.\\n * @param ORACLE_UPDATE_TIMESTAMP timestamp of the latest oracle update\\n * @param DAILY_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval, per second.\\n * @param DAILY_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval, per second.\\n * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, updated by the Holy Oracle.\\n * @param GOVERNANCE_FEE **reserved** Although it is 0 right now, It can be updated in the future.\\n * @param BALANCE_MERKLE_ROOT merkle root of the balances and other validator related data, useful on withdrawals, updated by the Holy Oracle.\\n * @param validators pubkey => Validator, contains all the data about proposed, alienated, active, exit-called and fully exited validators.\\n * @param packages TYPE => version id, pointing to the latest versions of the given package.\\n * * Like default Withdrawal Package version.\\n * @param middlewares TYPE => version id => isAllowed, useful to check if given version of the middleware can be used.\\n * * Like all the whitelisted gETHMiddlewares.\\n * @param fees TYPE->PERCENTAGE, we can set a fee for any defined TYPE then use it in related operations.\\n * * POOL type sets validator fees. Liqudity Pool Package type sets fee on swaps.\\n *\\n * @dev normally we would put custom:storage-location erc7201:geode.storage.StakeModule\\n * but compiler throws an error... So np for now, just MAKE SURE.\\n **/\\nstruct StakeModuleStorage {\\n  IgETH gETH;\\n  address ORACLE_POSITION;\\n  uint256 VALIDATORS_INDEX;\\n  uint256 VERIFICATION_INDEX;\\n  uint256 MONOPOLY_THRESHOLD;\\n  uint256 BEACON_DELAY_ENTRY;\\n  uint256 BEACON_DELAY_EXIT;\\n  uint256 INITIATION_DEPOSIT;\\n  uint256 ORACLE_UPDATE_TIMESTAMP;\\n  uint256 DAILY_PRICE_INCREASE_LIMIT;\\n  uint256 DAILY_PRICE_DECREASE_LIMIT;\\n  bytes32 PRICE_MERKLE_ROOT;\\n  bytes32 BALANCE_MERKLE_ROOT;\\n  mapping(bytes => Validator) validators;\\n  mapping(uint256 => uint256) packages;\\n  mapping(uint256 => mapping(uint256 => bool)) middlewares;\\n  mapping(uint256 => uint256) infrastructureFees;\\n}\\n\",\"keccak256\":\"0x69d49736b2073c5c2b4cfb7b60c9cc1c6e6614cdb0fe915bc726d571bbeb509a\",\"license\":\"BUSL-1.1\"},\"contracts/modules/StakeModule/structs/utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.20;\\n\\n/**\\n * @param state state of the validator, refer to globals.sol\\n * @param index representing this validator's placement on the chronological order of the validators proposals\\n * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n * @param poolId needed for withdrawal_credential\\n * @param operatorId needed for staking after allowance\\n * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n * @param infrastructureFee all fees are crucial for the price calculation by the oracle, even if its zero.\\n * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n **/\\nstruct Validator {\\n  uint64 state;\\n  uint64 index;\\n  uint64 createdAt;\\n  uint64 period;\\n  uint256 poolId;\\n  uint256 operatorId;\\n  uint256 poolFee;\\n  uint256 operatorFee;\\n  uint256 infrastructureFee;\\n  bytes signature31;\\n}\\n\",\"keccak256\":\"0xd7f21251a595d6cb1f23aee2015557064568e604e992b63d20acea0816dcd848\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051615340620001046000396000818161307d015281816130a601526132ba01526153406000f3fe6080604052600436106104615760003560e01c8063722679541161023f578063b784c7bb11610139578063dd272bf4116100b6578063e3099e091161007a578063e3099e0914610e22578063e72b1d6d14610e42578063e768887e14610e62578063eec29cfc14610e82578063f23a6e6114610ea257600080fd5b8063dd272bf414610d8d578063de22bc7214610dad578063df1ff92914610dcd578063e02a520814610ded578063e05ec0a314610e0d57600080fd5b8063d5357a1a116100fd578063d5357a1a14610cfa578063d6a93ba914610d0d578063d6ab4d3214610d2d578063d89da28614610d4d578063dab840c714610d6d57600080fd5b8063b784c7bb14610c35578063bc197c8114610c55578063c7f758a814610c9a578063cb337b4e14610cc7578063cdaba27414610ce757600080fd5b806398951b56116101c7578063ad4ac4c41161018b578063ad4ac4c414610b5a578063ad8655cb14610ba8578063af6561ef14610bc8578063b29498b914610be8578063b4891bfd14610c0857600080fd5b806398951b5614610a9a57806399ac48ba14610ac957806399ca83c614610ae9578063a270fece14610b09578063ad3cb1cc14610b2957600080fd5b80637e1ece9f1161020e5780637e1ece9f146109c85780638456cb59146109e85780638650c072146109fd5780638aa1043514610a12578063964ff29c14610a2757600080fd5b80637226795414610946578063736ed2e3146109735780637456533c146109935780637d22c35c146109a857600080fd5b80633b8ba8621161035b5780635329512b116102d85780635c975abb1161029c5780635c975abb146108a15780635d9e085d146108c657806366caab6f146108e6578063697684cc146109065780636d07e4041461092657600080fd5b80635329512b1461080157806356a72dbf14610821578063571ac56f146108415780635a34bb15146108615780635b50fea61461088157600080fd5b80634a9364171161031f5780634a936417146107795780634f1ef286146107995780634f62d616146107ac578063524cb25b146107cc57806352d1902d146107ec57600080fd5b80633b8ba862146106dc5780633bc961d6146106fc5780633c6a05ef1461071c5780633c9e438c1461073c5780633f4ba83a1461076457600080fd5b80631da71591116103e95780632ca60e12116103ad5780632ca60e1214610652578063303c01c114610672578063341b3c001461069257806335782386146106a757806335b12f37146106c757600080fd5b80631da71591146105a557806326eef2c0146105c557806327cd2aa4146105e5578063289b3c0d1461060557806328d7d72a1461063257600080fd5b80630aea8f4d116104305780630aea8f4d14610505578063100f72b614610525578063113743cb146105455780631b6f23d0146105655780631d95313a1461058557600080fd5b806301ffc9a71461046d578063041bc623146104a2578063060028ea146104b75780630ab4bc91146104d757600080fd5b3661046857005b600080fd5b34801561047957600080fd5b5061048d610488366004613ecd565b610ece565b60405190151581526020015b60405180910390f35b6104b56104b0366004613f0c565b610f05565b005b3480156104c357600080fd5b5061048d6104d2366004613f4d565b610fc7565b3480156104e357600080fd5b506104f76104f2366004613f66565b611058565b604051908152602001610499565b34801561051157600080fd5b506104f7610520366004613f4d565b611103565b34801561053157600080fd5b5061048d610540366004613f4d565b61118f565b34801561055157600080fd5b506104b5610560366004613fd3565b6111ef565b34801561057157600080fd5b506104b561058036600461408d565b61128e565b34801561059157600080fd5b506104f76105a0366004613f4d565b611313565b3480156105b157600080fd5b506104f76105c0366004613f66565b611333565b3480156105d157600080fd5b506104b56105e03660046140bd565b61133f565b3480156105f157600080fd5b5061048d610600366004613f4d565b6113cf565b34801561061157600080fd5b5061061a61145b565b6040516001600160a01b039091168152602001610499565b34801561063e57600080fd5b506104b561064d366004614108565b611476565b34801561065e57600080fd5b506104b561066d366004613f4d565b6114fd565b34801561067e57600080fd5b506104b561068d3660046141c2565b611564565b34801561069e57600080fd5b506104b5611613565b3480156106b357600080fd5b506104b56106c2366004613f66565b6116ac565b3480156106d357600080fd5b506104f7611708565b3480156106e857600080fd5b506104f76106f7366004614200565b61171d565b34801561070857600080fd5b506104b5610717366004614263565b6117c0565b34801561072857600080fd5b506104b5610737366004613f4d565b61184d565b61074f61074a3660046142a4565b6118d4565b60408051928352602083019190915201610499565b34801561077057600080fd5b506104b5611abb565b34801561078557600080fd5b506104b5610794366004614321565b611af5565b6104b56107a7366004614471565b611c0d565b3480156107b857600080fd5b506104b56107c73660046144c0565b611c2c565b3480156107d857600080fd5b506104b56107e73660046144c0565b611c90565b3480156107f857600080fd5b506104f7611cba565b34801561080d57600080fd5b5061061a61081c3660046144e5565b611cd7565b34801561082d57600080fd5b506104f761083c366004613f66565b611cf9565b34801561084d57600080fd5b506104b561085c3660046144e5565b611d11565b34801561086d57600080fd5b506104f761087c366004614511565b611d74565b34801561088d57600080fd5b506104b561089c36600461455c565b611dab565b3480156108ad57600080fd5b506000805160206152cb8339815191525460ff1661048d565b3480156108d257600080fd5b506104f76108e1366004613f4d565b611e37565b3480156108f257600080fd5b5061048d610901366004613f66565b611e54565b34801561091257600080fd5b5061048d6109213660046141c2565b611e82565b34801561093257600080fd5b506104b56109413660046144c0565b611f41565b34801561095257600080fd5b50610966610961366004613f66565b611f63565b6040516104999190614633565b34801561097f57600080fd5b506104b561098e3660046140bd565b611f7c565b34801561099f57600080fd5b506104f7611fb3565b3480156109b457600080fd5b5061048d6109c33660046144c0565b611fc8565b3480156109d457600080fd5b506104b56109e3366004614646565b612026565b3480156109f457600080fd5b506104b5612082565b348015610a0957600080fd5b5061048d6120ba565b348015610a1e57600080fd5b506104f7612117565b348015610a3357600080fd5b50610a3c61212c565b604080516001600160a01b039c8d1681529b909a1660208c0152988a01979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015261014082015261016001610499565b348015610aa657600080fd5b50610aba610ab5366004613f4d565b6121c9565b60405161049993929190614698565b348015610ad557600080fd5b5061061a610ae4366004613f66565b61226b565b348015610af557600080fd5b506104b5610b04366004613f66565b612283565b348015610b1557600080fd5b5061048d610b24366004613f66565b612302565b348015610b3557600080fd5b50610966604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610b6657600080fd5b50610b6f6123b5565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610499565b348015610bb457600080fd5b506104b5610bc33660046146bf565b6123fc565b348015610bd457600080fd5b506104b5610be33660046146dc565b612450565b348015610bf457600080fd5b506104b5610c03366004613f4d565b6124ac565b348015610c1457600080fd5b50610c28610c23366004614263565b612552565b604051610499919061473b565b348015610c4157600080fd5b506104b5610c50366004613f66565b612716565b348015610c6157600080fd5b50610c81610c70366004614868565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610499565b348015610ca657600080fd5b50610cba610cb5366004613f4d565b612740565b6040516104999190614915565b348015610cd357600080fd5b5061048d610ce2366004613f4d565b612800565b61048d610cf5366004613f4d565b612824565b6104f7610d08366004614963565b6128de565b348015610d1957600080fd5b506104f7610d28366004613f4d565b612993565b348015610d3957600080fd5b506104b5610d48366004614a11565b6129b3565b348015610d5957600080fd5b506104b5610d683660046144c0565b612a13565b348015610d7957600080fd5b506104b5610d883660046146bf565b612a35565b348015610d9957600080fd5b5061048d610da8366004614263565b612a89565b348015610db957600080fd5b506104f7610dc8366004613f4d565b612b12565b348015610dd957600080fd5b506104b5610de83660046144e5565b612b36565b348015610df957600080fd5b506104f7610e08366004613f66565b612b98565b348015610e1957600080fd5b506104b5612bdb565b348015610e2e57600080fd5b506104f7610e3d366004613f4d565b612c57565b348015610e4e57600080fd5b506104f7610e5d3660046144e5565b612df2565b348015610e6e57600080fd5b50610966610e7d3660046144e5565b612e0b565b348015610e8e57600080fd5b506104b5610e9d366004613f66565b612e25565b348015610eae57600080fd5b50610c81610ebd366004614a74565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b1480610eff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610f0d612ea4565b610f15612edc565b7347a58A25133D28af6f11F37Aa25858fD4B32beb96325d41ea5610f37612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101869052606481018590526001600160a01b038416608482015260a40160006040518083038186803b158015610f9257600080fd5b505af4158015610fa6573d6000803e3d6000fd5b50505050610fc160016000805160206152eb83398151915255565b50505050565b600080610fd2612f45565b6040516303318d7b60e01b81526004810182905260248101859052909150738125CE47C7E9fb415D1972096b7a31A0ECfDf31d906303318d7b906044015b602060405180830381865af415801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190614adc565b9392505050565b600080611063612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d638463610282611088612f0d565b6040516001600160e01b031960e085901b168152600481019290925260248201526044810187905260648101869052608401602060405180830381865af41580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190614af9565b949350505050565b6000738125CE47C7E9fb415D1972096b7a31A0ECfDf31d6392e0c36f611127612f0d565b846040518363ffffffff1660e01b815260040161114e929190918252602082015260400190565b602060405180830381865af415801561116b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614af9565b60008061119a612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63626f6c79826111bf612f0d565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101869052606401611010565b6111f7612edc565b6000611201612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63add729db82611226612f0d565b8c8c8c8c8c8c8c8c6040518b63ffffffff1660e01b81526004016112539a99989796959493929190614bcc565b60006040518083038186803b15801561126b57600080fd5b505af415801561127f573d6000803e3d6000fd5b50505050505050505050505050565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d633d363e596112b0612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810185905283151560448201526064015b60006040518083038186803b1580156112f757600080fd5b505af415801561130b573d6000803e3d6000fd5b505050505050565b60008061131e612f45565b6000938452600e016020525050604090205490565b60006110518383612f69565b611347612edc565b6000611351612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c999633352002f82611376612f0d565b8787876040518663ffffffff1660e01b8152600401611399959493929190614c31565b60006040518083038186803b1580156113b157600080fd5b505af41580156113c5573d6000803e3d6000fd5b5050505050505050565b6000738125CE47C7E9fb415D1972096b7a31A0ECfDf31d635a24b9396113f3612f0d565b846040518363ffffffff1660e01b815260040161141a929190918252602082015260400190565b602060405180830381865af4158015611437573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614adc565b600080611466612f95565b546001600160a01b031692915050565b61147e612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d637274f52b6114a0612f0d565b87878787876040518763ffffffff1660e01b81526004016114c696959493929190614c89565b60006040518083038186803b1580156114de57600080fd5b505af41580156114f2573d6000803e3d6000fd5b505050505050505050565b611505612edc565b600061150f612f45565b90507347a58A25133D28af6f11F37Aa25858fD4B32beb9634451e22a82611534612f0d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018590526064016112df565b61156c612ea4565b611574612edc565b600061157e612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d6317c4bb1c826115a3612f0d565b8787876040518663ffffffff1660e01b81526004016115c6959493929190614cc9565b60006040518083038186803b1580156115de57600080fd5b505af41580156115f2573d6000803e3d6000fd5b505050505061160e60016000805160206152eb83398151915255565b505050565b61161b612f95565b546001600160a01b0316331461164c5760405162461bcd60e51b815260040161164390614cef565b60405180910390fd5b611654612f45565b5460408051638456cb5960e01b815290516001600160a01b0390921691638456cb599160048082019260009290919082900301818387803b15801561169857600080fd5b505af1158015610fc1573d6000803e3d6000fd5b6116b4612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d6383c6b8e56116d6612f0d565b6040516001600160e01b031960e084901b168152600481019190915260248101859052604481018490526064016112df565b600080611713612f45565b600c015492915050565b600080611728612f95565b905073dAD5aDccb670DadDF333630054F50F77877f624e6363feb9748261174d612f0d565b8a8a8a8a8a6040518863ffffffff1660e01b81526004016117749796959493929190614d26565b602060405180830381865af4158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b59190614af9565b979650505050505050565b6117c8612edc565b60006117d2612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c99963a8499573826117f7612f0d565b86866040518563ffffffff1660e01b81526004016118189493929190614d6e565b60006040518083038186803b15801561183057600080fd5b505af4158015611844573d6000803e3d6000fd5b50505050505050565b611855612f95565b546001600160a01b0316331461187d5760405162461bcd60e51b815260040161164390614cef565b61189d816672656c6561736560c81b42611895612f0d565b929190612fb9565b6040518181527ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565906020015b60405180910390a150565b6000806118df612ea4565b6118e7612edc565b60006118f1612f45565b905060006118fd612f0d565b6040516303318d7b60e01b815260048101849052602481018d9052909150738125CE47C7E9fb415D1972096b7a31A0ECfDf31d906303318d7b90604401602060405180830381865af4158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190614adc565b6119f357817339D4b3ab14457De93319a96A4Aef6267Ea78c99963e3391a1f9091838e8e8e8e6040518763ffffffff1660e01b81526004016119c296959493929190614d98565b60006040518083038186803b1580156119da57600080fd5b505af41580156119ee573d6000803e3d6000fd5b505050505b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63ef5daee083611a16612f0d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018e9052606481018a9052608481018990526001600160a01b03881660a482015260c4016040805180830381865af4158015611a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9e9190614dd0565b9094509250611aaf9150612f319050565b97509795505050505050565b611ac3612f95565b546001600160a01b03163314611aeb5760405162461bcd60e51b815260040161164390614cef565b611af3612fe1565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015611b3a5750825b90506000826001600160401b03166001148015611b565750303b155b905081158015611b64575080155b15611b825760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611bac57845460ff60401b1916600160401b1785555b611bba8b8b8b8b8b8b61303b565b8315611c0057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b611c15613072565b611c1e82613100565b611c2882826131f2565b5050565b611c34612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d637e4a66ef611c56612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018590526001600160a01b03841660448201526064016112df565b611c98612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d634da2bf29611c56612f0d565b6000611cc46132af565b506000805160206152ab83398151915290565b600080611ce2612f0d565b9050611cf0818686866132f8565b95945050505050565b600080611d04612f0d565b90506110fb818585613336565b611d19612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63b998dc09611d3b612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018690526044810185905260648101849052608401611818565b6000838383604051602001611d8b93929190614df4565b60408051601f198184030181529190528051602090910120949350505050565b611db3612edc565b6000611dbd612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c999630bbc72be82611de2612f0d565b8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401611e0b989796959493929190614e18565b60006040518083038186803b158015611e2357600080fd5b505af4158015611c00573d6000803e3d6000fd5b600080611e42612f0d565b60009384526020525050604090205490565b600080611e5f612f45565b6000948552600f0160209081526040808620948652939052505090205460ff1690565b6000611e8c612ea4565b611e94612edc565b6000611e9e612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63c1aa33c982611ec3612f0d565b8888886040518663ffffffff1660e01b8152600401611ee6959493929190614cc9565b602060405180830381865af4158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190614adc565b91505061105160016000805160206152eb83398151915255565b73dAD5aDccb670DadDF333630054F50F77877f624e6361642eae611c56612f0d565b60606000611f6f612f0d565b90506110fb818585613360565b611f84612edc565b6000611f8e612f45565b9050738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63d5af43ba82611376612f0d565b600080611fbe612f45565b600b015492915050565b6000738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63ffcba52e611fec612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018690526001600160a01b0385166044820152606401611010565b61202e612edc565b6000612038612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c99963e3391a1f8261205d612f0d565b888888886040518763ffffffff1660e01b81526004016114c696959493929190614d98565b61208a612f95565b546001600160a01b031633146120b25760405162461bcd60e51b815260040161164390614cef565b611af3613412565b6000806120c5612f95565b90506120e06000805160206152cb8339815191525460ff1690565b8061210357506120ee61345b565b60028201546001600160a01b03908116911614155b806121115750806003015442115b91505090565b600080612122612f95565b6005015492915050565b600080600080600080600080600080600080612146612f45565b90508060000160009054906101000a90046001600160a01b03169b508060010160009054906101000a90046001600160a01b03169a50806002015499508060030154985080600401549750806005015496508060060154955080600701549450806008015493508060090154925080600a0154915050909192939495969798999a565b60008060606121d784613477565b91945092509050612710821180156121f05750614e1f82105b1561221657836121fe612f45565b6000848152600e919091016020526040902055612264565b614e2082118015612228575061752f82105b15612264576001612237612f45565b6000848152600f91909101602090815260408083208884529091529020805460ff19169115159190911790555b9193909250565b600080612276612f0d565b90506110fb818585613540565b61228b612f95565b546001600160a01b031633146122b35760405162461bcd60e51b815260040161164390614cef565b6122bb612f45565b60405163e844165360e01b815260048101919091526024810183905260448101829052738125CE47C7E9fb415D1972096b7a31A0ECfDf31d9063e8441653906064016112df565b600061230c612ea4565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d6384bb212c61232e612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810186905260448101859052606401602060405180830381865af4158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190614adc565b9050610eff60016000805160206152eb83398151915255565b6000806000806000806123c6612f95565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b6000612406612f95565b6040516361ac0f7160e11b8152600481018290526001600160a01b038416602482015290915073dAD5aDccb670DadDF333630054F50F77877f624e9063c3581ee2906044016112df565b612458612edc565b6000612462612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c99963d2da84c982612487612f0d565b888888886040518763ffffffff1660e01b81526004016114c696959493929190614eef565b6124b4612f95565b546001600160a01b031633146124dc5760405162461bcd60e51b815260040161164390614cef565b6124e4612f45565b60405163dfc133c560e01b81526004810191909152602481018290527347a58A25133D28af6f11F37Aa25858fD4B32beb99063dfc133c59060440160006040518083038186803b15801561253757600080fd5b505af415801561254b573d6000803e3d6000fd5b5050505050565b6125cc60405180610140016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60006125d6612f45565b905080600d0184846040516125ec929190614f22565b9081526040805191829003602090810183206101408401835280546001600160401b038082168652600160401b8204811693860193909352600160801b8104831693850193909352600160c01b90920416606083015260018101546080830152600281015460a0830152600381015460c0830152600481015460e083015260058101546101008301526006810180546101208401919061268b90614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546126b790614f32565b80156127045780601f106126d957610100808354040283529160200191612704565b820191906000526020600020905b8154815290600101906020018083116126e757829003601f168201915b50505050508152505091505092915050565b61271e612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d63e2e96bde6116d6612f0d565b612774604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b600061277e612f95565b6040516337a3804160e11b8152600481018290526024810185905290915073dAD5aDccb670DadDF333630054F50F77877f624e90636f47008290604401600060405180830381865af41580156127d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110519190810190614fb1565b6000738125CE47C7E9fb415D1972096b7a31A0ECfDf31d631372531e6113f3612f0d565b600061282e612ea4565b612836612edc565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d639f300014612858612f0d565b846040518363ffffffff1660e01b815260040161287f929190918252602082015260400190565b602060405180830381865af415801561289c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c09190614adc565b90506128d960016000805160206152eb83398151915255565b919050565b60006128e8612edc565b60006128f2612f45565b90507347a58A25133D28af6f11F37Aa25858fD4B32beb963fdccde5382612917612f0d565b8d8d8d8d8d8d8d8d6040518b63ffffffff1660e01b81526004016129449a9998979695949392919061505d565b602060405180830381865af4158015612961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129859190614af9565b9a9950505050505050505050565b60008061299e612f45565b60009384526010016020525050604090205490565b6129bb612edc565b60006129c5612f45565b90507339D4b3ab14457De93319a96A4Aef6267Ea78c99963ab0534bb826129ea612f0d565b8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401611e0b9897969594939291906150f5565b738125CE47C7E9fb415D1972096b7a31A0ECfDf31d6353d5aaa7611c56612f0d565b6000612a3f612f95565b6040516307c0451b60e11b8152600481018290526001600160a01b038416602482015290915073dAD5aDccb670DadDF333630054F50F77877f624e90630f808a36906044016112df565b600080612a94612f45565b60405162f852a960e71b8152909150738125CE47C7E9fb415D1972096b7a31A0ECfDf31d90637c29548090612ad190849088908890600401615143565b602060405180830381865af4158015612aee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190614adc565b6000738125CE47C7E9fb415D1972096b7a31A0ECfDf31d633b19e3c6611127612f0d565b612b3e612edc565b6000612b48612f45565b60405163182f4f4960e01b8152600481018290526024810186905260448101859052606481018490529091507339D4b3ab14457De93319a96A4Aef6267Ea78c9999063182f4f4990608401611399565b600080612ba3612f0d565b600085815260208290526040902080549192509084908110612bc757612bc761515d565b906000526020600020015491505092915050565b612be3612f95565b546001600160a01b03163314612c0b5760405162461bcd60e51b815260040161164390614cef565b612c13612f45565b5460408051631fa5d41d60e11b815290516001600160a01b0390921691633f4ba83a9160048082019260009290919082900301818387803b15801561169857600080fd5b6000612c61612ea4565b612c69612edc565b61271082118015612c7b5750614e1f82105b612cc75760405162461bcd60e51b815260206004820152601b60248201527f504f5254414c3a696e76616c6964207061636b616765207479706500000000006044820152606401611643565b6000612cd1612f45565b6000848152600e9190910160205260408120549150612cee612f0d565b905033633b8ba862612d0e83856921a7a72a2927a62622a960b11b613540565b86612d218587634e414d4560e01b613360565b6224ea006040518563ffffffff1660e01b8152600401612d449493929190615173565b6020604051808303816000875af1158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190614af9565b925060008311612dd95760405162461bcd60e51b815260206004820152601a60248201527f504f5254414c3a63616e6e6f74207075736820757067726164650000000000006044820152606401611643565b50506128d960016000805160206152eb83398151915255565b600080612dfd612f0d565b9050611cf081868686613574565b60606000612e17612f0d565b9050611cf0818686866135a3565b612e2d612f95565b546001600160a01b03163314612e555760405162461bcd60e51b815260040161164390614cef565b612e5d612f45565b604051634b35132160e01b815260048101919091526024810183905260448101829052738125CE47C7E9fb415D1972096b7a31A0ECfDf31d90634b351321906064016112df565b6000805160206152eb833981519152805460011901612ed657604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206152cb8339815191525460ff1615611af35760405163d93c066560e01b815260040160405180910390fd5b7fa3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c0090565b60016000805160206152eb83398151915255565b7f642b1534be65022221e9e6919fcbcd097fefb6d9d9b7897cee77332e470da70090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b80846001016000612fca8686612f69565b815260208101919091526040016000205550505050565b612fe961365a565b6000805160206152cb833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016118c9565b61304361368a565b61306086866130566301e13380426151c7565b61271186866136d3565b61306a84846136f9565b61130b61372b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806130e257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166130d661345b565b6001600160a01b031614155b15611af35760405163703e46dd60e11b815260040160405180910390fd5b600061310a612f95565b905073dAD5aDccb670DadDF333630054F50F77877f624e63b57e6b0b828461313061345b565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af4158015613182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a69190614adc565b611c285760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401611643565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561324c575060408051601f3d908101601f1916820190925261324991810190614af9565b60015b61327457604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611643565b6000805160206152ab83398151915281146132a557604051632a87526960e21b815260048101829052602401611643565b61160e8383613733565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611af35760405163703e46dd60e11b815260040160405180910390fd5b60008460030160006133138461330e8888612f69565b612f69565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006133488585612f69565b81526020019081526020016000205490509392505050565b60608360020160006133728585612f69565b8152602001908152602001600020805461338b90614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546133b790614f32565b80156134045780601f106133d957610100808354040283529160200191613404565b820191906000526020600020905b8154815290600101906020018083116133e757829003601f168201915b505050505090509392505050565b61341a612edc565b6000805160206152cb833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833613023565b6000805160206152ab833981519152546001600160a01b031690565b60008060606000613486612f95565b905073dAD5aDccb670DadDF333630054F50F77877f624e636dc129ae826134ab612f0d565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af41580156134f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261351b91908101906151da565b600484015492965090945092508303613538576135388486613789565b509193909250565b60008360030160006135528585612f69565b81526020810191909152604001600020546001600160a01b0316949350505050565b600084600101600061358a8461330e8888612f69565b8152602001908152602001600020549050949350505050565b60608460020160006135b98461330e8888612f69565b815260200190815260200160002080546135d290614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546135fe90614f32565b801561364b5780601f106136205761010080835404028352916020019161364b565b820191906000526020600020905b81548152906001019060200180831161362e57829003601f168201915b50505050509050949350505050565b6000805160206152cb8339815191525460ff16611af357604051638dfc202b60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611af357604051631afcd79f60e31b815260040160405180910390fd5b6136db61368a565b6136e361372b565b6136eb61372b565b61130b8686868686866137ab565b61370161368a565b613709613b34565b613711613b44565b61371961372b565b61372161372b565b611c288282613b54565b611af361368a565b61373c82613cac565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156137815761160e8282613d11565b611c28613d7e565b6137a28260405180602001604052806000815250611c0d565b611c2881613d9d565b6137b361368a565b6001600160a01b0386166138095760405162461bcd60e51b815260206004820152601c60248201527f474d3a676f7665726e616e63652063616e6e6f74206265207a65726f000000006044820152606401611643565b6001600160a01b03851661385f5760405162461bcd60e51b815260206004820152601860248201527f474d3a73656e6174652063616e6e6f74206265207a65726f00000000000000006044820152606401611643565b4284116138a45760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401611643565b826000036138f45760405162461bcd60e51b815260206004820152601d60248201527f474d3a7061636b616765547970652063616e6e6f74206265207a65726f0000006044820152606401611643565b60008190036139505760405162461bcd60e51b815260206004820152602260248201527f474d3a696e697456657273696f6e4e616d652063616e6e6f7420626520656d70604482015261747960f01b6064820152608401611643565b600061395a612f95565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000613993612f0d565b9050600073dAD5aDccb670DadDF333630054F50F77877f624e6363feb97484846139bb61345b565b8a8a8a620151806040518863ffffffff1660e01b81526004016139e49796959493929190614d26565b602060405180830381865af4158015613a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a259190614af9565b6040516336e094d760e11b815260048101859052602481018490526044810182905290915073dAD5aDccb670DadDF333630054F50F77877f624e90636dc129ae90606401600060405180830381865af4158015613a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613aae91908101906151da565b505050613afc613af786868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506004860154613de8565b613d9d565b505080546001600160a01b039788166001600160a01b0319918216178255600190910180549690971695169490941790945550505050565b613b3c61368a565b611af3613e1c565b613b4c61368a565b611af3613e24565b613b5c61368a565b6001600160a01b038216613bb25760405162461bcd60e51b815260206004820152601e60248201527f534d3a674554482063616e6e6f74206265207a65726f206164647265737300006044820152606401611643565b6001600160a01b038116613c085760405162461bcd60e51b815260206004820181905260248201527f534d3a6f7261636c652063616e6e6f74206265207a65726f20616464726573736044820152606401611643565b6000613c12612f45565b80546001600160a01b038086166001600160a01b031992831617835560018301805491861691909216179055621275006005820181905560068201556801bc16d674ec800000600780830191909155909150606490613c77906402540be40090615233565b613c81919061524a565b60098201556064613c986402540be4006007615233565b613ca2919061524a565b600a909101555050565b806001600160a01b03163b600003613ce257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611643565b6000805160206152ab83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613d2e919061526c565b600060405180830381855af49150503d8060008114613d69576040519150601f19603f3d011682016040523d82523d6000602084013e613d6e565b606091505b5091509150611cf0858383613e45565b3415611af35760405163b398979f60e01b815260040160405180910390fd5b6000613da7612f95565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a15050565b60008282604051602001613dfd929190615288565b60408051601f1981840301815291905280516020909101209392505050565b612f3161368a565b613e2c61368a565b6000805160206152cb833981519152805460ff19169055565b606082613e5a57613e5582613ea1565b611051565b8151158015613e7157506001600160a01b0384163b155b15613e9a57604051639996b31560e01b81526001600160a01b0385166004820152602401611643565b5080611051565b805115613eb15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b600060208284031215613edf57600080fd5b81356001600160e01b03198116811461105157600080fd5b6001600160a01b0381168114613eca57600080fd5b60008060008060808587031215613f2257600080fd5b8435935060208501359250604085013591506060850135613f4281613ef7565b939692955090935050565b600060208284031215613f5f57600080fd5b5035919050565b60008060408385031215613f7957600080fd5b50508035926020909101359150565b60008083601f840112613f9a57600080fd5b5081356001600160401b03811115613fb157600080fd5b6020830191508360208260051b8501011115613fcc57600080fd5b9250929050565b60008060008060008060008060a0898b031215613fef57600080fd5b883597506020890135965060408901356001600160401b038082111561401457600080fd5b6140208c838d01613f88565b909850965060608b013591508082111561403957600080fd5b6140458c838d01613f88565b909650945060808b013591508082111561405e57600080fd5b5061406b8b828c01613f88565b999c989b5096995094979396929594505050565b8015158114613eca57600080fd5b600080604083850312156140a057600080fd5b8235915060208301356140b28161407f565b809150509250929050565b6000806000604084860312156140d257600080fd5b8335925060208401356001600160401b038111156140ef57600080fd5b6140fb86828701613f88565b9497909650939450505050565b60008060008060006060868803121561412057600080fd5b8535945060208601356001600160401b038082111561413e57600080fd5b61414a89838a01613f88565b9096509450604088013591508082111561416357600080fd5b5061417088828901613f88565b969995985093965092949392505050565b60008083601f84011261419357600080fd5b5081356001600160401b038111156141aa57600080fd5b602083019150836020828501011115613fcc57600080fd5b6000806000604084860312156141d757600080fd5b8335925060208401356001600160401b038111156141f457600080fd5b6140fb86828701614181565b60008060008060006080868803121561421857600080fd5b853561422381613ef7565b94506020860135935060408601356001600160401b0381111561424557600080fd5b61425188828901614181565b96999598509660600135949350505050565b6000806020838503121561427657600080fd5b82356001600160401b0381111561428c57600080fd5b61429885828601614181565b90969095509350505050565b600080600080600080600060c0888a0312156142bf57600080fd5b873596506020880135955060408801356001600160401b038111156142e357600080fd5b6142ef8a828b01613f88565b909650945050606088013592506080880135915060a088013561431181613ef7565b8091505092959891949750929550565b60008060008060008060a0878903121561433a57600080fd5b863561434581613ef7565b9550602087013561435581613ef7565b9450604087013561436581613ef7565b9350606087013561437581613ef7565b925060808701356001600160401b0381111561439057600080fd5b61439c89828a01614181565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143ec576143ec6143ae565b604052919050565b60006001600160401b0382111561440d5761440d6143ae565b50601f01601f191660200190565b600082601f83011261442c57600080fd5b813561443f61443a826143f4565b6143c4565b81815284602083860101111561445457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561448457600080fd5b823561448f81613ef7565b915060208301356001600160401b038111156144aa57600080fd5b6144b68582860161441b565b9150509250929050565b600080604083850312156144d357600080fd5b8235915060208301356140b281613ef7565b6000806000606084860312156144fa57600080fd5b505081359360208301359350604090920135919050565b60008060006040848603121561452657600080fd5b83356001600160401b0381111561453c57600080fd5b61454886828701614181565b909790965060209590950135949350505050565b6000806000806000806060878903121561457557600080fd5b86356001600160401b038082111561458c57600080fd5b6145988a838b01613f88565b909850965060208901359150808211156145b157600080fd5b6145bd8a838b01613f88565b909650945060408901359150808211156145d657600080fd5b5061439c89828a01613f88565b60005b838110156145fe5781810151838201526020016145e6565b50506000910152565b6000815180845261461f8160208601602086016145e3565b601f01601f19169290920160200192915050565b6020815260006110516020830184614607565b6000806000806060858703121561465c57600080fd5b843593506020850135925060408501356001600160401b0381111561468057600080fd5b61468c87828801613f88565b95989497509550505050565b60018060a01b0384168152826020820152606060408201526000611cf06060830184614607565b6000602082840312156146d157600080fd5b813561105181613ef7565b600080600080604085870312156146f257600080fd5b84356001600160401b038082111561470957600080fd5b61471588838901613f88565b9096509450602087013591508082111561472e57600080fd5b5061468c87828801613f88565b602081526147556020820183516001600160401b03169052565b6000602083015161477160408401826001600160401b03169052565b5060408301516001600160401b03811660608401525060608301516001600160401b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101208181850152808501519150506101408081850152506110fb610160840182614607565b600082601f83011261480557600080fd5b813560206001600160401b03821115614820576148206143ae565b8160051b61482f8282016143c4565b928352848101820192828101908785111561484957600080fd5b83870192505b848310156117b55782358252918301919083019061484f565b600080600080600060a0868803121561488057600080fd5b853561488b81613ef7565b9450602086013561489b81613ef7565b935060408601356001600160401b03808211156148b757600080fd5b6148c389838a016147f4565b945060608801359150808211156148d957600080fd5b6148e589838a016147f4565b935060808801359150808211156148fb57600080fd5b506149088882890161441b565b9150509295509295909350565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015261494d60a0840182614607565b9050606084015160808401528091505092915050565b600080600080600080600080610100808a8c03121561498157600080fd5b8935985060208a0135975060408a013561499a81613ef7565b965060608a01356001600160401b03808211156149b657600080fd5b6149c28d838e01614181565b909850965060808c01359150808211156149db57600080fd5b506149e88c828d01614181565b9095509350508981018b10156149fd57600080fd5b5060a0890190509295985092959890939650565b60008060008060008060808789031215614a2a57600080fd5b86356001600160401b0380821115614a4157600080fd5b614a4d8a838b01614181565b9098509650602089013595506040890135945060608901359150808211156145d657600080fd5b600080600080600060a08688031215614a8c57600080fd5b8535614a9781613ef7565b94506020860135614aa781613ef7565b9350604086013592506060860135915060808601356001600160401b03811115614ad057600080fd5b6149088882890161441b565b600060208284031215614aee57600080fd5b81516110518161407f565b600060208284031215614b0b57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614bbf5782840389528135601e19883603018112614b7657600080fd5b870185810190356001600160401b03811115614b9157600080fd5b803603821315614ba057600080fd5b614bab868284614b12565b9a87019a9550505090840190600101614b55565b5091979650505050505050565b8a815289602082015288604082015287606082015260e060808201526000614bf860e08301888a614b3b565b82810360a0840152614c0b818789614b3b565b905082810360c0840152614c20818587614b3b565b9d9c50505050505050505050505050565b8581528460208201528360408201526080606082015260006117b5608083018486614b3b565b81835260006001600160fb1b03831115614c7057600080fd5b8260051b80836020870137939093016020019392505050565b868152856020820152608060408201526000614ca9608083018688614c57565b8281036060840152614cbc818587614c57565b9998505050505050505050565b8581528460208201528360408201526080606082015260006117b5608083018486614b12565b6020808252601c908201527f504f5254414c3a73656e646572206e6f7420676f7665726e616e636500000000604082015260600190565b87815286602082015260018060a01b038616604082015284606082015260c060808201526000614d5a60c083018587614b12565b90508260a083015298975050505050505050565b848152836020820152606060408201526000614d8e606083018486614b12565b9695505050505050565b86815285602082015284604082015283606082015260a060808201526000614dc460a083018486614c57565b98975050505050505050565b60008060408385031215614de357600080fd5b505080516020909101519092909150565b604081526000614e08604083018587614b12565b9050826020830152949350505050565b88815260006020898184015260a06040840152614e3960a08401898b614c57565b8381036060850152614e4c81888a614c57565b84810360808601528581529050818101600586811b830184018860005b89811015614eda57858303601f190185528135368c9003601e19018112614e8f57600080fd5b8b0187810190356001600160401b03811115614eaa57600080fd5b80861b3603821315614ebb57600080fd5b614ec6858284614c57565b968901969450505090860190600101614e69565b50909f9e505050505050505050505050505050565b868152856020820152608060408201526000614f0f608083018688614c57565b8281036060840152614cbc818587614b3b565b8183823760009101908152919050565b600181811c90821680614f4657607f821691505b602082108103614f6657634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f830112614f7d57600080fd5b8151614f8b61443a826143f4565b818152846020838601011115614fa057600080fd5b6110fb8260208301602087016145e3565b600060208284031215614fc357600080fd5b81516001600160401b0380821115614fda57600080fd5b9083019060808286031215614fee57600080fd5b604051608081018181108382111715615009576150096143ae565b604052825161501781613ef7565b81526020838101519082015260408301518281111561503557600080fd5b61504187828601614f6c565b6040830152506060830151606082015280935050505092915050565b60006101408c835260208c818501528b60408501528a606085015260018060a01b038a1660808501528160a0850152615099828501898b614b12565b915083820360c08501526150ae828789614b12565b925060e0840191508460005b60038110156150e25781356150ce8161407f565b1515845292820192908201906001016150ba565b505050509b9a5050505050505050505050565b88815287602082015260c06040820152600061511560c08301888a614b12565b86606084015285608084015282810360a0840152615134818587614c57565b9b9a5050505050505050505050565b838152604060208201526000611cf0604083018486614b12565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260806040820152600061519a6080830185614607565b905063ffffffff8316606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610eff57610eff6151b1565b6000806000606084860312156151ef57600080fd5b83516151fa81613ef7565b6020850151604086015191945092506001600160401b0381111561521d57600080fd5b61522986828701614f6c565b9150509250925092565b8082028115828204841417610eff57610eff6151b1565b60008261526757634e487b7160e01b600052601260045260246000fd5b500490565b6000825161527e8184602087016145e3565b9190910192915050565b60408152600061529b6040830185614607565b9050826020830152939250505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220339cf9795e093b97621d6fe2ca8d48ec2e9a4bed56372acf908c2b7fe013af9764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106104615760003560e01c8063722679541161023f578063b784c7bb11610139578063dd272bf4116100b6578063e3099e091161007a578063e3099e0914610e22578063e72b1d6d14610e42578063e768887e14610e62578063eec29cfc14610e82578063f23a6e6114610ea257600080fd5b8063dd272bf414610d8d578063de22bc7214610dad578063df1ff92914610dcd578063e02a520814610ded578063e05ec0a314610e0d57600080fd5b8063d5357a1a116100fd578063d5357a1a14610cfa578063d6a93ba914610d0d578063d6ab4d3214610d2d578063d89da28614610d4d578063dab840c714610d6d57600080fd5b8063b784c7bb14610c35578063bc197c8114610c55578063c7f758a814610c9a578063cb337b4e14610cc7578063cdaba27414610ce757600080fd5b806398951b56116101c7578063ad4ac4c41161018b578063ad4ac4c414610b5a578063ad8655cb14610ba8578063af6561ef14610bc8578063b29498b914610be8578063b4891bfd14610c0857600080fd5b806398951b5614610a9a57806399ac48ba14610ac957806399ca83c614610ae9578063a270fece14610b09578063ad3cb1cc14610b2957600080fd5b80637e1ece9f1161020e5780637e1ece9f146109c85780638456cb59146109e85780638650c072146109fd5780638aa1043514610a12578063964ff29c14610a2757600080fd5b80637226795414610946578063736ed2e3146109735780637456533c146109935780637d22c35c146109a857600080fd5b80633b8ba8621161035b5780635329512b116102d85780635c975abb1161029c5780635c975abb146108a15780635d9e085d146108c657806366caab6f146108e6578063697684cc146109065780636d07e4041461092657600080fd5b80635329512b1461080157806356a72dbf14610821578063571ac56f146108415780635a34bb15146108615780635b50fea61461088157600080fd5b80634a9364171161031f5780634a936417146107795780634f1ef286146107995780634f62d616146107ac578063524cb25b146107cc57806352d1902d146107ec57600080fd5b80633b8ba862146106dc5780633bc961d6146106fc5780633c6a05ef1461071c5780633c9e438c1461073c5780633f4ba83a1461076457600080fd5b80631da71591116103e95780632ca60e12116103ad5780632ca60e1214610652578063303c01c114610672578063341b3c001461069257806335782386146106a757806335b12f37146106c757600080fd5b80631da71591146105a557806326eef2c0146105c557806327cd2aa4146105e5578063289b3c0d1461060557806328d7d72a1461063257600080fd5b80630aea8f4d116104305780630aea8f4d14610505578063100f72b614610525578063113743cb146105455780631b6f23d0146105655780631d95313a1461058557600080fd5b806301ffc9a71461046d578063041bc623146104a2578063060028ea146104b75780630ab4bc91146104d757600080fd5b3661046857005b600080fd5b34801561047957600080fd5b5061048d610488366004613ecd565b610ece565b60405190151581526020015b60405180910390f35b6104b56104b0366004613f0c565b610f05565b005b3480156104c357600080fd5b5061048d6104d2366004613f4d565b610fc7565b3480156104e357600080fd5b506104f76104f2366004613f66565b611058565b604051908152602001610499565b34801561051157600080fd5b506104f7610520366004613f4d565b611103565b34801561053157600080fd5b5061048d610540366004613f4d565b61118f565b34801561055157600080fd5b506104b5610560366004613fd3565b6111ef565b34801561057157600080fd5b506104b561058036600461408d565b61128e565b34801561059157600080fd5b506104f76105a0366004613f4d565b611313565b3480156105b157600080fd5b506104f76105c0366004613f66565b611333565b3480156105d157600080fd5b506104b56105e03660046140bd565b61133f565b3480156105f157600080fd5b5061048d610600366004613f4d565b6113cf565b34801561061157600080fd5b5061061a61145b565b6040516001600160a01b039091168152602001610499565b34801561063e57600080fd5b506104b561064d366004614108565b611476565b34801561065e57600080fd5b506104b561066d366004613f4d565b6114fd565b34801561067e57600080fd5b506104b561068d3660046141c2565b611564565b34801561069e57600080fd5b506104b5611613565b3480156106b357600080fd5b506104b56106c2366004613f66565b6116ac565b3480156106d357600080fd5b506104f7611708565b3480156106e857600080fd5b506104f76106f7366004614200565b61171d565b34801561070857600080fd5b506104b5610717366004614263565b6117c0565b34801561072857600080fd5b506104b5610737366004613f4d565b61184d565b61074f61074a3660046142a4565b6118d4565b60408051928352602083019190915201610499565b34801561077057600080fd5b506104b5611abb565b34801561078557600080fd5b506104b5610794366004614321565b611af5565b6104b56107a7366004614471565b611c0d565b3480156107b857600080fd5b506104b56107c73660046144c0565b611c2c565b3480156107d857600080fd5b506104b56107e73660046144c0565b611c90565b3480156107f857600080fd5b506104f7611cba565b34801561080d57600080fd5b5061061a61081c3660046144e5565b611cd7565b34801561082d57600080fd5b506104f761083c366004613f66565b611cf9565b34801561084d57600080fd5b506104b561085c3660046144e5565b611d11565b34801561086d57600080fd5b506104f761087c366004614511565b611d74565b34801561088d57600080fd5b506104b561089c36600461455c565b611dab565b3480156108ad57600080fd5b506000805160206152cb8339815191525460ff1661048d565b3480156108d257600080fd5b506104f76108e1366004613f4d565b611e37565b3480156108f257600080fd5b5061048d610901366004613f66565b611e54565b34801561091257600080fd5b5061048d6109213660046141c2565b611e82565b34801561093257600080fd5b506104b56109413660046144c0565b611f41565b34801561095257600080fd5b50610966610961366004613f66565b611f63565b6040516104999190614633565b34801561097f57600080fd5b506104b561098e3660046140bd565b611f7c565b34801561099f57600080fd5b506104f7611fb3565b3480156109b457600080fd5b5061048d6109c33660046144c0565b611fc8565b3480156109d457600080fd5b506104b56109e3366004614646565b612026565b3480156109f457600080fd5b506104b5612082565b348015610a0957600080fd5b5061048d6120ba565b348015610a1e57600080fd5b506104f7612117565b348015610a3357600080fd5b50610a3c61212c565b604080516001600160a01b039c8d1681529b909a1660208c0152988a01979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015261014082015261016001610499565b348015610aa657600080fd5b50610aba610ab5366004613f4d565b6121c9565b60405161049993929190614698565b348015610ad557600080fd5b5061061a610ae4366004613f66565b61226b565b348015610af557600080fd5b506104b5610b04366004613f66565b612283565b348015610b1557600080fd5b5061048d610b24366004613f66565b612302565b348015610b3557600080fd5b50610966604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610b6657600080fd5b50610b6f6123b5565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610499565b348015610bb457600080fd5b506104b5610bc33660046146bf565b6123fc565b348015610bd457600080fd5b506104b5610be33660046146dc565b612450565b348015610bf457600080fd5b506104b5610c03366004613f4d565b6124ac565b348015610c1457600080fd5b50610c28610c23366004614263565b612552565b604051610499919061473b565b348015610c4157600080fd5b506104b5610c50366004613f66565b612716565b348015610c6157600080fd5b50610c81610c70366004614868565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610499565b348015610ca657600080fd5b50610cba610cb5366004613f4d565b612740565b6040516104999190614915565b348015610cd357600080fd5b5061048d610ce2366004613f4d565b612800565b61048d610cf5366004613f4d565b612824565b6104f7610d08366004614963565b6128de565b348015610d1957600080fd5b506104f7610d28366004613f4d565b612993565b348015610d3957600080fd5b506104b5610d48366004614a11565b6129b3565b348015610d5957600080fd5b506104b5610d683660046144c0565b612a13565b348015610d7957600080fd5b506104b5610d883660046146bf565b612a35565b348015610d9957600080fd5b5061048d610da8366004614263565b612a89565b348015610db957600080fd5b506104f7610dc8366004613f4d565b612b12565b348015610dd957600080fd5b506104b5610de83660046144e5565b612b36565b348015610df957600080fd5b506104f7610e08366004613f66565b612b98565b348015610e1957600080fd5b506104b5612bdb565b348015610e2e57600080fd5b506104f7610e3d366004613f4d565b612c57565b348015610e4e57600080fd5b506104f7610e5d3660046144e5565b612df2565b348015610e6e57600080fd5b50610966610e7d3660046144e5565b612e0b565b348015610e8e57600080fd5b506104b5610e9d366004613f66565b612e25565b348015610eae57600080fd5b50610c81610ebd366004614a74565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b1480610eff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610f0d612ea4565b610f15612edc565b73__$ead56f386be1b131e7042da855c3834b47$__6325d41ea5610f37612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101869052606481018590526001600160a01b038416608482015260a40160006040518083038186803b158015610f9257600080fd5b505af4158015610fa6573d6000803e3d6000fd5b50505050610fc160016000805160206152eb83398151915255565b50505050565b600080610fd2612f45565b6040516303318d7b60e01b8152600481018290526024810185905290915073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__906303318d7b906044015b602060405180830381865af415801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190614adc565b9392505050565b600080611063612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__638463610282611088612f0d565b6040516001600160e01b031960e085901b168152600481019290925260248201526044810187905260648101869052608401602060405180830381865af41580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190614af9565b949350505050565b600073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__6392e0c36f611127612f0d565b846040518363ffffffff1660e01b815260040161114e929190918252602082015260400190565b602060405180830381865af415801561116b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614af9565b60008061119a612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63626f6c79826111bf612f0d565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101869052606401611010565b6111f7612edc565b6000611201612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63add729db82611226612f0d565b8c8c8c8c8c8c8c8c6040518b63ffffffff1660e01b81526004016112539a99989796959493929190614bcc565b60006040518083038186803b15801561126b57600080fd5b505af415801561127f573d6000803e3d6000fd5b50505050505050505050505050565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__633d363e596112b0612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810185905283151560448201526064015b60006040518083038186803b1580156112f757600080fd5b505af415801561130b573d6000803e3d6000fd5b505050505050565b60008061131e612f45565b6000938452600e016020525050604090205490565b60006110518383612f69565b611347612edc565b6000611351612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__633352002f82611376612f0d565b8787876040518663ffffffff1660e01b8152600401611399959493929190614c31565b60006040518083038186803b1580156113b157600080fd5b505af41580156113c5573d6000803e3d6000fd5b5050505050505050565b600073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__635a24b9396113f3612f0d565b846040518363ffffffff1660e01b815260040161141a929190918252602082015260400190565b602060405180830381865af4158015611437573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614adc565b600080611466612f95565b546001600160a01b031692915050565b61147e612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__637274f52b6114a0612f0d565b87878787876040518763ffffffff1660e01b81526004016114c696959493929190614c89565b60006040518083038186803b1580156114de57600080fd5b505af41580156114f2573d6000803e3d6000fd5b505050505050505050565b611505612edc565b600061150f612f45565b905073__$ead56f386be1b131e7042da855c3834b47$__634451e22a82611534612f0d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018590526064016112df565b61156c612ea4565b611574612edc565b600061157e612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__6317c4bb1c826115a3612f0d565b8787876040518663ffffffff1660e01b81526004016115c6959493929190614cc9565b60006040518083038186803b1580156115de57600080fd5b505af41580156115f2573d6000803e3d6000fd5b505050505061160e60016000805160206152eb83398151915255565b505050565b61161b612f95565b546001600160a01b0316331461164c5760405162461bcd60e51b815260040161164390614cef565b60405180910390fd5b611654612f45565b5460408051638456cb5960e01b815290516001600160a01b0390921691638456cb599160048082019260009290919082900301818387803b15801561169857600080fd5b505af1158015610fc1573d6000803e3d6000fd5b6116b4612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__6383c6b8e56116d6612f0d565b6040516001600160e01b031960e084901b168152600481019190915260248101859052604481018490526064016112df565b600080611713612f45565b600c015492915050565b600080611728612f95565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__6363feb9748261174d612f0d565b8a8a8a8a8a6040518863ffffffff1660e01b81526004016117749796959493929190614d26565b602060405180830381865af4158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b59190614af9565b979650505050505050565b6117c8612edc565b60006117d2612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__63a8499573826117f7612f0d565b86866040518563ffffffff1660e01b81526004016118189493929190614d6e565b60006040518083038186803b15801561183057600080fd5b505af4158015611844573d6000803e3d6000fd5b50505050505050565b611855612f95565b546001600160a01b0316331461187d5760405162461bcd60e51b815260040161164390614cef565b61189d816672656c6561736560c81b42611895612f0d565b929190612fb9565b6040518181527ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565906020015b60405180910390a150565b6000806118df612ea4565b6118e7612edc565b60006118f1612f45565b905060006118fd612f0d565b6040516303318d7b60e01b815260048101849052602481018d905290915073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__906303318d7b90604401602060405180830381865af4158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190614adc565b6119f3578173__$141349dbd6fc2728c585535e71cecc4adb$__63e3391a1f9091838e8e8e8e6040518763ffffffff1660e01b81526004016119c296959493929190614d98565b60006040518083038186803b1580156119da57600080fd5b505af41580156119ee573d6000803e3d6000fd5b505050505b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63ef5daee083611a16612f0d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018e9052606481018a9052608481018990526001600160a01b03881660a482015260c4016040805180830381865af4158015611a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9e9190614dd0565b9094509250611aaf9150612f319050565b97509795505050505050565b611ac3612f95565b546001600160a01b03163314611aeb5760405162461bcd60e51b815260040161164390614cef565b611af3612fe1565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015611b3a5750825b90506000826001600160401b03166001148015611b565750303b155b905081158015611b64575080155b15611b825760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611bac57845460ff60401b1916600160401b1785555b611bba8b8b8b8b8b8b61303b565b8315611c0057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b611c15613072565b611c1e82613100565b611c2882826131f2565b5050565b611c34612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__637e4a66ef611c56612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018590526001600160a01b03841660448201526064016112df565b611c98612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__634da2bf29611c56612f0d565b6000611cc46132af565b506000805160206152ab83398151915290565b600080611ce2612f0d565b9050611cf0818686866132f8565b95945050505050565b600080611d04612f0d565b90506110fb818585613336565b611d19612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63b998dc09611d3b612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018690526044810185905260648101849052608401611818565b6000838383604051602001611d8b93929190614df4565b60408051601f198184030181529190528051602090910120949350505050565b611db3612edc565b6000611dbd612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__630bbc72be82611de2612f0d565b8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401611e0b989796959493929190614e18565b60006040518083038186803b158015611e2357600080fd5b505af4158015611c00573d6000803e3d6000fd5b600080611e42612f0d565b60009384526020525050604090205490565b600080611e5f612f45565b6000948552600f0160209081526040808620948652939052505090205460ff1690565b6000611e8c612ea4565b611e94612edc565b6000611e9e612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63c1aa33c982611ec3612f0d565b8888886040518663ffffffff1660e01b8152600401611ee6959493929190614cc9565b602060405180830381865af4158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190614adc565b91505061105160016000805160206152eb83398151915255565b73__$dabd46e1bb7f0d62843614b2ceac53b60c$__6361642eae611c56612f0d565b60606000611f6f612f0d565b90506110fb818585613360565b611f84612edc565b6000611f8e612f45565b905073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63d5af43ba82611376612f0d565b600080611fbe612f45565b600b015492915050565b600073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63ffcba52e611fec612f0d565b6040516001600160e01b031960e084901b1681526004810191909152602481018690526001600160a01b0385166044820152606401611010565b61202e612edc565b6000612038612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__63e3391a1f8261205d612f0d565b888888886040518763ffffffff1660e01b81526004016114c696959493929190614d98565b61208a612f95565b546001600160a01b031633146120b25760405162461bcd60e51b815260040161164390614cef565b611af3613412565b6000806120c5612f95565b90506120e06000805160206152cb8339815191525460ff1690565b8061210357506120ee61345b565b60028201546001600160a01b03908116911614155b806121115750806003015442115b91505090565b600080612122612f95565b6005015492915050565b600080600080600080600080600080600080612146612f45565b90508060000160009054906101000a90046001600160a01b03169b508060010160009054906101000a90046001600160a01b03169a50806002015499508060030154985080600401549750806005015496508060060154955080600701549450806008015493508060090154925080600a0154915050909192939495969798999a565b60008060606121d784613477565b91945092509050612710821180156121f05750614e1f82105b1561221657836121fe612f45565b6000848152600e919091016020526040902055612264565b614e2082118015612228575061752f82105b15612264576001612237612f45565b6000848152600f91909101602090815260408083208884529091529020805460ff19169115159190911790555b9193909250565b600080612276612f0d565b90506110fb818585613540565b61228b612f95565b546001600160a01b031633146122b35760405162461bcd60e51b815260040161164390614cef565b6122bb612f45565b60405163e844165360e01b81526004810191909152602481018390526044810182905273__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__9063e8441653906064016112df565b600061230c612ea4565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__6384bb212c61232e612f0d565b6040516001600160e01b031960e084901b16815260048101919091526024810186905260448101859052606401602060405180830381865af4158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190614adc565b9050610eff60016000805160206152eb83398151915255565b6000806000806000806123c6612f95565b80546001820154600283015460038401546004909401546001600160a01b039384169b9284169a50921697509195509350915050565b6000612406612f95565b6040516361ac0f7160e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__9063c3581ee2906044016112df565b612458612edc565b6000612462612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__63d2da84c982612487612f0d565b888888886040518763ffffffff1660e01b81526004016114c696959493929190614eef565b6124b4612f95565b546001600160a01b031633146124dc5760405162461bcd60e51b815260040161164390614cef565b6124e4612f45565b60405163dfc133c560e01b815260048101919091526024810182905273__$ead56f386be1b131e7042da855c3834b47$__9063dfc133c59060440160006040518083038186803b15801561253757600080fd5b505af415801561254b573d6000803e3d6000fd5b5050505050565b6125cc60405180610140016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60006125d6612f45565b905080600d0184846040516125ec929190614f22565b9081526040805191829003602090810183206101408401835280546001600160401b038082168652600160401b8204811693860193909352600160801b8104831693850193909352600160c01b90920416606083015260018101546080830152600281015460a0830152600381015460c0830152600481015460e083015260058101546101008301526006810180546101208401919061268b90614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546126b790614f32565b80156127045780601f106126d957610100808354040283529160200191612704565b820191906000526020600020905b8154815290600101906020018083116126e757829003601f168201915b50505050508152505091505092915050565b61271e612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__63e2e96bde6116d6612f0d565b612774604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b600061277e612f95565b6040516337a3804160e11b8152600481018290526024810185905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90636f47008290604401600060405180830381865af41580156127d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110519190810190614fb1565b600073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__631372531e6113f3612f0d565b600061282e612ea4565b612836612edc565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__639f300014612858612f0d565b846040518363ffffffff1660e01b815260040161287f929190918252602082015260400190565b602060405180830381865af415801561289c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c09190614adc565b90506128d960016000805160206152eb83398151915255565b919050565b60006128e8612edc565b60006128f2612f45565b905073__$ead56f386be1b131e7042da855c3834b47$__63fdccde5382612917612f0d565b8d8d8d8d8d8d8d8d6040518b63ffffffff1660e01b81526004016129449a9998979695949392919061505d565b602060405180830381865af4158015612961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129859190614af9565b9a9950505050505050505050565b60008061299e612f45565b60009384526010016020525050604090205490565b6129bb612edc565b60006129c5612f45565b905073__$141349dbd6fc2728c585535e71cecc4adb$__63ab0534bb826129ea612f0d565b8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401611e0b9897969594939291906150f5565b73__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__6353d5aaa7611c56612f0d565b6000612a3f612f95565b6040516307c0451b60e11b8152600481018290526001600160a01b038416602482015290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90630f808a36906044016112df565b600080612a94612f45565b60405162f852a960e71b815290915073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__90637c29548090612ad190849088908890600401615143565b602060405180830381865af4158015612aee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190614adc565b600073__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__633b19e3c6611127612f0d565b612b3e612edc565b6000612b48612f45565b60405163182f4f4960e01b81526004810182905260248101869052604481018590526064810184905290915073__$141349dbd6fc2728c585535e71cecc4adb$__9063182f4f4990608401611399565b600080612ba3612f0d565b600085815260208290526040902080549192509084908110612bc757612bc761515d565b906000526020600020015491505092915050565b612be3612f95565b546001600160a01b03163314612c0b5760405162461bcd60e51b815260040161164390614cef565b612c13612f45565b5460408051631fa5d41d60e11b815290516001600160a01b0390921691633f4ba83a9160048082019260009290919082900301818387803b15801561169857600080fd5b6000612c61612ea4565b612c69612edc565b61271082118015612c7b5750614e1f82105b612cc75760405162461bcd60e51b815260206004820152601b60248201527f504f5254414c3a696e76616c6964207061636b616765207479706500000000006044820152606401611643565b6000612cd1612f45565b6000848152600e9190910160205260408120549150612cee612f0d565b905033633b8ba862612d0e83856921a7a72a2927a62622a960b11b613540565b86612d218587634e414d4560e01b613360565b6224ea006040518563ffffffff1660e01b8152600401612d449493929190615173565b6020604051808303816000875af1158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190614af9565b925060008311612dd95760405162461bcd60e51b815260206004820152601a60248201527f504f5254414c3a63616e6e6f74207075736820757067726164650000000000006044820152606401611643565b50506128d960016000805160206152eb83398151915255565b600080612dfd612f0d565b9050611cf081868686613574565b60606000612e17612f0d565b9050611cf0818686866135a3565b612e2d612f95565b546001600160a01b03163314612e555760405162461bcd60e51b815260040161164390614cef565b612e5d612f45565b604051634b35132160e01b81526004810191909152602481018390526044810182905273__$c6d91ac6527b4f29f5b2ff90afd2bb0508$__90634b351321906064016112df565b6000805160206152eb833981519152805460011901612ed657604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206152cb8339815191525460ff1615611af35760405163d93c066560e01b815260040160405180910390fd5b7fa3ee0f890fa2a50cc11476f86783721ec49c3aba88b83a957fe08235f6485c0090565b60016000805160206152eb83398151915255565b7f642b1534be65022221e9e6919fcbcd097fefb6d9d9b7897cee77332e470da70090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b7f121584cf2b7b1dee51ceaabc76cdefc72f829ce42dd8cc5282d8e9f009b0420090565b80846001016000612fca8686612f69565b815260208101919091526040016000205550505050565b612fe961365a565b6000805160206152cb833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020016118c9565b61304361368a565b61306086866130566301e13380426151c7565b61271186866136d3565b61306a84846136f9565b61130b61372b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806130e257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166130d661345b565b6001600160a01b031614155b15611af35760405163703e46dd60e11b815260040160405180910390fd5b600061310a612f95565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__63b57e6b0b828461313061345b565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865af4158015613182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a69190614adc565b611c285760405162461bcd60e51b815260206004820152601960248201527f474d3a6e6f7420616c6c6f77656420746f2075706772616465000000000000006044820152606401611643565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561324c575060408051601f3d908101601f1916820190925261324991810190614af9565b60015b61327457604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611643565b6000805160206152ab83398151915281146132a557604051632a87526960e21b815260048101829052602401611643565b61160e8383613733565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611af35760405163703e46dd60e11b815260040160405180910390fd5b60008460030160006133138461330e8888612f69565b612f69565b81526020810191909152604001600020546001600160a01b031695945050505050565b60008360010160006133488585612f69565b81526020019081526020016000205490509392505050565b60608360020160006133728585612f69565b8152602001908152602001600020805461338b90614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546133b790614f32565b80156134045780601f106133d957610100808354040283529160200191613404565b820191906000526020600020905b8154815290600101906020018083116133e757829003601f168201915b505050505090509392505050565b61341a612edc565b6000805160206152cb833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833613023565b6000805160206152ab833981519152546001600160a01b031690565b60008060606000613486612f95565b905073__$dabd46e1bb7f0d62843614b2ceac53b60c$__636dc129ae826134ab612f0d565b6040516001600160e01b031960e085901b1681526004810192909252602482015260448101889052606401600060405180830381865af41580156134f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261351b91908101906151da565b600484015492965090945092508303613538576135388486613789565b509193909250565b60008360030160006135528585612f69565b81526020810191909152604001600020546001600160a01b0316949350505050565b600084600101600061358a8461330e8888612f69565b8152602001908152602001600020549050949350505050565b60608460020160006135b98461330e8888612f69565b815260200190815260200160002080546135d290614f32565b80601f01602080910402602001604051908101604052809291908181526020018280546135fe90614f32565b801561364b5780601f106136205761010080835404028352916020019161364b565b820191906000526020600020905b81548152906001019060200180831161362e57829003601f168201915b50505050509050949350505050565b6000805160206152cb8339815191525460ff16611af357604051638dfc202b60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611af357604051631afcd79f60e31b815260040160405180910390fd5b6136db61368a565b6136e361372b565b6136eb61372b565b61130b8686868686866137ab565b61370161368a565b613709613b34565b613711613b44565b61371961372b565b61372161372b565b611c288282613b54565b611af361368a565b61373c82613cac565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156137815761160e8282613d11565b611c28613d7e565b6137a28260405180602001604052806000815250611c0d565b611c2881613d9d565b6137b361368a565b6001600160a01b0386166138095760405162461bcd60e51b815260206004820152601c60248201527f474d3a676f7665726e616e63652063616e6e6f74206265207a65726f000000006044820152606401611643565b6001600160a01b03851661385f5760405162461bcd60e51b815260206004820152601860248201527f474d3a73656e6174652063616e6e6f74206265207a65726f00000000000000006044820152606401611643565b4284116138a45760405162461bcd60e51b8152602060048201526013602482015272474d3a6c6f772073656e61746545787069727960681b6044820152606401611643565b826000036138f45760405162461bcd60e51b815260206004820152601d60248201527f474d3a7061636b616765547970652063616e6e6f74206265207a65726f0000006044820152606401611643565b60008190036139505760405162461bcd60e51b815260206004820152602260248201527f474d3a696e697456657273696f6e4e616d652063616e6e6f7420626520656d70604482015261747960f01b6064820152608401611643565b600061395a612f95565b8054336001600160a01b031991821681178355600183018054909216179055600381018690556004810185905590506000613993612f0d565b9050600073__$dabd46e1bb7f0d62843614b2ceac53b60c$__6363feb97484846139bb61345b565b8a8a8a620151806040518863ffffffff1660e01b81526004016139e49796959493929190614d26565b602060405180830381865af4158015613a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a259190614af9565b6040516336e094d760e11b815260048101859052602481018490526044810182905290915073__$dabd46e1bb7f0d62843614b2ceac53b60c$__90636dc129ae90606401600060405180830381865af4158015613a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613aae91908101906151da565b505050613afc613af786868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506004860154613de8565b613d9d565b505080546001600160a01b039788166001600160a01b0319918216178255600190910180549690971695169490941790945550505050565b613b3c61368a565b611af3613e1c565b613b4c61368a565b611af3613e24565b613b5c61368a565b6001600160a01b038216613bb25760405162461bcd60e51b815260206004820152601e60248201527f534d3a674554482063616e6e6f74206265207a65726f206164647265737300006044820152606401611643565b6001600160a01b038116613c085760405162461bcd60e51b815260206004820181905260248201527f534d3a6f7261636c652063616e6e6f74206265207a65726f20616464726573736044820152606401611643565b6000613c12612f45565b80546001600160a01b038086166001600160a01b031992831617835560018301805491861691909216179055621275006005820181905560068201556801bc16d674ec800000600780830191909155909150606490613c77906402540be40090615233565b613c81919061524a565b60098201556064613c986402540be4006007615233565b613ca2919061524a565b600a909101555050565b806001600160a01b03163b600003613ce257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611643565b6000805160206152ab83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613d2e919061526c565b600060405180830381855af49150503d8060008114613d69576040519150601f19603f3d011682016040523d82523d6000602084013e613d6e565b606091505b5091509150611cf0858383613e45565b3415611af35760405163b398979f60e01b815260040160405180910390fd5b6000613da7612f95565b600581018390556040518381529091507ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a15050565b60008282604051602001613dfd929190615288565b60408051601f1981840301815291905280516020909101209392505050565b612f3161368a565b613e2c61368a565b6000805160206152cb833981519152805460ff19169055565b606082613e5a57613e5582613ea1565b611051565b8151158015613e7157506001600160a01b0384163b155b15613e9a57604051639996b31560e01b81526001600160a01b0385166004820152602401611643565b5080611051565b805115613eb15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b600060208284031215613edf57600080fd5b81356001600160e01b03198116811461105157600080fd5b6001600160a01b0381168114613eca57600080fd5b60008060008060808587031215613f2257600080fd5b8435935060208501359250604085013591506060850135613f4281613ef7565b939692955090935050565b600060208284031215613f5f57600080fd5b5035919050565b60008060408385031215613f7957600080fd5b50508035926020909101359150565b60008083601f840112613f9a57600080fd5b5081356001600160401b03811115613fb157600080fd5b6020830191508360208260051b8501011115613fcc57600080fd5b9250929050565b60008060008060008060008060a0898b031215613fef57600080fd5b883597506020890135965060408901356001600160401b038082111561401457600080fd5b6140208c838d01613f88565b909850965060608b013591508082111561403957600080fd5b6140458c838d01613f88565b909650945060808b013591508082111561405e57600080fd5b5061406b8b828c01613f88565b999c989b5096995094979396929594505050565b8015158114613eca57600080fd5b600080604083850312156140a057600080fd5b8235915060208301356140b28161407f565b809150509250929050565b6000806000604084860312156140d257600080fd5b8335925060208401356001600160401b038111156140ef57600080fd5b6140fb86828701613f88565b9497909650939450505050565b60008060008060006060868803121561412057600080fd5b8535945060208601356001600160401b038082111561413e57600080fd5b61414a89838a01613f88565b9096509450604088013591508082111561416357600080fd5b5061417088828901613f88565b969995985093965092949392505050565b60008083601f84011261419357600080fd5b5081356001600160401b038111156141aa57600080fd5b602083019150836020828501011115613fcc57600080fd5b6000806000604084860312156141d757600080fd5b8335925060208401356001600160401b038111156141f457600080fd5b6140fb86828701614181565b60008060008060006080868803121561421857600080fd5b853561422381613ef7565b94506020860135935060408601356001600160401b0381111561424557600080fd5b61425188828901614181565b96999598509660600135949350505050565b6000806020838503121561427657600080fd5b82356001600160401b0381111561428c57600080fd5b61429885828601614181565b90969095509350505050565b600080600080600080600060c0888a0312156142bf57600080fd5b873596506020880135955060408801356001600160401b038111156142e357600080fd5b6142ef8a828b01613f88565b909650945050606088013592506080880135915060a088013561431181613ef7565b8091505092959891949750929550565b60008060008060008060a0878903121561433a57600080fd5b863561434581613ef7565b9550602087013561435581613ef7565b9450604087013561436581613ef7565b9350606087013561437581613ef7565b925060808701356001600160401b0381111561439057600080fd5b61439c89828a01614181565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143ec576143ec6143ae565b604052919050565b60006001600160401b0382111561440d5761440d6143ae565b50601f01601f191660200190565b600082601f83011261442c57600080fd5b813561443f61443a826143f4565b6143c4565b81815284602083860101111561445457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561448457600080fd5b823561448f81613ef7565b915060208301356001600160401b038111156144aa57600080fd5b6144b68582860161441b565b9150509250929050565b600080604083850312156144d357600080fd5b8235915060208301356140b281613ef7565b6000806000606084860312156144fa57600080fd5b505081359360208301359350604090920135919050565b60008060006040848603121561452657600080fd5b83356001600160401b0381111561453c57600080fd5b61454886828701614181565b909790965060209590950135949350505050565b6000806000806000806060878903121561457557600080fd5b86356001600160401b038082111561458c57600080fd5b6145988a838b01613f88565b909850965060208901359150808211156145b157600080fd5b6145bd8a838b01613f88565b909650945060408901359150808211156145d657600080fd5b5061439c89828a01613f88565b60005b838110156145fe5781810151838201526020016145e6565b50506000910152565b6000815180845261461f8160208601602086016145e3565b601f01601f19169290920160200192915050565b6020815260006110516020830184614607565b6000806000806060858703121561465c57600080fd5b843593506020850135925060408501356001600160401b0381111561468057600080fd5b61468c87828801613f88565b95989497509550505050565b60018060a01b0384168152826020820152606060408201526000611cf06060830184614607565b6000602082840312156146d157600080fd5b813561105181613ef7565b600080600080604085870312156146f257600080fd5b84356001600160401b038082111561470957600080fd5b61471588838901613f88565b9096509450602087013591508082111561472e57600080fd5b5061468c87828801613f88565b602081526147556020820183516001600160401b03169052565b6000602083015161477160408401826001600160401b03169052565b5060408301516001600160401b03811660608401525060608301516001600160401b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101208181850152808501519150506101408081850152506110fb610160840182614607565b600082601f83011261480557600080fd5b813560206001600160401b03821115614820576148206143ae565b8160051b61482f8282016143c4565b928352848101820192828101908785111561484957600080fd5b83870192505b848310156117b55782358252918301919083019061484f565b600080600080600060a0868803121561488057600080fd5b853561488b81613ef7565b9450602086013561489b81613ef7565b935060408601356001600160401b03808211156148b757600080fd5b6148c389838a016147f4565b945060608801359150808211156148d957600080fd5b6148e589838a016147f4565b935060808801359150808211156148fb57600080fd5b506149088882890161441b565b9150509295509295909350565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015261494d60a0840182614607565b9050606084015160808401528091505092915050565b600080600080600080600080610100808a8c03121561498157600080fd5b8935985060208a0135975060408a013561499a81613ef7565b965060608a01356001600160401b03808211156149b657600080fd5b6149c28d838e01614181565b909850965060808c01359150808211156149db57600080fd5b506149e88c828d01614181565b9095509350508981018b10156149fd57600080fd5b5060a0890190509295985092959890939650565b60008060008060008060808789031215614a2a57600080fd5b86356001600160401b0380821115614a4157600080fd5b614a4d8a838b01614181565b9098509650602089013595506040890135945060608901359150808211156145d657600080fd5b600080600080600060a08688031215614a8c57600080fd5b8535614a9781613ef7565b94506020860135614aa781613ef7565b9350604086013592506060860135915060808601356001600160401b03811115614ad057600080fd5b6149088882890161441b565b600060208284031215614aee57600080fd5b81516110518161407f565b600060208284031215614b0b57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614bbf5782840389528135601e19883603018112614b7657600080fd5b870185810190356001600160401b03811115614b9157600080fd5b803603821315614ba057600080fd5b614bab868284614b12565b9a87019a9550505090840190600101614b55565b5091979650505050505050565b8a815289602082015288604082015287606082015260e060808201526000614bf860e08301888a614b3b565b82810360a0840152614c0b818789614b3b565b905082810360c0840152614c20818587614b3b565b9d9c50505050505050505050505050565b8581528460208201528360408201526080606082015260006117b5608083018486614b3b565b81835260006001600160fb1b03831115614c7057600080fd5b8260051b80836020870137939093016020019392505050565b868152856020820152608060408201526000614ca9608083018688614c57565b8281036060840152614cbc818587614c57565b9998505050505050505050565b8581528460208201528360408201526080606082015260006117b5608083018486614b12565b6020808252601c908201527f504f5254414c3a73656e646572206e6f7420676f7665726e616e636500000000604082015260600190565b87815286602082015260018060a01b038616604082015284606082015260c060808201526000614d5a60c083018587614b12565b90508260a083015298975050505050505050565b848152836020820152606060408201526000614d8e606083018486614b12565b9695505050505050565b86815285602082015284604082015283606082015260a060808201526000614dc460a083018486614c57565b98975050505050505050565b60008060408385031215614de357600080fd5b505080516020909101519092909150565b604081526000614e08604083018587614b12565b9050826020830152949350505050565b88815260006020898184015260a06040840152614e3960a08401898b614c57565b8381036060850152614e4c81888a614c57565b84810360808601528581529050818101600586811b830184018860005b89811015614eda57858303601f190185528135368c9003601e19018112614e8f57600080fd5b8b0187810190356001600160401b03811115614eaa57600080fd5b80861b3603821315614ebb57600080fd5b614ec6858284614c57565b968901969450505090860190600101614e69565b50909f9e505050505050505050505050505050565b868152856020820152608060408201526000614f0f608083018688614c57565b8281036060840152614cbc818587614b3b565b8183823760009101908152919050565b600181811c90821680614f4657607f821691505b602082108103614f6657634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f830112614f7d57600080fd5b8151614f8b61443a826143f4565b818152846020838601011115614fa057600080fd5b6110fb8260208301602087016145e3565b600060208284031215614fc357600080fd5b81516001600160401b0380821115614fda57600080fd5b9083019060808286031215614fee57600080fd5b604051608081018181108382111715615009576150096143ae565b604052825161501781613ef7565b81526020838101519082015260408301518281111561503557600080fd5b61504187828601614f6c565b6040830152506060830151606082015280935050505092915050565b60006101408c835260208c818501528b60408501528a606085015260018060a01b038a1660808501528160a0850152615099828501898b614b12565b915083820360c08501526150ae828789614b12565b925060e0840191508460005b60038110156150e25781356150ce8161407f565b1515845292820192908201906001016150ba565b505050509b9a5050505050505050505050565b88815287602082015260c06040820152600061511560c08301888a614b12565b86606084015285608084015282810360a0840152615134818587614c57565b9b9a5050505050505050505050565b838152604060208201526000611cf0604083018486614b12565b634e487b7160e01b600052603260045260246000fd5b60018060a01b038516815283602082015260806040820152600061519a6080830185614607565b905063ffffffff8316606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610eff57610eff6151b1565b6000806000606084860312156151ef57600080fd5b83516151fa81613ef7565b6020850151604086015191945092506001600160401b0381111561521d57600080fd5b61522986828701614f6c565b9150509250925092565b8082028115828204841417610eff57610eff6151b1565b60008261526757634e487b7160e01b600052601260045260246000fd5b500490565b6000825161527e8184602087016145e3565b9190910192915050565b60408152600061529b6040830185614607565b9050826020830152939250505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220339cf9795e093b97621d6fe2ca8d48ec2e9a4bed56372acf908c2b7fe013af9764736f6c63430008140033",
  "libraries": {
    "GeodeModuleLib": "0xdAD5aDccb670DadDF333630054F50F77877f624e",
    "StakeModuleLib": "0x8125CE47C7E9fb415D1972096b7a31A0ECfDf31d",
    "InitiatorExtensionLib": "0x47a58A25133D28af6f11F37Aa25858fD4B32beb9",
    "OracleExtensionLib": "0x39D4b3ab14457De93319a96A4Aef6267Ea78c999"
  },
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "TYPE: PACKAGE_PORTALPortal is a special package that is deployed once. Does not utilize IGeodePackage interface.review: GM for The Limited Upgradability through Dual Governance: * Governance is a governance token. * Senate is a multisig, planned to be a contract that allows pool CONTROLLERs to maintain power. * Senate expiry is effective.review: SM for Staking logic.There are 2 functionalities that are implemented here: * Special Governance functions for Portal: * * Pausing gETH, pausing Portal, releasing prisoned operators,and seting a governance fee. * Push end of the version management logic via pull->push. * * approveProposal changes the package version or allows specified middleware. * * pushUpgrade creates a package type proposal on the package to upgrade the contract, and requires package owner to approve it.authentication: * GeodeModule has OnlyGovernance, OnlySenate and OnlyController checks with modifiers. * StakeModuleLib has \"authenticate()\" function which checks for Maintainers, Controllers, and TYPE. * OracleModuleLib has OnlyOracle checks with a modifier. * Portal has OnlyGovernance checks on : pause, unpause, pausegETH, unpausegETH, setInfrastructureFee, setBeaconDelays, setInitiationDeposit, releasePrisoned.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ContractVersionSet(uint256)": {
        "custom:section": "** EVENTS **"
      },
      "IdInitiated(uint256,uint256)": {
        "custom:section": "** EVENTS **"
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Released(uint256)": {
        "custom:section": "** EVENTS **"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "GeodeParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "StakeParams()": {
        "custom:section": "** GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "allIdsByType(uint256,uint256)": {
        "details": "useful for outside reach, shouldn't be used within contracts as a referance",
        "returns": {
          "_0": "allIdsByType is an array of IDs of the given TYPE from Datastore, returns a specific index"
        }
      },
      "approveProposal(uint256)": {
        "details": "OnlySenate is checked inside the GeodeModule"
      },
      "blameProposal(bytes)": {
        "custom:section": "** PRISON **",
        "custom:visibility": "-> external"
      },
      "canStake(bytes)": {
        "custom:visibility": "-> view"
      },
      "changeIdCONTROLLER(uint256,address)": {
        "custom:subsection": "** ONLY CONTROLLER **"
      },
      "changeMaintainer(uint256,address)": {
        "custom:subsection": "** MAINTAINER **"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "delegate(uint256,uint256[],uint256[])": {
        "custom:section": "** DELEGATION **",
        "custom:visibility": "-> external"
      },
      "deployLiquidityPackage(uint256)": {
        "custom:subsection": "** BOUND LIQUIDITY PACKAGE **"
      },
      "deposit(uint256,uint256,bytes32[],uint256,uint256,address)": {
        "custom:section": "** POOLING OPERATIONS **",
        "custom:visibility": "-> external"
      },
      "generateId(string,uint256)": {
        "details": "id is generated by keccak(name, type)"
      },
      "getMaintenanceFee(uint256)": {
        "custom:visibility": "-> view"
      },
      "getValidatorPeriod(uint256)": {
        "custom:visibility": "-> view"
      },
      "increaseWalletBalance(uint256)": {
        "custom:section": "** INTERNAL WALLET **"
      },
      "initiateOperator(uint256,uint256,uint256,address)": {
        "custom:section": "** OPERATOR INITIATOR **",
        "custom:visibility": "-> external"
      },
      "initiatePool(uint256,uint256,address,bytes,bytes,bool[3])": {
        "custom:section": "** STAKING POOL INITIATOR **",
        "custom:visibility": "-> external"
      },
      "isPriceValid(uint256)": {
        "custom:section": "** DEPOSIT GETTERS **",
        "custom:visibility": "-> view-external"
      },
      "isPrisoned(uint256)": {
        "custom:visibility": "-> view"
      },
      "isPrivatePool(uint256)": {
        "custom:visibility": "-> view"
      },
      "isolationMode()": {
        "details": "GeodeModule override",
        "returns": {
          "_0": "isRecovering true if isolationMode is active: * 1. Portal is paused * 2. Portal needs to be upgraded * 3. Senate expired"
        }
      },
      "operatorAllowance(uint256,uint256)": {
        "custom:visibility": "-> view"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pausegETH()": {
        "custom:section": "** GOVERNANCE FUNCTIONS **",
        "custom:visibility": "-> external"
      },
      "propose(address,uint256,bytes,uint256)": {
        "custom:subsection": "** ONLY GOVERNANCE **"
      },
      "proposeStake(uint256,uint256,bytes[],bytes[],bytes[])": {
        "custom:section": "** VALIDATOR CREATION **",
        "custom:visibility": "-> external"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "readUintArray(uint256,bytes32,uint256)": {
        "custom:section": "** ARRAY GETTER FUNCTIONS **",
        "custom:visibility": "-> view-external"
      },
      "releasePrisoned(uint256)": {
        "details": "in different situations such as a faulty imprisonment or coordinated testing periods * Governance can release the prisonersonlyGovernance SHOULD be checked in Portal"
      },
      "requestExit(uint256,bytes)": {
        "custom:section": "** VALIDATOR EXITS **",
        "custom:visibility": "-> external"
      },
      "setPoolVisibility(uint256,bool)": {
        "custom:subsection": "** POOL VISIBILITY **"
      },
      "setYieldReceiver(uint256,address)": {
        "custom:subsection": "** YIELD SEPARATION **"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "switchMaintenanceFee(uint256,uint256)": {
        "custom:subsection": "** FEE **"
      },
      "switchValidatorPeriod(uint256,uint256)": {
        "custom:section": "** OPERATORS PERIOD **",
        "custom:visibility": "-> external"
      },
      "updateVerificationIndex(uint256,bytes[])": {
        "custom:section": "** ORACLE OPERATIONS **",
        "custom:visibility": "-> external"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Geode Portal: Geode Module + Stake Module",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveProposal(uint256)": {
        "notice": "approves a specific proposal"
      },
      "generateId(string,uint256)": {
        "notice": "useful function for string inputs - returns same with the DSML.generateId"
      },
      "getKey(uint256,bytes32)": {
        "notice": "useful view function for string inputs - returns same with the DSML.generateId"
      },
      "isolationMode()": {
        "notice": "Isolation Mode is an external view function signaling other contracts * to isolate themselves from Portal. For example, Withdrawal Package of the pool will not fetch upgrades."
      },
      "releasePrisoned(uint256)": {
        "notice": "releases an imprisoned operator immediately"
      }
    },
    "notice": "Global standard for staking with on chain delegation and customizable staking pools. Management of the state of the protocol governance through dual governance and proposals. Version management and distribution of packages used by the staking pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}