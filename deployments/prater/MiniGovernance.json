{
  "address": "0x4eF5b76D6740578C803D4ccB550924DA6c797425",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ContractVersionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senate_expiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claim",
          "type": "uint256"
        }
      ],
      "name": "claimUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchUpgradeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposedVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_PORTAL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CONTROLLER",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_VERSION",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isolationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setSenate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b98d041d6cdd6c71775eb7b5be541867bfd578f267ffcf4c05d41ec6a161377",
  "receipt": {
    "to": null,
    "from": "0xF1CF95EA3587497defB74DE486252bdCa26D3756",
    "contractAddress": "0x4eF5b76D6740578C803D4ccB550924DA6c797425",
    "transactionIndex": 0,
    "gasUsed": "1385039",
    "logsBloom": "0x
    "blockHash": "0x8ce0a11c49dbd3665a7ef49a902ba7e5efb673d92bdee5226c3483722ca25840",
    "transactionHash": "0x9b98d041d6cdd6c71775eb7b5be541867bfd578f267ffcf4c05d41ec6a161377",
    "logs": [],
    "blockNumber": 8131265,
    "cumulativeGasUsed": "1385039",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccc16f52eb19b166930e083535fee21e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ContractVersionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senate_expiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"}],\"name\":\"claimUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchUpgradeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PORTAL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CONTROLLER\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_VERSION\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isolationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setSenate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"Global defense layer is the Portalcurrently only defense mechanics this contract provides is the trustless updates that are * achieved with GeodeUtils * portal cannot upgrade the contract without Senate's approval * * However there are such improvements planned to be implemented to make * the staking environment more trustless. * * \\\"isolationMode\\\" is one of them, currently only rules of the isolation mode is Senate_Expiry and * * isUpgraded check. However, this is a good start to ensure that the future implementations will be * * enforced to incentivise the trustless behaviour! The end goal is to create mini-portals * * with different mechanics and allow auto-staking contracts...\",\"kind\":\"dev\",\"methods\":{\"claimUnstake(uint256)\":{\"params\":{\"claim\":\"specified amount can be the unstaked balance or just a reward, ETH.\"},\"returns\":{\"success\":\"if claim was successful\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"unpause()\":{\"details\":\"cannot spam, be careful\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"PAUSE_LAPSE\":{\"details\":\"While there are currently no worry on what pausing will affect, with the next implementations, spamming stake/unstake can cause an issue. Thus, we require senate to wait a bit before pausing the contract again, allowing validator unstake(maybe).\"},\"SENATE_VALIDITY\":{\"details\":\"While there are currently no worry on if the pool will be abandoned, with the introduction of private pools, it can be a problem. Thus, we require senate to refresh it's validity time to time.\"}},\"title\":\"MiniGovernance: local defense layer of the trustless Staking Derivatives\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimUnstake(uint256)\":{\"notice\":\"according to eip-4895, the unstaked balances will be just happen to emerge within this contract. * Telescope (oracle) will be watching these events andn finalizing the unstakes. * This method even makes it possible to claim rewards without unstake, which we know is a possibility\"},\"fetchUpgradeProposal()\":{\"notice\":\"anyone can fetch proposal from Portal, so  we don't need to call it.\"}},\"notice\":\"This contract is being used as the withdrawal credential of the validators, * that are maintained by the given IDs Controller.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/MiniGovernance/MiniGovernance.sol\":\"MiniGovernance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x50edf60d06a03639b99ddbe2f1b03c6f7cc1f1a029400ce3ec8db0270d58ef58\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0a63417803194fa5b2b9505b36dbeb1e3cdf04a23dd89ac4c27052324839b827\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"contracts/Portal/MiniGovernance/MiniGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"../utils/DataStoreUtilsLib.sol\\\";\\r\\nimport \\\"../utils/GeodeUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\nimport \\\"../../interfaces/IPortal.sol\\\";\\r\\nimport \\\"../../interfaces/IMiniGovernance.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title MiniGovernance: local defense layer of the trustless Staking Derivatives\\r\\n * @dev Global defense layer is the Portal\\r\\n * @notice This contract is being used as the withdrawal credential of the validators,\\r\\n * * that are maintained by the given IDs Controller.\\r\\n * @dev currently only defense mechanics this contract provides is the trustless updates that are\\r\\n * * achieved with GeodeUtils\\r\\n * * portal cannot upgrade the contract without Senate's approval\\r\\n * *\\r\\n * * However there are such improvements planned to be implemented to make\\r\\n * * the staking environment more trustless.\\r\\n * * * \\\"isolationMode\\\" is one of them, currently only rules of the isolation mode is Senate_Expiry and\\r\\n * * * isUpgraded check. However, this is a good start to ensure that the future implementations will be\\r\\n * * * enforced to incentivise the trustless behaviour! The end goal is to create mini-portals\\r\\n * * * with different mechanics and allow auto-staking contracts...\\r\\n */\\r\\ncontract MiniGovernance is\\r\\n    IMiniGovernance,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    event Proposed(\\r\\n        uint256 id,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _type,\\r\\n        uint256 _duration\\r\\n    );\\r\\n    event ProposalApproved(uint256 id);\\r\\n    event NewSenate(address senate, uint256 senate_expiry);\\r\\n\\r\\n    event ContractVersionSet(uint256 version);\\r\\n\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n    using GeodeUtils for GeodeUtils.Universe;\\r\\n\\r\\n    DataStoreUtils.DataStore private DATASTORE;\\r\\n    GeodeUtils.Universe private GEM; // MiniGeode :)\\r\\n    PoolGovernance private SELF;\\r\\n\\r\\n    /**\\r\\n     * @dev While there are currently no worry on if the pool will be abandoned,\\r\\n     * with the introduction of private pools, it can be a problem.\\r\\n     * Thus, we require senate to refresh it's validity time to time.\\r\\n     */\\r\\n    uint256 constant SENATE_VALIDITY = 180 days;\\r\\n    /**\\r\\n     * @dev While there are currently no worry on what pausing will affect,\\r\\n     * with the next implementations, spamming stake/unstake can cause an issue.\\r\\n     * Thus, we require senate to wait a bit before pausing the contract again, allowing\\r\\n     * validator unstake(maybe).\\r\\n     */\\r\\n    uint256 constant PAUSE_LAPSE = 1 weeks;\\r\\n\\r\\n    struct PoolGovernance {\\r\\n        IgETH gETH;\\r\\n        uint256 ID;\\r\\n        uint256 lastPause;\\r\\n        uint256 whenPauseAllowed;\\r\\n        uint256 contractVersion;\\r\\n        uint256 proposedVersion;\\r\\n        uint256[9] __gap;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _gETH,\\r\\n        address _PORTAL,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _ID,\\r\\n        uint256 _VERSION\\r\\n    ) public virtual override initializer {\\r\\n        __ReentrancyGuard_init();\\r\\n        __Pausable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        SELF.gETH = IgETH(_gETH);\\r\\n        SELF.ID = _ID;\\r\\n        SELF.lastPause = type(uint256).max;\\r\\n        GEM.GOVERNANCE = _PORTAL;\\r\\n        _refreshSenate(_CONTROLLER);\\r\\n\\r\\n        SELF.contractVersion = _VERSION;\\r\\n        SELF.proposedVersion = _VERSION;\\r\\n        emit ContractVersionSet(_VERSION);\\r\\n    }\\r\\n\\r\\n    modifier onlyPortal() {\\r\\n        require(\\r\\n            msg.sender == GEM.GOVERNANCE,\\r\\n            \\\"MiniGovernance: sender is NOT PORTAL\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            msg.sender == GEM.SENATE,\\r\\n            \\\"MiniGovernance: sender is NOT SENATE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getPortal() internal view returns (IPortal) {\\r\\n        return IPortal(GEM.GOVERNANCE);\\r\\n    }\\r\\n\\r\\n    ///@dev required by the UUPS module\\r\\n    function _authorizeUpgrade(address proposed_implementation)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        require(\\r\\n            GEM.isUpgradeAllowed(proposed_implementation),\\r\\n            \\\"MiniGovernance: is NOT allowed to upgrade\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function pause() external virtual override onlyController {\\r\\n        require(block.timestamp > SELF.whenPauseAllowed);\\r\\n        _pause();\\r\\n        SELF.lastPause = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /// @dev cannot spam, be careful\\r\\n    function unpause() external virtual override onlyController {\\r\\n        _unpause();\\r\\n        SELF.whenPauseAllowed = block.timestamp + PAUSE_LAPSE;\\r\\n        SELF.lastPause = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function getCurrentVersion()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return SELF.contractVersion;\\r\\n    }\\r\\n\\r\\n    function getProposedVersion()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return SELF.proposedVersion;\\r\\n    }\\r\\n\\r\\n    function isolationMode() public view virtual override returns (bool) {\\r\\n        return\\r\\n            SELF.contractVersion != SELF.proposedVersion ||\\r\\n            block.timestamp > GEM.SENATE_EXPIRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** PROPOSALS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice anyone can fetch proposal from Portal, so  we don't need to call it.\\r\\n     */\\r\\n    function fetchUpgradeProposal() external virtual override {\\r\\n        uint256 id = getPortal().miniGovernanceVersion();\\r\\n        require(id != SELF.contractVersion);\\r\\n        GeodeUtils.Proposal memory proposal = getPortal().getProposal(id);\\r\\n        require(proposal.TYPE == 11);\\r\\n        GEM.newProposal(proposal.CONTROLLER, 2, proposal.NAME, 2 weeks);\\r\\n        SELF.proposedVersion = id;\\r\\n    }\\r\\n\\r\\n    function approveProposal(uint256 _id)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        whenNotPaused\\r\\n        onlyController\\r\\n    {\\r\\n        GEM.approveProposal(DATASTORE, _id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** SENATE & UPGRADE MANAGEMENT **\\r\\n     */\\r\\n    function _refreshSenate(address newSenate) internal virtual whenNotPaused {\\r\\n        GEM._setSenate(newSenate, SENATE_VALIDITY);\\r\\n    }\\r\\n\\r\\n    function setSenate(address newController)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _refreshSenate(newController);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice according to eip-4895, the unstaked balances will be just happen to emerge within this contract.\\r\\n     * * Telescope (oracle) will be watching these events andn finalizing the unstakes.\\r\\n     * * This method even makes it possible to claim rewards without unstake, which we know is a possibility\\r\\n     * @param claim specified amount can be the unstaked balance or just a reward, ETH.\\r\\n     * @return success if claim was successful\\r\\n     */\\r\\n    function claimUnstake(uint256 claim)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyPortal\\r\\n        nonReentrant\\r\\n        returns (bool success)\\r\\n    {\\r\\n        (success, ) = payable(GEM.GOVERNANCE).call{value: claim}(\\\"\\\");\\r\\n        require(success, \\\"MiniGovernance: Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice keep the contract size at 50\\r\\n    uint256[45] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x011df4374002d2bff1274f03cf38f27c3740cfff7a222b8194f38d64ca27c239\",\"license\":\"MIT\"},\"contracts/Portal/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n            // Store the length of the first bytes array at the beginning of\\r\\n            // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n            // Maintain a memory counter for the current write location in the\\r\\n            // temp bytes array by adding the 32 bytes for the array length to\\r\\n            // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n            // Stop copying when the memory counter reaches the length of the\\r\\n            // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                // Initialize a copy counter to the start of the _preBytes data,\\r\\n                // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n                // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Add the length of _postBytes to the current length of tempBytes\\r\\n            // and store it as the new length in the first 32 bytes of the\\r\\n            // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n            // Move the memory counter back from a multiple of 0x20 to the\\r\\n            // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n            // Stop copying when the memory counter reaches the new combined\\r\\n            // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Update the free-memory pointer by padding our last write location\\r\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n            // next 32 byte block, then round down to the nearest multiple of\\r\\n            // 32. If the sum of the length of the two arrays is zero then add\\r\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(\\r\\n                0x40,\\r\\n                and(\\r\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n                    not(31) // Round down to the nearest 32 bytes.\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n    {\\r\\n        assembly {\\r\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n            // of the array. (We don't need to use the offset into the slot\\r\\n            // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Arrays of 31 bytes or less have an even value in their slot,\\r\\n            // while longer arrays have an odd value. The actual length is\\r\\n            // the slot divided by two for odd values, and the lowest order\\r\\n            // byte divided by two for even values.\\r\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n            // two to get the length. If the slot is odd, bitwise and the slot\\r\\n            // with -1 and divide by two.\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n                // Since the new array still fits in the slot, we just need to\\r\\n                // update the contents of the slot.\\r\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                    _preBytes.slot,\\r\\n                    // all the modifications to the slot are inside this\\r\\n                    // next block\\r\\n                    add(\\r\\n                        // we can just add to the slot contents because the\\r\\n                        // bytes we want to change are the LSBs\\r\\n                        fslot,\\r\\n                        add(\\r\\n                            mul(\\r\\n                                div(\\r\\n                                    // load the bytes from memory\\r\\n                                    mload(add(_postBytes, 0x20)),\\r\\n                                    // zero all bytes to the right\\r\\n                                    exp(0x100, sub(32, mlength))\\r\\n                                ),\\r\\n                                // and now shift left the number of bytes to\\r\\n                                // leave space for the length in the slot\\r\\n                                exp(0x100, sub(32, newlength))\\r\\n                            ),\\r\\n                            // increase length by the double of the memory\\r\\n                            // bytes length\\r\\n                            mul(mlength, 2)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n                // The stored value fits in the slot, but the combined value\\r\\n                // will exceed it.\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // The contents of the _postBytes array start 32 bytes into\\r\\n                // the structure. Our first read should obtain the `submod`\\r\\n                // bytes that can fit into the unused space in the last word\\r\\n                // of the stored array. To get this, we read 32 bytes starting\\r\\n                // from `submod`, so the data we read overlaps with the array\\r\\n                // contents by `submod` bytes. Masking the lowest-order\\r\\n                // `submod` bytes allows us to add that value directly to the\\r\\n                // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                    sc,\\r\\n                    add(\\r\\n                        and(\\r\\n                            fslot,\\r\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                        ),\\r\\n                        and(mload(mc), mask)\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // Copy over the first `submod` bytes of the new data as in\\r\\n                // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(\\r\\n                    add(tempBytes, lengthmod),\\r\\n                    mul(0x20, iszero(lengthmod))\\r\\n                )\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(\\r\\n                        add(\\r\\n                            add(_bytes, lengthmod),\\r\\n                            mul(0x20, iszero(lengthmod))\\r\\n                        ),\\r\\n                        _start\\r\\n                    )\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(\\r\\n                mload(add(add(_bytes, 0x20), _start)),\\r\\n                0x1000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint16)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint64)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint128)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n                // cb is a circuit breaker in the for loop since there's\\r\\n                //  no said feature for inline assembly loops\\r\\n                // cb = 1 - don't breaker\\r\\n                // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                        // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n                // slength can contain both the length and contents of the array\\r\\n                // if length < 32 bytes so let's prepare for that\\r\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                        // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                            // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                        // cb is a circuit breaker in the for loop since there's\\r\\n                        //  no said feature for inline assembly loops\\r\\n                        // cb = 1 - don't breaker\\r\\n                        // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                        // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                        // the next line is the loop condition:\\r\\n                        // while(uint256(mc < end) + cb == 2)\\r\\n                        for {\\r\\n\\r\\n                        } eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                                // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x970ae3a76009f15ecde277feeaa372ec3dadabcb753d33fcae055dd0f9e2e30f\",\"license\":\"Unlicense\"},\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title Storage Management Library for dynamic structs, based on data types and ids\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs*.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n    /**\\r\\n     * @notice Main Struct for reading and writing data to storage for given (id, key) pairs\\r\\n     * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n     * @param uintData keccak(id, key) =>  returns uint256\\r\\n     * @param bytesData keccak(id, key) => returns bytes\\r\\n     * @param addressData keccak(id, key) =>  returns address\\r\\n     * @dev any other storage type can be expressed as bytes\\r\\n     * @param __gap keep the struct size at 16\\r\\n     */\\r\\n    struct DataStore {\\r\\n        mapping(uint256 => uint256[]) allIdsByType;\\r\\n        mapping(bytes32 => uint256) uintData;\\r\\n        mapping(bytes32 => bytes) bytesData;\\r\\n        mapping(bytes32 => address) addressData;\\r\\n        uint256[12] __gap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              ** HELPER **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @notice hashes given id with parameter to be used as key in getters and setters\\r\\n     * @return key bytes32 hash of id and parameter to be stored\\r\\n     **/\\r\\n    function getKey(uint256 _id, bytes32 _param)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 key)\\r\\n    {\\r\\n        key = keccak256(abi.encodePacked(_id, _param));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA GETTERS **\\r\\n     **/\\r\\n\\r\\n    function readUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (uint256 data) {\\r\\n        data = self.uintData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (bytes memory data) {\\r\\n        data = self.bytesData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (address data) {\\r\\n        data = self.addressData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA SETTERS **\\r\\n     **/\\r\\n    function writeUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _data\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function addUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _addend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] += _addend;\\r\\n    }\\r\\n\\r\\n    function subUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _minuend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] -= _minuend;\\r\\n    }\\r\\n\\r\\n    function writeBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        self.bytesData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function writeAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        address _data\\r\\n    ) internal {\\r\\n        self.addressData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf4fe299cff8dd092657d494b2f967aaceb141b52563a233586ffe9676169f727\",\"license\":\"MIT\"},\"contracts/Portal/utils/DepositContractUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"../helpers/BytesLib.sol\\\";\\r\\n\\r\\nlibrary DepositContractUtils {\\r\\n    IDepositContract internal constant DEPOSIT_CONTRACT =\\r\\n        IDepositContract(0x00000000219ab540356cBB839Cbe05303d7705Fa);\\r\\n    uint256 internal constant PUBKEY_LENGTH = 48;\\r\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\r\\n    uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\r\\n    uint256 internal constant MAX_DEPOSITS_PER_CALL = 64;\\r\\n\\r\\n    /**\\r\\n     * @dev Padding memory array with zeroes up to 64 bytes on the right\\r\\n     * @param _b Memory array of size 32 .. 64\\r\\n     */\\r\\n    function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\r\\n        assert(_b.length >= 32 && _b.length <= 64);\\r\\n        if (64 == _b.length) return _b;\\r\\n\\r\\n        bytes memory zero32 = new bytes(32);\\r\\n        assembly {\\r\\n            mstore(add(zero32, 0x20), 0)\\r\\n        }\\r\\n\\r\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\r\\n        else\\r\\n            return\\r\\n                BytesLib.concat(\\r\\n                    _b,\\r\\n                    BytesLib.slice(zero32, 0, uint256(64 - _b.length))\\r\\n                );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\r\\n     * @param _value Number less than `2**64` for compatibility reasons\\r\\n     */\\r\\n    function _toLittleEndian64(uint256 _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = 0;\\r\\n        uint256 temp_value = _value;\\r\\n        for (uint256 i = 0; i < 8; ++i) {\\r\\n            result = (result << 8) | (temp_value & 0xFF);\\r\\n            temp_value >>= 8;\\r\\n        }\\r\\n\\r\\n        assert(0 == temp_value); // fully converted\\r\\n        result <<= (24 * 8);\\r\\n    }\\r\\n\\r\\n    function _getDepositDataRoot(\\r\\n        bytes memory _pubkey,\\r\\n        bytes memory _withdrawalCredentials,\\r\\n        bytes memory _signature,\\r\\n        uint256 _stakeAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(\\r\\n            _stakeAmount >= 1 ether,\\r\\n            \\\"DepositContract: deposit value too low\\\"\\r\\n        );\\r\\n        require(\\r\\n            _stakeAmount % 1 gwei == 0,\\r\\n            \\\"DepositContract: deposit value not multiple of gwei\\\"\\r\\n        );\\r\\n\\r\\n        uint256 deposit_amount = _stakeAmount / 1 gwei;\\r\\n        bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\r\\n        bytes32 signatureRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\r\\n                sha256(\\r\\n                    _pad64(\\r\\n                        BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 depositDataRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\r\\n                sha256(\\r\\n                    abi.encodePacked(\\r\\n                        _toLittleEndian64(deposit_amount),\\r\\n                        signatureRoot\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return depositDataRoot;\\r\\n    }\\r\\n\\r\\n    function addressToWC(address wcAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        uint256 w = 1 << 248;\\r\\n\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                bytes32(w) | bytes32(uint256(uint160(address(wcAddress))))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function depositValidator(\\r\\n        bytes calldata pubkey,\\r\\n        bytes memory withdrawalCredential,\\r\\n        bytes memory signature,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        DEPOSIT_CONTRACT.deposit{value: amount}(\\r\\n            pubkey,\\r\\n            withdrawalCredential,\\r\\n            signature,\\r\\n            _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd674c0b2060717152fad859c5c74de6433e626908d4511346d333687d062281d\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title GeodeUtils library\\r\\n * @notice Exclusively contains functions responsible for administration of DATASTORE,\\r\\n * including functions related to \\\"limited upgradability\\\" with Senate & Proposals.\\r\\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * @dev Admin functions are already protected\\r\\n * Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary GeodeUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event GovernanceTaxUpdated(uint256 newFee);\\r\\n    event MaxGovernanceTaxUpdated(uint256 newMaxFee);\\r\\n    event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n    event Proposed(\\r\\n        uint256 id,\\r\\n        address CONTROLLER,\\r\\n        uint256 TYPE,\\r\\n        uint256 deadline\\r\\n    );\\r\\n    event ProposalApproved(uint256 id);\\r\\n    event ElectorTypeSet(uint256 TYPE, bool isElector);\\r\\n    event Vote(uint256 proposalId, uint256 electorId);\\r\\n    event NewSenate(address senate, uint256 senateExpiry);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\\r\\n     *\\r\\n     * @notice A Proposal has 4 specs:\\r\\n     * @param TYPE: separates the proposals and related functionality between different ID types.\\r\\n     * * RESERVED TYPES on GeodeUtils:\\r\\n     * * * TYPE 0: inactive\\r\\n     * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\\r\\n     * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\\r\\n     * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\\r\\n     * this TYPE is now reserved.\\r\\n     *\\r\\n     * @param name: id is created by keccak(name, type)\\r\\n     *\\r\\n     * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\\r\\n     * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\r\\n     *\\r\\n     * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\r\\n     * * Expired proposals can not be approved by Senate\\r\\n     * * Expired proposals can not be overriden by new proposals\\r\\n     **/\\r\\n    struct Proposal {\\r\\n        address CONTROLLER;\\r\\n        uint256 TYPE;\\r\\n        bytes NAME;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Universe is A blockchain. In this case, it defines Ethereum\\r\\n     * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\r\\n     * Suggests updates, such as new planets, operators, comets, contract upgrades and new Senate, on the Ecosystem -without any permission to force them-\\r\\n     * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\\r\\n     * Note SENATE is proposed by Governance and voted by all elector types, operates if \\u230a2/3\\u230b approves.\\r\\n     * @param GOVERNANCE_TAX operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_TAX\\r\\n     * @param MAX_GOVERNANCE_TAX set by SENATE, limited by PERCENTAGE_DENOMINATOR\\r\\n     * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\r\\n     * @param approvedUpgrade only 1 implementation contract can be \\\"approved\\\" at any given time. @dev safe to set to address(0) after every upgrade\\r\\n     * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\r\\n     * @param _electorTypes only given types can vote @dev MUST only change during upgrades.\\r\\n     * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allow surpassing type checks to save gas cost\\r\\n     * @param __gap keep the struct size at 16\\r\\n     **/\\r\\n    struct Universe {\\r\\n        address SENATE;\\r\\n        address GOVERNANCE;\\r\\n        uint256 GOVERNANCE_TAX;\\r\\n        uint256 MAX_GOVERNANCE_TAX;\\r\\n        uint256 SENATE_EXPIRY;\\r\\n        address approvedUpgrade;\\r\\n        uint256 _electorCount;\\r\\n        mapping(uint256 => bool) _electorTypes;\\r\\n        mapping(uint256 => Proposal) _proposalForId;\\r\\n        uint256[7] __gap;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\r\\n    uint32 public constant MAX_PROPOSAL_DURATION = 2 weeks;\\r\\n    uint32 public constant MAX_SENATE_PERIOD = 365 days; // 1 year\\r\\n\\r\\n    modifier onlySenate(Universe storage self) {\\r\\n        require(msg.sender == self.SENATE, \\\"GeodeUtils: SENATE role needed\\\");\\r\\n        require(\\r\\n            block.timestamp < self.SENATE_EXPIRY,\\r\\n            \\\"GeodeUtils: SENATE not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance(Universe storage self) {\\r\\n        require(\\r\\n            msg.sender == self.GOVERNANCE,\\r\\n            \\\"GeodeUtils: GOVERNANCE role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"GeodeUtils: CONTROLLER role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE GETTERS **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @return address of SENATE\\r\\n     **/\\r\\n    function getSenate(Universe storage self) external view returns (address) {\\r\\n        return self.SENATE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return address of GOVERNANCE\\r\\n     **/\\r\\n    function getGovernance(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return self.GOVERNANCE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed\\r\\n     * @return active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @return MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getMaxGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.MAX_GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the expiration date of current SENATE as a timestamp\\r\\n     */\\r\\n    function getSenateExpiry(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.SENATE_EXPIRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE SETTERS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev can not set the fee more than MAX_GOVERNANCE_TAX\\r\\n     * @dev no need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already\\r\\n     * @return true if the operation was succesful, might be helpful when governance rights are distributed\\r\\n     */\\r\\n    function setGovernanceTax(Universe storage self, uint256 newFee)\\r\\n        external\\r\\n        onlyGovernance(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newFee <= self.MAX_GOVERNANCE_TAX,\\r\\n            \\\"GeodeUtils: cannot be more than MAX_GOVERNANCE_TAX\\\"\\r\\n        );\\r\\n\\r\\n        self.GOVERNANCE_TAX = newFee;\\r\\n\\r\\n        emit GovernanceTaxUpdated(newFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev can not set a fee more than PERCENTAGE_DENOMINATOR (100%)\\r\\n     * @return true if the operation was succesful\\r\\n     */\\r\\n    function setMaxGovernanceTax(Universe storage self, uint256 newMaxFee)\\r\\n        external\\r\\n        onlySenate(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newMaxFee <= PERCENTAGE_DENOMINATOR,\\r\\n            \\\"GeodeUtils: fee more than 100%\\\"\\r\\n        );\\r\\n\\r\\n        self.MAX_GOVERNANCE_TAX = newMaxFee;\\r\\n\\r\\n        emit MaxGovernanceTaxUpdated(newMaxFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** ID **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Some TYPEs may require permissionless creation. But to allow anyone to claim any ID,\\r\\n     * meaning malicious actors can claim names and operate pools to mislead people. To prevent this\\r\\n     * TYPEs will be considered during id generation.\\r\\n     */\\r\\n    function _generateId(bytes calldata _NAME, uint256 _TYPE)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(keccak256(abi.encodePacked(_NAME, _TYPE)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns address(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getCONTROLLERFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address) {\\r\\n        return DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns uint(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getTYPEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256) {\\r\\n        return DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns bytes(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getNAMEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (bytes memory) {\\r\\n        return DATASTORE.readBytesForId(id, \\\"NAME\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice only the current CONTROLLER can change\\r\\n     * @dev this operation can not be reverted by the old CONTROLLER\\r\\n     * @dev in case the current controller wants to remove the\\r\\n     * need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeIdCONTROLLER(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newCONTROLLER\\r\\n    ) external onlyController(DATASTORE, id) {\\r\\n        require(\\r\\n            newCONTROLLER != address(0),\\r\\n            \\\"GeodeUtils: CONTROLLER can not be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\r\\n\\r\\n        emit ControllerChanged(id, newCONTROLLER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** PROPOSALS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * CONTROLLER Proposals\\r\\n     */\\r\\n\\r\\n    function getProposal(Universe storage self, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (Proposal memory)\\r\\n    {\\r\\n        return self._proposalForId[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice a proposal can never be overriden.\\r\\n     * @notice DATASTORE(id) will not be updated until the proposal is approved.\\r\\n     * @dev refer to structure of Proposal for explanations of params\\r\\n     */\\r\\n    function newProposal(\\r\\n        Universe storage self,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _TYPE,\\r\\n        bytes calldata _NAME,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 id) {\\r\\n        require(\\r\\n            duration >= MIN_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration should be higher than MIN_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n        require(\\r\\n            duration <= MAX_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration exceeds MAX_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n\\r\\n        id = _generateId(_NAME, _TYPE);\\r\\n\\r\\n        require(\\r\\n            self._proposalForId[id].deadline == 0,\\r\\n            \\\"GeodeUtils: NAME already proposed\\\"\\r\\n        );\\r\\n\\r\\n        self._proposalForId[id] = Proposal({\\r\\n            CONTROLLER: _CONTROLLER,\\r\\n            TYPE: _TYPE,\\r\\n            NAME: _NAME,\\r\\n            deadline: block.timestamp + duration\\r\\n        });\\r\\n\\r\\n        emit Proposed(id, _CONTROLLER, _TYPE, block.timestamp + duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\\r\\n     *  any other addition should take place in Portal, as not related\\r\\n     *  @param id given ID proposal that has been approved by Senate\\r\\n     *  @dev Senate should not be able to approve approved proposals\\r\\n     *  @dev Senate should not be able to approve expired proposals\\r\\n     *  @dev Senate should not be able to approve SENATE proposals :)\\r\\n     */\\r\\n    function approveProposal(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external onlySenate(self) {\\r\\n        require(\\r\\n            self._proposalForId[id].deadline > block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[id].TYPE != 1,\\r\\n            \\\"GeodeUtils: Senate can not approve Senate Election\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            \\\"CONTROLLER\\\",\\r\\n            self._proposalForId[id].CONTROLLER\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"TYPE\\\", self._proposalForId[id].TYPE);\\r\\n        DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposalForId[id].NAME);\\r\\n\\r\\n        if (self._proposalForId[id].TYPE == 2) {\\r\\n            self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\\r\\n        }\\r\\n\\r\\n        if (self._electorTypes[DATASTORE.readUintForId(id, \\\"TYPE\\\")]) {\\r\\n            self._electorCount += 1;\\r\\n        }\\r\\n\\r\\n        DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\\r\\n        self._proposalForId[id].deadline = block.timestamp;\\r\\n\\r\\n        emit ProposalApproved(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * SENATE Proposals\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice only elector types can vote for senate\\r\\n     * @param _TYPE selected type\\r\\n     * @param isElector true if selected _type can vote for senate from now on\\r\\n     * @dev can not set with the same value again, preventing double increment/decrements\\r\\n     */\\r\\n    function setElectorType(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        bool isElector\\r\\n    ) external onlyGovernance(self) {\\r\\n        require(\\r\\n            self._electorTypes[_TYPE] != isElector,\\r\\n            \\\"GeodeUtils: type already _isElector\\\"\\r\\n        );\\r\\n        require(\\r\\n            _TYPE != 0 && _TYPE != 1 && _TYPE != 2 && _TYPE != 3,\\r\\n            \\\"GeodeUtils: 0, Senate, Upgrade cannot be elector\\\"\\r\\n        );\\r\\n\\r\\n        self._electorTypes[_TYPE] = isElector;\\r\\n\\r\\n        if (isElector) {\\r\\n            self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\r\\n        } else {\\r\\n            self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\r\\n        }\\r\\n\\r\\n        emit ElectorTypeSet(_TYPE, isElector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\r\\n     * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\\r\\n     * @notice id can not vote if:\\r\\n     * - approved already\\r\\n     * - proposal is expired\\r\\n     * - not its type is elector\\r\\n     * - not senate proposal\\r\\n     * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\r\\n     * @dev pins id as \\\"voted\\\" when approved\\r\\n     * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\r\\n     */\\r\\n    function approveSenate(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 proposalId,\\r\\n        uint256 electorId\\r\\n    ) external onlyController(DATASTORE, electorId) {\\r\\n        require(\\r\\n            self._proposalForId[proposalId].TYPE == 1,\\r\\n            \\\"GeodeUtils: NOT Senate Proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[proposalId].deadline >= block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._electorTypes[DATASTORE.readUintForId(electorId, \\\"TYPE\\\")],\\r\\n            \\\"GeodeUtils: NOT an elector\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(\\r\\n                proposalId,\\r\\n                DataStoreUtils.getKey(electorId, \\\"voted\\\")\\r\\n            ) == 0,\\r\\n            \\\" GeodeUtils: already approved\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(\\r\\n            proposalId,\\r\\n            DataStoreUtils.getKey(electorId, \\\"voted\\\"),\\r\\n            1\\r\\n        );\\r\\n        DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\r\\n\\r\\n        if (\\r\\n            DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\r\\n            ((self._electorCount + 1) * 2) / 3\\r\\n        ) {\\r\\n            self._proposalForId[proposalId].deadline = block.timestamp;\\r\\n            _setSenate(\\r\\n                self,\\r\\n                self._proposalForId[proposalId].CONTROLLER,\\r\\n                MAX_SENATE_PERIOD\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Vote(proposalId, electorId);\\r\\n    }\\r\\n\\r\\n    function _setSenate(\\r\\n        Universe storage self,\\r\\n        address _newSenate,\\r\\n        uint256 _senatePeriod\\r\\n    ) internal {\\r\\n        self.SENATE = _newSenate;\\r\\n        self.SENATE_EXPIRY = block.timestamp + _senatePeriod;\\r\\n\\r\\n        emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if it is allowed to change a specific contract with the current version.\\r\\n     * @return True if it is allowed by senate and false if not.\\r\\n     * @dev address(0) should return false\\r\\n     * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\r\\n     **/\\r\\n    function isUpgradeAllowed(\\r\\n        Universe storage self,\\r\\n        address proposedImplementation\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            self.approvedUpgrade != address(0) &&\\r\\n            self.approvedUpgrade == proposedImplementation;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4060116387aec71c57e12ce4bbf0b10fa2e5748eb140c5f3e1cb44fb5b1b896e\",\"license\":\"MIT\"},\"contracts/Portal/utils/OracleUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title OracleUtils library to be used within stakeUtils\\r\\n * @notice Oracle, named Telescope, is responsible from 2 tasks:\\r\\n * * regulating the validator creations and exits\\r\\n * * syncs the price of all pools with merkleroot\\r\\n *\\r\\n * Regulating the validators/operators:\\r\\n * * state 1: validators is proposed since enough allowence is given from pool maintainers, 1 ETH is locked from maintainerWallet\\r\\n * * state 2: stake was approved by Oracle, operator used user funds to activate the validator, 1 ETH is released\\r\\n * * state 69: validator was malicious(alien), probably front-runned with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC)\\r\\n * * state 3: validator is exited. However, if the signal turns out to be false, then Telescope reports and sets to state 2, prisoning the operator.\\r\\n * * * Reports the Total number of Beacon validators to make sure no operator is running more validators then they should within Geode Universe.\\r\\n *\\r\\n *\\r\\n * Syncing the Prices:\\r\\n * * Telescope works the first 30 minutes of every day(GMT), with an archive node that points the first second.\\r\\n * * Catches the beacon chain balances and decreases the fees, groups them by ids\\r\\n * * Creates a merkle root, by simply calculating all prices from every pool, either private or public\\r\\n * * Verifies merkle root with price proofs of all public pools.\\r\\n * * * Private pools need to verify their own price once a day, otherwise minting is not allowed.\\r\\n * * * * This is why merkle root of all prices is needed\\r\\n *\\r\\n * @dev Prisoned Validator:\\r\\n * * 1. created a malicious validator(alien)\\r\\n * * 2. withdrawn without a signal\\r\\n * * 3. signaled but not withdrawn\\r\\n * * 4. did not respect the validatorPeriod\\r\\n *\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\n\\r\\nlibrary OracleUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event Alienated(bytes pubkey);\\r\\n    event Busted(bytes pubkey);\\r\\n    event Prisoned(uint256 id, uint256 releaseTimestamp);\\r\\n    event Released(uint256 id);\\r\\n    event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\r\\n    event FeeTheft(uint256 id, uint256 blockNumber);\\r\\n\\r\\n    /**\\r\\n     * @param state 0: inactive, 1: proposed/cured validator, 2: active validator, 3: exited,  69: alienated proposal\\r\\n     * @param index representing this validators placement on the chronological order of the proposed validators\\r\\n     * @param planetId needed for withdrawal_credential\\r\\n     * @param operatorId needed for staking after allowence\\r\\n     * @param poolFee percentage of the rewards that will got to pool's maintainer, locked when the validator is created\\r\\n     * @param operatorFee percentage of the rewards that will got to operator's maintainer, locked when the validator is created\\r\\n     * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\r\\n     * @param expectedExit expected timestamp of the exit of validator. Calculated with operator[\\\"validatorPeriod\\\"]\\r\\n     * @param signature BLS12-381 signature of the validator\\r\\n     **/\\r\\n    struct Validator {\\r\\n        uint8 state;\\r\\n        uint256 index;\\r\\n        uint256 poolId;\\r\\n        uint256 operatorId;\\r\\n        uint256 poolFee;\\r\\n        uint256 operatorFee;\\r\\n        uint256 createdAt;\\r\\n        uint256 expectedExit;\\r\\n        bytes signature;\\r\\n    }\\r\\n    /**\\r\\n     * @param ORACLE_POSITION https://github.com/Geodefi/Telescope-Eth\\r\\n     * @param ORACLE_UPDATE_TIMESTAMP the timestamp of the latest oracle update\\r\\n     * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated daily by oracle\\r\\n     * @param VALIDATORS_INDEX total number of validators that are proposed at some point. includes all states of validators.\\r\\n     * @param VERIFICATION_INDEX the highest index of the validators that are verified ( to be not alien ) by Telescope. Updated by Telescope.\\r\\n     * @param PERIOD_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PERIOD_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, planet or comet\\r\\n     * @param _validators contains all the data about proposed or/and active validators\\r\\n     * @param __gap keep the struct size at 16\\r\\n     **/\\r\\n    struct Oracle {\\r\\n        IgETH gETH;\\r\\n        address ORACLE_POSITION;\\r\\n        uint256 ORACLE_UPDATE_TIMESTAMP;\\r\\n        uint256 MONOPOLY_THRESHOLD;\\r\\n        uint256 VALIDATORS_INDEX;\\r\\n        uint256 VERIFICATION_INDEX;\\r\\n        uint256 PERIOD_PRICE_INCREASE_LIMIT;\\r\\n        uint256 PERIOD_PRICE_DECREASE_LIMIT;\\r\\n        bytes32 PRICE_MERKLE_ROOT;\\r\\n        mapping(bytes => Validator) _validators;\\r\\n        uint256[6] __gap;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice Oracle is active for the first 30 min of every day\\r\\n    uint256 public constant ORACLE_PERIOD = 1 days;\\r\\n    uint256 public constant ORACLE_ACTIVE_PERIOD = 30 minutes;\\r\\n\\r\\n    /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 5% at start.\\r\\n    uint256 public constant MONOPOLY_RATIO = (5 * PERCENTAGE_DENOMINATOR) / 100;\\r\\n\\r\\n    /// @notice limiting some abilities of Operators in case of bad behaviour\\r\\n    uint256 public constant PRISON_SENTENCE = 30 days;\\r\\n\\r\\n    modifier onlyOracle(Oracle storage self) {\\r\\n        require(\\r\\n            msg.sender == self.ORACLE_POSITION,\\r\\n            \\\"OracleUtils: sender NOT ORACLE\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getValidator(Oracle storage self, bytes calldata pubkey)\\r\\n        external\\r\\n        view\\r\\n        returns (Validator memory)\\r\\n    {\\r\\n        return self._validators[pubkey];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Oracle is only allowed for a period every day & some operations are stopped then\\r\\n     * @return false if the last oracle update happened already (within the current daily period)\\r\\n     */\\r\\n    function _isOracleActive(Oracle storage self) internal view returns (bool) {\\r\\n        return\\r\\n            (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\\r\\n            (self.ORACLE_UPDATE_TIMESTAMP <\\r\\n                block.timestamp - ORACLE_ACTIVE_PERIOD);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice              ** Regulating the Operators and PubKeys **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the given operator is Prisoned\\r\\n     * @dev \\\"released\\\" key refers to the end of the last imprisonment, the limit on the abilities of operator is lifted then\\r\\n     */\\r\\n    function isPrisoned(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) internal view returns (bool _isPrisoned) {\\r\\n        _isPrisoned =\\r\\n            block.timestamp <= DATASTORE.readUintForId(_operatorId, \\\"released\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice releases an imprisoned operator immidately\\r\\n     * @dev in different situations such as a faulty improsenment or coordinated testing periods\\r\\n     * * Governance can vote on releasing the prisoners\\r\\n     * @dev onlyGovernance check is in Portal\\r\\n     */\\r\\n    function releasePrisoned(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 operatorId\\r\\n    ) external {\\r\\n        require(\\r\\n            isPrisoned(DATASTORE, operatorId),\\r\\n            \\\"OracleUtils: NOT in prison\\\"\\r\\n        );\\r\\n        DATASTORE.writeUintForId(operatorId, \\\"released\\\", block.timestamp);\\r\\n        emit Released(operatorId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Put an operator in prison, \\\"release\\\" points to the date the operator will be out\\r\\n     */\\r\\n    function imprison(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) internal {\\r\\n        DATASTORE.writeUintForId(\\r\\n            _operatorId,\\r\\n            \\\"released\\\",\\r\\n            block.timestamp + PRISON_SENTENCE\\r\\n        );\\r\\n        emit Prisoned(_operatorId, block.timestamp + PRISON_SENTENCE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks if a validator can use pool funds\\r\\n     * Creation of a Validator takes 2 steps.\\r\\n     * Before entering beaconStake function, _canStake verifies the eligibility of\\r\\n     * given pubKey that is proposed by an operator with proposeStake function.\\r\\n     * Eligibility is defined by an optimistic alienation, check alienate() for info.\\r\\n     *\\r\\n     *  @param pubkey BLS12-381 public key of the validator\\r\\n     *  @return true if:\\r\\n     *   - pubkey should be proposeStaked\\r\\n     *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\r\\n     *   - validator's index should be lower than VERIFICATION_INDEX. Updated by Telescope.\\r\\n     *  else:\\r\\n     *      return false\\r\\n     * @dev to optimize batch checks verificationIndex is taken as a memeory param\\r\\n     */\\r\\n    function _canStake(\\r\\n        Oracle storage self,\\r\\n        bytes calldata pubkey,\\r\\n        uint256 verificationIndex\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            self._validators[pubkey].state == 1 &&\\r\\n            self._validators[pubkey].index <= verificationIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An \\\"Alien\\\" is a validator that is created with a false withdrawal credential, this is a malicious act.\\r\\n     * @dev imprisonates the operator who proposed a malicious validator.\\r\\n     */\\r\\n    function _alienateValidator(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 1,\\r\\n            \\\"OracleUtils: NOT all alienPubkeys are pending\\\"\\r\\n        );\\r\\n        uint256 planetId = self._validators[_pk].poolId;\\r\\n        DATASTORE.subUintForId(planetId, \\\"secured\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        DATASTORE.addUintForId(planetId, \\\"surplus\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        self._validators[_pk].state = 69;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Alienated(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to a false signal, meaning there is a signal but no Unstake\\r\\n     * @dev imprisonates the operator who signaled a fake Unstake\\r\\n     */\\r\\n    function _bustSignal(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 3,\\r\\n            \\\"OracleUtils: pubkey is NOT signaled\\\"\\r\\n        );\\r\\n        self._validators[_pk].state = 2;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to unsignaled withdrawal, meaning there is an unstake but no Signal\\r\\n     * @dev imprisonates the operator who haven't signal the unstake\\r\\n     */\\r\\n    function _bustExit(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 2,\\r\\n            \\\"OracleUtils: Signaled, cannot be busted\\\"\\r\\n        );\\r\\n        self._validators[_pk].state = 3;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updating VERIFICATION_INDEX, signaling that it is safe to allow\\r\\n     * validators with lower index than VERIFICATION_INDEX to stake with staking pool funds\\r\\n     * @param allValidatorsCount total number of validators to figure out what is the current Monopoly Requirement\\r\\n     * @param validatorVerificationIndex index of the highest validator that is verified to be activated\\r\\n     * @param alienatedPubkeys proposals with lower index than new_index who frontrunned proposeStake\\r\\n     * with incorrect withdrawal credential results in imprisonment.\\r\\n     */\\r\\n    function updateVerificationIndex(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 allValidatorsCount,\\r\\n        uint256 validatorVerificationIndex,\\r\\n        bytes[] calldata alienatedPubkeys\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n        require(allValidatorsCount > 4999, \\\"OracleUtils: low validator count\\\");\\r\\n        require(\\r\\n            self.VALIDATORS_INDEX >= validatorVerificationIndex,\\r\\n            \\\"OracleUtils: high VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        require(\\r\\n            validatorVerificationIndex >= self.VERIFICATION_INDEX,\\r\\n            \\\"OracleUtils: low VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        self.VERIFICATION_INDEX = validatorVerificationIndex;\\r\\n\\r\\n        for (uint256 i; i < alienatedPubkeys.length; i++) {\\r\\n            _alienateValidator(self, DATASTORE, alienatedPubkeys[i]);\\r\\n        }\\r\\n\\r\\n        self.MONOPOLY_THRESHOLD =\\r\\n            (allValidatorsCount * MONOPOLY_RATIO) /\\r\\n            PERCENTAGE_DENOMINATOR;\\r\\n\\r\\n        emit VerificationIndexUpdated(validatorVerificationIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice regulating operators within Geode with verifiable proofs\\r\\n     * @param bustedExits validators that have not signaled before Unstake\\r\\n     * @param bustedSignals validators that are \\\"mistakenly:)\\\" signaled but not Unstaked\\r\\n     * @param feeThefts [0]: Operator ids who have stolen MEV or block rewards, [1]: detected BlockNumber as proof\\r\\n     * @dev Both of these functions results in imprisonment.\\r\\n     */\\r\\n    function regulateOperators(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes[] calldata bustedExits,\\r\\n        bytes[] calldata bustedSignals,\\r\\n        uint256[2][] calldata feeThefts\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n\\r\\n        for (uint256 i; i < bustedExits.length; i++) {\\r\\n            _bustExit(self, DATASTORE, bustedExits[i]);\\r\\n        }\\r\\n\\r\\n        for (uint256 j; j < bustedSignals.length; j++) {\\r\\n            _bustSignal(self, DATASTORE, bustedSignals[j]);\\r\\n        }\\r\\n        for (uint256 k; k < feeThefts.length; k++) {\\r\\n            imprison(DATASTORE, feeThefts[k][0]);\\r\\n            emit FeeTheft(feeThefts[k][0], feeThefts[k][1]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                          ** Updating PricePerShare **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice calculates the current price and expected report price\\r\\n     * @dev surplus at the oracle time is found with the help of mint and burn buffers\\r\\n     * @param _dailyBufferMintKey represents the gETH minted during oracleActivePeriod, unique to every day\\r\\n     * @param _dailyBufferBurnKey represents the gETH burned during oracleActivePeriod, unique to every day\\r\\n     * @dev calculates the totalEther amount, decreases the amount minted while oracle was working (first 30m),\\r\\n     * finds the expected Oracle price by totalEther / supply , finds the current price by unbufferedEther / unbufferedSupply\\r\\n     */\\r\\n    function _findPricesClearBuffer(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 _dailyBufferMintKey,\\r\\n        bytes32 _dailyBufferBurnKey,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        uint256 totalEther = _beaconBalance +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"secured\\\") +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n\\r\\n        uint256 denominator = self.gETH.denominator();\\r\\n        uint256 unbufferedEther;\\r\\n\\r\\n        {\\r\\n            uint256 price = self.gETH.pricePerShare(_poolId);\\r\\n            unbufferedEther =\\r\\n                totalEther -\\r\\n                (DATASTORE.readUintForId(_poolId, _dailyBufferMintKey) *\\r\\n                    price) /\\r\\n                denominator;\\r\\n\\r\\n            unbufferedEther +=\\r\\n                (DATASTORE.readUintForId(_poolId, _dailyBufferBurnKey) *\\r\\n                    price) /\\r\\n                denominator;\\r\\n        }\\r\\n\\r\\n        uint256 supply = self.gETH.totalSupply(_poolId);\\r\\n\\r\\n        uint256 unbufferedSupply = supply -\\r\\n            DATASTORE.readUintForId(_poolId, _dailyBufferMintKey);\\r\\n\\r\\n        unbufferedSupply += DATASTORE.readUintForId(\\r\\n            _poolId,\\r\\n            _dailyBufferBurnKey\\r\\n        );\\r\\n\\r\\n        // clears daily buffer for the gas refund\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferMintKey, 0);\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferBurnKey, 0);\\r\\n\\r\\n        return (\\r\\n            (unbufferedEther * denominator) / unbufferedSupply,\\r\\n            (totalEther * denominator) / supply\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\\r\\n     * 1. Price should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     * 2. Price should not be decreased more than PERIOD_PRICE_DECREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     */\\r\\n    function _sanityCheck(\\r\\n        Oracle storage self,\\r\\n        uint256 _id,\\r\\n        uint256 _periodsSinceUpdate,\\r\\n        uint256 _newPrice\\r\\n    ) internal view {\\r\\n        uint256 curPrice = self.gETH.pricePerShare(_id);\\r\\n        uint256 maxPrice = curPrice +\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_INCREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        uint256 minPrice = curPrice -\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_DECREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        require(\\r\\n            _newPrice >= minPrice && _newPrice <= maxPrice,\\r\\n            \\\"OracleUtils: price is insane\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice syncing the price of g-derivative after checking the merkle proofs and the sanity of it.\\r\\n     * @param _beaconBalance the total balance -excluding fees- of all validators of this pool\\r\\n     * @param _periodsSinceUpdate time(s) since the last update of the g-derivative's price.\\r\\n     * while public pools are using ORACLE_UPDATE_TIMESTAMP, private pools will refer gEth.priceUpdateTimestamp()\\r\\n     * @param _priceProofs the merkle proof of the latests prices that are reported by Telescope\\r\\n     * @dev if merkle proof holds the oracle price, new price is the current price of the derivative\\r\\n     */\\r\\n    function _priceSync(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32[2] memory _dailyBufferKeys,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance,\\r\\n        uint256 _periodsSinceUpdate, // calculation for this changes for private pools\\r\\n        bytes32[] calldata _priceProofs // uint256 prices[]\\r\\n    ) internal {\\r\\n        (uint256 oraclePrice, uint256 price) = _findPricesClearBuffer(\\r\\n            self,\\r\\n            DATASTORE,\\r\\n            _dailyBufferKeys[0],\\r\\n            _dailyBufferKeys[1],\\r\\n            _poolId,\\r\\n            _beaconBalance\\r\\n        );\\r\\n        _sanityCheck(self, _poolId, _periodsSinceUpdate, oraclePrice);\\r\\n        bytes32 node = keccak256(abi.encodePacked(_poolId, oraclePrice));\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(_priceProofs, self.PRICE_MERKLE_ROOT, node),\\r\\n            \\\"OracleUtils: NOT all proofs are valid\\\"\\r\\n        );\\r\\n\\r\\n        self.gETH.setPricePerShare(price, _poolId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT\\r\\n     * @notice after report updates the prices of the public pools\\r\\n     * @notice updates the ORACLE_UPDATE_TIMESTAMP\\r\\n     * @dev if merkle proof holds the oracle price, new price is the found price of the derivative\\r\\n     */\\r\\n    function reportOracle(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 merkleRoot,\\r\\n        uint256[] calldata beaconBalances,\\r\\n        bytes32[][] calldata priceProofs\\r\\n    ) external onlyOracle(self) {\\r\\n        require(_isOracleActive(self), \\\"OracleUtils: oracle is NOT active\\\");\\r\\n\\r\\n        {\\r\\n            uint256 planetCount = DATASTORE.allIdsByType[5].length;\\r\\n            require(\\r\\n                beaconBalances.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect beaconBalances length\\\"\\r\\n            );\\r\\n            require(\\r\\n                priceProofs.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect priceProofs length\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        self.PRICE_MERKLE_ROOT = merkleRoot;\\r\\n\\r\\n        uint256 periodsSinceUpdate = (block.timestamp +\\r\\n            ORACLE_ACTIVE_PERIOD -\\r\\n            self.ORACLE_UPDATE_TIMESTAMP) / ORACLE_PERIOD;\\r\\n\\r\\n        // refering the first second of the period: block.timestamp - (block.timestamp % ORACLE_PERIOD)\\r\\n        bytes32[2] memory dailyBufferKeys = [\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"mintBuffer\\\"\\r\\n            ),\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"burnBuffer\\\"\\r\\n            )\\r\\n        ];\\r\\n\\r\\n        for (uint256 i = 0; i < beaconBalances.length; i++) {\\r\\n            _priceSync(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                dailyBufferKeys,\\r\\n                DATASTORE.allIdsByType[5][i],\\r\\n                beaconBalances[i],\\r\\n                periodsSinceUpdate,\\r\\n                priceProofs[i]\\r\\n            );\\r\\n        }\\r\\n        self.ORACLE_UPDATE_TIMESTAMP =\\r\\n            block.timestamp -\\r\\n            (block.timestamp % ORACLE_PERIOD);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8a201a506463ffb80da914cfc80057cc305268e508176895aefcab19aeb1bba2\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n// This interface is designed to be compatible with the Vyper version.\\r\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\r\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ed71fce79822f89cd1599048cf776f3aebc82e0521b46a35c3d6c74c85e7c1f\",\"license\":\"MIT\"},\"contracts/interfaces/IMiniGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\r\\n\\r\\ninterface IMiniGovernance {\\r\\n    function initialize(\\r\\n        address _gETH,\\r\\n        address _PORTAL,\\r\\n        address _MAINTAINER,\\r\\n        uint256 _ID,\\r\\n        uint256 _VERSION\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function getCurrentVersion() external view returns (uint256);\\r\\n\\r\\n    function getProposedVersion() external view returns (uint256);\\r\\n\\r\\n    function isolationMode() external view returns (bool);\\r\\n\\r\\n    function fetchUpgradeProposal() external;\\r\\n\\r\\n    function approveProposal(uint256 _id) external;\\r\\n\\r\\n    function setSenate(address newController) external;\\r\\n\\r\\n    function claimUnstake(uint256 claim) external returns (bool success);\\r\\n}\\r\\n\",\"keccak256\":\"0x50a01ca5d4ac3408d0f33c7edc44b8c1e02810af4c6bede2d799aaccc1581e1a\",\"license\":\"MIT\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\r\\nimport \\\"../Portal/utils/OracleUtilsLib.sol\\\";\\r\\n\\r\\ninterface IPortal {\\r\\n    function initialize(\\r\\n        address _GOVERNANCE,\\r\\n        address _gETH,\\r\\n        address _ORACLE_POSITION,\\r\\n        address _DEFAULT_gETH_INTERFACE,\\r\\n        address _DEFAULT_DWP,\\r\\n        address _DEFAULT_LP_TOKEN,\\r\\n        address _MINI_GOVERNANCE_POSITION,\\r\\n        uint256 _GOVERNANCE_TAX,\\r\\n        uint256 _COMET_TAX,\\r\\n        uint256 _MAX_MAINTAINER_FEE,\\r\\n        uint256 _BOOSTRAP_PERIOD\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function getVersion() external view returns (uint256);\\r\\n\\r\\n    function gETH() external view returns (address);\\r\\n\\r\\n    function allIdsByType(uint256 _type)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function generateId(string calldata _name, uint256 _type)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint256 id);\\r\\n\\r\\n    function readAddressForId(uint256 id, bytes32 key)\\r\\n        external\\r\\n        view\\r\\n        returns (address data);\\r\\n\\r\\n    function readUintForId(uint256 id, bytes32 key)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 data);\\r\\n\\r\\n    function readBytesForId(uint256 id, bytes32 key)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory data);\\r\\n\\r\\n    function GeodeParams()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address SENATE,\\r\\n            address GOVERNANCE,\\r\\n            uint256 GOVERNANCE_TAX,\\r\\n            uint256 MAX_GOVERNANCE_TAX,\\r\\n            uint256 SENATE_EXPIRY\\r\\n        );\\r\\n\\r\\n    function getProposal(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (GeodeUtils.Proposal memory proposal);\\r\\n\\r\\n    function isUpgradeAllowed(address proposedImplementation)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setGovernanceTax(uint256 newFee) external returns (bool);\\r\\n\\r\\n    function newProposal(\\r\\n        address _CONTROLLER,\\r\\n        uint256 _TYPE,\\r\\n        bytes calldata _NAME,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function setMaxGovernanceTax(uint256 newMaxFee) external returns (bool);\\r\\n\\r\\n    function approveProposal(uint256 id) external;\\r\\n\\r\\n    function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\r\\n\\r\\n    function approveSenate(uint256 proposalId, uint256 electorId) external;\\r\\n\\r\\n    function allInterfaces(uint256 id) external view returns (address[] memory);\\r\\n\\r\\n    function TelescopeParams()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address ORACLE_POSITION,\\r\\n            uint256 ORACLE_UPDATE_TIMESTAMP,\\r\\n            uint256 MONOPOLY_THRESHOLD,\\r\\n            uint256 VALIDATORS_INDEX,\\r\\n            uint256 VERIFICATION_INDEX,\\r\\n            uint256 PERIOD_PRICE_INCREASE_LIMIT,\\r\\n            uint256 PERIOD_PRICE_DECREASE_LIMIT,\\r\\n            bytes32 PRICE_MERKLE_ROOT\\r\\n        );\\r\\n\\r\\n    function releasePrisoned(uint256 operatorId) external;\\r\\n\\r\\n    function miniGovernanceVersion() external view returns (uint256 id);\\r\\n\\r\\n    function getValidator(bytes calldata pubkey)\\r\\n        external\\r\\n        view\\r\\n        returns (OracleUtils.Validator memory);\\r\\n\\r\\n    function isOracleActive() external view returns (bool);\\r\\n\\r\\n    function reportOracle(\\r\\n        bytes32 merkleRoot,\\r\\n        uint256[] calldata beaconBalances,\\r\\n        bytes32[][] calldata priceProofs\\r\\n    ) external;\\r\\n\\r\\n    function isPrisoned(uint256 operatorId) external view returns (bool);\\r\\n\\r\\n    function updateVerificationIndex(\\r\\n        uint256 allValidatorsCount,\\r\\n        uint256 validatorVerificationIndex,\\r\\n        bytes[] calldata alienatedPubkeys\\r\\n    ) external;\\r\\n\\r\\n    function regulateOperators(\\r\\n        bytes[] calldata bustedExits,\\r\\n        bytes[] calldata bustedSignals,\\r\\n        uint256[2][] calldata feeThefts\\r\\n    ) external;\\r\\n\\r\\n    function StakingParams()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address DEFAULT_gETH_INTERFACE,\\r\\n            address DEFAULT_DWP,\\r\\n            address DEFAULT_LP_TOKEN,\\r\\n            uint256 MINI_GOVERNANCE_VERSION,\\r\\n            uint256 MAX_MAINTAINER_FEE,\\r\\n            uint256 BOOSTRAP_PERIOD,\\r\\n            uint256 COMET_TAX\\r\\n        );\\r\\n\\r\\n    function updateStakingParams(\\r\\n        address _DEFAULT_gETH_INTERFACE,\\r\\n        address _DEFAULT_DWP,\\r\\n        address _DEFAULT_LP_TOKEN,\\r\\n        uint256 _MAX_MAINTAINER_FEE,\\r\\n        uint256 _BOOSTRAP_PERIOD,\\r\\n        uint256 _PERIOD_PRICE_INCREASE_LIMIT,\\r\\n        uint256 _PERIOD_PRICE_DECREASE_LIMIT,\\r\\n        uint256 _COMET_TAX,\\r\\n        uint256 _BOOST_SWITCH_LATENCY\\r\\n    ) external;\\r\\n\\r\\n    function initiateOperator(\\r\\n        uint256 _id,\\r\\n        uint256 _fee,\\r\\n        address _maintainer,\\r\\n        uint256 _validatorPeriod\\r\\n    ) external;\\r\\n\\r\\n    function initiatePlanet(\\r\\n        uint256 _id,\\r\\n        uint256 _fee,\\r\\n        address _maintainer,\\r\\n        bytes calldata _name,\\r\\n        string calldata _interfaceName,\\r\\n        string calldata _interfaceSymbol\\r\\n    ) external;\\r\\n\\r\\n    function changeMaintainer(uint256 id, address newMaintainer) external;\\r\\n\\r\\n    function getMaintainerWalletBalance(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function switchMaintainerFee(uint256 id, uint256 newFee) external;\\r\\n\\r\\n    function increaseMaintainerWallet(uint256 id)\\r\\n        external\\r\\n        payable\\r\\n        returns (bool success);\\r\\n\\r\\n    function decreaseMaintainerWallet(uint256 id, uint256 value)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function switchWithdrawalBoost(uint256 poolId, uint256 withdrawalBoost)\\r\\n        external;\\r\\n\\r\\n    function operatorAllowance(uint256 poolId, uint256 operatorId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 allowance,\\r\\n            uint256 proposedValidators,\\r\\n            uint256 activeValidators\\r\\n        );\\r\\n\\r\\n    function approveOperator(\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        uint256 allowance\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod)\\r\\n        external;\\r\\n\\r\\n    function canDeposit(uint256 _id) external view returns (bool);\\r\\n\\r\\n    function canStake(bytes calldata pubkey) external view returns (bool);\\r\\n\\r\\n    function pauseStakingForPool(uint256 id) external;\\r\\n\\r\\n    function unpauseStakingForPool(uint256 id) external;\\r\\n\\r\\n    function depositPlanet(\\r\\n        uint256 poolId,\\r\\n        uint256 mingETH,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 gEthToSend);\\r\\n\\r\\n    function withdrawPlanet(\\r\\n        uint256 poolId,\\r\\n        uint256 gEthToWithdraw,\\r\\n        uint256 minETH,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 EthToSend);\\r\\n\\r\\n    function proposeStake(\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        bytes[] calldata pubkeys,\\r\\n        bytes[] calldata signatures\\r\\n    ) external;\\r\\n\\r\\n    function beaconStake(uint256 operatorId, bytes[] calldata pubkeys) external;\\r\\n\\r\\n    function signalUnstake(bytes[] calldata pubkeys) external;\\r\\n\\r\\n    function fetchUnstake(\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        bytes[] calldata pubkeys,\\r\\n        uint256[] calldata balances,\\r\\n        bool[] calldata isExit\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x68502762186860b98168fd373b2ff9c5953d3d397c5933cd6bd958b3753384b3\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgETH {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    function burnBatch(\\r\\n        address account,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) external;\\r\\n\\r\\n    function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function denominator() external view returns (uint256);\\r\\n\\r\\n    function pricePerShare(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setPricePerShare(uint256 price, uint256 id) external;\\r\\n\\r\\n    function isInterface(address _interface, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setInterface(\\r\\n        address _interface,\\r\\n        uint256 id,\\r\\n        bool isSet\\r\\n    ) external;\\r\\n\\r\\n    function updateMinterRole(address Minter) external;\\r\\n\\r\\n    function updatePauserRole(address Pauser) external;\\r\\n\\r\\n    function updateOracleRole(address Oracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x233c5eef588ce7699ead6ef2eddd219104331f819ffab3ac5dcd9a5aa09667f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c61181c610052600039600081816104500152818161049901528181610586015281816105c60152610659015261181c6000f3fe6080604052600436106100dd5760003560e01c80638456cb591161007f578063a6b63eb811610059578063a6b63eb8146101ed578063ab0e58201461020d578063c5dd6fee1461022d578063fabec44a1461024d57600080fd5b80638456cb59146101a35780638650c072146101b857806398951b56146101cd57600080fd5b80634f1ef286116100bb5780634f1ef2861461012e57806352d1902d146101415780635c975abb14610169578063745653de1461018d57600080fd5b806317c6ebd5146100e25780633659cfe6146100f95780633f4ba83a14610119575b600080fd5b3480156100ee57600080fd5b506100f7610263565b005b34801561010557600080fd5b506100f7610114366004611288565b610445565b34801561012557600080fd5b506100f761052e565b6100f761013c366004611300565b61057b565b34801561014d57600080fd5b5061015661064c565b6040519081526020015b60405180910390f35b34801561017557600080fd5b5060655460ff165b6040519015158152602001610160565b34801561019957600080fd5b5061012054610156565b3480156101af57600080fd5b506100f76106ff565b3480156101c457600080fd5b5061017d610748565b3480156101d957600080fd5b506100f76101e836600461149c565b610767565b3480156101f957600080fd5b506100f76102083660046112a5565b61082a565b34801561021957600080fd5b506100f7610228366004611288565b610987565b34801561023957600080fd5b5061017d61024836600461149c565b6109bb565b34801561025957600080fd5b5061011f54610156565b600061027861010c546001600160a01b031690565b6001600160a01b03166370bf810f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b057600080fd5b505afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e891906113b5565b61011f549091508114156102fb57600080fd5b600061031061010c546001600160a01b031690565b6001600160a01b031663c7f758a8836040518263ffffffff1660e01b815260040161033d91815260200190565b60006040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039191908101906113ce565b90508060200151600b146103a457600080fd5b805160408083015190516304cba2d760e11b8152737407F38DC065391C5F77c6Fe0bd0b96565c5753f9263099745ae926103ed9261010b92916002916212750090600401611661565b60206040518083038186803b15801561040557600080fd5b505af4158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d91906113b5565b505061012055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104975760405162461bcd60e51b815260040161048e90611510565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104e06000805160206117a0833981519152546001600160a01b031690565b6001600160a01b0316146105065760405162461bcd60e51b815260040161048e9061155c565b61050f81610b38565b6040805160008082526020820190925261052b91839190610c54565b50565b61010b546001600160a01b031633146105595760405162461bcd60e51b815260040161048e906115d2565b610561610dd3565b61056e62093a8042611722565b61011e5560001961011d55565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105c45760405162461bcd60e51b815260040161048e90611510565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060d6000805160206117a0833981519152546001600160a01b031690565b6001600160a01b0316146106335760405162461bcd60e51b815260040161048e9061155c565b61063c82610b38565b61064882826001610c54565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106ec5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161048e565b506000805160206117a083398151915290565b61010b546001600160a01b0316331461072a5760405162461bcd60e51b815260040161048e906115d2565b61011e54421161073957600080fd5b610741610e66565b4261011d55565b6101205461011f54600091141580610762575061010f5442115b905090565b60655460ff161561078a5760405162461bcd60e51b815260040161048e906115a8565b61010b546001600160a01b031633146107b55760405162461bcd60e51b815260040161048e906115d2565b6040516325b0fcff60e11b815261010b600482015260fb602482015260448101829052737407F38DC065391C5F77c6Fe0bd0b96565c5753f90634b61f9fe9060640160006040518083038186803b15801561080f57600080fd5b505af4158015610823573d6000803e3d6000fd5b5050505050565b600054610100900460ff166108455760005460ff1615610849565b303b155b6108ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048e565b600054610100900460ff161580156108ce576000805461ffff19166101011790555b6108d6610ebe565b6108de610eef565b6108e6610f1e565b61011b80546001600160a01b038089166001600160a01b03199283161790925561011c85905560001961011d5561010c80549288169290911691909117905561092e84610f45565b61011f8290556101208290556040518281527ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a1801561097f576000805461ff00191690555b505050505050565b61010b546001600160a01b031633146109b25760405162461bcd60e51b815260040161048e906115d2565b61052b81610f45565b61010c546000906001600160a01b03163314610a255760405162461bcd60e51b8152602060048201526024808201527f4d696e69476f7665726e616e63653a2073656e646572206973204e4f5420504f6044820152631495105360e21b606482015260840161048e565b60026001541415610a785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161048e565b600260015561010c546040516001600160a01b03909116908390600081818185875af1925050503d8060008114610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b50508091505080610b2f5760405162461bcd60e51b8152602060048201526024808201527f4d696e69476f7665726e616e63653a204661696c656420746f2073656e6420456044820152633a3432b960e11b606482015260840161048e565b60018055919050565b61010b546001600160a01b03163314610b635760405162461bcd60e51b815260040161048e906115d2565b604051633680b40760e01b815261010b60048201526001600160a01b0382166024820152737407F38DC065391C5F77c6Fe0bd0b96565c5753f90633680b4079060440160206040518083038186803b158015610bbe57600080fd5b505af4158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190611393565b61052b5760405162461bcd60e51b815260206004820152602960248201527f4d696e69476f7665726e616e63653a206973204e4f5420616c6c6f77656420746044820152686f207570677261646560b81b606482015260840161048e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c8c57610c8783610f78565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc557600080fd5b505afa925050508015610cf5575060408051601f3d908101601f19168201909252610cf2918101906113b5565b60015b610d585760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161048e565b6000805160206117a08339815191528114610dc75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161048e565b50610c87838383611014565b60655460ff16610e1c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161048e565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610e895760405162461bcd60e51b815260040161048e906115a8565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e493390565b600054610100900460ff16610ee55760405162461bcd60e51b815260040161048e90611616565b610eed61103f565b565b600054610100900460ff16610f165760405162461bcd60e51b815260040161048e90611616565b610eed61106c565b600054610100900460ff16610eed5760405162461bcd60e51b815260040161048e90611616565b60655460ff1615610f685760405162461bcd60e51b815260040161048e906115a8565b61052b61010b8262ed4e0061109f565b6001600160a01b0381163b610fe55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161048e565b6000805160206117a083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61101d83611114565b60008251118061102a5750805b15610c87576110398383611154565b50505050565b600054610100900460ff166110665760405162461bcd60e51b815260040161048e90611616565b60018055565b600054610100900460ff166110935760405162461bcd60e51b815260040161048e90611616565b6065805460ff19169055565b82546001600160a01b0319166001600160a01b0383161783556110c28142611722565b600484018190558354604080516001600160a01b03909216825260208201929092527f3f34afe456fb5b36c04b5d1e2ef0750086747ac542262fbf14a0b1aae5fd7ee8910160405180910390a1505050565b61111d81610f78565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161048e565b600080846001600160a01b0316846040516111d791906114e1565b600060405180830381855af49150503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b509150915061123f82826040518060600160405280602781526020016117c060279139611248565b95945050505050565b60608315611257575081611281565b8251156112675782518084602001fd5b8160405162461bcd60e51b815260040161048e91906114fd565b9392505050565b60006020828403121561129a57600080fd5b81356112818161178a565b600080600080600060a086880312156112bd57600080fd5b85356112c88161178a565b945060208601356112d88161178a565b935060408601356112e88161178a565b94979396509394606081013594506080013592915050565b6000806040838503121561131357600080fd5b823561131e8161178a565b9150602083013567ffffffffffffffff81111561133a57600080fd5b8301601f8101851361134b57600080fd5b803561135e611359826116fa565b6116c9565b81815286602083850101111561137357600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000602082840312156113a557600080fd5b8151801515811461128157600080fd5b6000602082840312156113c757600080fd5b5051919050565b600060208083850312156113e157600080fd5b825167ffffffffffffffff808211156113f957600080fd5b908401906080828703121561140d57600080fd5b6114156116a0565b82516114208161178a565b8152828401518482015260408301518281111561143c57600080fd5b83019150601f8201871361144f57600080fd5b815161145d611359826116fa565b818152888683860101111561147157600080fd5b61148082878301888701611748565b6040830152506060928301519281019290925250949350505050565b6000602082840312156114ae57600080fd5b5035919050565b600081518084526114cd816020860160208601611748565b601f01601f19169290920160200192915050565b600082516114f3818460208701611748565b9190910192915050565b60208152600061128160208301846114b5565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526024908201527f4d696e69476f7665726e616e63653a2073656e646572206973204e4f542053456040820152634e41544560e01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815260018060a01b038516602082015283604082015260a06060820152600061168e60a08301856114b5565b90508260808301529695505050505050565b6040516080810167ffffffffffffffff811182821017156116c3576116c3611774565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116f2576116f2611774565b604052919050565b600067ffffffffffffffff82111561171457611714611774565b50601f01601f191660200190565b6000821982111561174357634e487b7160e01b600052601160045260246000fd5b500190565b60005b8381101561176357818101518382015260200161174b565b838111156110395750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461052b57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205f6cbeff96da96a747c9acacb686b691df8312e36b6be61b9d398342adb1cd6464736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638456cb591161007f578063a6b63eb811610059578063a6b63eb8146101ed578063ab0e58201461020d578063c5dd6fee1461022d578063fabec44a1461024d57600080fd5b80638456cb59146101a35780638650c072146101b857806398951b56146101cd57600080fd5b80634f1ef286116100bb5780634f1ef2861461012e57806352d1902d146101415780635c975abb14610169578063745653de1461018d57600080fd5b806317c6ebd5146100e25780633659cfe6146100f95780633f4ba83a14610119575b600080fd5b3480156100ee57600080fd5b506100f7610263565b005b34801561010557600080fd5b506100f7610114366004611288565b610445565b34801561012557600080fd5b506100f761052e565b6100f761013c366004611300565b61057b565b34801561014d57600080fd5b5061015661064c565b6040519081526020015b60405180910390f35b34801561017557600080fd5b5060655460ff165b6040519015158152602001610160565b34801561019957600080fd5b5061012054610156565b3480156101af57600080fd5b506100f76106ff565b3480156101c457600080fd5b5061017d610748565b3480156101d957600080fd5b506100f76101e836600461149c565b610767565b3480156101f957600080fd5b506100f76102083660046112a5565b61082a565b34801561021957600080fd5b506100f7610228366004611288565b610987565b34801561023957600080fd5b5061017d61024836600461149c565b6109bb565b34801561025957600080fd5b5061011f54610156565b600061027861010c546001600160a01b031690565b6001600160a01b03166370bf810f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b057600080fd5b505afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e891906113b5565b61011f549091508114156102fb57600080fd5b600061031061010c546001600160a01b031690565b6001600160a01b031663c7f758a8836040518263ffffffff1660e01b815260040161033d91815260200190565b60006040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039191908101906113ce565b90508060200151600b146103a457600080fd5b805160408083015190516304cba2d760e11b815273__$470c7289acb57212a69b34ceb5289ef95c$__9263099745ae926103ed9261010b92916002916212750090600401611661565b60206040518083038186803b15801561040557600080fd5b505af4158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d91906113b5565b505061012055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104975760405162461bcd60e51b815260040161048e90611510565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104e06000805160206117a0833981519152546001600160a01b031690565b6001600160a01b0316146105065760405162461bcd60e51b815260040161048e9061155c565b61050f81610b38565b6040805160008082526020820190925261052b91839190610c54565b50565b61010b546001600160a01b031633146105595760405162461bcd60e51b815260040161048e906115d2565b610561610dd3565b61056e62093a8042611722565b61011e5560001961011d55565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105c45760405162461bcd60e51b815260040161048e90611510565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060d6000805160206117a0833981519152546001600160a01b031690565b6001600160a01b0316146106335760405162461bcd60e51b815260040161048e9061155c565b61063c82610b38565b61064882826001610c54565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106ec5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161048e565b506000805160206117a083398151915290565b61010b546001600160a01b0316331461072a5760405162461bcd60e51b815260040161048e906115d2565b61011e54421161073957600080fd5b610741610e66565b4261011d55565b6101205461011f54600091141580610762575061010f5442115b905090565b60655460ff161561078a5760405162461bcd60e51b815260040161048e906115a8565b61010b546001600160a01b031633146107b55760405162461bcd60e51b815260040161048e906115d2565b6040516325b0fcff60e11b815261010b600482015260fb60248201526044810182905273__$470c7289acb57212a69b34ceb5289ef95c$__90634b61f9fe9060640160006040518083038186803b15801561080f57600080fd5b505af4158015610823573d6000803e3d6000fd5b5050505050565b600054610100900460ff166108455760005460ff1615610849565b303b155b6108ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048e565b600054610100900460ff161580156108ce576000805461ffff19166101011790555b6108d6610ebe565b6108de610eef565b6108e6610f1e565b61011b80546001600160a01b038089166001600160a01b03199283161790925561011c85905560001961011d5561010c80549288169290911691909117905561092e84610f45565b61011f8290556101208290556040518281527ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a1801561097f576000805461ff00191690555b505050505050565b61010b546001600160a01b031633146109b25760405162461bcd60e51b815260040161048e906115d2565b61052b81610f45565b61010c546000906001600160a01b03163314610a255760405162461bcd60e51b8152602060048201526024808201527f4d696e69476f7665726e616e63653a2073656e646572206973204e4f5420504f6044820152631495105360e21b606482015260840161048e565b60026001541415610a785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161048e565b600260015561010c546040516001600160a01b03909116908390600081818185875af1925050503d8060008114610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b50508091505080610b2f5760405162461bcd60e51b8152602060048201526024808201527f4d696e69476f7665726e616e63653a204661696c656420746f2073656e6420456044820152633a3432b960e11b606482015260840161048e565b60018055919050565b61010b546001600160a01b03163314610b635760405162461bcd60e51b815260040161048e906115d2565b604051633680b40760e01b815261010b60048201526001600160a01b038216602482015273__$470c7289acb57212a69b34ceb5289ef95c$__90633680b4079060440160206040518083038186803b158015610bbe57600080fd5b505af4158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190611393565b61052b5760405162461bcd60e51b815260206004820152602960248201527f4d696e69476f7665726e616e63653a206973204e4f5420616c6c6f77656420746044820152686f207570677261646560b81b606482015260840161048e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c8c57610c8783610f78565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc557600080fd5b505afa925050508015610cf5575060408051601f3d908101601f19168201909252610cf2918101906113b5565b60015b610d585760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161048e565b6000805160206117a08339815191528114610dc75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161048e565b50610c87838383611014565b60655460ff16610e1c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161048e565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610e895760405162461bcd60e51b815260040161048e906115a8565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e493390565b600054610100900460ff16610ee55760405162461bcd60e51b815260040161048e90611616565b610eed61103f565b565b600054610100900460ff16610f165760405162461bcd60e51b815260040161048e90611616565b610eed61106c565b600054610100900460ff16610eed5760405162461bcd60e51b815260040161048e90611616565b60655460ff1615610f685760405162461bcd60e51b815260040161048e906115a8565b61052b61010b8262ed4e0061109f565b6001600160a01b0381163b610fe55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161048e565b6000805160206117a083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61101d83611114565b60008251118061102a5750805b15610c87576110398383611154565b50505050565b600054610100900460ff166110665760405162461bcd60e51b815260040161048e90611616565b60018055565b600054610100900460ff166110935760405162461bcd60e51b815260040161048e90611616565b6065805460ff19169055565b82546001600160a01b0319166001600160a01b0383161783556110c28142611722565b600484018190558354604080516001600160a01b03909216825260208201929092527f3f34afe456fb5b36c04b5d1e2ef0750086747ac542262fbf14a0b1aae5fd7ee8910160405180910390a1505050565b61111d81610f78565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6111bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161048e565b600080846001600160a01b0316846040516111d791906114e1565b600060405180830381855af49150503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b509150915061123f82826040518060600160405280602781526020016117c060279139611248565b95945050505050565b60608315611257575081611281565b8251156112675782518084602001fd5b8160405162461bcd60e51b815260040161048e91906114fd565b9392505050565b60006020828403121561129a57600080fd5b81356112818161178a565b600080600080600060a086880312156112bd57600080fd5b85356112c88161178a565b945060208601356112d88161178a565b935060408601356112e88161178a565b94979396509394606081013594506080013592915050565b6000806040838503121561131357600080fd5b823561131e8161178a565b9150602083013567ffffffffffffffff81111561133a57600080fd5b8301601f8101851361134b57600080fd5b803561135e611359826116fa565b6116c9565b81815286602083850101111561137357600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000602082840312156113a557600080fd5b8151801515811461128157600080fd5b6000602082840312156113c757600080fd5b5051919050565b600060208083850312156113e157600080fd5b825167ffffffffffffffff808211156113f957600080fd5b908401906080828703121561140d57600080fd5b6114156116a0565b82516114208161178a565b8152828401518482015260408301518281111561143c57600080fd5b83019150601f8201871361144f57600080fd5b815161145d611359826116fa565b818152888683860101111561147157600080fd5b61148082878301888701611748565b6040830152506060928301519281019290925250949350505050565b6000602082840312156114ae57600080fd5b5035919050565b600081518084526114cd816020860160208601611748565b601f01601f19169290920160200192915050565b600082516114f3818460208701611748565b9190910192915050565b60208152600061128160208301846114b5565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526024908201527f4d696e69476f7665726e616e63653a2073656e646572206973204e4f542053456040820152634e41544560e01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b85815260018060a01b038516602082015283604082015260a06060820152600061168e60a08301856114b5565b90508260808301529695505050505050565b6040516080810167ffffffffffffffff811182821017156116c3576116c3611774565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116f2576116f2611774565b604052919050565b600067ffffffffffffffff82111561171457611714611774565b50601f01601f191660200190565b6000821982111561174357634e487b7160e01b600052601160045260246000fd5b500190565b60005b8381101561176357818101518382015260200161174b565b838111156110395750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461052b57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205f6cbeff96da96a747c9acacb686b691df8312e36b6be61b9d398342adb1cd6464736f6c63430008070033",
  "libraries": {
    "GeodeUtils": "0x7407F38DC065391C5F77c6Fe0bd0b96565c5753f"
  },
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "Global defense layer is the Portalcurrently only defense mechanics this contract provides is the trustless updates that are * achieved with GeodeUtils * portal cannot upgrade the contract without Senate's approval * * However there are such improvements planned to be implemented to make * the staking environment more trustless. * * \"isolationMode\" is one of them, currently only rules of the isolation mode is Senate_Expiry and * * isUpgraded check. However, this is a good start to ensure that the future implementations will be * * enforced to incentivise the trustless behaviour! The end goal is to create mini-portals * * with different mechanics and allow auto-staking contracts...",
    "kind": "dev",
    "methods": {
      "claimUnstake(uint256)": {
        "params": {
          "claim": "specified amount can be the unstaked balance or just a reward, ETH."
        },
        "returns": {
          "success": "if claim was successful"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "unpause()": {
        "details": "cannot spam, be careful"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "PAUSE_LAPSE": {
        "details": "While there are currently no worry on what pausing will affect, with the next implementations, spamming stake/unstake can cause an issue. Thus, we require senate to wait a bit before pausing the contract again, allowing validator unstake(maybe)."
      },
      "SENATE_VALIDITY": {
        "details": "While there are currently no worry on if the pool will be abandoned, with the introduction of private pools, it can be a problem. Thus, we require senate to refresh it's validity time to time."
      }
    },
    "title": "MiniGovernance: local defense layer of the trustless Staking Derivatives",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimUnstake(uint256)": {
        "notice": "according to eip-4895, the unstaked balances will be just happen to emerge within this contract. * Telescope (oracle) will be watching these events andn finalizing the unstakes. * This method even makes it possible to claim rewards without unstake, which we know is a possibility"
      },
      "fetchUpgradeProposal()": {
        "notice": "anyone can fetch proposal from Portal, so  we don't need to call it."
      }
    },
    "notice": "This contract is being used as the withdrawal credential of the validators, * that are maintained by the given IDs Controller.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 398,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 723,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 767,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1218,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 619,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 377,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 597,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2487,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "DATASTORE",
        "offset": 0,
        "slot": "251",
        "type": "t_struct(DataStore)5097_storage"
      },
      {
        "astId": 2490,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "GEM",
        "offset": 0,
        "slot": "267",
        "type": "t_struct(Universe)5714_storage"
      },
      {
        "astId": 2493,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "SELF",
        "offset": 0,
        "slot": "283",
        "type": "t_struct(PoolGovernance)2519_storage"
      },
      {
        "astId": 2885,
        "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
        "label": "__gap",
        "offset": 0,
        "slot": "298",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)12_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[12]",
        "numberOfBytes": "384"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)7_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IgETH)12505": {
        "encoding": "inplace",
        "label": "contract IgETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)5686_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GeodeUtils.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)5686_storage"
      },
      "t_struct(DataStore)5097_storage": {
        "encoding": "inplace",
        "label": "struct DataStoreUtils.DataStore",
        "members": [
          {
            "astId": 5080,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "allIdsByType",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 5084,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "uintData",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 5088,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "bytesData",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes_storage)"
          },
          {
            "astId": 5092,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "addressData",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 5096,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "__gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)12_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(PoolGovernance)2519_storage": {
        "encoding": "inplace",
        "label": "struct MiniGovernance.PoolGovernance",
        "members": [
          {
            "astId": 2504,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "gETH",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IgETH)12505"
          },
          {
            "astId": 2506,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "ID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2508,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "lastPause",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2510,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "whenPauseAllowed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2512,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "contractVersion",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2514,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "proposedVersion",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2518,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "__gap",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)9_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Proposal)5686_storage": {
        "encoding": "inplace",
        "label": "struct GeodeUtils.Proposal",
        "members": [
          {
            "astId": 5679,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "CONTROLLER",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5681,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "TYPE",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5683,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "NAME",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5685,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Universe)5714_storage": {
        "encoding": "inplace",
        "label": "struct GeodeUtils.Universe",
        "members": [
          {
            "astId": 5688,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "SENATE",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5690,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "GOVERNANCE",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5692,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "GOVERNANCE_TAX",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5694,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "MAX_GOVERNANCE_TAX",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5696,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "SENATE_EXPIRY",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5698,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "approvedUpgrade",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5700,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "_electorCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5704,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "_electorTypes",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 5709,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "_proposalForId",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Proposal)5686_storage)"
          },
          {
            "astId": 5713,
            "contract": "contracts/Portal/MiniGovernance/MiniGovernance.sol:MiniGovernance",
            "label": "__gap",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)7_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}