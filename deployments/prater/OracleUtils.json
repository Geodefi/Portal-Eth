{
  "address": "0xeb207DF3CE41386430334776de42696cEE0AD906",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "Alienated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "Busted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "FeeTheft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Prisoned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorVerificationIndex",
          "type": "uint256"
        }
      ],
      "name": "VerificationIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MONOPOLY_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ACTIVE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRISON_SENTENCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e2ad684e87e5c089032fe43ce18283d2bb086218bcaa946c5033ba929a7df79",
  "receipt": {
    "to": null,
    "from": "0xF1CF95EA3587497defB74DE486252bdCa26D3756",
    "contractAddress": "0xeb207DF3CE41386430334776de42696cEE0AD906",
    "transactionIndex": 1,
    "gasUsed": "1599861",
    "logsBloom": "0x
    "blockHash": "0x1bc3115d907cf005ddd0a282ef44d2c3882939f15755eeebd534c31e5a931e06",
    "transactionHash": "0x2e2ad684e87e5c089032fe43ce18283d2bb086218bcaa946c5033ba929a7df79",
    "logs": [],
    "blockNumber": 8131268,
    "cumulativeGasUsed": "1620861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0fbab820add1fbf0817c674a8422f37e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"Alienated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"Busted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"FeeTheft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Prisoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorVerificationIndex\",\"type\":\"uint256\"}],\"name\":\"VerificationIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MONOPOLY_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ACTIVE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISON_SENTENCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"Prisoned Validator: * 1. created a malicious validator(alien) * 2. withdrawn without a signal * 3. signaled but not withdrawn * 4. did not respect the validatorPeriodALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100% Note refer to DataStoreUtils before reviewing\",\"kind\":\"dev\",\"methods\":{\"regulateOperators(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes[],bytes[],uint256[2][])\":{\"details\":\"Both of these functions results in imprisonment.\",\"params\":{\"bustedExits\":\"validators that have not signaled before Unstake\",\"bustedSignals\":\"validators that are \\\"mistakenly:)\\\" signaled but not Unstaked\",\"feeThefts\":\"[0]: Operator ids who have stolen MEV or block rewards, [1]: detected BlockNumber as proof\"}},\"releasePrisoned(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"in different situations such as a faulty improsenment or coordinated testing periods * Governance can vote on releasing the prisonersonlyGovernance check is in Portal\"},\"reportOracle(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes32,uint256[],bytes32[][])\":{\"details\":\"if merkle proof holds the oracle price, new price is the found price of the derivative\"},\"updateVerificationIndex(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[])\":{\"params\":{\"alienatedPubkeys\":\"proposals with lower index than new_index who frontrunned proposeStake with incorrect withdrawal credential results in imprisonment.\",\"allValidatorsCount\":\"total number of validators to figure out what is the current Monopoly Requirement\",\"validatorVerificationIndex\":\"index of the highest validator that is verified to be activated\"}}},\"title\":\"OracleUtils library to be used within stakeUtils\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MONOPOLY_RATIO()\":{\"notice\":\"effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 5% at start.\"},\"ORACLE_PERIOD()\":{\"notice\":\"Oracle is active for the first 30 min of every day\"},\"PERCENTAGE_DENOMINATOR()\":{\"notice\":\"PERCENTAGE_DENOMINATOR represents 100%\"},\"PRISON_SENTENCE()\":{\"notice\":\"limiting some abilities of Operators in case of bad behaviour\"},\"regulateOperators(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes[],bytes[],uint256[2][])\":{\"notice\":\"regulating operators within Geode with verifiable proofs\"},\"releasePrisoned(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"releases an imprisoned operator immidately\"},\"reportOracle(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes32,uint256[],bytes32[][])\":{\"notice\":\"Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOTafter report updates the prices of the public poolsupdates the ORACLE_UPDATE_TIMESTAMP\"},\"updateVerificationIndex(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[])\":{\"notice\":\"Updating VERIFICATION_INDEX, signaling that it is safe to allow validators with lower index than VERIFICATION_INDEX to stake with staking pool funds\"}},\"notice\":\"Oracle, named Telescope, is responsible from 2 tasks: * regulating the validator creations and exits * syncs the price of all pools with merkleroot Regulating the validators/operators: * state 1: validators is proposed since enough allowence is given from pool maintainers, 1 ETH is locked from maintainerWallet * state 2: stake was approved by Oracle, operator used user funds to activate the validator, 1 ETH is released * state 69: validator was malicious(alien), probably front-runned with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC) * state 3: validator is exited. However, if the signal turns out to be false, then Telescope reports and sets to state 2, prisoning the operator. * * Reports the Total number of Beacon validators to make sure no operator is running more validators then they should within Geode Universe. Syncing the Prices: * Telescope works the first 30 minutes of every day(GMT), with an archive node that points the first second. * Catches the beacon chain balances and decreases the fees, groups them by ids * Creates a merkle root, by simply calculating all prices from every pool, either private or public * Verifies merkle root with price proofs of all public pools. * * Private pools need to verify their own price once a day, otherwise minting is not allowed. * * * This is why merkle root of all prices is needed\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/OracleUtilsLib.sol\":\"OracleUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"contracts/Portal/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n            // Store the length of the first bytes array at the beginning of\\r\\n            // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n            // Maintain a memory counter for the current write location in the\\r\\n            // temp bytes array by adding the 32 bytes for the array length to\\r\\n            // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n            // Stop copying when the memory counter reaches the length of the\\r\\n            // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                // Initialize a copy counter to the start of the _preBytes data,\\r\\n                // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n                // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Add the length of _postBytes to the current length of tempBytes\\r\\n            // and store it as the new length in the first 32 bytes of the\\r\\n            // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n            // Move the memory counter back from a multiple of 0x20 to the\\r\\n            // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n            // Stop copying when the memory counter reaches the new combined\\r\\n            // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Update the free-memory pointer by padding our last write location\\r\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n            // next 32 byte block, then round down to the nearest multiple of\\r\\n            // 32. If the sum of the length of the two arrays is zero then add\\r\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(\\r\\n                0x40,\\r\\n                and(\\r\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n                    not(31) // Round down to the nearest 32 bytes.\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n    {\\r\\n        assembly {\\r\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n            // of the array. (We don't need to use the offset into the slot\\r\\n            // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Arrays of 31 bytes or less have an even value in their slot,\\r\\n            // while longer arrays have an odd value. The actual length is\\r\\n            // the slot divided by two for odd values, and the lowest order\\r\\n            // byte divided by two for even values.\\r\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n            // two to get the length. If the slot is odd, bitwise and the slot\\r\\n            // with -1 and divide by two.\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n                // Since the new array still fits in the slot, we just need to\\r\\n                // update the contents of the slot.\\r\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                    _preBytes.slot,\\r\\n                    // all the modifications to the slot are inside this\\r\\n                    // next block\\r\\n                    add(\\r\\n                        // we can just add to the slot contents because the\\r\\n                        // bytes we want to change are the LSBs\\r\\n                        fslot,\\r\\n                        add(\\r\\n                            mul(\\r\\n                                div(\\r\\n                                    // load the bytes from memory\\r\\n                                    mload(add(_postBytes, 0x20)),\\r\\n                                    // zero all bytes to the right\\r\\n                                    exp(0x100, sub(32, mlength))\\r\\n                                ),\\r\\n                                // and now shift left the number of bytes to\\r\\n                                // leave space for the length in the slot\\r\\n                                exp(0x100, sub(32, newlength))\\r\\n                            ),\\r\\n                            // increase length by the double of the memory\\r\\n                            // bytes length\\r\\n                            mul(mlength, 2)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n                // The stored value fits in the slot, but the combined value\\r\\n                // will exceed it.\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // The contents of the _postBytes array start 32 bytes into\\r\\n                // the structure. Our first read should obtain the `submod`\\r\\n                // bytes that can fit into the unused space in the last word\\r\\n                // of the stored array. To get this, we read 32 bytes starting\\r\\n                // from `submod`, so the data we read overlaps with the array\\r\\n                // contents by `submod` bytes. Masking the lowest-order\\r\\n                // `submod` bytes allows us to add that value directly to the\\r\\n                // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                    sc,\\r\\n                    add(\\r\\n                        and(\\r\\n                            fslot,\\r\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                        ),\\r\\n                        and(mload(mc), mask)\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // Copy over the first `submod` bytes of the new data as in\\r\\n                // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(\\r\\n                    add(tempBytes, lengthmod),\\r\\n                    mul(0x20, iszero(lengthmod))\\r\\n                )\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(\\r\\n                        add(\\r\\n                            add(_bytes, lengthmod),\\r\\n                            mul(0x20, iszero(lengthmod))\\r\\n                        ),\\r\\n                        _start\\r\\n                    )\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(\\r\\n                mload(add(add(_bytes, 0x20), _start)),\\r\\n                0x1000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint16)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint64)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint128)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n                // cb is a circuit breaker in the for loop since there's\\r\\n                //  no said feature for inline assembly loops\\r\\n                // cb = 1 - don't breaker\\r\\n                // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                        // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n                // slength can contain both the length and contents of the array\\r\\n                // if length < 32 bytes so let's prepare for that\\r\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                        // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                            // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                        // cb is a circuit breaker in the for loop since there's\\r\\n                        //  no said feature for inline assembly loops\\r\\n                        // cb = 1 - don't breaker\\r\\n                        // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                        // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                        // the next line is the loop condition:\\r\\n                        // while(uint256(mc < end) + cb == 2)\\r\\n                        for {\\r\\n\\r\\n                        } eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                                // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x970ae3a76009f15ecde277feeaa372ec3dadabcb753d33fcae055dd0f9e2e30f\",\"license\":\"Unlicense\"},\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title Storage Management Library for dynamic structs, based on data types and ids\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs*.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n    /**\\r\\n     * @notice Main Struct for reading and writing data to storage for given (id, key) pairs\\r\\n     * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n     * @param uintData keccak(id, key) =>  returns uint256\\r\\n     * @param bytesData keccak(id, key) => returns bytes\\r\\n     * @param addressData keccak(id, key) =>  returns address\\r\\n     * @dev any other storage type can be expressed as bytes\\r\\n     * @param __gap keep the struct size at 16\\r\\n     */\\r\\n    struct DataStore {\\r\\n        mapping(uint256 => uint256[]) allIdsByType;\\r\\n        mapping(bytes32 => uint256) uintData;\\r\\n        mapping(bytes32 => bytes) bytesData;\\r\\n        mapping(bytes32 => address) addressData;\\r\\n        uint256[12] __gap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              ** HELPER **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @notice hashes given id with parameter to be used as key in getters and setters\\r\\n     * @return key bytes32 hash of id and parameter to be stored\\r\\n     **/\\r\\n    function getKey(uint256 _id, bytes32 _param)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 key)\\r\\n    {\\r\\n        key = keccak256(abi.encodePacked(_id, _param));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA GETTERS **\\r\\n     **/\\r\\n\\r\\n    function readUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (uint256 data) {\\r\\n        data = self.uintData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (bytes memory data) {\\r\\n        data = self.bytesData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (address data) {\\r\\n        data = self.addressData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA SETTERS **\\r\\n     **/\\r\\n    function writeUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _data\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function addUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _addend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] += _addend;\\r\\n    }\\r\\n\\r\\n    function subUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _minuend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] -= _minuend;\\r\\n    }\\r\\n\\r\\n    function writeBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        self.bytesData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function writeAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        address _data\\r\\n    ) internal {\\r\\n        self.addressData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf4fe299cff8dd092657d494b2f967aaceb141b52563a233586ffe9676169f727\",\"license\":\"MIT\"},\"contracts/Portal/utils/DepositContractUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"../helpers/BytesLib.sol\\\";\\r\\n\\r\\nlibrary DepositContractUtils {\\r\\n    IDepositContract internal constant DEPOSIT_CONTRACT =\\r\\n        IDepositContract(0x00000000219ab540356cBB839Cbe05303d7705Fa);\\r\\n    uint256 internal constant PUBKEY_LENGTH = 48;\\r\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\r\\n    uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\r\\n    uint256 internal constant MAX_DEPOSITS_PER_CALL = 64;\\r\\n\\r\\n    /**\\r\\n     * @dev Padding memory array with zeroes up to 64 bytes on the right\\r\\n     * @param _b Memory array of size 32 .. 64\\r\\n     */\\r\\n    function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\r\\n        assert(_b.length >= 32 && _b.length <= 64);\\r\\n        if (64 == _b.length) return _b;\\r\\n\\r\\n        bytes memory zero32 = new bytes(32);\\r\\n        assembly {\\r\\n            mstore(add(zero32, 0x20), 0)\\r\\n        }\\r\\n\\r\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\r\\n        else\\r\\n            return\\r\\n                BytesLib.concat(\\r\\n                    _b,\\r\\n                    BytesLib.slice(zero32, 0, uint256(64 - _b.length))\\r\\n                );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\r\\n     * @param _value Number less than `2**64` for compatibility reasons\\r\\n     */\\r\\n    function _toLittleEndian64(uint256 _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = 0;\\r\\n        uint256 temp_value = _value;\\r\\n        for (uint256 i = 0; i < 8; ++i) {\\r\\n            result = (result << 8) | (temp_value & 0xFF);\\r\\n            temp_value >>= 8;\\r\\n        }\\r\\n\\r\\n        assert(0 == temp_value); // fully converted\\r\\n        result <<= (24 * 8);\\r\\n    }\\r\\n\\r\\n    function _getDepositDataRoot(\\r\\n        bytes memory _pubkey,\\r\\n        bytes memory _withdrawalCredentials,\\r\\n        bytes memory _signature,\\r\\n        uint256 _stakeAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(\\r\\n            _stakeAmount >= 1 ether,\\r\\n            \\\"DepositContract: deposit value too low\\\"\\r\\n        );\\r\\n        require(\\r\\n            _stakeAmount % 1 gwei == 0,\\r\\n            \\\"DepositContract: deposit value not multiple of gwei\\\"\\r\\n        );\\r\\n\\r\\n        uint256 deposit_amount = _stakeAmount / 1 gwei;\\r\\n        bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\r\\n        bytes32 signatureRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\r\\n                sha256(\\r\\n                    _pad64(\\r\\n                        BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 depositDataRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\r\\n                sha256(\\r\\n                    abi.encodePacked(\\r\\n                        _toLittleEndian64(deposit_amount),\\r\\n                        signatureRoot\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return depositDataRoot;\\r\\n    }\\r\\n\\r\\n    function addressToWC(address wcAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        uint256 w = 1 << 248;\\r\\n\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                bytes32(w) | bytes32(uint256(uint160(address(wcAddress))))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function depositValidator(\\r\\n        bytes calldata pubkey,\\r\\n        bytes memory withdrawalCredential,\\r\\n        bytes memory signature,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        DEPOSIT_CONTRACT.deposit{value: amount}(\\r\\n            pubkey,\\r\\n            withdrawalCredential,\\r\\n            signature,\\r\\n            _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd674c0b2060717152fad859c5c74de6433e626908d4511346d333687d062281d\",\"license\":\"MIT\"},\"contracts/Portal/utils/OracleUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title OracleUtils library to be used within stakeUtils\\r\\n * @notice Oracle, named Telescope, is responsible from 2 tasks:\\r\\n * * regulating the validator creations and exits\\r\\n * * syncs the price of all pools with merkleroot\\r\\n *\\r\\n * Regulating the validators/operators:\\r\\n * * state 1: validators is proposed since enough allowence is given from pool maintainers, 1 ETH is locked from maintainerWallet\\r\\n * * state 2: stake was approved by Oracle, operator used user funds to activate the validator, 1 ETH is released\\r\\n * * state 69: validator was malicious(alien), probably front-runned with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC)\\r\\n * * state 3: validator is exited. However, if the signal turns out to be false, then Telescope reports and sets to state 2, prisoning the operator.\\r\\n * * * Reports the Total number of Beacon validators to make sure no operator is running more validators then they should within Geode Universe.\\r\\n *\\r\\n *\\r\\n * Syncing the Prices:\\r\\n * * Telescope works the first 30 minutes of every day(GMT), with an archive node that points the first second.\\r\\n * * Catches the beacon chain balances and decreases the fees, groups them by ids\\r\\n * * Creates a merkle root, by simply calculating all prices from every pool, either private or public\\r\\n * * Verifies merkle root with price proofs of all public pools.\\r\\n * * * Private pools need to verify their own price once a day, otherwise minting is not allowed.\\r\\n * * * * This is why merkle root of all prices is needed\\r\\n *\\r\\n * @dev Prisoned Validator:\\r\\n * * 1. created a malicious validator(alien)\\r\\n * * 2. withdrawn without a signal\\r\\n * * 3. signaled but not withdrawn\\r\\n * * 4. did not respect the validatorPeriod\\r\\n *\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\n\\r\\nlibrary OracleUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event Alienated(bytes pubkey);\\r\\n    event Busted(bytes pubkey);\\r\\n    event Prisoned(uint256 id, uint256 releaseTimestamp);\\r\\n    event Released(uint256 id);\\r\\n    event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\r\\n    event FeeTheft(uint256 id, uint256 blockNumber);\\r\\n\\r\\n    /**\\r\\n     * @param state 0: inactive, 1: proposed/cured validator, 2: active validator, 3: exited,  69: alienated proposal\\r\\n     * @param index representing this validators placement on the chronological order of the proposed validators\\r\\n     * @param planetId needed for withdrawal_credential\\r\\n     * @param operatorId needed for staking after allowence\\r\\n     * @param poolFee percentage of the rewards that will got to pool's maintainer, locked when the validator is created\\r\\n     * @param operatorFee percentage of the rewards that will got to operator's maintainer, locked when the validator is created\\r\\n     * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\r\\n     * @param expectedExit expected timestamp of the exit of validator. Calculated with operator[\\\"validatorPeriod\\\"]\\r\\n     * @param signature BLS12-381 signature of the validator\\r\\n     **/\\r\\n    struct Validator {\\r\\n        uint8 state;\\r\\n        uint256 index;\\r\\n        uint256 poolId;\\r\\n        uint256 operatorId;\\r\\n        uint256 poolFee;\\r\\n        uint256 operatorFee;\\r\\n        uint256 createdAt;\\r\\n        uint256 expectedExit;\\r\\n        bytes signature;\\r\\n    }\\r\\n    /**\\r\\n     * @param ORACLE_POSITION https://github.com/Geodefi/Telescope-Eth\\r\\n     * @param ORACLE_UPDATE_TIMESTAMP the timestamp of the latest oracle update\\r\\n     * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated daily by oracle\\r\\n     * @param VALIDATORS_INDEX total number of validators that are proposed at some point. includes all states of validators.\\r\\n     * @param VERIFICATION_INDEX the highest index of the validators that are verified ( to be not alien ) by Telescope. Updated by Telescope.\\r\\n     * @param PERIOD_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PERIOD_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, planet or comet\\r\\n     * @param _validators contains all the data about proposed or/and active validators\\r\\n     * @param __gap keep the struct size at 16\\r\\n     **/\\r\\n    struct Oracle {\\r\\n        IgETH gETH;\\r\\n        address ORACLE_POSITION;\\r\\n        uint256 ORACLE_UPDATE_TIMESTAMP;\\r\\n        uint256 MONOPOLY_THRESHOLD;\\r\\n        uint256 VALIDATORS_INDEX;\\r\\n        uint256 VERIFICATION_INDEX;\\r\\n        uint256 PERIOD_PRICE_INCREASE_LIMIT;\\r\\n        uint256 PERIOD_PRICE_DECREASE_LIMIT;\\r\\n        bytes32 PRICE_MERKLE_ROOT;\\r\\n        mapping(bytes => Validator) _validators;\\r\\n        uint256[6] __gap;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice Oracle is active for the first 30 min of every day\\r\\n    uint256 public constant ORACLE_PERIOD = 1 days;\\r\\n    uint256 public constant ORACLE_ACTIVE_PERIOD = 30 minutes;\\r\\n\\r\\n    /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 5% at start.\\r\\n    uint256 public constant MONOPOLY_RATIO = (5 * PERCENTAGE_DENOMINATOR) / 100;\\r\\n\\r\\n    /// @notice limiting some abilities of Operators in case of bad behaviour\\r\\n    uint256 public constant PRISON_SENTENCE = 30 days;\\r\\n\\r\\n    modifier onlyOracle(Oracle storage self) {\\r\\n        require(\\r\\n            msg.sender == self.ORACLE_POSITION,\\r\\n            \\\"OracleUtils: sender NOT ORACLE\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getValidator(Oracle storage self, bytes calldata pubkey)\\r\\n        external\\r\\n        view\\r\\n        returns (Validator memory)\\r\\n    {\\r\\n        return self._validators[pubkey];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Oracle is only allowed for a period every day & some operations are stopped then\\r\\n     * @return false if the last oracle update happened already (within the current daily period)\\r\\n     */\\r\\n    function _isOracleActive(Oracle storage self) internal view returns (bool) {\\r\\n        return\\r\\n            (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\\r\\n            (self.ORACLE_UPDATE_TIMESTAMP <\\r\\n                block.timestamp - ORACLE_ACTIVE_PERIOD);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice              ** Regulating the Operators and PubKeys **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the given operator is Prisoned\\r\\n     * @dev \\\"released\\\" key refers to the end of the last imprisonment, the limit on the abilities of operator is lifted then\\r\\n     */\\r\\n    function isPrisoned(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) internal view returns (bool _isPrisoned) {\\r\\n        _isPrisoned =\\r\\n            block.timestamp <= DATASTORE.readUintForId(_operatorId, \\\"released\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice releases an imprisoned operator immidately\\r\\n     * @dev in different situations such as a faulty improsenment or coordinated testing periods\\r\\n     * * Governance can vote on releasing the prisoners\\r\\n     * @dev onlyGovernance check is in Portal\\r\\n     */\\r\\n    function releasePrisoned(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 operatorId\\r\\n    ) external {\\r\\n        require(\\r\\n            isPrisoned(DATASTORE, operatorId),\\r\\n            \\\"OracleUtils: NOT in prison\\\"\\r\\n        );\\r\\n        DATASTORE.writeUintForId(operatorId, \\\"released\\\", block.timestamp);\\r\\n        emit Released(operatorId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Put an operator in prison, \\\"release\\\" points to the date the operator will be out\\r\\n     */\\r\\n    function imprison(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) internal {\\r\\n        DATASTORE.writeUintForId(\\r\\n            _operatorId,\\r\\n            \\\"released\\\",\\r\\n            block.timestamp + PRISON_SENTENCE\\r\\n        );\\r\\n        emit Prisoned(_operatorId, block.timestamp + PRISON_SENTENCE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks if a validator can use pool funds\\r\\n     * Creation of a Validator takes 2 steps.\\r\\n     * Before entering beaconStake function, _canStake verifies the eligibility of\\r\\n     * given pubKey that is proposed by an operator with proposeStake function.\\r\\n     * Eligibility is defined by an optimistic alienation, check alienate() for info.\\r\\n     *\\r\\n     *  @param pubkey BLS12-381 public key of the validator\\r\\n     *  @return true if:\\r\\n     *   - pubkey should be proposeStaked\\r\\n     *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\r\\n     *   - validator's index should be lower than VERIFICATION_INDEX. Updated by Telescope.\\r\\n     *  else:\\r\\n     *      return false\\r\\n     * @dev to optimize batch checks verificationIndex is taken as a memeory param\\r\\n     */\\r\\n    function _canStake(\\r\\n        Oracle storage self,\\r\\n        bytes calldata pubkey,\\r\\n        uint256 verificationIndex\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            self._validators[pubkey].state == 1 &&\\r\\n            self._validators[pubkey].index <= verificationIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An \\\"Alien\\\" is a validator that is created with a false withdrawal credential, this is a malicious act.\\r\\n     * @dev imprisonates the operator who proposed a malicious validator.\\r\\n     */\\r\\n    function _alienateValidator(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 1,\\r\\n            \\\"OracleUtils: NOT all alienPubkeys are pending\\\"\\r\\n        );\\r\\n        uint256 planetId = self._validators[_pk].poolId;\\r\\n        DATASTORE.subUintForId(planetId, \\\"secured\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        DATASTORE.addUintForId(planetId, \\\"surplus\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        self._validators[_pk].state = 69;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Alienated(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to a false signal, meaning there is a signal but no Unstake\\r\\n     * @dev imprisonates the operator who signaled a fake Unstake\\r\\n     */\\r\\n    function _bustSignal(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 3,\\r\\n            \\\"OracleUtils: pubkey is NOT signaled\\\"\\r\\n        );\\r\\n        self._validators[_pk].state = 2;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to unsignaled withdrawal, meaning there is an unstake but no Signal\\r\\n     * @dev imprisonates the operator who haven't signal the unstake\\r\\n     */\\r\\n    function _bustExit(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 2,\\r\\n            \\\"OracleUtils: Signaled, cannot be busted\\\"\\r\\n        );\\r\\n        self._validators[_pk].state = 3;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updating VERIFICATION_INDEX, signaling that it is safe to allow\\r\\n     * validators with lower index than VERIFICATION_INDEX to stake with staking pool funds\\r\\n     * @param allValidatorsCount total number of validators to figure out what is the current Monopoly Requirement\\r\\n     * @param validatorVerificationIndex index of the highest validator that is verified to be activated\\r\\n     * @param alienatedPubkeys proposals with lower index than new_index who frontrunned proposeStake\\r\\n     * with incorrect withdrawal credential results in imprisonment.\\r\\n     */\\r\\n    function updateVerificationIndex(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 allValidatorsCount,\\r\\n        uint256 validatorVerificationIndex,\\r\\n        bytes[] calldata alienatedPubkeys\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n        require(allValidatorsCount > 4999, \\\"OracleUtils: low validator count\\\");\\r\\n        require(\\r\\n            self.VALIDATORS_INDEX >= validatorVerificationIndex,\\r\\n            \\\"OracleUtils: high VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        require(\\r\\n            validatorVerificationIndex >= self.VERIFICATION_INDEX,\\r\\n            \\\"OracleUtils: low VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        self.VERIFICATION_INDEX = validatorVerificationIndex;\\r\\n\\r\\n        for (uint256 i; i < alienatedPubkeys.length; i++) {\\r\\n            _alienateValidator(self, DATASTORE, alienatedPubkeys[i]);\\r\\n        }\\r\\n\\r\\n        self.MONOPOLY_THRESHOLD =\\r\\n            (allValidatorsCount * MONOPOLY_RATIO) /\\r\\n            PERCENTAGE_DENOMINATOR;\\r\\n\\r\\n        emit VerificationIndexUpdated(validatorVerificationIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice regulating operators within Geode with verifiable proofs\\r\\n     * @param bustedExits validators that have not signaled before Unstake\\r\\n     * @param bustedSignals validators that are \\\"mistakenly:)\\\" signaled but not Unstaked\\r\\n     * @param feeThefts [0]: Operator ids who have stolen MEV or block rewards, [1]: detected BlockNumber as proof\\r\\n     * @dev Both of these functions results in imprisonment.\\r\\n     */\\r\\n    function regulateOperators(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes[] calldata bustedExits,\\r\\n        bytes[] calldata bustedSignals,\\r\\n        uint256[2][] calldata feeThefts\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n\\r\\n        for (uint256 i; i < bustedExits.length; i++) {\\r\\n            _bustExit(self, DATASTORE, bustedExits[i]);\\r\\n        }\\r\\n\\r\\n        for (uint256 j; j < bustedSignals.length; j++) {\\r\\n            _bustSignal(self, DATASTORE, bustedSignals[j]);\\r\\n        }\\r\\n        for (uint256 k; k < feeThefts.length; k++) {\\r\\n            imprison(DATASTORE, feeThefts[k][0]);\\r\\n            emit FeeTheft(feeThefts[k][0], feeThefts[k][1]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                          ** Updating PricePerShare **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice calculates the current price and expected report price\\r\\n     * @dev surplus at the oracle time is found with the help of mint and burn buffers\\r\\n     * @param _dailyBufferMintKey represents the gETH minted during oracleActivePeriod, unique to every day\\r\\n     * @param _dailyBufferBurnKey represents the gETH burned during oracleActivePeriod, unique to every day\\r\\n     * @dev calculates the totalEther amount, decreases the amount minted while oracle was working (first 30m),\\r\\n     * finds the expected Oracle price by totalEther / supply , finds the current price by unbufferedEther / unbufferedSupply\\r\\n     */\\r\\n    function _findPricesClearBuffer(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 _dailyBufferMintKey,\\r\\n        bytes32 _dailyBufferBurnKey,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        uint256 totalEther = _beaconBalance +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"secured\\\") +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n\\r\\n        uint256 denominator = self.gETH.denominator();\\r\\n        uint256 unbufferedEther;\\r\\n\\r\\n        {\\r\\n            uint256 price = self.gETH.pricePerShare(_poolId);\\r\\n            unbufferedEther =\\r\\n                totalEther -\\r\\n                (DATASTORE.readUintForId(_poolId, _dailyBufferMintKey) *\\r\\n                    price) /\\r\\n                denominator;\\r\\n\\r\\n            unbufferedEther +=\\r\\n                (DATASTORE.readUintForId(_poolId, _dailyBufferBurnKey) *\\r\\n                    price) /\\r\\n                denominator;\\r\\n        }\\r\\n\\r\\n        uint256 supply = self.gETH.totalSupply(_poolId);\\r\\n\\r\\n        uint256 unbufferedSupply = supply -\\r\\n            DATASTORE.readUintForId(_poolId, _dailyBufferMintKey);\\r\\n\\r\\n        unbufferedSupply += DATASTORE.readUintForId(\\r\\n            _poolId,\\r\\n            _dailyBufferBurnKey\\r\\n        );\\r\\n\\r\\n        // clears daily buffer for the gas refund\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferMintKey, 0);\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferBurnKey, 0);\\r\\n\\r\\n        return (\\r\\n            (unbufferedEther * denominator) / unbufferedSupply,\\r\\n            (totalEther * denominator) / supply\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\\r\\n     * 1. Price should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     * 2. Price should not be decreased more than PERIOD_PRICE_DECREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     */\\r\\n    function _sanityCheck(\\r\\n        Oracle storage self,\\r\\n        uint256 _id,\\r\\n        uint256 _periodsSinceUpdate,\\r\\n        uint256 _newPrice\\r\\n    ) internal view {\\r\\n        uint256 curPrice = self.gETH.pricePerShare(_id);\\r\\n        uint256 maxPrice = curPrice +\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_INCREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        uint256 minPrice = curPrice -\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_DECREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        require(\\r\\n            _newPrice >= minPrice && _newPrice <= maxPrice,\\r\\n            \\\"OracleUtils: price is insane\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice syncing the price of g-derivative after checking the merkle proofs and the sanity of it.\\r\\n     * @param _beaconBalance the total balance -excluding fees- of all validators of this pool\\r\\n     * @param _periodsSinceUpdate time(s) since the last update of the g-derivative's price.\\r\\n     * while public pools are using ORACLE_UPDATE_TIMESTAMP, private pools will refer gEth.priceUpdateTimestamp()\\r\\n     * @param _priceProofs the merkle proof of the latests prices that are reported by Telescope\\r\\n     * @dev if merkle proof holds the oracle price, new price is the current price of the derivative\\r\\n     */\\r\\n    function _priceSync(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32[2] memory _dailyBufferKeys,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance,\\r\\n        uint256 _periodsSinceUpdate, // calculation for this changes for private pools\\r\\n        bytes32[] calldata _priceProofs // uint256 prices[]\\r\\n    ) internal {\\r\\n        (uint256 oraclePrice, uint256 price) = _findPricesClearBuffer(\\r\\n            self,\\r\\n            DATASTORE,\\r\\n            _dailyBufferKeys[0],\\r\\n            _dailyBufferKeys[1],\\r\\n            _poolId,\\r\\n            _beaconBalance\\r\\n        );\\r\\n        _sanityCheck(self, _poolId, _periodsSinceUpdate, oraclePrice);\\r\\n        bytes32 node = keccak256(abi.encodePacked(_poolId, oraclePrice));\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(_priceProofs, self.PRICE_MERKLE_ROOT, node),\\r\\n            \\\"OracleUtils: NOT all proofs are valid\\\"\\r\\n        );\\r\\n\\r\\n        self.gETH.setPricePerShare(price, _poolId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT\\r\\n     * @notice after report updates the prices of the public pools\\r\\n     * @notice updates the ORACLE_UPDATE_TIMESTAMP\\r\\n     * @dev if merkle proof holds the oracle price, new price is the found price of the derivative\\r\\n     */\\r\\n    function reportOracle(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 merkleRoot,\\r\\n        uint256[] calldata beaconBalances,\\r\\n        bytes32[][] calldata priceProofs\\r\\n    ) external onlyOracle(self) {\\r\\n        require(_isOracleActive(self), \\\"OracleUtils: oracle is NOT active\\\");\\r\\n\\r\\n        {\\r\\n            uint256 planetCount = DATASTORE.allIdsByType[5].length;\\r\\n            require(\\r\\n                beaconBalances.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect beaconBalances length\\\"\\r\\n            );\\r\\n            require(\\r\\n                priceProofs.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect priceProofs length\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        self.PRICE_MERKLE_ROOT = merkleRoot;\\r\\n\\r\\n        uint256 periodsSinceUpdate = (block.timestamp +\\r\\n            ORACLE_ACTIVE_PERIOD -\\r\\n            self.ORACLE_UPDATE_TIMESTAMP) / ORACLE_PERIOD;\\r\\n\\r\\n        // refering the first second of the period: block.timestamp - (block.timestamp % ORACLE_PERIOD)\\r\\n        bytes32[2] memory dailyBufferKeys = [\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"mintBuffer\\\"\\r\\n            ),\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"burnBuffer\\\"\\r\\n            )\\r\\n        ];\\r\\n\\r\\n        for (uint256 i = 0; i < beaconBalances.length; i++) {\\r\\n            _priceSync(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                dailyBufferKeys,\\r\\n                DATASTORE.allIdsByType[5][i],\\r\\n                beaconBalances[i],\\r\\n                periodsSinceUpdate,\\r\\n                priceProofs[i]\\r\\n            );\\r\\n        }\\r\\n        self.ORACLE_UPDATE_TIMESTAMP =\\r\\n            block.timestamp -\\r\\n            (block.timestamp % ORACLE_PERIOD);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8a201a506463ffb80da914cfc80057cc305268e508176895aefcab19aeb1bba2\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n// This interface is designed to be compatible with the Vyper version.\\r\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\r\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ed71fce79822f89cd1599048cf776f3aebc82e0521b46a35c3d6c74c85e7c1f\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgETH {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    function burnBatch(\\r\\n        address account,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) external;\\r\\n\\r\\n    function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function denominator() external view returns (uint256);\\r\\n\\r\\n    function pricePerShare(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setPricePerShare(uint256 price, uint256 id) external;\\r\\n\\r\\n    function isInterface(address _interface, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setInterface(\\r\\n        address _interface,\\r\\n        uint256 id,\\r\\n        bool isSet\\r\\n    ) external;\\r\\n\\r\\n    function updateMinterRole(address Minter) external;\\r\\n\\r\\n    function updatePauserRole(address Pauser) external;\\r\\n\\r\\n    function updateOracleRole(address Oracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x233c5eef588ce7699ead6ef2eddd219104331f819ffab3ac5dcd9a5aa09667f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063b3cd425411610070578063b3cd425414610133578063cd15d82e1461013f578063ea976d151461015f578063f930444a14610169578063fe406a7d1461018957600080fd5b80630a1b45ce146100ad5780631425fb51146100cf5780632d855053146100ef5780635f365cb41461010a5780638a6ea9b714610113575b600080fd5b8180156100b957600080fd5b506100cd6100c83660046116f1565b610193565b005b8180156100db57600080fd5b506100cd6100ea3660046117ce565b6103b7565b6100f7610687565b6040519081526020015b60405180910390f35b6100f761070881565b610126610121366004611675565b6106a6565b60405161010191906119a1565b6100f76402540be40081565b81801561014b57600080fd5b506100cd61015a366004611653565b610817565b6100f762278d0081565b81801561017557600080fd5b506100cd61018436600461185b565b6108bc565b6100f76201518081565b600188015488906001600160a01b031633146101ca5760405162461bcd60e51b81526004016101c19061196a565b60405180910390fd5b6101d389610b16565b156102205760405162461bcd60e51b815260206004820152601d60248201527f4f7261636c655574696c733a206f7261636c652069732061637469766500000060448201526064016101c1565b60005b8681101561026b576102598a8a8a8a8581811061024257610242611baf565b90506020028101906102549190611a70565b610b4a565b8061026381611b54565b915050610223565b5060005b848110156102b7576102a58a8a88888581811061028e5761028e611baf565b90506020028101906102a09190611a70565b610c7a565b806102af81611b54565b91505061026f565b5060005b828110156103ab576102fb898585848181106102d9576102d9611baf565b9050604002016000600281106102f1576102f1611baf565b6020020135610d14565b7f181fa81c765296a681c8f5293b14d9164443b1e1ba1da72596f28ba34adfb77384848381811061032e5761032e611baf565b90506040020160006002811061034657610346611baf565b602002013585858481811061035d5761035d611baf565b90506040020160016002811061037557610375611baf565b6020020135604051610391929190918252602082015260400190565b60405180910390a1806103a381611b54565b9150506102bb565b50505050505050505050565b600187015487906001600160a01b031633146103e55760405162461bcd60e51b81526004016101c19061196a565b6103ee88610b16565b6104445760405162461bcd60e51b815260206004820152602160248201527f4f7261636c655574696c733a206f7261636c65206973204e4f542061637469766044820152606560f81b60648201526084016101c1565b60056000908152602088905260409020548481146104b95760405162461bcd60e51b815260206004820152602c60248201527f4f7261636c655574696c733a20696e636f727265637420626561636f6e42616c60448201526b0c2dcc6cae640d8cadccee8d60a31b60648201526084016101c1565b82811461051a5760405162461bcd60e51b815260206004820152602960248201527f4f7261636c655574696c733a20696e636f727265637420707269636550726f6f6044820152680cce640d8cadccee8d60bb1b60648201526084016101c1565b50600888018690556002880154600090620151809061053b61070842611ab7565b6105459190611b02565b61054f9190611acf565b90506000604051806040016040528061058d62015180426105709190611b6f565b61057a9042611b02565b6936b4b73a213ab33332b960b11b610d7e565b81526020016105bf6105a26201518042611b6f565b6105ac9042611b02565b69313ab937213ab33332b960b11b610d7e565b9052905060005b8681101561065b576106498b8b848d60000160006005815260200190815260200160002085815481106105fb576105fb611baf565b90600052602060002001548c8c8781811061061857610618611baf565b90506020020135888c8c8981811061063257610632611baf565b90506020028101906106449190611a26565b610daa565b8061065381611b54565b9150506105c6565b506106696201518042611b6f565b6106739042611b02565b8a6002018190555050505050505050505050565b60646106996402540be4006005611ae3565b6106a39190611acf565b81565b6106f8604051806101200160405280600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b83600901838360405161070c92919061192b565b90815260408051918290036020908101832061012084018352805460ff1684526001810154918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008810180546101008401919061078c90611b19565b80601f01602080910402602001604051908101604052809291908181526020018280546107b890611b19565b80156108055780601f106107da57610100808354040283529160200191610805565b820191906000526020600020905b8154815290600101906020018083116107e857829003601f168201915b50505050508152505090509392505050565b6108218282610f13565b61086d5760405162461bcd60e51b815260206004820152601a60248201527f4f7261636c655574696c733a204e4f5420696e20707269736f6e00000000000060448201526064016101c1565b6108848282671c995b19585cd95960c21b42610f35565b6040518181527ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565906020015b60405180910390a15050565b600186015486906001600160a01b031633146108ea5760405162461bcd60e51b81526004016101c19061196a565b6108f387610b16565b156109405760405162461bcd60e51b815260206004820152601d60248201527f4f7261636c655574696c733a206f7261636c652069732061637469766500000060448201526064016101c1565b61138785116109915760405162461bcd60e51b815260206004820181905260248201527f4f7261636c655574696c733a206c6f772076616c696461746f7220636f756e7460448201526064016101c1565b83876004015410156109f15760405162461bcd60e51b8152602060048201526024808201527f4f7261636c655574696c733a206869676820564552494649434154494f4e5f4960448201526309c888ab60e31b60648201526084016101c1565b8660050154841015610a515760405162461bcd60e51b815260206004820152602360248201527f4f7261636c655574696c733a206c6f7720564552494649434154494f4e5f494e6044820152620888ab60eb1b60648201526084016101c1565b6005870184905560005b82811015610aa357610a918888868685818110610a7a57610a7a611baf565b9050602002810190610a8c9190611a70565b610f5d565b80610a9b81611b54565b915050610a5b565b506402540be4006064610ab7826005611ae3565b610ac19190611acf565b610acb9087611ae3565b610ad59190611acf565b60038801556040518481527f5741e1f31a5b295a42632c4a80216d28bf245e6f0ee679b887d8ecd7b94517ee9060200160405180910390a150505050505050565b6000610708610b286201518042611b6f565b11158015610b445750610b3d61070842611b02565b8260020154105b92915050565b836009018282604051610b5e92919061192b565b90815260405190819003602001902054600260ff90911614610bd25760405162461bcd60e51b815260206004820152602760248201527f4f7261636c655574696c733a205369676e616c65642c2063616e6e6f7420626560448201526608189d5cdd195960ca1b60648201526084016101c1565b6003846009018383604051610be892919061192b565b908152604051908190036020018120805460ff9390931660ff1990931692909217909155610c3b9084906009870190610c24908690869061192b565b908152602001604051809103902060030154610d14565b7f0ac6d86601bdb449b945aca7c118a5d062e435405d652bd41f3e2142999085a58282604051610c6c92919061193b565b60405180910390a150505050565b836009018282604051610c8e92919061192b565b90815260405190819003602001902054600360ff90911614610cfe5760405162461bcd60e51b815260206004820152602360248201527f4f7261636c655574696c733a207075626b6579206973204e4f54207369676e616044820152621b195960ea1b60648201526084016101c1565b6002846009018383604051610be892919061192b565b610d3a81671c995b19585cd95960c21b610d3162278d0042611ab7565b85929190610f35565b7f6a740d28273a335dabd953f22fd145fdc11323629c3ff8717eb28f53b227e7fd81610d6962278d0042611ab7565b604080519283526020830191909152016108b0565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600080610dc88a8a8a8460200201518b600160200201518b8b6110e4565b91509150610dd88a888785611397565b6040805160208101899052908101839052600090606001604051602081830303815290604052805190602001209050610e4885858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060088d0154836114ec565b610ea25760405162461bcd60e51b815260206004820152602560248201527f4f7261636c655574696c733a204e4f5420616c6c2070726f6f667320617265206044820152641d985b1a5960da1b60648201526084016101c1565b8a546040516322af599760e01b815260048101849052602481018a90526001600160a01b03909116906322af599790604401600060405180830381600087803b158015610eee57600080fd5b505af1158015610f02573d6000803e3d6000fd5b505050505050505050505050505050565b6000610f2b8383671c995b19585cd95960c21b611502565b4211159392505050565b80846001016000610f468686610d7e565b815260208101919091526040016000205550505050565b836009018282604051610f7192919061192b565b9081526040519081900360200190205460ff16600114610fe95760405162461bcd60e51b815260206004820152602d60248201527f4f7261636c655574696c733a204e4f5420616c6c20616c69656e5075626b657960448201526c73206172652070656e64696e6760981b60648201526084016101c1565b6000846009018383604051610fff92919061192b565b9081526040519081900360200190206002015490506110338482661cd958dd5c995960ca1b6801bc16d674ec80000061152c565b611052848266737572706c757360c81b6801bc16d674ec800000611565565b604585600901848460405161106892919061192b565b908152604051908190036020018120805460ff9390931660ff19909316929092179091556110a49085906009880190610c24908790879061192b565b7f7033b7b89d1818b80f9a85b8d604a07ec95f439c75d7ed56caef4d57a101397583836040516110d592919061193b565b60405180910390a15050505050565b600080806110fd888666737572706c757360c81b611502565b6111128987661cd958dd5c995960ca1b611502565b61111c9086611ab7565b6111269190611ab7565b905060008960000160009054906101000a90046001600160a01b03166001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561117a57600080fd5b505afa15801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b291906118c5565b8a5460405163f759cc3b60e01b81526004810189905291925060009182916001600160a01b03169063f759cc3b9060240160206040518083038186803b1580156111fb57600080fd5b505afa15801561120f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123391906118c5565b905082816112428d8b8e611502565b61124c9190611ae3565b6112569190611acf565b6112609085611b02565b9150828161126f8d8b8d611502565b6112799190611ae3565b6112839190611acf565b61128d9083611ab7565b8c5460405163bd85b03960e01b8152600481018b9052919350600092506001600160a01b03169063bd85b0399060240160206040518083038186803b1580156112d557600080fd5b505afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d91906118c5565b9050600061131c8c8a8d611502565b6113269083611b02565b90506113338c8a8c611502565b61133d9082611ab7565b905061134c8c8a8d6000610f35565b6113598c8a8c6000610f35565b806113648585611ae3565b61136e9190611acf565b826113798688611ae3565b6113839190611acf565b965096505050505050965096945050505050565b835460405163f759cc3b60e01b8152600481018590526000916001600160a01b03169063f759cc3b9060240160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906118c5565b905060006402540be4008487600601548461142e9190611ae3565b6114389190611ae3565b6114429190611acf565b61144c9083611ab7565b905060006402540be400858860070154856114679190611ae3565b6114719190611ae3565b61147b9190611acf565b6114859084611b02565b90508084101580156114975750818411155b6114e35760405162461bcd60e51b815260206004820152601c60248201527f4f7261636c655574696c733a20707269636520697320696e73616e650000000060448201526064016101c1565b50505050505050565b6000826114f98584611593565b14949350505050565b60008360010160006115148585610d7e565b81526020019081526020016000205490509392505050565b8084600101600061153d8686610d7e565b8152602001908152602001600020600082825461155a9190611b02565b909155505050505050565b808460010160006115768686610d7e565b8152602001908152602001600020600082825461155a9190611ab7565b600081815b84518110156115ff5760008582815181106115b5576115b5611baf565b602002602001015190508083116115db57600083815260208290526040902092506115ec565b600081815260208490526040902092505b50806115f781611b54565b915050611598565b509392505050565b60008083601f84011261161957600080fd5b50813567ffffffffffffffff81111561163157600080fd5b6020830191508360208260051b850101111561164c57600080fd5b9250929050565b6000806040838503121561166657600080fd5b50508035926020909101359150565b60008060006040848603121561168a57600080fd5b83359250602084013567ffffffffffffffff808211156116a957600080fd5b818601915086601f8301126116bd57600080fd5b8135818111156116cc57600080fd5b8760208285010111156116de57600080fd5b6020830194508093505050509250925092565b60008060008060008060008060a0898b03121561170d57600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561173357600080fd5b61173f8c838d01611607565b909850965060608b013591508082111561175857600080fd5b6117648c838d01611607565b909650945060808b013591508082111561177d57600080fd5b818b0191508b601f83011261179157600080fd5b8135818111156117a057600080fd5b8c60208260061b85010111156117b557600080fd5b6020830194508093505050509295985092959890939650565b600080600080600080600060a0888a0312156117e957600080fd5b873596506020880135955060408801359450606088013567ffffffffffffffff8082111561181657600080fd5b6118228b838c01611607565b909650945060808a013591508082111561183b57600080fd5b506118488a828b01611607565b989b979a50959850939692959293505050565b60008060008060008060a0878903121561187457600080fd5b86359550602087013594506040870135935060608701359250608087013567ffffffffffffffff8111156118a757600080fd5b6118b389828a01611607565b979a9699509497509295939492505050565b6000602082840312156118d757600080fd5b5051919050565b6000815180845260005b81811015611904576020818501810151868301820152016118e8565b81811115611916576000602083870101525b50601f01601f19169290920160200192915050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252601e908201527f4f7261636c655574696c733a2073656e646572204e4f54204f5241434c450000604082015260600190565b602081526119b560208201835160ff169052565b602082015160408201526040820151606082015260608201516080820152608082015160a082015260a082015160c082015260c082015160e0820152600060e0830151610100818185015280850151915050610120808185015250611a1e6101408401826118de565b949350505050565b6000808335601e19843603018112611a3d57600080fd5b83018035915067ffffffffffffffff821115611a5857600080fd5b6020019150600581901b360382131561164c57600080fd5b6000808335601e19843603018112611a8757600080fd5b83018035915067ffffffffffffffff821115611aa257600080fd5b60200191503681900382131561164c57600080fd5b60008219821115611aca57611aca611b83565b500190565b600082611ade57611ade611b99565b500490565b6000816000190483118215151615611afd57611afd611b83565b500290565b600082821015611b1457611b14611b83565b500390565b600181811c90821680611b2d57607f821691505b60208210811415611b4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611b6857611b68611b83565b5060010190565b600082611b7e57611b7e611b99565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122011d4b65daa468222580bdd9c5a5ee171d64ca31f4e91223e604c06b2431bb1f564736f6c63430008070033",
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "Prisoned Validator: * 1. created a malicious validator(alien) * 2. withdrawn without a signal * 3. signaled but not withdrawn * 4. did not respect the validatorPeriodALL \"fee\" variables are limited by PERCENTAGE_DENOMINATOR = 100% Note refer to DataStoreUtils before reviewing",
    "kind": "dev",
    "methods": {
      "regulateOperators(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes[],bytes[],uint256[2][])": {
        "details": "Both of these functions results in imprisonment.",
        "params": {
          "bustedExits": "validators that have not signaled before Unstake",
          "bustedSignals": "validators that are \"mistakenly:)\" signaled but not Unstaked",
          "feeThefts": "[0]: Operator ids who have stolen MEV or block rewards, [1]: detected BlockNumber as proof"
        }
      },
      "releasePrisoned(DataStoreUtils.DataStore storage,uint256)": {
        "details": "in different situations such as a faulty improsenment or coordinated testing periods * Governance can vote on releasing the prisonersonlyGovernance check is in Portal"
      },
      "reportOracle(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes32,uint256[],bytes32[][])": {
        "details": "if merkle proof holds the oracle price, new price is the found price of the derivative"
      },
      "updateVerificationIndex(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[])": {
        "params": {
          "alienatedPubkeys": "proposals with lower index than new_index who frontrunned proposeStake with incorrect withdrawal credential results in imprisonment.",
          "allValidatorsCount": "total number of validators to figure out what is the current Monopoly Requirement",
          "validatorVerificationIndex": "index of the highest validator that is verified to be activated"
        }
      }
    },
    "title": "OracleUtils library to be used within stakeUtils",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MONOPOLY_RATIO()": {
        "notice": "effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 5% at start."
      },
      "ORACLE_PERIOD()": {
        "notice": "Oracle is active for the first 30 min of every day"
      },
      "PERCENTAGE_DENOMINATOR()": {
        "notice": "PERCENTAGE_DENOMINATOR represents 100%"
      },
      "PRISON_SENTENCE()": {
        "notice": "limiting some abilities of Operators in case of bad behaviour"
      },
      "regulateOperators(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes[],bytes[],uint256[2][])": {
        "notice": "regulating operators within Geode with verifiable proofs"
      },
      "releasePrisoned(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "releases an imprisoned operator immidately"
      },
      "reportOracle(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,bytes32,uint256[],bytes32[][])": {
        "notice": "Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOTafter report updates the prices of the public poolsupdates the ORACLE_UPDATE_TIMESTAMP"
      },
      "updateVerificationIndex(OracleUtils.Oracle storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[])": {
        "notice": "Updating VERIFICATION_INDEX, signaling that it is safe to allow validators with lower index than VERIFICATION_INDEX to stake with staking pool funds"
      }
    },
    "notice": "Oracle, named Telescope, is responsible from 2 tasks: * regulating the validator creations and exits * syncs the price of all pools with merkleroot Regulating the validators/operators: * state 1: validators is proposed since enough allowence is given from pool maintainers, 1 ETH is locked from maintainerWallet * state 2: stake was approved by Oracle, operator used user funds to activate the validator, 1 ETH is released * state 69: validator was malicious(alien), probably front-runned with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC) * state 3: validator is exited. However, if the signal turns out to be false, then Telescope reports and sets to state 2, prisoning the operator. * * Reports the Total number of Beacon validators to make sure no operator is running more validators then they should within Geode Universe. Syncing the Prices: * Telescope works the first 30 minutes of every day(GMT), with an archive node that points the first second. * Catches the beacon chain balances and decreases the fees, groups them by ids * Creates a merkle root, by simply calculating all prices from every pool, either private or public * Verifies merkle root with price proofs of all public pools. * * Private pools need to verify their own price once a day, otherwise minting is not allowed. * * * This is why merkle root of all prices is needed",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}