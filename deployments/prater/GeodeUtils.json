{
  "address": "0xF00B1B0067Df8EacE5f40C3b17855deA6F5F2ebB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isElector",
          "type": "bool"
        }
      ],
      "name": "ElectorTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "GovernanceTaxUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxFee",
          "type": "uint256"
        }
      ],
      "name": "MaxGovernanceTaxUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senateExpiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electorId",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_DURATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SENATE_PERIOD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_DURATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x84e748213c2466b614b1912f9d1f15a69e91dc523cce1c61bc6efbf15c5b91e1",
  "receipt": {
    "to": null,
    "from": "0x5297F1EA60D4b60E85eF323DECEc1A907295B6E6",
    "contractAddress": "0xF00B1B0067Df8EacE5f40C3b17855deA6F5F2ebB",
    "transactionIndex": 47,
    "gasUsed": "1549337",
    "logsBloom": "0x
    "blockHash": "0xd6f6d627dc9846f5ca89c77ebc65ccb07586492bb1e6af92ee20d9288de7b833",
    "transactionHash": "0x84e748213c2466b614b1912f9d1f15a69e91dc523cce1c61bc6efbf15c5b91e1",
    "logs": [],
    "blockNumber": 7845390,
    "cumulativeGasUsed": "12255942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ee39b7d5d718f6bdbf221f88cbfb986f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isElector\",\"type\":\"bool\"}],\"name\":\"ElectorTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"GovernanceTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"MaxGovernanceTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senateExpiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electorId\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SENATE_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"Contracts relying on this library must initialize GeodeUtils.UniverseALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%Admin functions are already protected Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE) Note refer to DataStoreUtils before reviewing\",\"kind\":\"dev\",\"methods\":{\"approveProposal(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"Senate should not be able to approve approved proposalsSenate should not be able to approve expired proposalsSenate should not be able to approve SENATE proposals :)\",\"params\":{\"id\":\"given ID proposal that has been approved by Senate\"}},\"approveSenate(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"pins id as \\\"voted\\\" when approvedincreases \\\"approvalCount\\\" of proposalId by 1 when approved\",\"params\":{\"electorId\":\"should have the voting rights, msg.sender should be the CONTROLLER of given ID\"}},\"changeIdCONTROLLER(DataStoreUtils.DataStore storage,uint256,address)\":{\"details\":\"this operation can not be reverted by the old CONTROLLERin case the current controller wants to remove the need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD\"},\"getCONTROLLERFromId(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"returns address(0) for empty ids, mandatory\"},\"getGovernance(GeodeUtils.Universe storage)\":{\"returns\":{\"_0\":\"address of GOVERNANCE*\"}},\"getGovernanceTax(GeodeUtils.Universe storage)\":{\"returns\":{\"_0\":\"active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX\"}},\"getMaxGovernanceTax(GeodeUtils.Universe storage)\":{\"returns\":{\"_0\":\"MAX_GOVERNANCE_TAX\"}},\"getNAMEFromId(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"returns bytes(0) for empty ids, mandatory\"},\"getSenate(GeodeUtils.Universe storage)\":{\"returns\":{\"_0\":\"address of SENATE*\"}},\"getSenateExpiry(GeodeUtils.Universe storage)\":{\"returns\":{\"_0\":\"the expiration date of current SENATE as a timestamp\"}},\"getTYPEFromId(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"returns uint(0) for empty ids, mandatory\"},\"isUpgradeAllowed(GeodeUtils.Universe storage,address)\":{\"details\":\"address(0) should return falseDO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022*\",\"returns\":{\"_0\":\"True if it is allowed by senate and false if not.\"}},\"newProposal(GeodeUtils.Universe storage,address,uint256,bytes,uint256)\":{\"details\":\"refer to structure of Proposal for explanations of params\"},\"setElectorType(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,bool)\":{\"details\":\"can not set with the same value again, preventing double increment/decrements\",\"params\":{\"_TYPE\":\"selected type\",\"isElector\":\"true if selected _type can vote for senate from now on\"}},\"setGovernanceTax(GeodeUtils.Universe storage,uint256)\":{\"details\":\"can not set the fee more than MAX_GOVERNANCE_TAXno need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already\",\"returns\":{\"_0\":\"true if the operation was succesful, might be helpful when governance rights are distributed\"}},\"setMaxGovernanceTax(GeodeUtils.Universe storage,uint256)\":{\"details\":\"can not set a fee more than PERCENTAGE_DENOMINATOR (100%)\",\"returns\":{\"_0\":\"true if the operation was succesful\"}}},\"title\":\"GeodeUtils library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PERCENTAGE_DENOMINATOR()\":{\"notice\":\"PERCENTAGE_DENOMINATOR represents 100%\"},\"approveProposal(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"type specific changes for reserved_types(1,2,3) are implemented here,  any other addition should take place in Portal, as not related\"},\"approveSenate(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"Proposed CONTROLLER is the new Senate after 2/3 of the electors approved NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properlyid can not vote if: - approved already - proposal is expired - not its type is elector - not senate proposal\"},\"changeIdCONTROLLER(DataStoreUtils.DataStore storage,uint256,address)\":{\"notice\":\"only the current CONTROLLER can change\"},\"getGovernanceTax(GeodeUtils.Universe storage)\":{\"notice\":\"MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed\"},\"getProposal(GeodeUtils.Universe storage,uint256)\":{\"notice\":\"CONTROLLER Proposals\"},\"isUpgradeAllowed(GeodeUtils.Universe storage,address)\":{\"notice\":\"Get if it is allowed to change a specific contract with the current version.\"},\"newProposal(GeodeUtils.Universe storage,address,uint256,bytes,uint256)\":{\"notice\":\"a proposal can never be overriden.DATASTORE(id) will not be updated until the proposal is approved.\"},\"setElectorType(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,bool)\":{\"notice\":\"only elector types can vote for senate\"}},\"notice\":\"Exclusively contains functions responsible for administration of DATASTORE, including functions related to \\\"limited upgradability\\\" with Senate & Proposals.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/GeodeUtilsLib.sol\":\"GeodeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title Storage Management Library for dynamic structs, based on data types and ids\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs*.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n    /**\\r\\n     * @notice Main Struct for reading and writing data to storage for given (id, key) pairs\\r\\n     * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n     * @param uintData keccak(id, key) =>  returns uint256\\r\\n     * @param bytesData keccak(id, key) => returns bytes\\r\\n     * @param addressData keccak(id, key) =>  returns address\\r\\n     * @dev any other storage type can be expressed as bytes\\r\\n     */\\r\\n    struct DataStore {\\r\\n        mapping(uint256 => uint256[]) allIdsByType;\\r\\n        mapping(bytes32 => uint256) uintData;\\r\\n        mapping(bytes32 => bytes) bytesData;\\r\\n        mapping(bytes32 => address) addressData;\\r\\n        uint256[12] __gap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              ** HELPER **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @notice hashes given id with parameter to be used as key in getters and setters\\r\\n     * @return key bytes32 hash of id and parameter to be stored\\r\\n     **/\\r\\n    function getKey(uint256 _id, bytes32 _param)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 key)\\r\\n    {\\r\\n        key = keccak256(abi.encodePacked(_id, _param));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA GETTERS **\\r\\n     **/\\r\\n\\r\\n    function readUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (uint256 data) {\\r\\n        data = self.uintData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (bytes memory data) {\\r\\n        data = self.bytesData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (address data) {\\r\\n        data = self.addressData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA SETTERS **\\r\\n     **/\\r\\n    function writeUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _data\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function addUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _addend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] += _addend;\\r\\n    }\\r\\n\\r\\n    function subUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _minuend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] -= _minuend;\\r\\n    }\\r\\n\\r\\n    function writeBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        self.bytesData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function writeAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        address _data\\r\\n    ) internal {\\r\\n        self.addressData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb2fd773eb25be37401395117ee336c638bb83594297fa2300dfa7defa35bad49\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title GeodeUtils library\\r\\n * @notice Exclusively contains functions responsible for administration of DATASTORE,\\r\\n * including functions related to \\\"limited upgradability\\\" with Senate & Proposals.\\r\\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * @dev Admin functions are already protected\\r\\n * Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary GeodeUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event GovernanceTaxUpdated(uint256 newFee);\\r\\n    event MaxGovernanceTaxUpdated(uint256 newMaxFee);\\r\\n    event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n    event Proposed(\\r\\n        uint256 id,\\r\\n        address CONTROLLER,\\r\\n        uint256 TYPE,\\r\\n        uint256 deadline\\r\\n    );\\r\\n    event ProposalApproved(uint256 id);\\r\\n    event ElectorTypeSet(uint256 TYPE, bool isElector);\\r\\n    event Vote(uint256 proposalId, uint256 electorId);\\r\\n    event NewSenate(address senate, uint256 senateExpiry);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\\r\\n     *\\r\\n     * @notice A Proposal has 4 specs:\\r\\n     * @param TYPE: separates the proposals and related functionality between different ID types.\\r\\n     * * RESERVED TYPES on GeodeUtils:\\r\\n     * * * TYPE 0: inactive\\r\\n     * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\\r\\n     * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\\r\\n     * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\\r\\n     * this TYPE is now reserved.\\r\\n     *\\r\\n     * @param name: id is created by keccak(name, type)\\r\\n     *\\r\\n     * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\\r\\n     * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\r\\n     *\\r\\n     * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\r\\n     * * Expired proposals can not be approved by Senate\\r\\n     * * Expired proposals can not be overriden by new proposals\\r\\n     **/\\r\\n    struct Proposal {\\r\\n        address CONTROLLER;\\r\\n        uint256 TYPE;\\r\\n        bytes NAME;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Universe is A blockchain. In this case, it defines Ethereum\\r\\n     * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\r\\n     * Suggests updates, such as new planets, operators, comets, contract upgrades and new Senate, on the Ecosystem -without any permission to force them-\\r\\n     * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\\r\\n     * Note SENATE is proposed by Governance and voted by all elector types, operates if \\u230a2/3\\u230b approves.\\r\\n     * @param GOVERNANCE_TAX operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_TAX\\r\\n     * @param MAX_GOVERNANCE_TAX set by SENATE, limited by PERCENTAGE_DENOMINATOR\\r\\n     * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\r\\n     * @param approvedUpgrade only 1 implementation contract can be \\\"approved\\\" at any given time. @dev safe to set to address(0) after every upgrade\\r\\n     * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\r\\n     * @param _electorTypes only given types can vote @dev MUST only change during upgrades.\\r\\n     * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allow surpassing type checks to save gas cost\\r\\n     **/\\r\\n    struct Universe {\\r\\n        address SENATE;\\r\\n        address GOVERNANCE;\\r\\n        uint256 GOVERNANCE_TAX;\\r\\n        uint256 MAX_GOVERNANCE_TAX;\\r\\n        uint256 SENATE_EXPIRY;\\r\\n        address approvedUpgrade;\\r\\n        uint256 _electorCount;\\r\\n        mapping(uint256 => bool) _electorTypes;\\r\\n        mapping(uint256 => Proposal) _proposalForId;\\r\\n        uint256[7] __gap;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\r\\n    uint32 public constant MAX_PROPOSAL_DURATION = 2 weeks;\\r\\n    uint32 public constant MAX_SENATE_PERIOD = 365 days; // 1 year\\r\\n\\r\\n    modifier onlySenate(Universe storage self) {\\r\\n        require(msg.sender == self.SENATE, \\\"GeodeUtils: SENATE role needed\\\");\\r\\n        require(\\r\\n            block.timestamp < self.SENATE_EXPIRY,\\r\\n            \\\"GeodeUtils: SENATE not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance(Universe storage self) {\\r\\n        require(\\r\\n            msg.sender == self.GOVERNANCE,\\r\\n            \\\"GeodeUtils: GOVERNANCE role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"GeodeUtils: CONTROLLER role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE GETTERS **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @return address of SENATE\\r\\n     **/\\r\\n    function getSenate(Universe storage self) external view returns (address) {\\r\\n        return self.SENATE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return address of GOVERNANCE\\r\\n     **/\\r\\n    function getGovernance(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return self.GOVERNANCE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed\\r\\n     * @return active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @return MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getMaxGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.MAX_GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the expiration date of current SENATE as a timestamp\\r\\n     */\\r\\n    function getSenateExpiry(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.SENATE_EXPIRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE SETTERS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev can not set the fee more than MAX_GOVERNANCE_TAX\\r\\n     * @dev no need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already\\r\\n     * @return true if the operation was succesful, might be helpful when governance rights are distributed\\r\\n     */\\r\\n    function setGovernanceTax(Universe storage self, uint256 newFee)\\r\\n        external\\r\\n        onlyGovernance(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newFee <= self.MAX_GOVERNANCE_TAX,\\r\\n            \\\"GeodeUtils: cannot be more than MAX_GOVERNANCE_TAX\\\"\\r\\n        );\\r\\n\\r\\n        self.GOVERNANCE_TAX = newFee;\\r\\n\\r\\n        emit GovernanceTaxUpdated(newFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev can not set a fee more than PERCENTAGE_DENOMINATOR (100%)\\r\\n     * @return true if the operation was succesful\\r\\n     */\\r\\n    function setMaxGovernanceTax(Universe storage self, uint256 newMaxFee)\\r\\n        external\\r\\n        onlySenate(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newMaxFee <= PERCENTAGE_DENOMINATOR,\\r\\n            \\\"GeodeUtils: fee more than 100%\\\"\\r\\n        );\\r\\n\\r\\n        self.MAX_GOVERNANCE_TAX = newMaxFee;\\r\\n\\r\\n        emit MaxGovernanceTaxUpdated(newMaxFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** ID **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Some TYPEs may require permissionless creation. But to allow anyone to claim any ID,\\r\\n     * meaning malicious actors can claim names and operate pools to mislead people. To prevent this\\r\\n     * TYPEs will be considered during id generation.\\r\\n     */\\r\\n    function _generateId(bytes calldata _NAME, uint256 _TYPE)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(keccak256(abi.encodePacked(_NAME, _TYPE)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns address(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getCONTROLLERFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address) {\\r\\n        return DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns uint(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getTYPEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256) {\\r\\n        return DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns bytes(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getNAMEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (bytes memory) {\\r\\n        return DATASTORE.readBytesForId(id, \\\"NAME\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice only the current CONTROLLER can change\\r\\n     * @dev this operation can not be reverted by the old CONTROLLER\\r\\n     * @dev in case the current controller wants to remove the\\r\\n     * need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeIdCONTROLLER(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newCONTROLLER\\r\\n    ) external onlyController(DATASTORE, id) {\\r\\n        require(\\r\\n            newCONTROLLER != address(0),\\r\\n            \\\"GeodeUtils: CONTROLLER can not be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\r\\n\\r\\n        emit ControllerChanged(id, newCONTROLLER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** PROPOSALS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * CONTROLLER Proposals\\r\\n     */\\r\\n\\r\\n    function getProposal(Universe storage self, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (Proposal memory)\\r\\n    {\\r\\n        return self._proposalForId[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice a proposal can never be overriden.\\r\\n     * @notice DATASTORE(id) will not be updated until the proposal is approved.\\r\\n     * @dev refer to structure of Proposal for explanations of params\\r\\n     */\\r\\n    function newProposal(\\r\\n        Universe storage self,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _TYPE,\\r\\n        bytes calldata _NAME,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 id) {\\r\\n        require(\\r\\n            duration >= MIN_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration should be higher than MIN_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n        require(\\r\\n            duration <= MAX_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration exceeds MAX_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n\\r\\n        id = _generateId(_NAME, _TYPE);\\r\\n\\r\\n        require(\\r\\n            self._proposalForId[id].deadline == 0,\\r\\n            \\\"GeodeUtils: NAME already proposed\\\"\\r\\n        );\\r\\n\\r\\n        self._proposalForId[id] = Proposal({\\r\\n            CONTROLLER: _CONTROLLER,\\r\\n            TYPE: _TYPE,\\r\\n            NAME: _NAME,\\r\\n            deadline: block.timestamp + duration\\r\\n        });\\r\\n\\r\\n        emit Proposed(id, _CONTROLLER, _TYPE, block.timestamp + duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\\r\\n     *  any other addition should take place in Portal, as not related\\r\\n     *  @param id given ID proposal that has been approved by Senate\\r\\n     *  @dev Senate should not be able to approve approved proposals\\r\\n     *  @dev Senate should not be able to approve expired proposals\\r\\n     *  @dev Senate should not be able to approve SENATE proposals :)\\r\\n     */\\r\\n    function approveProposal(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external onlySenate(self) {\\r\\n        require(\\r\\n            self._proposalForId[id].deadline > block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[id].TYPE != 1,\\r\\n            \\\"GeodeUtils: Senate can not approve Senate Election\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            \\\"CONTROLLER\\\",\\r\\n            self._proposalForId[id].CONTROLLER\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"TYPE\\\", self._proposalForId[id].TYPE);\\r\\n        DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposalForId[id].NAME);\\r\\n\\r\\n        if (self._proposalForId[id].TYPE == 2) {\\r\\n            self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\\r\\n        }\\r\\n\\r\\n        if (self._electorTypes[DATASTORE.readUintForId(id, \\\"TYPE\\\")]) {\\r\\n            self._electorCount += 1;\\r\\n        }\\r\\n\\r\\n        DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\\r\\n        self._proposalForId[id].deadline = block.timestamp;\\r\\n\\r\\n        emit ProposalApproved(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * SENATE Proposals\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice only elector types can vote for senate\\r\\n     * @param _TYPE selected type\\r\\n     * @param isElector true if selected _type can vote for senate from now on\\r\\n     * @dev can not set with the same value again, preventing double increment/decrements\\r\\n     */\\r\\n    function setElectorType(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        bool isElector\\r\\n    ) external onlyGovernance(self) {\\r\\n        require(\\r\\n            self._electorTypes[_TYPE] != isElector,\\r\\n            \\\"GeodeUtils: type already _isElector\\\"\\r\\n        );\\r\\n        require(\\r\\n            _TYPE != 0 && _TYPE != 1 && _TYPE != 2 && _TYPE != 3,\\r\\n            \\\"GeodeUtils: 0, Senate, Upgrade cannot be elector\\\"\\r\\n        );\\r\\n\\r\\n        self._electorTypes[_TYPE] = isElector;\\r\\n\\r\\n        if (isElector) {\\r\\n            self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\r\\n        } else {\\r\\n            self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\r\\n        }\\r\\n\\r\\n        emit ElectorTypeSet(_TYPE, isElector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\r\\n     * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\\r\\n     * @notice id can not vote if:\\r\\n     * - approved already\\r\\n     * - proposal is expired\\r\\n     * - not its type is elector\\r\\n     * - not senate proposal\\r\\n     * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\r\\n     * @dev pins id as \\\"voted\\\" when approved\\r\\n     * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\r\\n     */\\r\\n    function approveSenate(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 proposalId,\\r\\n        uint256 electorId\\r\\n    ) external onlyController(DATASTORE, electorId) {\\r\\n        require(\\r\\n            self._proposalForId[proposalId].TYPE == 1,\\r\\n            \\\"GeodeUtils: NOT Senate Proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[proposalId].deadline >= block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._electorTypes[DATASTORE.readUintForId(electorId, \\\"TYPE\\\")],\\r\\n            \\\"GeodeUtils: NOT an elector\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(\\r\\n                proposalId,\\r\\n                DataStoreUtils.getKey(electorId, \\\"voted\\\")\\r\\n            ) == 0,\\r\\n            \\\" GeodeUtils: already approved\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(\\r\\n            proposalId,\\r\\n            DataStoreUtils.getKey(electorId, \\\"voted\\\"),\\r\\n            1\\r\\n        );\\r\\n        DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\r\\n\\r\\n        if (\\r\\n            DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\r\\n            ((self._electorCount + 1) * 2) / 3\\r\\n        ) {\\r\\n            self._proposalForId[proposalId].deadline = block.timestamp;\\r\\n            _setSenate(\\r\\n                self,\\r\\n                self._proposalForId[proposalId].CONTROLLER,\\r\\n                MAX_SENATE_PERIOD\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Vote(proposalId, electorId);\\r\\n    }\\r\\n\\r\\n    function _setSenate(\\r\\n        Universe storage self,\\r\\n        address _newSenate,\\r\\n        uint256 _senatePeriod\\r\\n    ) internal {\\r\\n        self.SENATE = _newSenate;\\r\\n        self.SENATE_EXPIRY = block.timestamp + _senatePeriod;\\r\\n\\r\\n        emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if it is allowed to change a specific contract with the current version.\\r\\n     * @return True if it is allowed by senate and false if not.\\r\\n     * @dev address(0) should return false\\r\\n     * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\r\\n     **/\\r\\n    function isUpgradeAllowed(\\r\\n        Universe storage self,\\r\\n        address proposedImplementation\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            self.approvedUpgrade != address(0) &&\\r\\n            self.approvedUpgrade == proposedImplementation;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f8d64ba8ba724d8076701f674b231fab74ba313c5b4e74b6450cd8546e7ad33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "Contracts relying on this library must initialize GeodeUtils.UniverseALL \"fee\" variables are limited by PERCENTAGE_DENOMINATOR = 100%Admin functions are already protected Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE) Note refer to DataStoreUtils before reviewing",
    "kind": "dev",
    "methods": {
      "approveProposal(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256)": {
        "details": "Senate should not be able to approve approved proposalsSenate should not be able to approve expired proposalsSenate should not be able to approve SENATE proposals :)",
        "params": {
          "id": "given ID proposal that has been approved by Senate"
        }
      },
      "approveSenate(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "pins id as \"voted\" when approvedincreases \"approvalCount\" of proposalId by 1 when approved",
        "params": {
          "electorId": "should have the voting rights, msg.sender should be the CONTROLLER of given ID"
        }
      },
      "changeIdCONTROLLER(DataStoreUtils.DataStore storage,uint256,address)": {
        "details": "this operation can not be reverted by the old CONTROLLERin case the current controller wants to remove the need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD"
      },
      "getCONTROLLERFromId(DataStoreUtils.DataStore storage,uint256)": {
        "details": "returns address(0) for empty ids, mandatory"
      },
      "getGovernance(GeodeUtils.Universe storage)": {
        "returns": {
          "_0": "address of GOVERNANCE*"
        }
      },
      "getGovernanceTax(GeodeUtils.Universe storage)": {
        "returns": {
          "_0": "active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX"
        }
      },
      "getMaxGovernanceTax(GeodeUtils.Universe storage)": {
        "returns": {
          "_0": "MAX_GOVERNANCE_TAX"
        }
      },
      "getNAMEFromId(DataStoreUtils.DataStore storage,uint256)": {
        "details": "returns bytes(0) for empty ids, mandatory"
      },
      "getSenate(GeodeUtils.Universe storage)": {
        "returns": {
          "_0": "address of SENATE*"
        }
      },
      "getSenateExpiry(GeodeUtils.Universe storage)": {
        "returns": {
          "_0": "the expiration date of current SENATE as a timestamp"
        }
      },
      "getTYPEFromId(DataStoreUtils.DataStore storage,uint256)": {
        "details": "returns uint(0) for empty ids, mandatory"
      },
      "isUpgradeAllowed(GeodeUtils.Universe storage,address)": {
        "details": "address(0) should return falseDO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022*",
        "returns": {
          "_0": "True if it is allowed by senate and false if not."
        }
      },
      "newProposal(GeodeUtils.Universe storage,address,uint256,bytes,uint256)": {
        "details": "refer to structure of Proposal for explanations of params"
      },
      "setElectorType(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,bool)": {
        "details": "can not set with the same value again, preventing double increment/decrements",
        "params": {
          "_TYPE": "selected type",
          "isElector": "true if selected _type can vote for senate from now on"
        }
      },
      "setGovernanceTax(GeodeUtils.Universe storage,uint256)": {
        "details": "can not set the fee more than MAX_GOVERNANCE_TAXno need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already",
        "returns": {
          "_0": "true if the operation was succesful, might be helpful when governance rights are distributed"
        }
      },
      "setMaxGovernanceTax(GeodeUtils.Universe storage,uint256)": {
        "details": "can not set a fee more than PERCENTAGE_DENOMINATOR (100%)",
        "returns": {
          "_0": "true if the operation was succesful"
        }
      }
    },
    "title": "GeodeUtils library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PERCENTAGE_DENOMINATOR()": {
        "notice": "PERCENTAGE_DENOMINATOR represents 100%"
      },
      "approveProposal(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256)": {
        "notice": "type specific changes for reserved_types(1,2,3) are implemented here,  any other addition should take place in Portal, as not related"
      },
      "approveSenate(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "Proposed CONTROLLER is the new Senate after 2/3 of the electors approved NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properlyid can not vote if: - approved already - proposal is expired - not its type is elector - not senate proposal"
      },
      "changeIdCONTROLLER(DataStoreUtils.DataStore storage,uint256,address)": {
        "notice": "only the current CONTROLLER can change"
      },
      "getGovernanceTax(GeodeUtils.Universe storage)": {
        "notice": "MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed"
      },
      "getProposal(GeodeUtils.Universe storage,uint256)": {
        "notice": "CONTROLLER Proposals"
      },
      "isUpgradeAllowed(GeodeUtils.Universe storage,address)": {
        "notice": "Get if it is allowed to change a specific contract with the current version."
      },
      "newProposal(GeodeUtils.Universe storage,address,uint256,bytes,uint256)": {
        "notice": "a proposal can never be overriden.DATASTORE(id) will not be updated until the proposal is approved."
      },
      "setElectorType(GeodeUtils.Universe storage,DataStoreUtils.DataStore storage,uint256,bool)": {
        "notice": "only elector types can vote for senate"
      }
    },
    "notice": "Exclusively contains functions responsible for administration of DATASTORE, including functions related to \"limited upgradability\" with Senate & Proposals.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}