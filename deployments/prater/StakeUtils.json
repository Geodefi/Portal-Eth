{
  "address": "0xa631e0276743450e41476a1A25CA97ed20B6fEd3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "BeaconStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "OperatorApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "DEFAULT_gETH_INTERFACE_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "DEFAULT_DWP_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "DEFAULT_LP_TOKEN_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "MAX_MAINTAINER_FEE_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "BOOSTRAP_PERIOD_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "PERIOD_PRICE_INCREASE_LIMIT_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "PERIOD_PRICE_DECREASE_LIMIT_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "COMET_TAX_",
          "type": "uint256"
        }
      ],
      "name": "ParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "ProposeStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UnpausedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "UnstakeSignal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "ValidatorPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalBoost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalBoostChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOST_SWITCH_LATENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNORABLE_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x700e35e9b5ac5a0f010112d80640811b722d0317086c176fcc2d3e7d6e5ca9d3",
  "receipt": {
    "to": null,
    "from": "0x5297F1EA60D4b60E85eF323DECEc1A907295B6E6",
    "contractAddress": "0xa631e0276743450e41476a1A25CA97ed20B6fEd3",
    "transactionIndex": 26,
    "gasUsed": "5285906",
    "logsBloom": "0x
    "blockHash": "0x77175fefb619b21d7f57742b2df3e4a3486ff416c56889820d1e3728d0a0d02f",
    "transactionHash": "0x700e35e9b5ac5a0f010112d80640811b722d0317086c176fcc2d3e7d6e5ca9d3",
    "logs": [],
    "blockNumber": 7844399,
    "cumulativeGasUsed": "13035608",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f205d1559b0be4f8c26bfc7e8ad11fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"BeaconStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"OperatorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DEFAULT_gETH_INTERFACE_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DEFAULT_DWP_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DEFAULT_LP_TOKEN_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MAX_MAINTAINER_FEE_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BOOSTRAP_PERIOD_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERIOD_PRICE_INCREASE_LIMIT_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERIOD_PRICE_DECREASE_LIMIT_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"COMET_TAX_\",\"type\":\"uint256\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"ProposeStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnpausedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"UnstakeSignal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ValidatorPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBoost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBoostChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_SWITCH_LATENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNORABLE_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"Contracts relying on this library must initialize StakeUtils.StakePoolALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR. * For ex, when fee is equal to PERCENTAGE_DENOMINATOR/2, it means 50% fee Note refer to DataStoreUtils before reviewing Note refer to MaintainerUtilsLib before reviewing Note refer to OracleUtilsLib before reviewing Note *suggested* refer to GeodeUtils before reviewing Note beware of the staking pool and operator implementations: Type 4 stands for Operators: They maintain Beacon Chain Validators on behalf of Planets and Comets * only if they are allowed to Operators have properties like fee(as a percentage), maintainer. Type 5 stands for Public Staking Pool (Planets): * Every Planet is also an Operator by design. * * Planets inherits Operator functionalities and parameters, with additional * * properties related to miniGovernances and staking pools - surplus, secured, withdrawalPool etc. * ID of a pool represents an id of gETH. * Creation of staking pools are not permissionless but the usage of it is. * * Meaning Everyone can stake and unstake using public pools. Type 6 stands for Private Staking Pools (Comets): * It is permissionless, one can directly create a Comet by simply * * choosing a name and sending MIN_AMOUNT which is expected to be 32 ether. * GeodeUtils generates IDs based on types, meaning same name can be used for a Planet and a Comet simultaneously. * The creation process is permissionless but staking is not. * * Meaning Only Comet's maintainer can stake but everyone can unstake * In Comets, there is a Withdrawal Queue instead of DWP. * NOT IMPLEMENTED YET Type 11 stands for a new Mini Governance implementation id: * like always CONTROLLER is the implementation contract position * requires the approval of Senate * Pools are in \\\"Isolation Mode\\\" until their mini governance is upgraded to given proposal ID. * * Meaning, no more Depositing or Staking can happen.\",\"kind\":\"dev\",\"methods\":{\"approveOperator(DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"details\":\"If planet decreases the approved validator count, below current running validator, operator can only withdraw until to new allowence.only maintainer of _planetId can approve an Operator\",\"params\":{\"allowance\":\"the MAX number of validators that can be created by the Operator for a given Planet\",\"operatorId\":\"the id of the Operator to allow them create validators for a given Planet\",\"poolId\":\"the gETH id of the Planet, only Maintainer can call this function\"}},\"beaconStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,bytes[])\":{\"details\":\"To save gas cost, pubkeys should be arranged by planedIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from planet1  pk4, pk5 from planet2  pk6 from planet3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\"}},\"blameOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)\":{\"details\":\"anyone can call this functionif operator has given enough allowence, they can rotate the validators to avoid being prisoned\"},\"canDeposit(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"minting is paused when stakePaused == 1, meaning true.\"},\"changePoolMaintainer(DataStoreUtils.DataStore storage,uint256,bytes,bytes32,address)\":{\"details\":\"requires the old Password and a new passwordHash, this saves the MiniGovernance contract from Double Horn Attack: when Both Senate and Governance is malicious.currently this is enough to ensure the future implementations will improve the miniGovernance security, * we are also working on improving the Isolation Mode, which will allow Portal-less withdrawals for all pool types\"},\"decreaseMaintainerWallet(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"only maintainer can decrease the balance directly, * other than that it can be used to propose Validatorsif a maintainer is in prison, it can not decrease the wallet\"},\"depositPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"withdrawal pool parameter // debt  msg.value // 100   10  => buyback // 100   100 => buyback // 10    100 => buyback + mint // 0     x   => mint\",\"mingETH\":\"withdrawal pool parameter\",\"planetId\":\"id of the staking pool, withdrawal pool and gETH to be used.\"}},\"fetchUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],uint256[],bool[])\":{\"details\":\"although OnlyOracle, logically this has nothing to do with Telescope. * So we are keeping it here.operator is prisoned if: 1. withdrawn without signalled, being sneaky. in such case they also doesn't receive the boost 2. signalled without withdrawal, deceiving other operators\",\"params\":{\"isExit\":\"according to eip-4895, there can be multiple ways to distriute the rewards * and not all of them requires exit. Even in such cases reward can be catched from * withdrawal credential and distributed.\"}},\"increaseMaintainerWallet(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"only maintainer can increase the balance directly, * other than that it also collects validator rewards\"},\"initiateOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,uint256)\":{\"details\":\"requires ID to be approved as a node operator with a specific CONTROLLER\",\"params\":{\"_validatorPeriod\":\"the expected maximum staking interval Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()\"}},\"initiatePlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,string[2])\":{\"details\":\"requires ID to be approved as a planet with a specific CONTROLLER\",\"params\":{\"_interfaceSpecs\":\"0: interface name, 1: interface symbol, currently ERC20 specs.\"}},\"operatorAllowance(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"an operator can not create new validators if: * 1. allowence is 0 (zero) * 2. lower than the current (proposed + active) number of validators * But if operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowenceallowence doesn't change when new validators created or old ones are unstaked.\",\"returns\":{\"allowance\":\"allowance\"}},\"pauseStakingForPool(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"pausing requires pool to be NOT paused already\"},\"proposeStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],bytes[])\":{\"details\":\"DEPOSIT_AMOUNT_PRESTAKE = 1 ether, which is the minimum number to create validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within maintainerWallet.Max number of validators to propose is MAX_DEPOSITS_PER_CALL (currently 64)\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"poolId\":\"the id of the staking pool whose TYPE can be 5 or 6.\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that will be proposed\",\"signatures\":\"Array of BLS12-381 signatures of the validators that will be proposed\"}},\"releasePrisoned(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"in different situations such as a faulty improsenment or coordinated testing periods * Governance can vote on releasing the prisonersonlyGovernance\"},\"setInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,address)\":{\"details\":\"every interface has a unique index within \\\"interfaces\\\" dynamic array. * even if unsetted, it just replaces the implementation with address(0) for obvious security reasons\",\"params\":{\"_interface\":\"address of the new gETH ERC1155 interface for given ID\"}},\"setMiniGovernanceVersion(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"CONTROLLER of the proposal id represents the implementation address\"},\"signalUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes[])\":{\"details\":\"to maintain the health of Geode Universe, we should protect the race conditions. * opeators should know when others are unstaking so they don't spend money for no boost.\"},\"switchMaintainerFee(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"there is a 7 days delay before the new fee is activated, * this protect the pool maintainers from making bad operator choices\",\"params\":{\"newFee\":\"new fee percentage in terms of PERCENTAGE_DENOMINATOR, reverts if given more than MAX_MAINTAINER_FEE\"}},\"switchWithdrawalBoost(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"to prevent malicious swings in the withdrawal boost that can harm the competition, Boost changes is also has a delay.\",\"params\":{\"withdrawalBoost\":\"the percentage of arbitrague that will be shared with Operator on Unstake. Can be used to incentivise Unstakes in case of depeg\"}},\"unpauseStakingForPool(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"unpausing requires pool to be paused already\"},\"unsetInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"every interface has a unique interface index within interfaces dynamic array. * even if unsetted, it just replaces the implementation with address(0) for obvious security reasonsold Interfaces will still be active if not unsetted\",\"params\":{\"index\":\"index of given interface at the \\\"interfaces\\\" dynamic array\"}},\"withdrawPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"TX is expected to revert by Swap.sol if not meet\",\"gEthToWithdraw\":\"amount of g-derivative that should be withdrawn\",\"minETH\":\"TX is expected to revert by Swap.sol if not meet\"}}},\"title\":\"StakeUtils library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BOOST_SWITCH_LATENCY()\":{\"notice\":\"when a maintainer changes the withdrawalBoost, it is effective after a delay\"},\"IGNORABLE_DEBT()\":{\"notice\":\"ignoring any buybacks if the DWP has a low debt\"},\"MIN_VALIDATOR_PERIOD()\":{\"notice\":\"limiting the operator.validatorPeriod, currently around 5 years\"},\"PERCENTAGE_DENOMINATOR()\":{\"notice\":\"PERCENTAGE_DENOMINATOR represents 100%\"},\"allInterfaces(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"lists all interfaces, unsetted interfaces will return address(0)\"},\"approveOperator(DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"notice\":\"To allow a Node Operator run validators for your Planet with Max number of validators. * This number can be set again at any given point in the future.\"},\"beaconStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,bytes[])\":{\"notice\":\"Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to MaintainerWallet.\"},\"blameOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)\":{\"notice\":\"allows improsening an Operator if the validator have not been exited until expectedExit\"},\"canDeposit(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"checks if staking is allowed in a pool. * when a pool is paused for staking NO new funds can be minted.staking is not allowed if: 1. MiniGovernance is in Isolation Mode, this means it is not upgraded to current version 2. Staking is simply paused by the Pool maintainer\"},\"canStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)\":{\"notice\":\"external function to check if a validator can use planet funds\"},\"changeOperatorMaintainer(DataStoreUtils.DataStore storage,uint256,address)\":{\"notice\":\"changes maintainer of the given operator (TYPE 4)\"},\"changePoolMaintainer(DataStoreUtils.DataStore storage,uint256,bytes,bytes32,address)\":{\"notice\":\"changes pool maintainer  (TYPE 5-6) + conducts a Senate change on miniGovernance\"},\"depositPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)\":{\"notice\":\"Allowing users to deposit into a public staking pool. * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\"},\"fetchUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],uint256[],bool[])\":{\"notice\":\"Operator finalizing an Unstake event by calling Telescope's multisig: * distributing fees + boost * distributes rewards by burning the derivative * does a buyback if necessary * putting the extra within surplus.\"},\"initiateOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,uint256)\":{\"notice\":\"initiates ID as an node operator\"},\"initiatePlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,string[2])\":{\"notice\":\"initiates ID as a planet (public pool)\"},\"operatorAllowance(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"*operatorAllowence is the number of validators that the given Operator is allowed to create on behalf of the Planet\"},\"proposeStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],bytes[])\":{\"notice\":\"Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated for some time, * it is optimistically allowed to take funds from staking pools.\"},\"releasePrisoned(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"releases an imprisoned operator immidately\"},\"setInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,address)\":{\"notice\":\"sets a erc1155Interface for gETH\"},\"setMiniGovernanceVersion(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"called when a proposal(TYPE=11) for a new MiniGovernance is approved by Senate\"},\"signalUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes[])\":{\"notice\":\"allows giving a unstake signal, meaning validator has been exited. * And boost can be claimed upon arrival of the funds.\"},\"unsetInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"unsets a erc1155Interface for gETH with given index -acquired from allInterfaces()-\"},\"updateValidatorPeriod(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"updates validatorPeriod for given operator, limited by MAX_VALIDATOR_PERIOD\"},\"withdrawPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256,uint256)\":{\"notice\":\"withdraw funds from Dynamic Staking Pool (Public Staking Pool + DWP) * If not in Boostrap Period, first checks the surplus, than swaps from DWP to create debt\"}},\"notice\":\"Exclusively contains functions related to ETH Liquid Staking designbiggest part of the functionality is related to Dynamic Staking Pools which relies on continuous buybacks (DWP) to maintain the price health with debt/surplus calculations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/StakeUtilsLib.sol\":\"StakeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0edeb16b9821ae2b16e9d69c383b38d3ad2fbb3e0c06cf809a0786d96e602551\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"contracts/Portal/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n            // Store the length of the first bytes array at the beginning of\\r\\n            // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n            // Maintain a memory counter for the current write location in the\\r\\n            // temp bytes array by adding the 32 bytes for the array length to\\r\\n            // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n            // Stop copying when the memory counter reaches the length of the\\r\\n            // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                // Initialize a copy counter to the start of the _preBytes data,\\r\\n                // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n                // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Add the length of _postBytes to the current length of tempBytes\\r\\n            // and store it as the new length in the first 32 bytes of the\\r\\n            // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n            // Move the memory counter back from a multiple of 0x20 to the\\r\\n            // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n            // Stop copying when the memory counter reaches the new combined\\r\\n            // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Update the free-memory pointer by padding our last write location\\r\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n            // next 32 byte block, then round down to the nearest multiple of\\r\\n            // 32. If the sum of the length of the two arrays is zero then add\\r\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(\\r\\n                0x40,\\r\\n                and(\\r\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n                    not(31) // Round down to the nearest 32 bytes.\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n    {\\r\\n        assembly {\\r\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n            // of the array. (We don't need to use the offset into the slot\\r\\n            // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Arrays of 31 bytes or less have an even value in their slot,\\r\\n            // while longer arrays have an odd value. The actual length is\\r\\n            // the slot divided by two for odd values, and the lowest order\\r\\n            // byte divided by two for even values.\\r\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n            // two to get the length. If the slot is odd, bitwise and the slot\\r\\n            // with -1 and divide by two.\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n                // Since the new array still fits in the slot, we just need to\\r\\n                // update the contents of the slot.\\r\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                    _preBytes.slot,\\r\\n                    // all the modifications to the slot are inside this\\r\\n                    // next block\\r\\n                    add(\\r\\n                        // we can just add to the slot contents because the\\r\\n                        // bytes we want to change are the LSBs\\r\\n                        fslot,\\r\\n                        add(\\r\\n                            mul(\\r\\n                                div(\\r\\n                                    // load the bytes from memory\\r\\n                                    mload(add(_postBytes, 0x20)),\\r\\n                                    // zero all bytes to the right\\r\\n                                    exp(0x100, sub(32, mlength))\\r\\n                                ),\\r\\n                                // and now shift left the number of bytes to\\r\\n                                // leave space for the length in the slot\\r\\n                                exp(0x100, sub(32, newlength))\\r\\n                            ),\\r\\n                            // increase length by the double of the memory\\r\\n                            // bytes length\\r\\n                            mul(mlength, 2)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n                // The stored value fits in the slot, but the combined value\\r\\n                // will exceed it.\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // The contents of the _postBytes array start 32 bytes into\\r\\n                // the structure. Our first read should obtain the `submod`\\r\\n                // bytes that can fit into the unused space in the last word\\r\\n                // of the stored array. To get this, we read 32 bytes starting\\r\\n                // from `submod`, so the data we read overlaps with the array\\r\\n                // contents by `submod` bytes. Masking the lowest-order\\r\\n                // `submod` bytes allows us to add that value directly to the\\r\\n                // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                    sc,\\r\\n                    add(\\r\\n                        and(\\r\\n                            fslot,\\r\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                        ),\\r\\n                        and(mload(mc), mask)\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // Copy over the first `submod` bytes of the new data as in\\r\\n                // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(\\r\\n                    add(tempBytes, lengthmod),\\r\\n                    mul(0x20, iszero(lengthmod))\\r\\n                )\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(\\r\\n                        add(\\r\\n                            add(_bytes, lengthmod),\\r\\n                            mul(0x20, iszero(lengthmod))\\r\\n                        ),\\r\\n                        _start\\r\\n                    )\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(\\r\\n                mload(add(add(_bytes, 0x20), _start)),\\r\\n                0x1000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint16)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint64)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint128)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n                // cb is a circuit breaker in the for loop since there's\\r\\n                //  no said feature for inline assembly loops\\r\\n                // cb = 1 - don't breaker\\r\\n                // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                        // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(\\r\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\r\\n                2\\r\\n            )\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n                // slength can contain both the length and contents of the array\\r\\n                // if length < 32 bytes so let's prepare for that\\r\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                        // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                            // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                        // cb is a circuit breaker in the for loop since there's\\r\\n                        //  no said feature for inline assembly loops\\r\\n                        // cb = 1 - don't breaker\\r\\n                        // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                        // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                        // the next line is the loop condition:\\r\\n                        // while(uint256(mc < end) + cb == 2)\\r\\n                        for {\\r\\n\\r\\n                        } eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                                // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x970ae3a76009f15ecde277feeaa372ec3dadabcb753d33fcae055dd0f9e2e30f\",\"license\":\"Unlicense\"},\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title Storage Management Library for dynamic structs, based on data types and ids\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs*.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n    /**\\r\\n     * @notice Main Struct for reading and writing data to storage for given (id, key) pairs\\r\\n     * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n     * @param uintData keccak(id, key) =>  returns uint256\\r\\n     * @param bytesData keccak(id, key) => returns bytes\\r\\n     * @param addressData keccak(id, key) =>  returns address\\r\\n     * @dev any other storage type can be expressed as bytes\\r\\n     */\\r\\n    struct DataStore {\\r\\n        mapping(uint256 => uint256[]) allIdsByType;\\r\\n        mapping(bytes32 => uint256) uintData;\\r\\n        mapping(bytes32 => bytes) bytesData;\\r\\n        mapping(bytes32 => address) addressData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              ** HELPER **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @notice hashes given id with parameter to be used as key in getters and setters\\r\\n     * @return key bytes32 hash of id and parameter to be stored\\r\\n     **/\\r\\n    function getKey(uint256 _id, string memory _param)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 key)\\r\\n    {\\r\\n        key = bytes32(keccak256(abi.encodePacked(_id, _param)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA GETTERS **\\r\\n     **/\\r\\n\\r\\n    function readUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (uint256 data) {\\r\\n        data = self.uintData[keccak256(abi.encodePacked(_id, _key))];\\r\\n    }\\r\\n\\r\\n    function readBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (bytes memory data) {\\r\\n        data = self.bytesData[keccak256(abi.encodePacked(_id, _key))];\\r\\n    }\\r\\n\\r\\n    function readAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (address data) {\\r\\n        data = self.addressData[keccak256(abi.encodePacked(_id, _key))];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA SETTERS **\\r\\n     **/\\r\\n    function writeUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _data\\r\\n    ) internal {\\r\\n        self.uintData[keccak256(abi.encodePacked(_id, _key))] = _data;\\r\\n    }\\r\\n\\r\\n    function addUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _addend\\r\\n    ) internal {\\r\\n        self.uintData[keccak256(abi.encodePacked(_id, _key))] += _addend;\\r\\n    }\\r\\n\\r\\n    function subUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _minuend\\r\\n    ) internal {\\r\\n        self.uintData[keccak256(abi.encodePacked(_id, _key))] -= _minuend;\\r\\n    }\\r\\n\\r\\n    function writeBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        self.bytesData[keccak256(abi.encodePacked(_id, _key))] = _data;\\r\\n    }\\r\\n\\r\\n    function writeAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        address _data\\r\\n    ) internal {\\r\\n        self.addressData[keccak256(abi.encodePacked(_id, _key))] = _data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38c407b0287f398648711dc097fb8ee27cdc40fdfea1b56acd08ebfc35137c65\",\"license\":\"MIT\"},\"contracts/Portal/utils/DepositContractUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\r\\nimport \\\"../helpers/BytesLib.sol\\\";\\r\\n\\r\\nlibrary DepositContractUtils {\\r\\n    IDepositContract internal constant DEPOSIT_CONTRACT =\\r\\n        IDepositContract(0x00000000219ab540356cBB839Cbe05303d7705Fa);\\r\\n    uint256 internal constant PUBKEY_LENGTH = 48;\\r\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\r\\n    uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\r\\n    uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\r\\n    uint256 internal constant MAX_DEPOSITS_PER_CALL = 64;\\r\\n\\r\\n    /**\\r\\n     * @dev Padding memory array with zeroes up to 64 bytes on the right\\r\\n     * @param _b Memory array of size 32 .. 64\\r\\n     */\\r\\n    function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\r\\n        assert(_b.length >= 32 && _b.length <= 64);\\r\\n        if (64 == _b.length) return _b;\\r\\n\\r\\n        bytes memory zero32 = new bytes(32);\\r\\n        assembly {\\r\\n            mstore(add(zero32, 0x20), 0)\\r\\n        }\\r\\n\\r\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\r\\n        else\\r\\n            return\\r\\n                BytesLib.concat(\\r\\n                    _b,\\r\\n                    BytesLib.slice(zero32, 0, uint256(64 - _b.length))\\r\\n                );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\r\\n     * @param _value Number less than `2**64` for compatibility reasons\\r\\n     */\\r\\n    function _toLittleEndian64(uint256 _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = 0;\\r\\n        uint256 temp_value = _value;\\r\\n        for (uint256 i = 0; i < 8; ++i) {\\r\\n            result = (result << 8) | (temp_value & 0xFF);\\r\\n            temp_value >>= 8;\\r\\n        }\\r\\n\\r\\n        assert(0 == temp_value); // fully converted\\r\\n        result <<= (24 * 8);\\r\\n    }\\r\\n\\r\\n    function _getDepositDataRoot(\\r\\n        bytes memory _pubkey,\\r\\n        bytes memory _withdrawalCredentials,\\r\\n        bytes memory _signature,\\r\\n        uint256 _stakeAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(\\r\\n            _stakeAmount >= 1 ether,\\r\\n            \\\"DepositContract: deposit value too low\\\"\\r\\n        );\\r\\n        require(\\r\\n            _stakeAmount % 1 gwei == 0,\\r\\n            \\\"DepositContract: deposit value not multiple of gwei\\\"\\r\\n        );\\r\\n\\r\\n        uint256 deposit_amount = _stakeAmount / 1 gwei;\\r\\n        bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\r\\n        bytes32 signatureRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\r\\n                sha256(\\r\\n                    _pad64(\\r\\n                        BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 depositDataRoot = sha256(\\r\\n            abi.encodePacked(\\r\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\r\\n                sha256(\\r\\n                    abi.encodePacked(\\r\\n                        _toLittleEndian64(deposit_amount),\\r\\n                        signatureRoot\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return depositDataRoot;\\r\\n    }\\r\\n\\r\\n    function addressToWC(address wcAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        uint256 w = 1 << 248;\\r\\n\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                bytes32(w) | bytes32(uint256(uint160(address(wcAddress))))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function depositValidator(\\r\\n        bytes calldata pubkey,\\r\\n        bytes memory withdrawalCredential,\\r\\n        bytes memory signature,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        DEPOSIT_CONTRACT.deposit{value: amount}(\\r\\n            pubkey,\\r\\n            withdrawalCredential,\\r\\n            signature,\\r\\n            _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd674c0b2060717152fad859c5c74de6433e626908d4511346d333687d062281d\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title GeodeUtils library\\r\\n * @notice Exclusively contains functions responsible for administration of DATASTORE,\\r\\n * including functions related to \\\"limited upgradability\\\" with Senate & proposals.\\r\\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * @dev Admin functions are already protected\\r\\n * Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary GeodeUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event GovernanceTaxUpdated(uint256 newFee);\\r\\n    event MaxGovernanceTaxUpdated(uint256 newMaxFee);\\r\\n    event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n    event Proposed(\\r\\n        uint256 id,\\r\\n        address CONTROLLER,\\r\\n        uint256 TYPE,\\r\\n        uint256 deadline\\r\\n    );\\r\\n    event ProposalApproved(uint256 id);\\r\\n    event ElectorTypeSet(uint256 TYPE, bool isElector);\\r\\n    event Vote(uint256 proposalId, uint256 electorId);\\r\\n    event NewSenate(address senate, uint256 senateExpiry);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\\r\\n     *\\r\\n     * @notice A Proposal has 4 specs:\\r\\n     * @param TYPE: separates the proposals and related functionality between different ID types.\\r\\n     * * RESERVED TYPES on GeodeUtils:\\r\\n     * * * TYPE 0: inactive\\r\\n     * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\\r\\n     * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\\r\\n     * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\\r\\n     * this TYPE is now reserved.\\r\\n     *\\r\\n     * @param name: id is created by keccak(name, type)\\r\\n     *\\r\\n     * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\\r\\n     * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\r\\n     *\\r\\n     * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\r\\n     * * Expired proposals can not be approved by Senate\\r\\n     * * Expired proposals can not be overriden by new proposals\\r\\n     **/\\r\\n    struct Proposal {\\r\\n        address CONTROLLER;\\r\\n        uint256 TYPE;\\r\\n        bytes NAME;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Universe is A blockchain. In this case, it defines Ethereum\\r\\n     * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\r\\n     * Suggests updates, such as new planets, operators, comets, contract upgrades and new Senate, on the Ecosystem -without any permission to force them-\\r\\n     * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\\r\\n     * Note SENATE is proposed by Governance and voted by all elector types, operates if \\u230a2/3\\u230b approves.\\r\\n     * @param GOVERNANCE_TAX operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_TAX\\r\\n     * @param MAX_GOVERNANCE_TAX set by SENATE, limited by PERCENTAGE_DENOMINATOR\\r\\n     * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\r\\n     * @param approvedUpgrade only 1 implementation contract can be \\\"approved\\\" at any given time. @dev safe to set to address(0) after every upgrade\\r\\n     * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\r\\n     * @param _electorTypes only given types can vote @dev MUST only change during upgrades.\\r\\n     * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allow surpassing type checks to save gas cost\\r\\n     **/\\r\\n    struct Universe {\\r\\n        address SENATE;\\r\\n        address GOVERNANCE;\\r\\n        uint256 GOVERNANCE_TAX;\\r\\n        uint256 MAX_GOVERNANCE_TAX;\\r\\n        uint256 SENATE_EXPIRY;\\r\\n        address approvedUpgrade;\\r\\n        uint256 _electorCount;\\r\\n        mapping(uint256 => bool) _electorTypes;\\r\\n        mapping(uint256 => Proposal) _proposalForId;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\r\\n    uint32 public constant MAX_PROPOSAL_DURATION = 2 weeks;\\r\\n    uint32 public constant MAX_SENATE_PERIOD = 365 days; // 1 year\\r\\n\\r\\n    modifier onlySenate(Universe storage self) {\\r\\n        require(msg.sender == self.SENATE, \\\"GeodeUtils: SENATE role needed\\\");\\r\\n        require(\\r\\n            block.timestamp < self.SENATE_EXPIRY,\\r\\n            \\\"GeodeUtils: SENATE not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance(Universe storage self) {\\r\\n        require(\\r\\n            msg.sender == self.GOVERNANCE,\\r\\n            \\\"GeodeUtils: GOVERNANCE role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"GeodeUtils: CONTROLLER role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE GETTERS **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @return address of SENATE\\r\\n     **/\\r\\n    function getSenate(Universe storage self) external view returns (address) {\\r\\n        return self.SENATE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return address of GOVERNANCE\\r\\n     **/\\r\\n    function getGovernance(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return self.GOVERNANCE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed\\r\\n     * @return active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @return MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getMaxGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.MAX_GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the expiration date of current SENATE as a timestamp\\r\\n     */\\r\\n    function getSenateExpiry(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.SENATE_EXPIRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE SETTERS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev can not set the fee more than MAX_GOVERNANCE_TAX\\r\\n     * @dev no need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already\\r\\n     * @return true if the operation was succesful, might be helpful when governance rights are distributed\\r\\n     */\\r\\n    function setGovernanceTax(Universe storage self, uint256 newFee)\\r\\n        external\\r\\n        onlyGovernance(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newFee <= self.MAX_GOVERNANCE_TAX,\\r\\n            \\\"GeodeUtils: cannot be more than MAX_GOVERNANCE_TAX\\\"\\r\\n        );\\r\\n\\r\\n        self.GOVERNANCE_TAX = newFee;\\r\\n\\r\\n        emit GovernanceTaxUpdated(newFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev can not set a fee more than PERCENTAGE_DENOMINATOR (100%)\\r\\n     * @return true if the operation was succesful\\r\\n     */\\r\\n    function setMaxGovernanceTax(Universe storage self, uint256 newMaxFee)\\r\\n        external\\r\\n        onlySenate(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newMaxFee <= PERCENTAGE_DENOMINATOR,\\r\\n            \\\"GeodeUtils: fee more than 100%\\\"\\r\\n        );\\r\\n\\r\\n        self.MAX_GOVERNANCE_TAX = newMaxFee;\\r\\n\\r\\n        emit MaxGovernanceTaxUpdated(newMaxFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** ID **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Some TYPEs may require permissionless creation. But to allow anyone to claim any ID,\\r\\n     * meaning malicious actors can claim names and operate pools to mislead people. To prevent this\\r\\n     * TYPEs will be considered during id generation.\\r\\n     */\\r\\n    function _generateId(bytes calldata _NAME, uint256 _TYPE)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(keccak256(abi.encodePacked(_NAME, _TYPE)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns address(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getCONTROLLERFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address) {\\r\\n        return DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns uint(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getTYPEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256) {\\r\\n        return DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns bytes(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getNAMEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (bytes memory) {\\r\\n        return DATASTORE.readBytesForId(id, \\\"NAME\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice only the current CONTROLLER can change\\r\\n     * @dev this operation can not be reverted by the old CONTROLLER\\r\\n     * @dev in case the current controller wants to remove the\\r\\n     * need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeIdCONTROLLER(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newCONTROLLER\\r\\n    ) external onlyController(DATASTORE, id) {\\r\\n        require(\\r\\n            newCONTROLLER != address(0),\\r\\n            \\\"GeodeUtils: CONTROLLER can not be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\r\\n\\r\\n        emit ControllerChanged(id, newCONTROLLER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** PROPOSALS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * CONTROLLER Proposals\\r\\n     */\\r\\n\\r\\n    function getProposal(Universe storage self, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (Proposal memory)\\r\\n    {\\r\\n        return self._proposalForId[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice a proposal can never be overriden.\\r\\n     * @notice DATASTORE(id) will not be updated until the proposal is approved.\\r\\n     * @dev refer to structure of Proposal for explanations of params\\r\\n     */\\r\\n    function newProposal(\\r\\n        Universe storage self,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _TYPE,\\r\\n        bytes calldata _NAME,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 id) {\\r\\n        require(\\r\\n            duration >= MIN_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration should be higher than MIN_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n        require(\\r\\n            duration <= MAX_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration exceeds MAX_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n\\r\\n        id = _generateId(_NAME, _TYPE);\\r\\n\\r\\n        require(\\r\\n            self._proposalForId[id].deadline == 0,\\r\\n            \\\"GeodeUtils: NAME already proposed\\\"\\r\\n        );\\r\\n\\r\\n        self._proposalForId[id] = Proposal({\\r\\n            CONTROLLER: _CONTROLLER,\\r\\n            TYPE: _TYPE,\\r\\n            NAME: _NAME,\\r\\n            deadline: block.timestamp + duration\\r\\n        });\\r\\n\\r\\n        emit Proposed(id, _CONTROLLER, _TYPE, block.timestamp + duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\\r\\n     *  any other addition should take place in Portal, as not related\\r\\n     *  @param id given ID proposal that has been approved by Senate\\r\\n     *  @dev Senate should not be able to approve approved proposals\\r\\n     *  @dev Senate should not be able to approve expired proposals\\r\\n     *  @dev Senate should not be able to approve SENATE proposals :)\\r\\n     */\\r\\n    function approveProposal(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external onlySenate(self) {\\r\\n        require(\\r\\n            self._proposalForId[id].deadline > block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[id].TYPE != 1,\\r\\n            \\\"GeodeUtils: Senate can not approve Senate Election\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            \\\"CONTROLLER\\\",\\r\\n            self._proposalForId[id].CONTROLLER\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"TYPE\\\", self._proposalForId[id].TYPE);\\r\\n        DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposalForId[id].NAME);\\r\\n\\r\\n        if (self._proposalForId[id].TYPE == 2) {\\r\\n            self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\\r\\n        }\\r\\n\\r\\n        if (self._electorTypes[DATASTORE.readUintForId(id, \\\"TYPE\\\")]) {\\r\\n            self._electorCount += 1;\\r\\n        }\\r\\n\\r\\n        DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\\r\\n        self._proposalForId[id].deadline = block.timestamp;\\r\\n\\r\\n        emit ProposalApproved(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * SENATE Proposals\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice only elector types can vote for senate\\r\\n     * @param _TYPE selected type\\r\\n     * @param isElector true if selected _type can vote for senate from now on\\r\\n     * @dev can not set with the same value again, preventing double increment/decrements\\r\\n     */\\r\\n    function setElectorType(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        bool isElector\\r\\n    ) external onlyGovernance(self) {\\r\\n        require(\\r\\n            self._electorTypes[_TYPE] != isElector,\\r\\n            \\\"GeodeUtils: type already _isElector\\\"\\r\\n        );\\r\\n        require(\\r\\n            _TYPE != 0 && _TYPE != 1 && _TYPE != 2 && _TYPE != 3,\\r\\n            \\\"GeodeUtils: 0, Senate, Upgrade cannot be elector\\\"\\r\\n        );\\r\\n\\r\\n        self._electorTypes[_TYPE] = isElector;\\r\\n\\r\\n        if (isElector) {\\r\\n            self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\r\\n        } else {\\r\\n            self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\r\\n        }\\r\\n\\r\\n        emit ElectorTypeSet(_TYPE, isElector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\r\\n     * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\\r\\n     * @notice id can not vote if:\\r\\n     * - approved already\\r\\n     * - proposal is expired\\r\\n     * - not its type is elector\\r\\n     * - not senate proposal\\r\\n     * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\r\\n     * @dev pins id as \\\"voted\\\" when approved\\r\\n     * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\r\\n     */\\r\\n    function approveSenate(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 proposalId,\\r\\n        uint256 electorId\\r\\n    ) external onlyController(DATASTORE, electorId) {\\r\\n        require(\\r\\n            self._proposalForId[proposalId].TYPE == 1,\\r\\n            \\\"GeodeUtils: NOT Senate Proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[proposalId].deadline >= block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._electorTypes[DATASTORE.readUintForId(electorId, \\\"TYPE\\\")],\\r\\n            \\\"GeodeUtils: NOT an elector\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(\\r\\n                proposalId,\\r\\n                DataStoreUtils.getKey(electorId, \\\"voted\\\")\\r\\n            ) == 0,\\r\\n            \\\" GeodeUtils: already approved\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(\\r\\n            proposalId,\\r\\n            DataStoreUtils.getKey(electorId, \\\"voted\\\"),\\r\\n            1\\r\\n        );\\r\\n        DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\r\\n\\r\\n        if (\\r\\n            DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\r\\n            ((self._electorCount + 1) * 2) / 3\\r\\n        ) {\\r\\n            self._proposalForId[proposalId].deadline = block.timestamp;\\r\\n            _setSenate(\\r\\n                self,\\r\\n                self._proposalForId[proposalId].CONTROLLER,\\r\\n                MAX_SENATE_PERIOD\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Vote(proposalId, electorId);\\r\\n    }\\r\\n\\r\\n    function _setSenate(\\r\\n        Universe storage self,\\r\\n        address _newSenate,\\r\\n        uint256 _senatePeriod\\r\\n    ) internal {\\r\\n        self.SENATE = _newSenate;\\r\\n        self.SENATE_EXPIRY = block.timestamp + _senatePeriod;\\r\\n\\r\\n        emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if it is allowed to change a specific contract with the current version.\\r\\n     * @return True if it is allowed by senate and false if not.\\r\\n     * @dev address(0) should return false\\r\\n     * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\r\\n     **/\\r\\n    function isUpgradeAllowed(\\r\\n        Universe storage self,\\r\\n        address proposedImplementation\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            self.approvedUpgrade != address(0) &&\\r\\n            self.approvedUpgrade == proposedImplementation;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x097e85fae233bfb51364fd8d658776ca33464c2a0034a6630d9ffc604d33660c\",\"license\":\"MIT\"},\"contracts/Portal/utils/MaintainerUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\nimport \\\"../../interfaces/IMiniGovernance.sol\\\";\\r\\nimport {IERC20InterfacePermitUpgradable as IgETHInterface} from \\\"../../interfaces/IERC20InterfacePermitUpgradable.sol\\\";\\r\\nimport \\\"../../interfaces/ISwap.sol\\\";\\r\\nimport \\\"../../interfaces/ILPToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title MaintainerUtils library to be used with a DataStore\\r\\n * @notice for Geode, there are different TYPEs active within Staking operations.\\r\\n * These types(4,5,6) always has a maintainer.\\r\\n * The staking logic is shaped around the control of maintainers over pools.\\r\\n *\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary MaintainerUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event IdInitiated(uint256 id, uint256 TYPE);\\r\\n    event MaintainerChanged(uint256 id, address newMaintainer);\\r\\n    event MaintainerFeeSwitched(\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        uint256 effectiveTimestamp // the timestamp when the fee will start to be used after switch\\r\\n    );\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice when a maintainer changes the fee, it is effective after a delay\\r\\n    uint256 public constant FEE_SWITCH_LATENCY = 3 days;\\r\\n\\r\\n    /// @notice default DWP parameters\\r\\n    uint256 public constant DEFAULT_A = 60;\\r\\n    uint256 public constant DEFAULT_FEE = (4 * PERCENTAGE_DENOMINATOR) / 10000;\\r\\n    uint256 public constant DEFAULT_ADMIN_FEE =\\r\\n        (5 * PERCENTAGE_DENOMINATOR) / 10;\\r\\n\\r\\n    modifier initiator(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        uint256 _id,\\r\\n        address _maintainer\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\"),\\r\\n            \\\"MaintainerUtils: sender NOT CONTROLLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"TYPE\\\") == _TYPE,\\r\\n            \\\"MaintainerUtils: id NOT correct TYPE\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"initiated\\\") == 0,\\r\\n            \\\"MaintainerUtils: already initiated\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(_id, \\\"maintainer\\\", _maintainer);\\r\\n\\r\\n        _;\\r\\n\\r\\n        DATASTORE.writeUintForId(_id, \\\"initiated\\\", block.timestamp);\\r\\n\\r\\n        emit IdInitiated(_id, _TYPE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice restricts the access to given function based on TYPE\\r\\n     * @notice also allows onlyMaintainer check whenever required\\r\\n     * @param expectMaintainer restricts the access to only maintainer\\r\\n     * @param restrictionMap 0: Operator = TYPE(4), Planet = TYPE(5), Comet = TYPE(6),\\r\\n     */\\r\\n    function authenticate(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        bool expectMaintainer,\\r\\n        bool[3] memory restrictionMap\\r\\n    ) internal view {\\r\\n        if (expectMaintainer) {\\r\\n            require(\\r\\n                msg.sender == DATASTORE.readAddressForId(id, \\\"maintainer\\\"),\\r\\n                \\\"MaintainerUtils: sender NOT maintainer\\\"\\r\\n            );\\r\\n        }\\r\\n        uint256 typeOfId = DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n        if (typeOfId == 4) {\\r\\n            require(\\r\\n                restrictionMap[0] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else if (typeOfId == 5) {\\r\\n            require(\\r\\n                restrictionMap[1] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else if (typeOfId == 6) {\\r\\n            require(\\r\\n                restrictionMap[2] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else revert(\\\"MaintainerUtils: invalid TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** Initiate ID functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a node operator\\r\\n     * @dev requires ID to be approved as a node operator with a specific CONTROLLER\\r\\n     */\\r\\n    function initiateOperator(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        address maintainer\\r\\n    ) external initiator(DATASTORE, 4, id, maintainer) {\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a planet (public pool): deploys a miniGovernance, a Dynamic Withdrawal Pool, an ERC1155Interface\\r\\n     * @dev requires ID to be approved as a planet with a specific CONTROLLER\\r\\n     * @param uintSpecs 0:_id, 1:_fee, 2:_MINI_GOVERNANCE_VERSION\\r\\n     * @param addressSpecs 0:gETH, 1:_maintainer, 2:DEFAULT_gETH_INTERFACE_, 3:DEFAULT_DWP, 4:DEFAULT_LP_TOKEN\\r\\n     * @param interfaceSpecs 0: interface name, 1: interface symbol\\r\\n     */\\r\\n    function initiatePlanet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256[3] memory uintSpecs,\\r\\n        address[5] memory addressSpecs,\\r\\n        string[2] calldata interfaceSpecs\\r\\n    )\\r\\n        external\\r\\n        initiator(DATASTORE, 5, uintSpecs[0], addressSpecs[1])\\r\\n        returns (\\r\\n            address miniGovernance,\\r\\n            address gInterface,\\r\\n            address withdrawalPool\\r\\n        )\\r\\n    {\\r\\n        DATASTORE.writeUintForId(uintSpecs[0], \\\"fee\\\", uintSpecs[1]);\\r\\n        {\\r\\n            miniGovernance = _deployMiniGovernance(\\r\\n                DATASTORE,\\r\\n                addressSpecs[0],\\r\\n                uintSpecs[0],\\r\\n                uintSpecs[2],\\r\\n                addressSpecs[1]\\r\\n            );\\r\\n        }\\r\\n        {\\r\\n            gInterface = Clones.clone(addressSpecs[2]);\\r\\n            IgETHInterface(gInterface).initialize(\\r\\n                uintSpecs[0],\\r\\n                interfaceSpecs[0],\\r\\n                interfaceSpecs[1],\\r\\n                addressSpecs[0]\\r\\n            );\\r\\n        }\\r\\n        {\\r\\n            withdrawalPool = _deployWithdrawalPool(\\r\\n                DATASTORE,\\r\\n                uintSpecs[0],\\r\\n                addressSpecs[0],\\r\\n                addressSpecs[3],\\r\\n                addressSpecs[4]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a comet (private pool)\\r\\n     * @dev requires ID to be approved as comet with a specific CONTROLLER,\\r\\n     * NOTE CONTROLLER check will be surpassed with portal.\\r\\n     */\\r\\n    function initiateComet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        address maintainer\\r\\n    ) external initiator(DATASTORE, 6, id, maintainer) {\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deploys a mini governance contract that will be used as a withdrawal credential\\r\\n     * using an approved MINI_GOVERNANCE_VERSION\\r\\n     * @return miniGovernance address which is deployed\\r\\n     */\\r\\n    function _deployMiniGovernance(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        address _gETH,\\r\\n        uint256 _id,\\r\\n        uint256 _versionId,\\r\\n        address _maintainer\\r\\n    ) internal returns (address miniGovernance) {\\r\\n        ERC1967Proxy newGovernance = new ERC1967Proxy(\\r\\n            DATASTORE.readAddressForId(_versionId, \\\"CONTROLLER\\\"),\\r\\n            abi.encodeWithSelector(\\r\\n                IMiniGovernance(address(0)).initialize.selector,\\r\\n                _gETH,\\r\\n                address(this),\\r\\n                _maintainer,\\r\\n                _id,\\r\\n                _versionId\\r\\n            )\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(\\r\\n            _id,\\r\\n            \\\"miniGovernance\\\",\\r\\n            address(newGovernance)\\r\\n        );\\r\\n        miniGovernance = address(newGovernance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deploys a new withdrawal pool using DEFAULT_DWP\\r\\n     * @dev sets the withdrawal pool and LP token for id\\r\\n     * @return withdrawalPool address which is deployed\\r\\n     */\\r\\n    function _deployWithdrawalPool(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        address _gETH,\\r\\n        address _DEFAULT_DWP,\\r\\n        address _DEFAULT_LP_TOKEN\\r\\n    ) internal returns (address withdrawalPool) {\\r\\n        withdrawalPool = Clones.clone(_DEFAULT_DWP);\\r\\n        bytes memory NAME = DATASTORE.readBytesForId(_id, \\\"NAME\\\");\\r\\n        address WPToken = ISwap(withdrawalPool).initialize(\\r\\n            IgETH(_gETH),\\r\\n            _id,\\r\\n            string(abi.encodePacked(NAME, \\\"-Geode LP Token\\\")),\\r\\n            string(abi.encodePacked(NAME, \\\"-LP\\\")),\\r\\n            DEFAULT_A,\\r\\n            DEFAULT_FEE,\\r\\n            DEFAULT_ADMIN_FEE,\\r\\n            _DEFAULT_LP_TOKEN\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(_id, \\\"withdrawalPool\\\", withdrawalPool);\\r\\n        DATASTORE.writeAddressForId(_id, \\\"LPToken\\\", WPToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Maintainer\\\" is a shared logic (like \\\"NAME\\\") by both operators and private or public pools.\\r\\n     * Maintainers have permissiones to maintain the given id like setting a new fee or interface as\\r\\n     * well as creating validators etc. for operators.\\r\\n     * @dev every ID has one maintainer that is set by CONTROLLER\\r\\n     */\\r\\n    function getMaintainerFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address maintainer) {\\r\\n        maintainer = DATASTORE.readAddressForId(id, \\\"maintainer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\r\\n     * @dev it is wise to change the CONTROLLER before the maintainer, in case of any migration\\r\\n     * @dev handle with care\\r\\n     * NOTE intended (suggested) usage is to set a contract address that will govern the id for maintainer,\\r\\n     * while keeping the controller as a multisig or provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeMaintainer(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newMaintainer\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"MaintainerUtils: sender NOT CONTROLLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            newMaintainer != address(0),\\r\\n            \\\"MaintainerUtils: maintainer can NOT be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"maintainer\\\", newMaintainer);\\r\\n        emit MaintainerChanged(id, newMaintainer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets fee percentage in terms of PERCENTAGE_DENOMINATOR.\\r\\n     * @dev even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum.\\r\\n     * @param id planet, comet or operator ID\\r\\n     * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100 as a perfcentage\\r\\n     */\\r\\n    function getMaintainerFee(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) internal view returns (uint256 fee) {\\r\\n        fee = DATASTORE.readUintForId(id, \\\"fee\\\");\\r\\n        if (DATASTORE.readUintForId(id, \\\"feeSwitch\\\") >= block.timestamp) {\\r\\n            fee = DATASTORE.readUintForId(id, \\\"priorFee\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the fee that is applied by distributeFee on Oracle Updates.\\r\\n     * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\r\\n     * @param id planet, comet or operator ID\\r\\n     */\\r\\n    function switchMaintainerFee(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 newFee\\r\\n    ) external {\\r\\n        DATASTORE.writeUintForId(\\r\\n            id,\\r\\n            \\\"priorFee\\\",\\r\\n            DATASTORE.readUintForId(id, \\\"fee\\\")\\r\\n        );\\r\\n        DATASTORE.writeUintForId(\\r\\n            id,\\r\\n            \\\"feeSwitch\\\",\\r\\n            block.timestamp + FEE_SWITCH_LATENCY\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", newFee);\\r\\n\\r\\n        emit MaintainerFeeSwitched(\\r\\n            id,\\r\\n            newFee,\\r\\n            block.timestamp + FEE_SWITCH_LATENCY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice When a fee is collected it is put in the maintainer's wallet\\r\\n     * @notice Maintainer wallet also keeps Ether put in Portal by Operator Maintainer to make proposeStake easier, instead of sending n ETH to contract\\r\\n     * while preStaking for n validator(s) for each time. Operator can put some ETHs to their wallet\\r\\n     * and from there, ETHs can be used to proposeStake. Then when it is approved and staked, it will be\\r\\n     * added back to the wallet to be used for other proposeStake calls.\\r\\n     * @param id the id of the Maintainer\\r\\n     * @return walletBalance the balance of Operator with the given _operatorId has\\r\\n     */\\r\\n    function getMaintainerWalletBalance(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256 walletBalance) {\\r\\n        walletBalance = DATASTORE.readUintForId(id, \\\"wallet\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To increase the balance of a Maintainer's wallet\\r\\n     * @param _id the id of the Operator\\r\\n     * @param _value Ether (in Wei) amount to increase the wallet balance.\\r\\n     * @return success boolean value which is true if successful, should be used by Operator is Maintainer is a contract.\\r\\n     */\\r\\n    function _increaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    ) internal returns (bool success) {\\r\\n        DATASTORE.addUintForId(_id, \\\"wallet\\\", _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To decrease the balance of an Operator's wallet\\r\\n     * @dev only maintainer can decrease the balance\\r\\n     * @param _id the id of the Operator\\r\\n     * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\r\\n     * @return success boolean value which is \\\"sent\\\", should be used by Operator is Maintainer is a contract.\\r\\n     */\\r\\n    function _decreaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    ) internal returns (bool success) {\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"wallet\\\") >= _value,\\r\\n            \\\"MaintainerUtils: NOT enough balance in wallet\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.subUintForId(_id, \\\"wallet\\\", _value);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x06ee7bea6b70d021ee6f3a106353138fe1cf1875dbb1cf7b9bf57ac9c2e10b16\",\"license\":\"MIT\"},\"contracts/Portal/utils/OracleUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title OracleUtils library to be used within stakeUtils\\r\\n * @notice Oracle, named Telescope, is responsible from 2 tasks:\\r\\n * * regulating the validator creations and exits\\r\\n * * syncs the price of all pools with merkleroot\\r\\n *\\r\\n * Regulating the validators/operators:\\r\\n * * state 1: validators is proposed since enough allowence is given from pool maintainers, 1 ETH is locked from maintainerWallet\\r\\n * * state 2: stake was approved by Oracle, operator used user funds to activate the validator, 1 ETH is released\\r\\n * * state 69: validator was malicious(alien), probably front-runned with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC)\\r\\n * * state 3: validator is exited. However, if the signal turns out to be false, then Telescope reports and sets to state 2, prisoning the operator.\\r\\n * * * Reports the Total number of Beacon validators to make sure no operator is running more validators then they should within Geode Universe.\\r\\n *\\r\\n *\\r\\n * Syncing the Prices:\\r\\n * * Telescope works the first 30 minutes of every day(GMT), with an archive node that points the first second.\\r\\n * * Catches the beacon chain balances and decreases the fees, groups them by ids\\r\\n * * Creates a merkle root, by simply calculating all prices from every pool, either private or public\\r\\n * * Verifies merkle root with price proofs of all public pools.\\r\\n * * * Private pools need to verify their own price once a day, otherwise minting is not allowed.\\r\\n * * * This is why merkle root of all prices is needed\\r\\n *\\r\\n * @dev Prisoned Validator:\\r\\n * * 1. created a malicious validator(alien)\\r\\n * * 2. withdrawn without a signal\\r\\n * * 3. signaled but not withdrawn\\r\\n * * 4. did not respect the validatorPeriod\\r\\n *\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\n\\r\\nlibrary OracleUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event Alienated(bytes pubkey);\\r\\n    event Busted(bytes pubkey);\\r\\n    event Prisoned(uint256 id, uint256 releaseTimestamp);\\r\\n    event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\r\\n    event FeeTheft(uint256 id, uint256 blockNumber);\\r\\n\\r\\n    /**\\r\\n     * @param state 0: inactive, 1: proposed/cured validator, 2: active validator, 3: exited withdrawal, 4: withdrawn 69: alienated proposal\\r\\n     * @param index representing this validators placement on the chronological order of the proposed validators\\r\\n     * @param planetId needed for withdrawal_credential\\r\\n     * @param operatorId needed for staking after allowence\\r\\n     * @param poolFee percentage of the rewards that will got to pool's maintainer, locked when the validator is created\\r\\n     * @param operatorFee percentage of the rewards that will got to operator's maintainer, locked when the validator is created\\r\\n     * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\r\\n     * @param expectedExit expected timestamp of the exit of validator. Calculated with operator[\\\"validatorPeriod\\\"]\\r\\n     * @param boost Can mean 2 things:\\r\\n     * For TYPE 5 : the percentage of the arbitrage -collected from DWP-, that will be given to Operator.\\r\\n     * 0 until signaled, locked when signaled, 0 if busted (meaning fake signaled withdrawal)\\r\\n     * * Note that to decrease the gas cost, we register the boost on fetchUnstake now.\\r\\n     * For TYPE 6: an initial percentage(Up to 40%) that will encourage the early validator exits, relative to expectedExit.\\r\\n     * Its effect will decrease over time while calculating the percentage of staking yields to be given to Operators.\\r\\n     * @param signature BLS12-381 signature of the validator\\r\\n     **/\\r\\n    struct Validator {\\r\\n        uint8 state;\\r\\n        uint256 index;\\r\\n        uint256 poolId;\\r\\n        uint256 operatorId;\\r\\n        uint256 poolFee;\\r\\n        uint256 operatorFee;\\r\\n        uint256 createdAt;\\r\\n        uint256 expectedExit;\\r\\n        uint256 boost;\\r\\n        bytes signature;\\r\\n    }\\r\\n    /**\\r\\n     * @param ORACLE_POSITION https://github.com/Geodefi/Telescope-Eth\\r\\n     * @param ORACLE_UPDATE_TIMESTAMP the timestamp of the latest oracle update\\r\\n     * @param MONOPOLY_THRESHOLD max number of validators an operator is allowed to operate, updated daily by oracle\\r\\n     * @param VALIDATORS_INDEX total number of validators that are proposed at some point. includes all states of validators.\\r\\n     * @param VERIFICATION_INDEX the highest index of the validators that are verified ( to be not alien ) by Telescope. Updated by Telescope.\\r\\n     * @param PERIOD_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PERIOD_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval\\r\\n     * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, private or public\\r\\n     * @param _validators contains all the data about proposed or/and active validators\\r\\n     **/\\r\\n    struct Oracle {\\r\\n        IgETH gETH;\\r\\n        address ORACLE_POSITION;\\r\\n        uint256 ORACLE_UPDATE_TIMESTAMP;\\r\\n        uint256 MONOPOLY_THRESHOLD;\\r\\n        uint256 VALIDATORS_INDEX;\\r\\n        uint256 VERIFICATION_INDEX;\\r\\n        uint256 PERIOD_PRICE_INCREASE_LIMIT;\\r\\n        uint256 PERIOD_PRICE_DECREASE_LIMIT;\\r\\n        bytes32 PRICE_MERKLE_ROOT;\\r\\n        mapping(bytes => Validator) _validators;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice Oracle is active for the first 30 min of every day\\r\\n    uint256 public constant ORACLE_PERIOD = 1 days;\\r\\n    uint256 public constant ORACLE_ACTIVE_PERIOD = 30 minutes;\\r\\n\\r\\n    /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 2% at start.\\r\\n    uint256 public constant MONOPOLY_RATIO = (2 * PERCENTAGE_DENOMINATOR) / 100;\\r\\n\\r\\n    /// @notice limiting some abilities of Operators in case of bad behaviour\\r\\n    uint256 public constant PRISON_SENTENCE = 15 days;\\r\\n\\r\\n    modifier onlyOracle(Oracle storage self) {\\r\\n        require(\\r\\n            msg.sender == self.ORACLE_POSITION,\\r\\n            \\\"OracleUtils: sender NOT ORACLE\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getValidator(Oracle storage self, bytes calldata pubkey)\\r\\n        external\\r\\n        view\\r\\n        returns (Validator memory)\\r\\n    {\\r\\n        return self._validators[pubkey];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Oracle is only allowed for a period every day & some operations are stopped then\\r\\n     * @return false if the last oracle update happened already (within the current daily period)\\r\\n     */\\r\\n    function _isOracleActive(Oracle storage self) internal view returns (bool) {\\r\\n        return\\r\\n            (block.timestamp % ORACLE_PERIOD <= ORACLE_ACTIVE_PERIOD) &&\\r\\n            (self.ORACLE_UPDATE_TIMESTAMP <\\r\\n                block.timestamp - ORACLE_ACTIVE_PERIOD);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice              ** Regulating the Operators and PubKeys **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the given operator is Prisoned\\r\\n     * @dev \\\"released\\\" key refers to the end of the last imprisonment, the limit on the abilities of operator is lifted then\\r\\n     */\\r\\n    function isPrisoned(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) public view returns (bool _isPrisoned) {\\r\\n        _isPrisoned =\\r\\n            block.timestamp <= DATASTORE.readUintForId(_operatorId, \\\"released\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Put an operator in prison, \\\"release\\\" points to the date the operator will be out\\r\\n     */\\r\\n    function imprison(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _operatorId\\r\\n    ) public {\\r\\n        DATASTORE.writeUintForId(\\r\\n            _operatorId,\\r\\n            \\\"released\\\",\\r\\n            block.timestamp + PRISON_SENTENCE\\r\\n        );\\r\\n        emit Prisoned(_operatorId, block.timestamp + PRISON_SENTENCE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks if a validator can use pool funds\\r\\n     * Creation of a Validator takes 2 steps.\\r\\n     * Before entering beaconStake function, _canStake verifies the eligibility of\\r\\n     * given pubKey that is proposed by an operator with proposeStake function.\\r\\n     * Eligibility is defined by an optimistic alienation, check alienate() for info.\\r\\n     *\\r\\n     *  @param pubkey BLS12-381 public key of the validator\\r\\n     *  @return true if:\\r\\n     *   - pubkey should be proposeStaked\\r\\n     *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\r\\n     *   - validator's index should be lower than VERIFICATION_INDEX. Updated by Telescope.\\r\\n     *  else:\\r\\n     *      return false\\r\\n     * @dev to optimize batch checks verificationIndex is taken as a memeory param\\r\\n     */\\r\\n    function _canStake(\\r\\n        Oracle storage self,\\r\\n        bytes calldata pubkey,\\r\\n        uint256 verificationIndex\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            self._validators[pubkey].state == 1 &&\\r\\n            self._validators[pubkey].index <= verificationIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice An \\\"Alien\\\" is a validator that is created with a false withdrawal credential, this is a malicious act.\\r\\n     * @dev imprisonates the operator who proposed a malicious validator.\\r\\n     */\\r\\n    function _alienateValidator(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 1,\\r\\n            \\\"OracleUtils: NOT all alienPubkeys are pending\\\"\\r\\n        );\\r\\n        uint256 planetId = self._validators[_pk].poolId;\\r\\n        DATASTORE.subUintForId(planetId, \\\"secured\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        DATASTORE.addUintForId(planetId, \\\"surplus\\\", DCU.DEPOSIT_AMOUNT);\\r\\n        self._validators[_pk].state = 69;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Alienated(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to a false signal, meaning there is a signal but no Unstake\\r\\n     * @dev imprisonates the operator who signaled a fake Unstake\\r\\n     */\\r\\n    function _bustSignal(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 3,\\r\\n            \\\"OracleUtils: pubkey is NOT signaled\\\"\\r\\n        );\\r\\n        self._validators[_pk].state == 2;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Busting\\\" refers to unsignaled withdrawal, meaning there is an unstake but no Signal\\r\\n     * @dev imprisonates the operator who haven't signal the unstake\\r\\n     */\\r\\n    function _bustExit(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata _pk\\r\\n    ) internal {\\r\\n        require(\\r\\n            self._validators[_pk].state == 2,\\r\\n            \\\"OracleUtils: Signaled, cannot be busted\\\"\\r\\n        );\\r\\n        self._validators[_pk].state == 3;\\r\\n\\r\\n        imprison(DATASTORE, self._validators[_pk].operatorId);\\r\\n        emit Busted(_pk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updating VERIFICATION_INDEX, signaling that it is safe to allow\\r\\n     * validators with lower index than VERIFICATION_INDEX to stake with staking pool funds\\r\\n     * @param allValidatorsCount total number of validators to figure out what is the current Monopoly Requirement\\r\\n     * @param validatorVerificationIndex index of the highest validator that is verified to be activated\\r\\n     * @param alienatedPubkeys proposals with lower index than new_index who frontrunned proposeStake\\r\\n     * with incorrect withdrawal credential results in imprisonment.\\r\\n     */\\r\\n    function updateVerificationIndex(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 allValidatorsCount,\\r\\n        uint256 validatorVerificationIndex,\\r\\n        bytes[] calldata alienatedPubkeys\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n        require(allValidatorsCount > 4999, \\\"OracleUtils: low validator count\\\");\\r\\n        require(\\r\\n            self.VALIDATORS_INDEX >= validatorVerificationIndex,\\r\\n            \\\"OracleUtils: high VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        require(\\r\\n            validatorVerificationIndex >= self.VERIFICATION_INDEX,\\r\\n            \\\"OracleUtils: low VERIFICATION_INDEX\\\"\\r\\n        );\\r\\n        self.VERIFICATION_INDEX = validatorVerificationIndex;\\r\\n\\r\\n        for (uint256 i; i < alienatedPubkeys.length; i++) {\\r\\n            _alienateValidator(self, DATASTORE, alienatedPubkeys[i]);\\r\\n        }\\r\\n\\r\\n        self.MONOPOLY_THRESHOLD =\\r\\n            (allValidatorsCount * MONOPOLY_RATIO) /\\r\\n            PERCENTAGE_DENOMINATOR;\\r\\n\\r\\n        emit VerificationIndexUpdated(validatorVerificationIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice regulating operators within Geode with verifiable proofs\\r\\n     * @param bustedExits validators that have not signaled before Unstake\\r\\n     * @param bustedSignals validators that are \\\"mistakenly\\\" signaled as Unstaked\\r\\n     * @param feeThefts [0]: Operator ids who have stolen MEV or block rewards, [1]: detected BlockNumber as proof\\r\\n     * @dev Both of these functions results in imprisonment.\\r\\n     */\\r\\n    function regulateOperators(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes[] calldata bustedExits,\\r\\n        bytes[] calldata bustedSignals,\\r\\n        uint256[2][] calldata feeThefts\\r\\n    ) external onlyOracle(self) {\\r\\n        require(!_isOracleActive(self), \\\"OracleUtils: oracle is active\\\");\\r\\n\\r\\n        for (uint256 i; i < bustedExits.length; i++) {\\r\\n            _bustExit(self, DATASTORE, bustedExits[i]);\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < bustedSignals.length; i++) {\\r\\n            _bustSignal(self, DATASTORE, bustedSignals[i]);\\r\\n        }\\r\\n\\r\\n        for (uint256 j; j < feeThefts.length; j++) {\\r\\n            imprison(DATASTORE, feeThefts[0][j]);\\r\\n            emit FeeTheft(feeThefts[0][j], feeThefts[1][j]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                          ** Updating PricePerShare **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice calculates the current price and expected report price\\r\\n     * @dev surplus at the oracle time is found with the help of mint and burn buffers\\r\\n     * @param _dailyBufferMintKey represents the gETH minted during oracleActivePeriod, unique to every day\\r\\n     * @param _dailyBufferBurnKey represents the gETH burned during oracleActivePeriod, unique to every day\\r\\n     * @dev clears the buffers to respect ethereum's war with storage size\\r\\n     */\\r\\n    function _findPricesClearBuffer(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 _dailyBufferMintKey,\\r\\n        bytes32 _dailyBufferBurnKey,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        uint256 totalEther = _beaconBalance +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"secured\\\") +\\r\\n            DATASTORE.readUintForId(_poolId, \\\"surplus\\\");\\r\\n\\r\\n        uint256 supply = self.gETH.totalSupply(_poolId);\\r\\n        uint256 price = self.gETH.pricePerShare(_poolId);\\r\\n        uint256 unbufferedEther = totalEther -\\r\\n            (DATASTORE.readUintForId(_poolId, _dailyBufferMintKey) * price) /\\r\\n            self.gETH.totalSupply(_poolId);\\r\\n\\r\\n        unbufferedEther +=\\r\\n            (DATASTORE.readUintForId(_poolId, _dailyBufferBurnKey) * price) /\\r\\n            self.gETH.denominator();\\r\\n\\r\\n        uint256 unbufferedSupply = supply -\\r\\n            DATASTORE.readUintForId(_poolId, _dailyBufferMintKey);\\r\\n\\r\\n        unbufferedSupply += DATASTORE.readUintForId(\\r\\n            _poolId,\\r\\n            _dailyBufferBurnKey\\r\\n        );\\r\\n\\r\\n        // clears daily buffer for the gas refund\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferMintKey, 0);\\r\\n        DATASTORE.writeUintForId(_poolId, _dailyBufferBurnKey, 0);\\r\\n\\r\\n        return (totalEther / supply, unbufferedEther / unbufferedSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in order to prevent attacks from malicious Oracle there are boundaries to price & fee updates.\\r\\n     * 1. Price should not be increased more than PERIOD_PRICE_INCREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     * 2. Price should not be decreased more than PERIOD_PRICE_DECREASE_LIMIT\\r\\n     *  with the factor of how many days since oracleUpdateTimestamp has past.\\r\\n     */\\r\\n    function _sanityCheck(\\r\\n        Oracle storage self,\\r\\n        uint256 _id,\\r\\n        uint256 _periodsSinceUpdate,\\r\\n        uint256 _newPrice\\r\\n    ) internal view {\\r\\n        uint256 curPrice = self.gETH.pricePerShare(_id);\\r\\n        uint256 maxPrice = curPrice +\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_INCREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        require(_newPrice <= maxPrice, \\\"OracleUtils: price is insane\\\");\\r\\n\\r\\n        uint256 minPrice = curPrice -\\r\\n            ((curPrice *\\r\\n                self.PERIOD_PRICE_DECREASE_LIMIT *\\r\\n                _periodsSinceUpdate) / PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n        require(_newPrice >= minPrice, \\\"OracleUtils: price is insane\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice syncing the price of g-derivative after checking the merkle proofs and the sanity of it.\\r\\n     * @param _beaconBalance the total balance -excluding fees- of all validators of this pool\\r\\n     * @param _periodsSinceUpdate time-in sec- since the last update of the g-derivative's price.\\r\\n     * while public pools are using ORACLE_UPDATE_TIMESTAMP, private pools will refer gEth.priceUpdateTimestamp()\\r\\n     * @param _priceProofs the merkle proof of the latests prices that are reported by Telescope\\r\\n     * @dev if merkle proof holds the oracle price, new price is the current price of the derivative\\r\\n     */\\r\\n    function _priceSync(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32[2] memory _dailyBufferKeys,\\r\\n        uint256 _poolId,\\r\\n        uint256 _beaconBalance,\\r\\n        uint256 _periodsSinceUpdate, // calculation for this changes for private pools\\r\\n        bytes32[] calldata _priceProofs // uint256 prices[]\\r\\n    ) internal {\\r\\n        (uint256 oraclePrice, uint256 price) = _findPricesClearBuffer(\\r\\n            self,\\r\\n            DATASTORE,\\r\\n            _dailyBufferKeys[0],\\r\\n            _dailyBufferKeys[1],\\r\\n            _poolId,\\r\\n            _beaconBalance\\r\\n        );\\r\\n        _sanityCheck(self, _poolId, _periodsSinceUpdate, oraclePrice);\\r\\n        bytes32 node = keccak256(abi.encodePacked(_poolId, oraclePrice));\\r\\n\\r\\n        require(\\r\\n            MerkleProof.verify(_priceProofs, self.PRICE_MERKLE_ROOT, node),\\r\\n            \\\"OracleUtils: NOT all proofs are valid\\\"\\r\\n        );\\r\\n\\r\\n        self.gETH.setPricePerShare(price, _poolId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT\\r\\n     * @notice after report updates the prices of the public pools\\r\\n     * @notice updates the ORACLE_UPDATE_TIMESTAMP\\r\\n     * @dev if merkle proof holds the oracle price, new price is the found price of the derivative\\r\\n     */\\r\\n    function reportOracle(\\r\\n        Oracle storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes32 merkleRoot,\\r\\n        uint256[] calldata beaconBalances,\\r\\n        bytes32[][] calldata priceProofs\\r\\n    ) external onlyOracle(self) {\\r\\n        require(_isOracleActive(self), \\\"OracleUtils: oracle is NOT active\\\");\\r\\n\\r\\n        {\\r\\n            uint256 planetCount = DATASTORE.allIdsByType[5].length;\\r\\n            require(\\r\\n                beaconBalances.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect beaconBalances length\\\"\\r\\n            );\\r\\n            require(\\r\\n                priceProofs.length == planetCount,\\r\\n                \\\"OracleUtils: incorrect priceProofs length\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        self.PRICE_MERKLE_ROOT = merkleRoot;\\r\\n\\r\\n        uint256 periodsSinceUpdate = (block.timestamp +\\r\\n            ORACLE_ACTIVE_PERIOD -\\r\\n            self.ORACLE_UPDATE_TIMESTAMP) / ORACLE_PERIOD;\\r\\n\\r\\n        // refering the first second of the period: block.timestamp - (block.timestamp % ORACLE_PERIOD)\\r\\n        bytes32[2] memory dailyBufferKeys = [\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"mintBuffer\\\"\\r\\n            ),\\r\\n            DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % ORACLE_PERIOD),\\r\\n                \\\"burnBuffer\\\"\\r\\n            )\\r\\n        ];\\r\\n\\r\\n        for (uint256 i = 0; i < beaconBalances.length; i++) {\\r\\n            _priceSync(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                dailyBufferKeys,\\r\\n                DATASTORE.allIdsByType[5][i],\\r\\n                beaconBalances[i],\\r\\n                periodsSinceUpdate,\\r\\n                priceProofs[i]\\r\\n            );\\r\\n        }\\r\\n        self.ORACLE_UPDATE_TIMESTAMP =\\r\\n            block.timestamp -\\r\\n            (block.timestamp % ORACLE_PERIOD);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda52e9256c1a6dd2e57805ddd2dae9d026cbed20dca40b1cd9cdeebd944910c0\",\"license\":\"MIT\"},\"contracts/Portal/utils/StakeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\r\\nimport \\\"./MaintainerUtilsLib.sol\\\";\\r\\nimport \\\"./OracleUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\nimport \\\"../../interfaces/IMiniGovernance.sol\\\";\\r\\nimport \\\"../../interfaces/ISwap.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title StakeUtils library\\r\\n * @notice Exclusively contains functions related to ETH Liquid Staking design\\r\\n * @notice biggest part of the functionality is related to Dynamic Staking Pools\\r\\n * which relies on continuous buybacks (DWP) to maintain the price health with debt/surplus calculations\\r\\n * @dev Contracts relying on this library must initialize StakeUtils.StakePool\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR.\\r\\n * * For ex, when fee is equal to PERCENTAGE_DENOMINATOR/2, it means 50% fee\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n * Note refer to MaintainerUtilsLib before reviewing\\r\\n * Note refer to OracleUtilsLib before reviewing\\r\\n * Note *suggested* refer to GeodeUtils before reviewing\\r\\n * Note beware of the staking pool and operator implementations:\\r\\n *\\r\\n * Type 4 stands for Operators:\\r\\n * They maintain Beacon Chain Validators on behalf of Planets and Comets\\r\\n * * only if they are allowed to\\r\\n * Operators have properties like fee(as a percentage), maintainer.\\r\\n *\\r\\n * Type 5 stands for Public Staking Pool (Planets):\\r\\n * * Every Planet is also an Operator by design.\\r\\n * * * Planets inherits Operator functionalities and parameters, with additional\\r\\n * * * properties related to miniGovernances and staking pools - surplus, secured, withdrawalPool etc.\\r\\n * * ID of a pool represents an id of gETH.\\r\\n * * Creation of staking pools are not permissionless but the usage of it is.\\r\\n * * * Meaning Everyone can stake and unstake using public pools.\\r\\n *\\r\\n * Type 6 stands for Private Staking Pools (Comets):\\r\\n * * It is permissionless, one can directly create a Comet by simply\\r\\n * * * choosing a name and sending MIN_AMOUNT which is expected to be 32 ether.\\r\\n * * GeodeUtils generates IDs based on types, meaning same name can be used for a Planet and a Comet simultaneously.\\r\\n * * The creation process is permissionless but staking is not.\\r\\n * * * Meaning Only Comet's maintainer can stake but everyone can unstake\\r\\n * * In Comets, there is a Withdrawal Queue instead of DWP.\\r\\n * * NOT IMPLEMENTED YET\\r\\n *\\r\\n * Type 11 stands for a new Mini Governance implementation id:\\r\\n * * like always CONTROLLER is the implementation contract position\\r\\n * * requires the approval of Senate\\r\\n * * Pools are in \\\"Isolation Mode\\\" until their mini governance is upgraded to given proposal ID.\\r\\n * * * Meaning, no more Depositing or Staking can happen.\\r\\n */\\r\\n\\r\\nlibrary StakeUtils {\\r\\n    event ValidatorPeriodUpdated(uint256 operatorId, uint256 newPeriod);\\r\\n    event Released(uint256 operatorId);\\r\\n    event OperatorApproval(\\r\\n        uint256 planetId,\\r\\n        uint256 operatorId,\\r\\n        uint256 allowance\\r\\n    );\\r\\n    event PausedPool(uint256 id);\\r\\n    event UnpausedPool(uint256 id);\\r\\n    event ProposeStaked(bytes pubkey, uint256 planetId, uint256 operatorId);\\r\\n    event BeaconStaked(bytes pubkey);\\r\\n    event UnstakeSignal(uint256 poolId, bytes pubkey);\\r\\n    event ParamsUpdated(\\r\\n        address DEFAULT_gETH_INTERFACE_,\\r\\n        address DEFAULT_DWP_,\\r\\n        address DEFAULT_LP_TOKEN_,\\r\\n        uint256 MAX_MAINTAINER_FEE_,\\r\\n        uint256 BOOSTRAP_PERIOD_,\\r\\n        uint256 PERIOD_PRICE_INCREASE_LIMIT_,\\r\\n        uint256 PERIOD_PRICE_DECREASE_LIMIT_,\\r\\n        uint256 COMET_TAX_\\r\\n    );\\r\\n    event WithdrawalBoostChanged(\\r\\n        uint256 poolId,\\r\\n        uint256 withdrawalBoost,\\r\\n        uint256 effectiveAfter\\r\\n    );\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n    using MaintainerUtils for DataStoreUtils.DataStore;\\r\\n    using OracleUtils for OracleUtils.Oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice StakePool includes the parameters related to multiple Staking Pool Contracts.\\r\\n     * @notice Dynamic Staking Pool contains a staking pool that works with a *bound* Withdrawal Pool (DWP) to create best pricing\\r\\n     * for the staking derivative. Withdrawal Pools (DWP) uses StableSwap algorithm with Dynamic Pegs.\\r\\n     * @param gETH ERC1155 contract that keeps the totalSupply, pricePerShare and balances of all StakingPools by ID\\r\\n     * @param DEFAULT_gETH_INTERFACE default interface for the g-derivative, currently equivalent to ERC20\\r\\n     * @param DEFAULT_DWP Dynamic Withdrawal Pool implementation, a STABLESWAP pool that will be used for given ID\\r\\n     * @param DEFAULT_LP_TOKEN LP token implementation that will be used for DWP of given ID\\r\\n     * @param MINI_GOVERNANCE_VERSION  limited to be changed with the senate approval.\\r\\n     * * versioning is done by GeodeUtils.proposal.id, implementation is stored in DataStore.id.controller\\r\\n     * @param MAX_MAINTAINER_FEE  limits fees, set by GOVERNANCE\\r\\n     * @param BOOSTRAP_PERIOD during this period the surplus of the pool can not be burned for withdrawals, initially set to 6 months\\r\\n     * @param COMET_TAX tax that will be taken from private pools, limited by MAX_MAINTAINER_FEE, set by GOVERNANCE\\r\\n     * @dev gETH should not be changed, ever!\\r\\n     * @dev changing some of these parameters (gETH, ORACLE) MUST require a contract upgrade to ensure security.\\r\\n     * We can change this in the future with a better GeodeUtils design, giving every update a type, like MINI_GOVERNANCE_VERSION\\r\\n     **/\\r\\n    struct StakePool {\\r\\n        IgETH gETH;\\r\\n        OracleUtils.Oracle TELESCOPE;\\r\\n        address GOVERNANCE;\\r\\n        address DEFAULT_gETH_INTERFACE;\\r\\n        address DEFAULT_DWP;\\r\\n        address DEFAULT_LP_TOKEN;\\r\\n        uint256 MINI_GOVERNANCE_VERSION;\\r\\n        uint256 MAX_MAINTAINER_FEE;\\r\\n        uint256 BOOSTRAP_PERIOD;\\r\\n        uint256 COMET_TAX;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice limiting the operator.validatorPeriod, currently around 5 years\\r\\n    uint256 public constant MIN_VALIDATOR_PERIOD = 60 days;\\r\\n    uint256 public constant MAX_VALIDATOR_PERIOD = 1825 days;\\r\\n\\r\\n    /// @notice ignoring any buybacks if the DWP has a low debt\\r\\n    uint256 public constant IGNORABLE_DEBT = 1 ether;\\r\\n\\r\\n    /// @notice when a maintainer changes the withdrawalBoost, it is effective after a delay\\r\\n    uint256 public constant BOOST_SWITCH_LATENCY = 3 days;\\r\\n\\r\\n    modifier onlyGovernance(StakePool storage self) {\\r\\n        require(\\r\\n            msg.sender == self.GOVERNANCE,\\r\\n            \\\"StakeUtils: sender NOT GOVERNANCE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** gETH specific functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice sets a erc1155Interface for gETH\\r\\n     * @param _interface address of the new gETH ERC1155 interface for given ID\\r\\n     * @dev every interface has a unique index within \\\"interfaces\\\" dynamic array.\\r\\n     * * even if unsetted, it just replaces the implementation with address(0) for obvious security reasons\\r\\n     */\\r\\n    function setInterface(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address _interface\\r\\n    ) public {\\r\\n        DATASTORE.authenticate(id, true, [false, true, true]);\\r\\n\\r\\n        uint256 IL = DATASTORE.readUintForId(id, \\\"interfacesLength\\\");\\r\\n        require(\\r\\n            !self.gETH.isInterface(_interface, id),\\r\\n            \\\"StakeUtils: already interface\\\"\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            DataStoreUtils.getKey(IL, \\\"interfaces\\\"),\\r\\n            _interface\\r\\n        );\\r\\n        DATASTORE.addUintForId(id, \\\"interfacesLength\\\", 1);\\r\\n        self.gETH.setInterface(_interface, id, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice unsets a erc1155Interface for gETH with given index -acquired from allInterfaces()-\\r\\n     * @param index index of given interface at the \\\"interfaces\\\" dynamic array\\r\\n     * @dev every interface has a unique interface index within interfaces dynamic array.\\r\\n     * * even if unsetted, it just replaces the implementation with address(0) for obvious security reasons\\r\\n     * @dev old Interfaces will still be active if not unsetted\\r\\n     */\\r\\n    function unsetInterface(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 index\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, true, [false, true, true]);\\r\\n\\r\\n        address _interface = DATASTORE.readAddressForId(\\r\\n            id,\\r\\n            DataStoreUtils.getKey(index, \\\"interfaces\\\")\\r\\n        );\\r\\n        require(\\r\\n            _interface != address(0) && self.gETH.isInterface(_interface, id),\\r\\n            \\\"StakeUtils: already NOT interface\\\"\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            DataStoreUtils.getKey(index, \\\"interfaces\\\"),\\r\\n            address(0)\\r\\n        );\\r\\n        self.gETH.setInterface(_interface, id, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice lists all interfaces, unsetted interfaces will return address(0)\\r\\n     */\\r\\n    function allInterfaces(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address[] memory) {\\r\\n        uint256 IL = DATASTORE.readUintForId(id, \\\"interfacesLength\\\");\\r\\n        address[] memory interfaces = new address[](IL);\\r\\n        for (uint256 i = 0; i < IL; i++) {\\r\\n            interfaces[i] = DATASTORE.readAddressForId(\\r\\n                id,\\r\\n                DataStoreUtils.getKey(i, \\\"interfaces\\\")\\r\\n            );\\r\\n        }\\r\\n        return interfaces;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** Maintainer Initiators **\\r\\n     */\\r\\n    /**\\r\\n     * @notice initiates ID as an node operator\\r\\n     * @dev requires ID to be approved as a node operator with a specific CONTROLLER\\r\\n     * @param _validatorPeriod the expected maximum staking interval\\r\\n     * Operator can unstake at any given point before this period ends.\\r\\n     * If operator disobeys this rule, it can be prisoned with blameOperator()\\r\\n     */\\r\\n    function initiateOperator(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _fee,\\r\\n        address _maintainer,\\r\\n        uint256 _validatorPeriod\\r\\n    ) external {\\r\\n        require(\\r\\n            _fee <= self.MAX_MAINTAINER_FEE,\\r\\n            \\\"StakeUtils: MAX_MAINTAINER_FEE ERROR\\\"\\r\\n        );\\r\\n        DATASTORE.initiateOperator(_id, _fee, _maintainer);\\r\\n        updateValidatorPeriod(DATASTORE, _id, _validatorPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a planet (public pool)\\r\\n     * @dev requires ID to be approved as a planet with a specific CONTROLLER\\r\\n     * @param _interfaceSpecs 0: interface name, 1: interface symbol, currently ERC20 specs.\\r\\n     */\\r\\n    function initiatePlanet(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _fee,\\r\\n        address _maintainer,\\r\\n        string[2] calldata _interfaceSpecs\\r\\n    ) external {\\r\\n        require(\\r\\n            _fee <= self.MAX_MAINTAINER_FEE,\\r\\n            \\\"StakeUtils: MAX_MAINTAINER_FEE ERROR\\\"\\r\\n        );\\r\\n\\r\\n        address[5] memory addressSpecs = [\\r\\n            address(self.gETH),\\r\\n            _maintainer,\\r\\n            self.DEFAULT_gETH_INTERFACE,\\r\\n            self.DEFAULT_DWP,\\r\\n            self.DEFAULT_LP_TOKEN\\r\\n        ];\\r\\n        uint256[3] memory uintSpecs = [_id, _fee, self.MINI_GOVERNANCE_VERSION];\\r\\n        (\\r\\n            address miniGovernance,\\r\\n            address gInterface,\\r\\n            address WithdrawalPool\\r\\n        ) = DATASTORE.initiatePlanet(uintSpecs, addressSpecs, _interfaceSpecs);\\r\\n\\r\\n        DATASTORE.writeBytesForId(\\r\\n            _id,\\r\\n            \\\"withdrawalCredential\\\",\\r\\n            DCU.addressToWC(miniGovernance)\\r\\n        );\\r\\n\\r\\n        setInterface(self, DATASTORE, _id, gInterface);\\r\\n\\r\\n        // initially 1 ETHER = 1 ETHER\\r\\n        self.gETH.setPricePerShare(1 ether, _id);\\r\\n\\r\\n        // transfer ownership of DWP to GOVERNANCE\\r\\n        Ownable(WithdrawalPool).transferOwnership(self.GOVERNANCE);\\r\\n        // approve token so we can use it in buybacks\\r\\n        self.gETH.setApprovalForAll(WithdrawalPool, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** Governance specific functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice called when a proposal(TYPE=11) for a new MiniGovernance is approved by Senate\\r\\n     * @dev CONTROLLER of the proposal id represents the implementation address\\r\\n     */\\r\\n    function setMiniGovernanceVersion(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external {\\r\\n        require(DATASTORE.readUintForId(id, \\\"TYPE\\\") == 11);\\r\\n        self.MINI_GOVERNANCE_VERSION = id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice releases an imprisoned operator immidately\\r\\n     * @dev in different situations such as a faulty improsenment or coordinated testing periods\\r\\n     * * Governance can vote on releasing the prisoners\\r\\n     * @dev onlyGovernance\\r\\n     */\\r\\n    function releasePrisoned(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 operatorId\\r\\n    ) external onlyGovernance(self) {\\r\\n        require(\\r\\n            OracleUtils.isPrisoned(DATASTORE, operatorId),\\r\\n            \\\"StakeUtils: NOT in prison\\\"\\r\\n        );\\r\\n        DATASTORE.writeUintForId(operatorId, \\\"released\\\", block.timestamp);\\r\\n        emit Released(operatorId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** Maintainer specific functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice changes maintainer of the given operator (TYPE 4)\\r\\n     */\\r\\n    function changeOperatorMaintainer(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newMaintainer\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, false, [true, false, false]);\\r\\n        DATASTORE.changeMaintainer(id, newMaintainer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice changes pool maintainer  (TYPE 5-6) + conducts a Senate change on miniGovernance\\r\\n     * @dev requires the old Password and a new passwordHash, this saves the MiniGovernance contract\\r\\n     * from Double Horn Attack: when Both Senate and Governance is malicious.\\r\\n     * @dev currently this is enough to ensure the future implementations will improve the miniGovernance security,\\r\\n     * * we are also working on improving the Isolation Mode, which will allow Portal-less withdrawals for all pool types\\r\\n     */\\r\\n    function changePoolMaintainer(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        bytes calldata password,\\r\\n        bytes32 newPasswordHash,\\r\\n        address newMaintainer\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, false, [false, true, true]);\\r\\n\\r\\n        bool success = miniGovernanceById(DATASTORE, id).changeMaintainer(\\r\\n            password,\\r\\n            newPasswordHash,\\r\\n            newMaintainer\\r\\n        );\\r\\n        require(success, \\\"StakeUtils: unsuccessful interaction\\\");\\r\\n        DATASTORE.changeMaintainer(id, newMaintainer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param newFee new fee percentage in terms of PERCENTAGE_DENOMINATOR, reverts if given more than MAX_MAINTAINER_FEE\\r\\n     * @dev there is a 7 days delay before the new fee is activated,\\r\\n     * * this protect the pool maintainers from making bad operator choices\\r\\n     */\\r\\n    function switchMaintainerFee(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 newFee\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, true, [true, true, true]);\\r\\n        require(\\r\\n            newFee <= self.MAX_MAINTAINER_FEE,\\r\\n            \\\"StakeUtils: MAX_MAINTAINER_FEE ERROR\\\"\\r\\n        );\\r\\n        DATASTORE.switchMaintainerFee(id, newFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev only maintainer can increase the balance directly,\\r\\n     * * other than that it also collects validator rewards\\r\\n     */\\r\\n    function increaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external returns (bool success) {\\r\\n        DATASTORE.authenticate(id, true, [true, true, false]);\\r\\n\\r\\n        return DATASTORE._increaseMaintainerWallet(id, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev only maintainer can decrease the balance directly,\\r\\n     * * other than that it can be used to propose Validators\\r\\n     * @dev if a maintainer is in prison, it can not decrease the wallet\\r\\n     */\\r\\n    function decreaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external returns (bool success) {\\r\\n        DATASTORE.authenticate(id, true, [true, true, true]);\\r\\n\\r\\n        require(\\r\\n            !OracleUtils.isPrisoned(DATASTORE, id),\\r\\n            \\\"StakeUtils: you are in prison, get in touch with governance\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"StakeUtils: not enough balance in Portal (?)\\\"\\r\\n        );\\r\\n\\r\\n        bool decreased = DATASTORE._decreaseMaintainerWallet(id, value);\\r\\n\\r\\n        (bool sent, ) = msg.sender.call{value: value}(\\\"\\\");\\r\\n        require(decreased && sent, \\\"StakeUtils: Failed to send ETH\\\");\\r\\n        return sent;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                           ** Pool - Operator interactions **\\r\\n     */\\r\\n    /**\\r\\n     * @param withdrawalBoost the percentage of arbitrague that will be shared\\r\\n     * with Operator on Unstake. Can be used to incentivise Unstakes in case of depeg\\r\\n     * @dev to prevent malicious swings in the withdrawal boost that can harm the competition,\\r\\n     * Boost changes is also has a delay.\\r\\n     */\\r\\n    function switchWithdrawalBoost(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 withdrawalBoost\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(poolId, true, [false, true, true]);\\r\\n        DATASTORE.writeUintForId(\\r\\n            poolId,\\r\\n            \\\"priorBoost\\\",\\r\\n            DATASTORE.readUintForId(poolId, \\\"withdrawalBoost\\\")\\r\\n        );\\r\\n        DATASTORE.writeUintForId(\\r\\n            poolId,\\r\\n            \\\"boostSwitch\\\",\\r\\n            block.timestamp + BOOST_SWITCH_LATENCY\\r\\n        );\\r\\n        DATASTORE.writeUintForId(poolId, \\\"withdrawalBoost\\\", withdrawalBoost);\\r\\n\\r\\n        emit WithdrawalBoostChanged(\\r\\n            poolId,\\r\\n            withdrawalBoost,\\r\\n            block.timestamp + BOOST_SWITCH_LATENCY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getWithdrawalBoost(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) internal view returns (uint256 fee) {\\r\\n        fee = DATASTORE.readUintForId(id, \\\"withdrawalBoost\\\");\\r\\n        if (DATASTORE.readUintForId(id, \\\"boostSwitch\\\") >= block.timestamp) {\\r\\n            fee = DATASTORE.readUintForId(id, \\\"priorBoost\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** *\\r\\n     * @notice operatorAllowence is the number of validators that the given Operator is allowed to create on behalf of the Planet\\r\\n     * @dev an operator can not create new validators if:\\r\\n     * * 1. allowence is 0 (zero)\\r\\n     * * 2. lower than the current (proposed + active) number of validators\\r\\n     * * But if operator withdraws a validator, then able to create a new one.\\r\\n     * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowence\\r\\n     * @dev allowence doesn't change when new validators created or old ones are unstaked.\\r\\n     * @return allowance\\r\\n     */\\r\\n    function operatorAllowance(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId\\r\\n    ) public view returns (uint256 allowance) {\\r\\n        allowance = DATASTORE.readUintForId(\\r\\n            poolId,\\r\\n            DataStoreUtils.getKey(operatorId, \\\"allowance\\\")\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To allow a Node Operator run validators for your Planet with Max number of validators.\\r\\n     * * This number can be set again at any given point in the future.\\r\\n     *\\r\\n     * @dev If planet decreases the approved validator count, below current running validator,\\r\\n     * operator can only withdraw until to new allowence.\\r\\n     * @dev only maintainer of _planetId can approve an Operator\\r\\n     * @param poolId the gETH id of the Planet, only Maintainer can call this function\\r\\n     * @param operatorId the id of the Operator to allow them create validators for a given Planet\\r\\n     * @param allowance the MAX number of validators that can be created by the Operator for a given Planet\\r\\n     */\\r\\n    function approveOperator(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        uint256 allowance\\r\\n    ) external returns (bool) {\\r\\n        DATASTORE.authenticate(poolId, true, [false, true, true]);\\r\\n        DATASTORE.authenticate(operatorId, false, [true, true, false]);\\r\\n\\r\\n        DATASTORE.writeUintForId(\\r\\n            poolId,\\r\\n            DataStoreUtils.getKey(operatorId, \\\"allowance\\\"),\\r\\n            allowance\\r\\n        );\\r\\n\\r\\n        emit OperatorApproval(poolId, operatorId, allowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                ** Operator (TYPE 4 and 5) specific functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice updates validatorPeriod for given operator, limited by MAX_VALIDATOR_PERIOD\\r\\n     */\\r\\n    function updateValidatorPeriod(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 operatorId,\\r\\n        uint256 newPeriod\\r\\n    ) public {\\r\\n        DATASTORE.authenticate(operatorId, true, [true, true, false]);\\r\\n        require(\\r\\n            newPeriod <= MIN_VALIDATOR_PERIOD,\\r\\n            \\\"StekeUtils: should be more than MIN_VALIDATOR_PERIOD\\\"\\r\\n        );\\r\\n        require(\\r\\n            newPeriod <= MAX_VALIDATOR_PERIOD,\\r\\n            \\\"StekeUtils: should be less than MAX_VALIDATOR_PERIOD\\\"\\r\\n        );\\r\\n        DATASTORE.writeUintForId(operatorId, \\\"validatorPeriod\\\", newPeriod);\\r\\n        emit ValidatorPeriodUpdated(operatorId, newPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** STAKING POOL (TYPE 5 and 6)  specific functions **\\r\\n     */\\r\\n\\r\\n    function miniGovernanceById(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id\\r\\n    ) internal view returns (IMiniGovernance) {\\r\\n        return\\r\\n            IMiniGovernance(DATASTORE.readAddressForId(_id, \\\"miniGovernance\\\"));\\r\\n    }\\r\\n\\r\\n    function withdrawalPoolById(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id\\r\\n    ) internal view returns (ISwap) {\\r\\n        return ISwap(DATASTORE.readAddressForId(_id, \\\"withdrawalPool\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev pausing requires pool to be NOT paused already\\r\\n     */\\r\\n    function pauseStakingForPool(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, true, [false, true, true]);\\r\\n\\r\\n        require(\\r\\n            DATASTORE.readUintForId(id, \\\"stakePaused\\\") == 0,\\r\\n            \\\"StakeUtils: staking already paused\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(id, \\\"stakePaused\\\", 1); // meaning true\\r\\n        emit PausedPool(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev unpausing requires pool to be paused already\\r\\n     */\\r\\n    function unpauseStakingForPool(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(id, true, [false, true, true]);\\r\\n\\r\\n        require(\\r\\n            DATASTORE.readUintForId(id, \\\"stakePaused\\\") == 1,\\r\\n            \\\"StakeUtils: staking already NOT paused\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(id, \\\"stakePaused\\\", 0); // meaning false\\r\\n        emit UnpausedPool(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** DEPOSIT(user) functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice checks if staking is allowed in a pool.\\r\\n     * * when a pool is paused for staking NO new funds can be minted.\\r\\n     * @notice staking is not allowed if:\\r\\n     * 1. MiniGovernance is in Isolation Mode, this means it is not upgraded to current version\\r\\n     * 2. Staking is simply paused by the Pool maintainer\\r\\n     * @dev minting is paused when stakePaused == 1, meaning true.\\r\\n     */\\r\\n    function canDeposit(DataStoreUtils.DataStore storage DATASTORE, uint256 _id)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            DATASTORE.readUintForId(_id, \\\"stakePaused\\\") == 0 &&\\r\\n            !(miniGovernanceById(DATASTORE, _id).isolationMode());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice conducts a buyback using the given withdrawal pool,\\r\\n     * @param to address to send bought gETH(id). burns the tokens if to=address(0), transfers if not\\r\\n     * @param poolId id of the gETH that will be bought\\r\\n     * @param sellEth ETH amount to sell\\r\\n     * @param minToBuy TX is expected to revert by Swap.sol if not meet\\r\\n     * @param deadline TX is expected to revert by Swap.sol if not meet\\r\\n     * @dev this function assumes that pool is deployed by deployWithdrawalPool\\r\\n     * as index 0 is eth and index 1 is Geth\\r\\n     */\\r\\n    function _buyback(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        address to,\\r\\n        uint256 poolId,\\r\\n        uint256 sellEth,\\r\\n        uint256 minToBuy,\\r\\n        uint256 deadline\\r\\n    ) internal returns (uint256 outAmount) {\\r\\n        // SWAP in WP\\r\\n        outAmount = withdrawalPoolById(DATASTORE, poolId).swap{value: sellEth}(\\r\\n            0,\\r\\n            1,\\r\\n            sellEth,\\r\\n            minToBuy,\\r\\n            deadline\\r\\n        );\\r\\n        if (to == address(0)) {\\r\\n            // burn\\r\\n            self.gETH.burn(address(this), poolId, outAmount);\\r\\n        } else {\\r\\n            // send back to user\\r\\n            self.gETH.safeTransferFrom(\\r\\n                address(this),\\r\\n                to,\\r\\n                poolId,\\r\\n                outAmount,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allowing users to deposit into a public staking pool.\\r\\n     * * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\\r\\n     * @param planetId id of the staking pool, withdrawal pool and gETH to be used.\\r\\n     * @param mingETH withdrawal pool parameter\\r\\n     * @param deadline withdrawal pool parameter\\r\\n     * // debt  msg.value\\r\\n     * // 100   10  => buyback\\r\\n     * // 100   100 => buyback\\r\\n     * // 10    100 => buyback + mint\\r\\n     * // 0     x   => mint\\r\\n     */\\r\\n    function depositPlanet(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 planetId,\\r\\n        uint256 mingETH,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 totalgETH) {\\r\\n        DATASTORE.authenticate(planetId, false, [false, true, false]);\\r\\n\\r\\n        require(msg.value > 1e15, \\\"StakeUtils: at least 0.001 eth \\\");\\r\\n        require(deadline > block.timestamp, \\\"StakeUtils: deadline not met\\\");\\r\\n        require(canDeposit(DATASTORE, planetId), \\\"StakeUtils: minting paused\\\");\\r\\n        uint256 debt = withdrawalPoolById(DATASTORE, planetId).getDebt();\\r\\n        if (debt >= msg.value) {\\r\\n            return\\r\\n                _buyback(\\r\\n                    self,\\r\\n                    DATASTORE,\\r\\n                    msg.sender,\\r\\n                    planetId,\\r\\n                    msg.value,\\r\\n                    mingETH,\\r\\n                    deadline\\r\\n                );\\r\\n        } else {\\r\\n            uint256 boughtgETH = 0;\\r\\n            uint256 remEth = msg.value;\\r\\n            if (debt > IGNORABLE_DEBT) {\\r\\n                boughtgETH = _buyback(\\r\\n                    self,\\r\\n                    DATASTORE,\\r\\n                    msg.sender,\\r\\n                    planetId,\\r\\n                    debt,\\r\\n                    0,\\r\\n                    deadline\\r\\n                );\\r\\n                remEth -= debt;\\r\\n            }\\r\\n            uint256 mintedgETH = (\\r\\n                ((remEth * self.gETH.denominator()) /\\r\\n                    self.gETH.pricePerShare(planetId))\\r\\n            );\\r\\n            self.gETH.mint(msg.sender, planetId, mintedgETH, \\\"\\\");\\r\\n            DATASTORE.addUintForId(planetId, \\\"surplus\\\", remEth);\\r\\n\\r\\n            require(\\r\\n                boughtgETH + mintedgETH >= mingETH,\\r\\n                \\\"StakeUtils: less than mingETH\\\"\\r\\n            );\\r\\n            if (self.TELESCOPE._isOracleActive()) {\\r\\n                bytes32 dailyBufferKey = DataStoreUtils.getKey(\\r\\n                    block.timestamp -\\r\\n                        (block.timestamp % OracleUtils.ORACLE_PERIOD),\\r\\n                    \\\"mintBuffer\\\"\\r\\n                );\\r\\n                DATASTORE.addUintForId(planetId, dailyBufferKey, mintedgETH);\\r\\n            }\\r\\n            return boughtgETH + mintedgETH;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** WITHDRAWAL(user) functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice figuring out how much of gETH and ETH should be donated in case of _burnSurplus\\r\\n     * @dev Refering to improvement proposal, fees are donated to DWP when surplus\\r\\n     * is being used as a withdrawal source. This is necessary to:\\r\\n     * 1. create a financial cost for boostrap period\\r\\n     */\\r\\n    function _donateBalancedFees(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 burnSurplus,\\r\\n        uint256 burnGeth\\r\\n    ) internal returns (uint256 EthDonation, uint256 gEthDonation) {\\r\\n        // find half of the fees to burn from surplus\\r\\n        uint256 fee = withdrawalPoolById(DATASTORE, poolId).getSwapFee();\\r\\n        EthDonation = (burnSurplus * fee) / PERCENTAGE_DENOMINATOR / 2;\\r\\n\\r\\n        // find the remaining half as gETH with respect to PPS\\r\\n        gEthDonation = (burnGeth * fee) / PERCENTAGE_DENOMINATOR / 2;\\r\\n\\r\\n        //send both fees to DWP\\r\\n        withdrawalPoolById(DATASTORE, poolId).donateBalancedFees{\\r\\n            value: EthDonation\\r\\n        }(EthDonation, gEthDonation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Refering to improvement proposal, it is now allowed to use surplus to\\r\\n     * * withdraw from public pools (after boostrap period).\\r\\n     * * This means, \\\"surplus\\\" becomes a parameter of, freshly named, Dynamic Staking Pools\\r\\n     * * which is the combination of DWP+public staking pools. Now, (assumed) there wont be\\r\\n     * * surplus and debt at the same time.\\r\\n     * @dev burnBuffer should be increased if the ORACLE is active, otherwise we can not\\r\\n     * verify the legitacy of Telescope price calculations\\r\\n     */\\r\\n    function _burnSurplus(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 gEthToWithdraw\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        uint256 pps = self.gETH.pricePerShare(poolId);\\r\\n\\r\\n        uint256 spentGeth = gEthToWithdraw;\\r\\n        uint256 spentSurplus = ((spentGeth * pps) / self.gETH.denominator());\\r\\n        uint256 surplus = DATASTORE.readUintForId(poolId, \\\"surplus\\\");\\r\\n        if (spentSurplus >= surplus) {\\r\\n            spentSurplus = surplus;\\r\\n            spentGeth = ((spentSurplus * self.gETH.denominator()) / pps);\\r\\n        }\\r\\n\\r\\n        (uint256 EthDonation, uint256 gEthDonation) = _donateBalancedFees(\\r\\n            DATASTORE,\\r\\n            poolId,\\r\\n            spentSurplus,\\r\\n            spentGeth\\r\\n        );\\r\\n\\r\\n        DATASTORE.subUintForId(poolId, \\\"surplus\\\", spentSurplus);\\r\\n        self.gETH.burn(address(this), poolId, spentGeth - gEthDonation);\\r\\n\\r\\n        if (self.TELESCOPE._isOracleActive()) {\\r\\n            bytes32 dailyBufferKey = DataStoreUtils.getKey(\\r\\n                block.timestamp - (block.timestamp % OracleUtils.ORACLE_PERIOD),\\r\\n                \\\"burnBuffer\\\"\\r\\n            );\\r\\n            DATASTORE.addUintForId(poolId, dailyBufferKey, spentGeth);\\r\\n        }\\r\\n\\r\\n        return (spentSurplus - (EthDonation * 2), gEthToWithdraw - spentGeth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice withdraw funds from Dynamic Staking Pool (Public Staking Pool + DWP)\\r\\n     * * If not in Boostrap Period, first checks the surplus, than swaps from DWP to create debt\\r\\n     * @param gEthToWithdraw amount of g-derivative that should be withdrawn\\r\\n     * @param minETH TX is expected to revert by Swap.sol if not meet\\r\\n     * @param deadline TX is expected to revert by Swap.sol if not meet\\r\\n     */\\r\\n    function withdrawPlanet(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 gEthToWithdraw,\\r\\n        uint256 minETH,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 EthToSend) {\\r\\n        DATASTORE.authenticate(poolId, false, [false, true, false]);\\r\\n\\r\\n        require(deadline > block.timestamp, \\\"StakeUtils: deadline not met\\\");\\r\\n        {\\r\\n            // transfer token first\\r\\n            uint256 beforeBalance = self.gETH.balanceOf(address(this), poolId);\\r\\n\\r\\n            self.gETH.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                poolId,\\r\\n                gEthToWithdraw,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            // Use the transferred amount\\r\\n            gEthToWithdraw =\\r\\n                self.gETH.balanceOf(address(this), poolId) -\\r\\n                beforeBalance;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            block.timestamp >\\r\\n            DATASTORE.readUintForId(poolId, \\\"initiated\\\") + self.BOOSTRAP_PERIOD\\r\\n        ) {\\r\\n            (EthToSend, gEthToWithdraw) = _burnSurplus(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                poolId,\\r\\n                gEthToWithdraw\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (gEthToWithdraw > 0) {\\r\\n            EthToSend += withdrawalPoolById(DATASTORE, poolId).swap(\\r\\n                1,\\r\\n                0,\\r\\n                gEthToWithdraw,\\r\\n                EthToSend >= minETH ? 0 : minETH - EthToSend,\\r\\n                deadline\\r\\n            );\\r\\n        }\\r\\n        (bool sent, ) = payable(msg.sender).call{value: EthToSend}(\\\"\\\");\\r\\n        require(sent, \\\"StakeUtils: Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** STAKE(operator) functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice internal function that checks if validator is allowed\\r\\n     * by Telescope and also not in isolationMode\\r\\n     */\\r\\n    function _canStake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata pubkey,\\r\\n        uint256 verificationIndex\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            self.TELESCOPE._canStake(pubkey, verificationIndex) &&\\r\\n            !(\\r\\n                miniGovernanceById(\\r\\n                    DATASTORE,\\r\\n                    self.TELESCOPE._validators[pubkey].poolId\\r\\n                ).isolationMode()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice external function to check if a validator can use planet funds\\r\\n     */\\r\\n    function canStake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata pubkey\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            _canStake(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                pubkey,\\r\\n                self.TELESCOPE.VERIFICATION_INDEX\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validator Credentials Proposal function, first step of crating validators.\\r\\n     * * Once a pubKey is proposed and not alienated for some time,\\r\\n     * * it is optimistically allowed to take funds from staking pools.\\r\\n     *\\r\\n     * @param poolId the id of the staking pool whose TYPE can be 5 or 6.\\r\\n     * @param operatorId the id of the Operator whose maintainer calling this function\\r\\n     * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\\r\\n     * @param signatures Array of BLS12-381 signatures of the validators that will be proposed\\r\\n     *\\r\\n     * @dev DEPOSIT_AMOUNT_PRESTAKE = 1 ether, which is the minimum number to create validator.\\r\\n     * 31 Ether will be staked after verification of oracles. 32 in total.\\r\\n     * 1 ether will be sent back to Node Operator when finalized deposit is successful.\\r\\n     * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\\r\\n     * @dev ProposeStake requires enough funds within maintainerWallet.\\r\\n     * @dev Max number of validators to propose is MAX_DEPOSITS_PER_CALL (currently 64)\\r\\n     */\\r\\n    function proposeStake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        bytes[] calldata pubkeys,\\r\\n        bytes[] calldata signatures\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(operatorId, true, [true, true, false]);\\r\\n        DATASTORE.authenticate(poolId, false, [false, true, true]);\\r\\n        require(\\r\\n            !OracleUtils.isPrisoned(DATASTORE, operatorId),\\r\\n            \\\"StakeUtils: operator is in prison, get in touch with governance\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            pubkeys.length == signatures.length,\\r\\n            \\\"StakeUtils: pubkeys and signatures NOT same length\\\"\\r\\n        );\\r\\n        require(\\r\\n            pubkeys.length > 0 && pubkeys.length <= DCU.MAX_DEPOSITS_PER_CALL,\\r\\n            \\\"StakeUtils: MAX 64 nodes\\\"\\r\\n        );\\r\\n        require(\\r\\n            (DATASTORE.readUintForId(operatorId, \\\"totalActiveValidators\\\") +\\r\\n                pubkeys.length) <= self.TELESCOPE.MONOPOLY_THRESHOLD,\\r\\n            \\\"StakeUtils: IceBear does NOT like monopolies\\\"\\r\\n        );\\r\\n        require(\\r\\n            (DATASTORE.readUintForId(\\r\\n                poolId,\\r\\n                DataStoreUtils.getKey(operatorId, \\\"proposedValidators\\\")\\r\\n            ) +\\r\\n                DATASTORE.readUintForId(\\r\\n                    poolId,\\r\\n                    DataStoreUtils.getKey(operatorId, \\\"activeValidators\\\")\\r\\n                ) +\\r\\n                pubkeys.length) <=\\r\\n                operatorAllowance(DATASTORE, poolId, operatorId),\\r\\n            \\\"StakeUtils: NOT enough allowance\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            DATASTORE.readUintForId(poolId, \\\"surplus\\\") >=\\r\\n                DCU.DEPOSIT_AMOUNT * pubkeys.length,\\r\\n            \\\"StakeUtils: NOT enough surplus\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE._decreaseMaintainerWallet(\\r\\n            operatorId,\\r\\n            pubkeys.length * DCU.DEPOSIT_AMOUNT_PRESTAKE\\r\\n        );\\r\\n\\r\\n        DATASTORE.subUintForId(\\r\\n            poolId,\\r\\n            \\\"surplus\\\",\\r\\n            (DCU.DEPOSIT_AMOUNT * pubkeys.length)\\r\\n        );\\r\\n\\r\\n        {\\r\\n            uint256[2] memory fees = [\\r\\n                DATASTORE.getMaintainerFee(poolId),\\r\\n                DATASTORE.getMaintainerFee(operatorId)\\r\\n            ];\\r\\n            bytes memory withdrawalCredential = DATASTORE.readBytesForId(\\r\\n                poolId,\\r\\n                \\\"withdrawalCredential\\\"\\r\\n            );\\r\\n            uint256 expectedExit = block.timestamp +\\r\\n                DATASTORE.readUintForId(operatorId, \\\"validatorPeriod\\\");\\r\\n            uint256 nextValidatorsIndex = self.TELESCOPE.VALIDATORS_INDEX + 1;\\r\\n            for (uint256 i; i < pubkeys.length; i++) {\\r\\n                require(\\r\\n                    self.TELESCOPE._validators[pubkeys[i]].state == 0,\\r\\n                    \\\"StakeUtils: Pubkey already used or alienated\\\"\\r\\n                );\\r\\n                require(\\r\\n                    pubkeys[i].length == DCU.PUBKEY_LENGTH,\\r\\n                    \\\"StakeUtils: PUBKEY_LENGTH ERROR\\\"\\r\\n                );\\r\\n                require(\\r\\n                    signatures[i].length == DCU.SIGNATURE_LENGTH,\\r\\n                    \\\"StakeUtils: SIGNATURE_LENGTH ERROR\\\"\\r\\n                );\\r\\n\\r\\n                DCU.depositValidator(\\r\\n                    pubkeys[i],\\r\\n                    withdrawalCredential,\\r\\n                    signatures[i],\\r\\n                    DCU.DEPOSIT_AMOUNT_PRESTAKE\\r\\n                );\\r\\n\\r\\n                self.TELESCOPE._validators[pubkeys[i]] = OracleUtils.Validator(\\r\\n                    1,\\r\\n                    nextValidatorsIndex + i,\\r\\n                    poolId,\\r\\n                    operatorId,\\r\\n                    fees[0],\\r\\n                    fees[1],\\r\\n                    block.timestamp,\\r\\n                    expectedExit,\\r\\n                    0,\\r\\n                    signatures[i]\\r\\n                );\\r\\n                emit ProposeStaked(pubkeys[i], poolId, operatorId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        DATASTORE.addUintForId(\\r\\n            poolId,\\r\\n            DataStoreUtils.getKey(operatorId, \\\"proposedValidators\\\"),\\r\\n            pubkeys.length\\r\\n        );\\r\\n        DATASTORE.addUintForId(\\r\\n            poolId,\\r\\n            \\\"secured\\\",\\r\\n            (DCU.DEPOSIT_AMOUNT * pubkeys.length)\\r\\n        );\\r\\n\\r\\n        self.TELESCOPE.VALIDATORS_INDEX += pubkeys.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\\r\\n     *  1 Eth per successful validator boostraping is returned back to MaintainerWallet.\\r\\n     *\\r\\n     *  @param operatorId the id of the Operator whose maintainer calling this function\\r\\n     *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\\r\\n     *\\r\\n     *  @dev To save gas cost, pubkeys should be arranged by planedIds.\\r\\n     *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\\r\\n     *  pk1, pk2, pk3 from planet1\\r\\n     *  pk4, pk5 from planet2\\r\\n     *  pk6 from planet3\\r\\n     *  seperate them in similar groups as much as possible.\\r\\n     *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)\\r\\n     *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\\r\\n     */\\r\\n    function beaconStake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 operatorId,\\r\\n        bytes[] calldata pubkeys\\r\\n    ) external {\\r\\n        DATASTORE.authenticate(operatorId, true, [true, true, false]);\\r\\n\\r\\n        require(\\r\\n            !self.TELESCOPE._isOracleActive(),\\r\\n            \\\"StakeUtils: ORACLE is active\\\"\\r\\n        );\\r\\n        require(\\r\\n            pubkeys.length > 0 && pubkeys.length <= DCU.MAX_DEPOSITS_PER_CALL,\\r\\n            \\\"StakeUtils: MAX 64 nodes\\\"\\r\\n        );\\r\\n        {\\r\\n            uint256 verificationIndex = self.TELESCOPE.VERIFICATION_INDEX;\\r\\n            for (uint256 j; j < pubkeys.length; j++) {\\r\\n                require(\\r\\n                    _canStake(self, DATASTORE, pubkeys[j], verificationIndex),\\r\\n                    \\\"StakeUtils: NOT all pubkeys are stakeable\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            bytes32 activeValKey = DataStoreUtils.getKey(\\r\\n                operatorId,\\r\\n                \\\"activeValidators\\\"\\r\\n            );\\r\\n            bytes32 proposedValKey = DataStoreUtils.getKey(\\r\\n                operatorId,\\r\\n                \\\"proposedValidators\\\"\\r\\n            );\\r\\n\\r\\n            uint256 planetId = self.TELESCOPE._validators[pubkeys[0]].poolId;\\r\\n            bytes memory withdrawalCredential = DATASTORE.readBytesForId(\\r\\n                planetId,\\r\\n                \\\"withdrawalCredential\\\"\\r\\n            );\\r\\n\\r\\n            uint256 lastPlanetChange;\\r\\n            for (uint256 i; i < pubkeys.length; i++) {\\r\\n                if (planetId != self.TELESCOPE._validators[pubkeys[i]].poolId) {\\r\\n                    DATASTORE.subUintForId(\\r\\n                        planetId,\\r\\n                        \\\"secured\\\",\\r\\n                        (DCU.DEPOSIT_AMOUNT * (i - lastPlanetChange))\\r\\n                    );\\r\\n                    DATASTORE.addUintForId(\\r\\n                        planetId,\\r\\n                        activeValKey,\\r\\n                        (i - lastPlanetChange)\\r\\n                    );\\r\\n                    DATASTORE.subUintForId(\\r\\n                        planetId,\\r\\n                        proposedValKey,\\r\\n                        (i - lastPlanetChange)\\r\\n                    );\\r\\n                    lastPlanetChange = i;\\r\\n                    planetId = self.TELESCOPE._validators[pubkeys[i]].poolId;\\r\\n                    withdrawalCredential = DATASTORE.readBytesForId(\\r\\n                        planetId,\\r\\n                        \\\"withdrawalCredential\\\"\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                bytes memory signature = self\\r\\n                    .TELESCOPE\\r\\n                    ._validators[pubkeys[i]]\\r\\n                    .signature;\\r\\n                DCU.depositValidator(\\r\\n                    pubkeys[i],\\r\\n                    withdrawalCredential,\\r\\n                    signature,\\r\\n                    DCU.DEPOSIT_AMOUNT - DCU.DEPOSIT_AMOUNT_PRESTAKE\\r\\n                );\\r\\n\\r\\n                self.TELESCOPE._validators[pubkeys[i]].state = 2;\\r\\n                emit BeaconStaked(pubkeys[i]);\\r\\n            }\\r\\n\\r\\n            DATASTORE.subUintForId(\\r\\n                planetId,\\r\\n                \\\"secured\\\",\\r\\n                DCU.DEPOSIT_AMOUNT * (pubkeys.length - lastPlanetChange)\\r\\n            );\\r\\n            DATASTORE.addUintForId(\\r\\n                planetId,\\r\\n                activeValKey,\\r\\n                (pubkeys.length - lastPlanetChange)\\r\\n            );\\r\\n            DATASTORE.subUintForId(\\r\\n                planetId,\\r\\n                proposedValKey,\\r\\n                (pubkeys.length - lastPlanetChange)\\r\\n            );\\r\\n            DATASTORE.addUintForId(\\r\\n                operatorId,\\r\\n                \\\"totalActiveValidators\\\",\\r\\n                pubkeys.length\\r\\n            );\\r\\n        }\\r\\n        DATASTORE._increaseMaintainerWallet(\\r\\n            operatorId,\\r\\n            DCU.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** UNSTAKE(operator) functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice allows improsening an Operator if the validator have not been exited until expectedExit\\r\\n     * @dev anyone can call this function\\r\\n     * @dev if operator has given enough allowence, they can rotate the validators to avoid being prisoned\\r\\n     */\\r\\n    function blameOperator(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes calldata pk\\r\\n    ) external {\\r\\n        if (\\r\\n            block.timestamp > self.TELESCOPE._validators[pk].expectedExit &&\\r\\n            self.TELESCOPE._validators[pk].state != 3\\r\\n        ) {\\r\\n            OracleUtils.imprison(\\r\\n                DATASTORE,\\r\\n                self.TELESCOPE._validators[pk].operatorId\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows giving a unstake signal, meaning validator has been exited.\\r\\n     * * And boost can be claimed upon arrival of the funds.\\r\\n     * @dev to maintain the health of Geode Universe, we should protect the race conditions.\\r\\n     * * opeators should know when others are unstaking so they don't spend money for no boost.\\r\\n     */\\r\\n    function signalUnstake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        bytes[] calldata pubkeys\\r\\n    ) external {\\r\\n        uint256 expectedOperator = self\\r\\n            .TELESCOPE\\r\\n            ._validators[pubkeys[0]]\\r\\n            .operatorId;\\r\\n\\r\\n        DATASTORE.authenticate(expectedOperator, true, [true, true, false]);\\r\\n\\r\\n        for (uint256 i = 0; i < pubkeys.length; i++) {\\r\\n            require(self.TELESCOPE._validators[pubkeys[i]].state == 2);\\r\\n            require(\\r\\n                self.TELESCOPE._validators[pubkeys[i]].operatorId ==\\r\\n                    expectedOperator\\r\\n            );\\r\\n\\r\\n            self.TELESCOPE._validators[pubkeys[i]].state = 3;\\r\\n\\r\\n            emit UnstakeSignal(\\r\\n                self.TELESCOPE._validators[pubkeys[i]].poolId,\\r\\n                pubkeys[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Operator finalizing an Unstake event by calling Telescope's multisig:\\r\\n     * * distributing fees + boost\\r\\n     * * distributes rewards by burning the derivative\\r\\n     * * does a buyback if necessary\\r\\n     * * putting the extra within surplus.\\r\\n     * @param isExit according to eip-4895, there can be multiple ways to distriute the rewards\\r\\n     * * and not all of them requires exit. Even in such cases reward can be catched from\\r\\n     * * withdrawal credential and distributed.\\r\\n     *\\r\\n     * @dev although OnlyOracle, logically this has nothing to do with Telescope.\\r\\n     * * So we are keeping it here.\\r\\n     * * @dev operator is prisoned if:\\r\\n     * 1. withdrawn without signalled, being sneaky. in such case they also doesn't receive the boost\\r\\n     * 2. signalled without withdrawal, deceiving other operators\\r\\n     */\\r\\n    function fetchUnstake(\\r\\n        StakePool storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 poolId,\\r\\n        uint256 operatorId,\\r\\n        bytes[] calldata pubkeys,\\r\\n        uint256[] calldata balances,\\r\\n        bool[] calldata isExit\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == self.TELESCOPE.ORACLE_POSITION,\\r\\n            \\\"StakeUtils: sender NOT ORACLE\\\"\\r\\n        );\\r\\n        require(\\r\\n            !self.TELESCOPE._isOracleActive(),\\r\\n            \\\"StakeUtils: ORACLE is active\\\"\\r\\n        );\\r\\n\\r\\n        uint256 cumBal;\\r\\n        uint256[2] memory fees;\\r\\n        {\\r\\n            uint256 exitCount;\\r\\n\\r\\n            for (uint256 i = 0; i < pubkeys.length; i++) {\\r\\n                uint256 balance = balances[i];\\r\\n                cumBal += balances[i];\\r\\n\\r\\n                if (isExit[i]) {\\r\\n                    exitCount += 1;\\r\\n                    if (balance > DCU.DEPOSIT_AMOUNT) {\\r\\n                        balance -= DCU.DEPOSIT_AMOUNT;\\r\\n                    } else {\\r\\n                        balance = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (balance > 0) {\\r\\n                    fees[0] += ((balance *\\r\\n                        self.TELESCOPE._validators[pubkeys[i]].poolFee) /\\r\\n                        PERCENTAGE_DENOMINATOR);\\r\\n\\r\\n                    if (poolId != operatorId) {\\r\\n                        fees[1] += ((balance *\\r\\n                            self\\r\\n                                .TELESCOPE\\r\\n                                ._validators[pubkeys[i]]\\r\\n                                .operatorFee) / PERCENTAGE_DENOMINATOR);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            {\\r\\n                bool success = miniGovernanceById(DATASTORE, poolId)\\r\\n                    .claimUnstake(cumBal);\\r\\n                require(success, \\\"StakeUtils: Failed to claim\\\");\\r\\n            }\\r\\n\\r\\n            // decrease the sum of isExit activeValidators and totalValidators\\r\\n            DATASTORE.subUintForId(\\r\\n                poolId,\\r\\n                DataStoreUtils.getKey(operatorId, \\\"activeValidators\\\"),\\r\\n                exitCount\\r\\n            );\\r\\n            DATASTORE.subUintForId(\\r\\n                operatorId,\\r\\n                \\\"totalActiveValidators\\\",\\r\\n                exitCount\\r\\n            );\\r\\n\\r\\n            cumBal = cumBal - (fees[0] + fees[1]);\\r\\n        }\\r\\n\\r\\n        uint256 debt = withdrawalPoolById(DATASTORE, poolId).getDebt();\\r\\n        {\\r\\n            uint256 boost = getWithdrawalBoost(DATASTORE, poolId);\\r\\n            if (boost > 0 && debt > IGNORABLE_DEBT && poolId != operatorId) {\\r\\n                uint256 arb = withdrawalPoolById(DATASTORE, poolId)\\r\\n                    .calculateSwap(0, 1, cumBal);\\r\\n                arb -=\\r\\n                    (cumBal * self.gETH.denominator()) /\\r\\n                    self.gETH.pricePerShare(poolId);\\r\\n                boost = (arb * boost) / PERCENTAGE_DENOMINATOR;\\r\\n\\r\\n                fees[1] += boost;\\r\\n                cumBal -= boost;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (debt > IGNORABLE_DEBT) {\\r\\n            if (debt >= cumBal) {\\r\\n                debt = cumBal;\\r\\n            }\\r\\n            _buyback(\\r\\n                self,\\r\\n                DATASTORE,\\r\\n                address(0), // burn\\r\\n                poolId,\\r\\n                debt,\\r\\n                0,\\r\\n                type(uint256).max\\r\\n            );\\r\\n            cumBal -= debt;\\r\\n        }\\r\\n\\r\\n        if (cumBal > 0) {\\r\\n            DATASTORE.addUintForId(poolId, \\\"surplus\\\", cumBal);\\r\\n        }\\r\\n\\r\\n        DATASTORE._increaseMaintainerWallet(poolId, fees[0]);\\r\\n        DATASTORE._increaseMaintainerWallet(operatorId, fees[1]);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x33dc030e691e6d62bae6b8402f40d8c7933cd77a23decc59506db28c54694d90\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n// This interface is designed to be compatible with the Vyper version.\\r\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\r\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ed71fce79822f89cd1599048cf776f3aebc82e0521b46a35c3d6c74c85e7c1f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20InterfacePermitUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"./IgETH.sol\\\";\\r\\n\\r\\ninterface IERC20InterfacePermitUpgradable {\\r\\n    function initialize(\\r\\n        uint256 id_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address gETH_1155\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2de0a3b7b87ebc81abe043870ccb18635e6ed66ddfa3fa6f2c918720e952ad33\",\"license\":\"MIT\"},\"contracts/interfaces/ILPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface ILPToken {\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function initialize(string memory name, string memory symbol)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external;\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6b2b267ab9433da79265b376641d50d5ac1c6ed77bdb822b58f908fc0b70ed9d\",\"license\":\"MIT\"},\"contracts/interfaces/IMiniGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\r\\n\\r\\ninterface IMiniGovernance {\\r\\n    function initialize(\\r\\n        address _gETH,\\r\\n        address _PORTAL,\\r\\n        address _MAINTAINER,\\r\\n        uint256 _ID,\\r\\n        uint256 _VERSION\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function getCurrentVersion() external view returns (uint256);\\r\\n\\r\\n    function getProposedVersion() external view returns (uint256);\\r\\n\\r\\n    function isolationMode() external view returns (bool);\\r\\n\\r\\n    function fetchUpgradeProposal() external;\\r\\n\\r\\n    function approveProposal(uint256 _id) external;\\r\\n\\r\\n    function refreshSenate(bytes32 newPassword) external;\\r\\n\\r\\n    function changeMaintainer(\\r\\n        bytes calldata password,\\r\\n        bytes32 newPasswordHash,\\r\\n        address newMaintainer\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    function claimUnstake(uint256 claim) external returns (bool success);\\r\\n}\\r\\n\",\"keccak256\":\"0xbdfef16de87e422f47fdbd27a47741b6612a11d869b972cd83690ed72fb10b0e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./IgETH.sol\\\";\\r\\n\\r\\ninterface ISwap {\\r\\n    function donateBalancedFees(uint256 EthDonation, uint256 gEthDonation)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    // pool data view functions\\r\\n    function getERC1155() external view returns (address);\\r\\n\\r\\n    function getA() external view returns (uint256);\\r\\n\\r\\n    function getAPrecise() external view returns (uint256);\\r\\n\\r\\n    function getSwapFee() external view returns (uint256);\\r\\n\\r\\n    function getToken() external view returns (uint256);\\r\\n\\r\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n    function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n    function getDebt() external view returns (uint256);\\r\\n\\r\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\r\\n\\r\\n    // min return calculation functions\\r\\n    function calculateSwap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidity(uint256 amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function calculateRemoveLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex\\r\\n    ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n    // state modifying functions\\r\\n    function initialize(\\r\\n        IgETH _gEth,\\r\\n        uint256 _pooledTokenId,\\r\\n        string memory lpTokenName,\\r\\n        string memory lpTokenSymbol,\\r\\n        uint256 _a,\\r\\n        uint256 _fee,\\r\\n        uint256 _adminFee,\\r\\n        address lpTokenTargetAddress\\r\\n    ) external returns (address lpToken);\\r\\n\\r\\n    function swap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx,\\r\\n        uint256 minDy,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 minToMint,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata minAmounts,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function removeLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex,\\r\\n        uint256 minAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityImbalance(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 maxBurnAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdrawAdminFees() external;\\r\\n\\r\\n    function setAdminFee(uint256 newAdminFee) external;\\r\\n\\r\\n    function setSwapFee(uint256 newSwapFee) external;\\r\\n\\r\\n    function rampA(uint256 futureA, uint256 futureTime) external;\\r\\n\\r\\n    function stopRampA() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x61b7c8501a075177dbce108e72b015434ef0cd35a20de5a9f74c61d34836978f\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgETH {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    function burnBatch(\\r\\n        address account,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) external;\\r\\n\\r\\n    function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function denominator() external view returns (uint256);\\r\\n\\r\\n    function pricePerShare(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setPricePerShare(uint256 price, uint256 id) external;\\r\\n\\r\\n    function isInterface(address _interface, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setInterface(\\r\\n        address _interface,\\r\\n        uint256 id,\\r\\n        bool isSet\\r\\n    ) external;\\r\\n\\r\\n    function updateMinterRole(address Minter) external;\\r\\n\\r\\n    function updatePauserRole(address Pauser) external;\\r\\n\\r\\n    function updateOracleRole(address Oracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x233c5eef588ce7699ead6ef2eddd219104331f819ffab3ac5dcd9a5aa09667f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x615ea66200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101fa5760003560e01c806394bf980d11610119578063bbf1555c116100ac578063d30807f81161007b578063d30807f814610517578063e0b9dabe14610537578063f1016dfb14610557578063fd805ee51461057757600080fd5b8063bbf1555c146104b1578063caafe848146104c4578063ccc68fc3146104d7578063d1dedac8146104f757600080fd5b8063a4ff4e5e116100e8578063a4ff4e5e1461045b578063b13302881461047b578063b3cd425414610485578063b3ce61f31461049157600080fd5b806394bf980d146103db578063955ba8d3146103fb5780639877d3261461041b5780639e8c22831461043b57600080fd5b8063521f883e116101915780637948bd45116101605780637948bd45146103715780637e49bfac1461037b57806383faca401461039b5780638c3c85ce146103bb57600080fd5b8063521f883e14610302578063569391b6146103225780636d6079b21461034257806376b050541461036257600080fd5b80633147a52a116101cd5780633147a52a146102965780633802c20d146102b65780633a66037d146102d657806349937056146102e957600080fd5b80630d552313146101ff57806316614f5e14610234578063303cb36f1461025657806330d2c2ac14610276575b600080fd5b81801561020b57600080fd5b5061021f61021a366004615447565b610597565b60405190151581526020015b60405180910390f35b81801561024057600080fd5b5061025461024f366004615712565b6105d6565b005b81801561026257600080fd5b506102546102713660046157fd565b610696565b81801561028257600080fd5b5061025461029136600461550a565b610dc3565b8180156102a257600080fd5b506102546102b1366004615643565b610ded565b8180156102c257600080fd5b506102546102d1366004615497565b611411565b61021f6102e43660046155bb565b6115aa565b6102f4630966018081565b60405190815260200161022b565b81801561030e57600080fd5b5061025461031d36600461550a565b6115c9565b81801561032e57600080fd5b5061025461033d366004615447565b6116be565b81801561034e57600080fd5b5061021f61035d36600461550a565b6117ad565b6102f4670de0b6b3a764000081565b6102f46203f48081565b81801561038757600080fd5b5061025461039636600461550a565b6119ec565b8180156103a757600080fd5b506102546103b636600461550a565b611b7a565b8180156103c757600080fd5b506102546103d6366004615602565b611cdc565b8180156103e757600080fd5b506102546103f63660046155bb565b611ec6565b81801561040757600080fd5b506102f46104163660046158c0565b611fcd565b81801561042757600080fd5b50610254610436366004615469565b612435565b81801561044757600080fd5b50610254610456366004615447565b6124de565b81801561046757600080fd5b50610254610476366004615568565b6125cb565b6102f4624f1a0081565b6102f46402540be40081565b81801561049d57600080fd5b506102546104ac366004615536565b612807565b61021f6104bf366004615447565b6129d3565b6102f46104d236600461550a565b612a78565b6104ea6104e5366004615447565b612ab9565b60405161022b9190615ac5565b81801561050357600080fd5b50610254610512366004615536565b612bac565b81801561052357600080fd5b506102546105323660046156a4565b612c40565b81801561054357600080fd5b506102f46105523660046158fb565b612f09565b81801561056357600080fd5b50610254610572366004615767565b6132b3565b81801561058357600080fd5b5061021f610592366004615536565b613c63565b6040805160608101825260018082526020820181905260009282018390526105c29185918591613d3d565b6105cd838334613ec3565b90505b92915050565b85601001548311156106035760405162461bcd60e51b81526004016105fa90615bcf565b60405180910390fd5b604051635fae04e760e01b81526004810186905260248101859052604481018490526001600160a01b038316606482015273672FC28Ba198c8d4e392c49F0996dA612cbB433090635fae04e79060840160006040518083038186803b15801561066b57600080fd5b505af415801561067f573d6000803e3d6000fd5b5050505061068e858583611b7a565b505050505050565b60028a01546001600160a01b031633146106f25760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a2073656e646572204e4f54204f5241434c4500000060448201526064016105fa565b6106fe8a600101613ee4565b1561074b5760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a204f5241434c45206973206163746976650000000060448201526064016105fa565b6000610755615262565b6000805b8881101561091f57600088888381811061077557610775615e1e565b90506020020135905088888381811061079057610790615e1e565b90506020020135856107a29190615cea565b94508686838181106107b6576107b6615e1e565b90506020020160208101906107cb91906153f4565b1561080c576107db600184615cea565b92506801bc16d674ec800000811115610808576108016801bc16d674ec80000082615d35565b905061080c565b5060005b801561090c576402540be4008f6001016009018c8c8581811061083157610831615e1e565b90506020028101906108439190615ca3565b604051610851929190615a61565b9081526020016040518091039020600401548261086e9190615d16565b6108789190615d02565b84518590610887908390615cea565b9052508c8c1461090c576402540be4008f6001016009018c8c858181106108b0576108b0615e1e565b90506020028101906108c29190615ca3565b6040516108d0929190615a61565b908152602001604051809103902060050154826108ed9190615d16565b6108f79190615d02565b602085018051610908908390615cea565b9052505b508061091781615dad565b915050610759565b50600061092c8d8d613f17565b6001600160a01b031663c5dd6fee856040518263ffffffff1660e01b815260040161095991815260200190565b602060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190615411565b9050806109fa5760405162461bcd60e51b815260206004820152601b60248201527f5374616b655574696c733a204661696c656420746f20636c61696d000000000060448201526064016105fa565b50610a3a8b610a318c6040518060400160405280601081526020016f61637469766556616c696461746f727360801b815250613f35565b8e919084613f68565b610a5e8c8b74746f74616c41637469766556616c696461746f727360581b84613f68565b60208201518251610a6f9190615cea565b610a799084615d35565b9250506000610a888c8c613fc9565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af8919061542e565b90506000610b068d8d613fe7565b9050600081118015610b1f5750670de0b6b3a764000082115b8015610b2b57508a8c14155b15610d39576000610b3c8e8e613fc9565b60405163a95b089f60e01b81526000600482015260016024820152604481018790526001600160a01b03919091169063a95b089f9060640160206040518083038186803b158015610b8c57600080fd5b505afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc4919061542e565b90508e60000160009054906101000a90046001600160a01b03166001600160a01b031663f759cc3b8e6040518263ffffffff1660e01b8152600401610c0b91815260200190565b60206040518083038186803b158015610c2357600080fd5b505afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b919061542e565b8f54604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015610c9f57600080fd5b505afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061542e565b610ce19087615d16565b610ceb9190615d02565b610cf59082615d35565b90506402540be400610d078383615d16565b610d119190615d02565b91508184600160200201818151610d289190615cea565b905250610d358286615d35565b9450505b50670de0b6b3a7640000811115610d7557828110610d545750815b610d678d8d60008e85600060001961403f565b50610d728184615d35565b92505b8215610d9157610d918c8c66737572706c757360c81b866141d7565b610da68b8360005b60200201518e9190613ec3565b50610db38a836001610d99565b5050505050505050505050505050565b610dd58282635459504560e01b61422d565b600b14610de157600080fd5b600f9092019190915550565b60408051606081018252600180825260208201819052600092820192909252610e1a918691869190613d3d565b610e2685600101613ee4565b15610e735760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a204f5241434c45206973206163746976650000000060448201526064016105fa565b8015801590610e83575060408111155b610eca5760405162461bcd60e51b81526020600482015260186024820152775374616b655574696c733a204d4158203634206e6f64657360401b60448201526064016105fa565b600685015460005b82811015610f7957610f098787868685818110610ef157610ef1615e1e565b9050602002810190610f039190615ca3565b8661427f565b610f675760405162461bcd60e51b815260206004820152602960248201527f5374616b655574696c733a204e4f5420616c6c207075626b65797320617265206044820152687374616b6561626c6560b81b60648201526084016105fa565b80610f7181615dad565b915050610ed2565b50506000610faf846040518060400160405280601081526020016f61637469766556616c696461746f727360801b815250613f35565b90506000610fe7856040518060400160405280601281526020017170726f706f73656456616c696461746f727360701b815250613f35565b90506000600a880185858381610fff57610fff615e1e565b90506020028101906110119190615ca3565b60405161101f929190615a61565b90815260405190819003602001902060020154905060006110588883731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b614345565b90506000805b8681101561136957600a8b0188888381811061107c5761107c615e1e565b905060200281019061108e9190615ca3565b60405161109c929190615a61565b9081526020016040518091039020600201548414611183576110e984661cd958dd5c995960ca1b6110cd8585615d35565b6110e0906801bc16d674ec800000615d16565b8d929190613f68565b61110184876110f88585615d35565b8d9291906141d7565b61111084866110e08585615d35565b905080600a8b0188888381811061112957611129615e1e565b905060200281019061113b9190615ca3565b604051611149929190615a61565b9081526040519081900360200190206002015493506111808a85731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b614345565b92505b6000600a8c0189898481811061119b5761119b615e1e565b90506020028101906111ad9190615ca3565b6040516111bb929190615a61565b908152602001604051809103902060090180546111d790615d78565b80601f016020809104026020016040519081016040528092919081815260200182805461120390615d78565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b505050505090506112a089898481811061126c5761126c615e1e565b905060200281019061127e9190615ca3565b868461129b670de0b6b3a76400006801bc16d674ec800000615d35565b61441f565b6002600a8d018a8a858181106112b8576112b8615e1e565b90506020028101906112ca9190615ca3565b6040516112d8929190615a61565b908152604051908190036020019020805460ff9290921660ff199092169190911790557fbc28e8595f241c3a0166b245c13eb3884c23fe15e7d51b7a9ab1395284fd992489898481811061132e5761132e615e1e565b90506020028101906113409190615ca3565b60405161134e929190615b12565b60405180910390a1508061136181615dad565b91505061105e565b5061139f83661cd958dd5c995960ca1b611383848a615d35565b611396906801bc16d674ec800000615d16565b8c929190613f68565b6113b783866113ae848a615d35565b8c9291906141d7565b6113c68385611396848a615d35565b6113ea898974746f74616c41637469766556616c696461746f727360581b896141d7565b5061068e93508692506114099150849050670de0b6b3a7640000615d16565b869190613ec3565b6040805160608101825260008082526001602083018190529282019290925261143e918891889190613d3d565b600061144a8787613f17565b6001600160a01b0316637bf821e9868686866040518563ffffffff1660e01b815260040161147b9493929190615b26565b602060405180830381600087803b15801561149557600080fd5b505af11580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190615411565b9050806115285760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a20756e7375636365737366756c20696e74657261636044820152633a34b7b760e11b60648201526084016105fa565b6040516355e66bad60e01b815260048101889052602481018790526001600160a01b038316604482015273672FC28Ba198c8d4e392c49F0996dA612cbB4330906355e66bad9060640160006040518083038186803b15801561158957600080fd5b505af415801561159d573d6000803e3d6000fd5b5050505050505050505050565b60006115c085858585896001016005015461427f565b95945050505050565b60408051606081018252600081526001602082018190529181018290526115f4918591859190613d3d565b61162c82691c1c9a5bdc909bdbdcdd60b21b61162386836e1dda5d1a191c985dd85b109bdbdcdd608a1b61422d565b869291906144e0565b61164c826a0c4dedee6e8a6eed2e8c6d60ab1b6116236203f48042615cea565b61166a83836e1dda5d1a191c985dd85b109bdbdcdd608a1b846144e0565b7fc4e4809b1d2eee26da1591233b49c17f3755402df1c9c71533883844bdf2403b828261169a6203f48042615cea565b604080519384526020840192909252908201526060015b60405180910390a1505050565b60408051606081018252600081526001602082018190529181018290526116e9918491849190613d3d565b61170282826a1cdd185ad954185d5cd95960aa1b61422d565b1561175a5760405162461bcd60e51b815260206004820152602260248201527f5374616b655574696c733a207374616b696e6720616c72656164792070617573604482015261195960f21b60648201526084016105fa565b61177582826a1cdd185ad954185d5cd95960aa1b60016144e0565b6040518181527fcf61a69571fcb149379b9264df303e430a464346ff265a1bf29782c491aba6d5906020015b60405180910390a15050565b604080516060810182526001808252602082018190529181018290526000916117d99186918691613d3d565b60405163f7325cdf60e01b8152600481018590526024810184905273380eF052F78BBef740bDd2edb0E567525164Bc259063f7325cdf9060440160206040518083038186803b15801561182b57600080fd5b505af415801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190615411565b156118d65760405162461bcd60e51b815260206004820152603b60248201527f5374616b655574696c733a20796f752061726520696e20707269736f6e2c206760448201527f657420696e20746f756368207769746820676f7665726e616e6365000000000060648201526084016105fa565b8147101561193b5760405162461bcd60e51b815260206004820152602c60248201527f5374616b655574696c733a206e6f7420656e6f7567682062616c616e6365206960448201526b6e20506f7274616c20283f2960a01b60648201526084016105fa565b6000611948858585614531565b604051909150600090339085908381818185875af1925050503d806000811461198d576040519150601f19603f3d011682016040523d82523d6000602084013e611992565b606091505b505090508180156119a05750805b6115c05760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a204661696c656420746f2073656e6420455448000060448201526064016105fa565b600b83015483906001600160a01b03163314611a545760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a2073656e646572204e4f5420474f5645524e414e436044820152604560f81b60648201526084016105fa565b60405163f7325cdf60e01b8152600481018490526024810183905273380eF052F78BBef740bDd2edb0E567525164Bc259063f7325cdf9060440160206040518083038186803b158015611aa657600080fd5b505af4158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190615411565b611b2a5760405162461bcd60e51b815260206004820152601960248201527f5374616b655574696c733a204e4f5420696e20707269736f6e0000000000000060448201526064016105fa565b611b418383671c995b19585cd95960c21b426144e0565b6040518281527ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659060200160405180910390a150505050565b60408051606081018252600180825260208201819052600092820192909252611ba7918591859190613d3d565b624f1a00811115611c175760405162461bcd60e51b815260206004820152603460248201527f5374656b655574696c733a2073686f756c64206265206d6f7265207468616e2060448201527313525397d590531251105513d497d411549253d160621b60648201526084016105fa565b6309660180811115611c885760405162461bcd60e51b815260206004820152603460248201527f5374656b655574696c733a2073686f756c64206265206c657373207468616e2060448201527313505617d590531251105513d497d411549253d160621b60648201526084016105fa565b611ca683836e1d985b1a59185d1bdc94195c9a5bd9608a1b846144e0565b60408051838152602081018390527fe0113e91eb2c77db54ab5f4e1d8116cd63fe74f4efd73c65aa7827d2f34403ed91016116b1565b6040805160608101825260008152600160208201819052918101829052611d07918591859190613d3d565b6000611d2784846f0d2dce8cae4ccc2c6cae698cadccee8d60831b61422d565b855460405163fcd295e360e01b81526001600160a01b0385811660048301526024820187905292935091169063fcd295e39060440160206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190615411565b15611df95760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a20616c726561647920696e7465726661636500000060448201526064016105fa565b611e3283611e29836040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b869190856145c1565b611e5284846f0d2dce8cae4ccc2c6cae698cadccee8d60831b60016141d7565b84546040516327b03e0160e21b81526001600160a01b038481166004830152602482018690526001604483015290911690639ec0f804906064015b600060405180830381600087803b158015611ea757600080fd5b505af1158015611ebb573d6000803e3d6000fd5b505050505050505050565b604051600a850190611edb9084908490615a61565b90815260200160405180910390206007015442118015611f255750604051600a850190611f0b9084908490615a61565b90815260405190819003602001902054600360ff90911614155b15611fc75773380eF052F78BBef740bDd2edb0E567525164Bc25632013f9c784866001016009018585604051611f5c929190615a61565b908152604051908190036020018120600301546001600160e01b031960e085901b168252611f969291600401918252602082015260400190565b60006040518083038186803b158015611fae57600080fd5b505af4158015611fc2573d6000803e3d6000fd5b505050505b50505050565b60408051606081018252600080825260016020830152918101829052611ff890869086908490613d3d565b66038d7ea4c68000341161204e5760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a206174206c6561737420302e30303120657468200060448201526064016105fa565b42821161209d5760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a20646561646c696e65206e6f74206d65740000000060448201526064016105fa565b6120a785856129d3565b6120f35760405162461bcd60e51b815260206004820152601a60248201527f5374616b655574696c733a206d696e74696e672070617573656400000000000060448201526064016105fa565b60006120ff8686613fc9565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561213757600080fd5b505afa15801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f919061542e565b905034811061218f576121878787338834898961403f565b9150506115c0565b600034670de0b6b3a76400008311156121c1576121b28989338a8760008b61403f565b91506121be8382615d35565b90505b885460405163f759cc3b60e01b8152600481018990526000916001600160a01b03169063f759cc3b9060240160206040518083038186803b15801561220557600080fd5b505afa158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d919061542e565b8a54604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b15801561228157600080fd5b505afa158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b9919061542e565b6122c39084615d16565b6122cd9190615d02565b8a5460405163731133e960e01b8152336004820152602481018b90526044810183905260806064820152600060848201529192506001600160a01b03169063731133e99060a401600060405180830381600087803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b5061235f92508b91508a905066737572706c757360c81b856141d7565b8661236a8285615cea565b10156123b85760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a206c657373207468616e206d696e6745544800000060448201526064016105fa565b6123c48a600101613ee4565b1561241d57600061240d6123db6201518042615dc8565b6123e59042615d35565b6040518060400160405280600a81526020016936b4b73a213ab33332b960b11b815250613f35565b905061241b8a8a83856141d7565b505b6124278184615cea565b9a9950505050505050505050565b6040805160608101825260018152600060208201819052918101829052612460918591859190613d3d565b6040516355e66bad60e01b815260048101849052602481018390526001600160a01b038216604482015273672FC28Ba198c8d4e392c49F0996dA612cbB4330906355e66bad9060640160006040518083038186803b1580156124c157600080fd5b505af41580156124d5573d6000803e3d6000fd5b50505050505050565b6040805160608101825260008152600160208201819052918101829052612509918491849190613d3d565b61252282826a1cdd185ad954185d5cd95960aa1b61422d565b6001146125805760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a207374616b696e6720616c7265616479204e4f54206044820152651c185d5cd95960d21b60648201526084016105fa565b61259b82826a1cdd185ad954185d5cd95960aa1b60006144e0565b6040518181527fb65b578bda484b20413a2e121e50adf4c8d77c34c2459a2f658d8a228b8279cb906020016117a1565b6000600a8501838383816125e1576125e1615e1e565b90506020028101906125f39190615ca3565b604051612601929190615a61565b9081526040805191829003602090810183206003015460608401835260018085529184018290526000928401929092529092506126419186918491613d3d565b60005b8281101561068e57600a860184848381811061266257612662615e1e565b90506020028101906126749190615ca3565b604051612682929190615a61565b90815260405190819003602001902054600260ff909116146126a357600080fd5b81600a87018585848181106126ba576126ba615e1e565b90506020028101906126cc9190615ca3565b6040516126da929190615a61565b908152602001604051809103902060030154146126f657600080fd5b6003600a870185858481811061270e5761270e615e1e565b90506020028101906127209190615ca3565b60405161272e929190615a61565b908152604051908190036020019020805460ff9290921660ff199092169190911790557f5e69ec28ebc1f4385eadf0f37268df9a109addb8e0992e1efad2609670cb25dc600a870185858481811061278857612788615e1e565b905060200281019061279a9190615ca3565b6040516127a8929190615a61565b9081526020016040518091039020600201548585848181106127cc576127cc615e1e565b90506020028101906127de9190615ca3565b6040516127ed93929190615c89565b60405180910390a1806127ff81615dad565b915050612644565b6040805160608101825260008152600160208201819052918101829052612832918591859190613d3d565b600061286c83612864846040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b869190614632565b90506001600160a01b038116158015906129045750845460405163fcd295e360e01b81526001600160a01b038381166004830152602482018690529091169063fcd295e39060440160206040518083038186803b1580156128cc57600080fd5b505afa1580156128e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129049190615411565b61295a5760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a20616c7265616479204e4f5420696e7465726661636044820152606560f81b60648201526084016105fa565b6129948361298a846040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b86919060006145c1565b84546040516327b03e0160e21b81526001600160a01b038381166004830152602482018690526000604483015290911690639ec0f80490606401611e8d565b60006129ee83836a1cdd185ad954185d5cd95960aa1b61422d565b1580156105cd5750612a008383613f17565b6001600160a01b0316638650c0726040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3857600080fd5b505afa158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a709190615411565b159392505050565b6000612ab183612aa98460405180604001604052806009815260200168616c6c6f77616e636560b81b815250613f35565b86919061422d565b949350505050565b60606000612adb84846f0d2dce8cae4ccc2c6cae698cadccee8d60831b61422d565b905060008167ffffffffffffffff811115612af857612af8615e34565b604051908082528060200260200182016040528015612b21578160200160208202803683370190505b50905060005b82811015612ba357612b6785612b5f836040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b889190614632565b828281518110612b7957612b79615e1e565b6001600160a01b039092166020928302919091019091015280612b9b81615dad565b915050612b27565b50949350505050565b60408051606081018252600180825260208201819052918101829052612bd6918591859190613d3d565b8360100154811115612bfa5760405162461bcd60e51b81526004016105fa90615bcf565b60405163d236b06160e01b815260048101849052602481018390526044810182905273672FC28Ba198c8d4e392c49F0996dA612cbB43309063d236b06190606401611f96565b8560100154831115612c645760405162461bcd60e51b81526004016105fa90615bcf565b6040805160a08101825287546001600160a01b039081168252848116602080840191909152600c8a0154821683850152600d8a01548216606080850191909152600e8b01549092166080840152835191820184528782528101869052600f890154818401529151631de8080b60e31b81529091906000908190819073672FC28Ba198c8d4e392c49F0996dA612cbB43309063ef40405890612d0f908d9088908a908c90600401615c13565b60606040518083038186803b158015612d2757600080fd5b505af4158015612d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5f91906153a7565b925092509250612dbf89731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b612db686604080516001600160a01b0392909216600160f81b1760208084019190915281518084039091018152918101905290565b8d92919061468d565b612dcb8b8b8b85611cdc565b8a546040516322af599760e01b8152670de0b6b3a76400006004820152602481018b90526001600160a01b03909116906322af599790604401600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050600b8b015460405163f2fde38b60e01b81526001600160a01b0391821660048201529082169063f2fde38b90602401600060405180830381600087803b158015612e7f57600080fd5b505af1158015612e93573d6000803e3d6000fd5b50508c5460405163a22cb46560e01b81526001600160a01b03858116600483015260016024830152909116925063a22cb4659150604401600060405180830381600087803b158015612ee457600080fd5b505af1158015612ef8573d6000803e3d6000fd5b505050505050505050505050505050565b60408051606081018252600080825260016020830152918101829052612f3490879087908490613d3d565b428211612f835760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a20646561646c696e65206e6f74206d65740000000060448201526064016105fa565b8654604051627eeac760e11b8152306004820152602481018790526000916001600160a01b03169062fdd58e9060440160206040518083038186803b158015612fcb57600080fd5b505afa158015612fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613003919061542e565b8854604051637921219560e11b81529192506001600160a01b03169063f242432a9061303990339030908b908b90600401615a8d565b600060405180830381600087803b15801561305357600080fd5b505af1158015613067573d6000803e3d6000fd5b50508954604051627eeac760e11b8152306004820152602481018a90528493506001600160a01b03909116915062fdd58e9060440160206040518083038186803b1580156130b457600080fd5b505afa1580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec919061542e565b6130f69190615d35565b601189015490955090506131178787681a5b9a5d1a585d195960ba1b61422d565b6131219190615cea565b42111561313957613134878787876146e7565b945090505b8315613210576131498686613fc9565b6001600160a01b031663916955866001600087878610156131735761316e8689615d35565b613176565b60005b6040516001600160e01b031960e087901b16815260ff9485166004820152939092166024840152604483015260648201526084810185905260a401602060405180830381600087803b1580156131cb57600080fd5b505af11580156131df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613203919061542e565b61320d9082615cea565b90505b604051600090339083908381818185875af1925050503d8060008114613252576040519150601f19603f3d011682016040523d82523d6000602084013e613257565b606091505b50509050806132a85760405162461bcd60e51b815260206004820181905260248201527f5374616b655574696c733a204661696c656420746f2073656e6420457468657260448201526064016105fa565b509695505050505050565b604080516060810182526001808252602082018190526000928201929092526132e0918991889190613d3d565b6040805160608101825260008082526001602083018190529282019290925261330d918991899190613d3d565b60405163f7325cdf60e01b8152600481018890526024810186905273380eF052F78BBef740bDd2edb0E567525164Bc259063f7325cdf9060440160206040518083038186803b15801561335f57600080fd5b505af4158015613373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133979190615411565b1561340a5760405162461bcd60e51b815260206004820152603f60248201527f5374616b655574696c733a206f70657261746f7220697320696e20707269736f60448201527f6e2c2067657420696e20746f756368207769746820676f7665726e616e63650060648201526084016105fa565b8281146134745760405162461bcd60e51b815260206004820152603260248201527f5374616b655574696c733a207075626b65797320616e64207369676e617475726044820152710cae6409c9ea840e6c2daca40d8cadccee8d60731b60648201526084016105fa565b8215801590613484575060408311155b6134cb5760405162461bcd60e51b81526020600482015260186024820152775374616b655574696c733a204d4158203634206e6f64657360401b60448201526064016105fa565b6004880154836134f4898874746f74616c41637469766556616c696461746f727360581b61422d565b6134fe9190615cea565b11156135615760405162461bcd60e51b815260206004820152602c60248201527f5374616b655574696c733a204963654265617220646f6573204e4f54206c696b60448201526b65206d6f6e6f706f6c69657360a01b60648201526084016105fa565b61356c878787612a78565b848490506135ae886135a6896040518060400160405280601081526020016f61637469766556616c696461746f727360801b815250613f35565b8b919061422d565b6135ee896135e68a6040518060400160405280601281526020017170726f706f73656456616c696461746f727360701b815250613f35565b8c919061422d565b6135f89190615cea565b6136029190615cea565b11156136505760405162461bcd60e51b815260206004820181905260248201527f5374616b655574696c733a204e4f5420656e6f75676820616c6c6f77616e636560448201526064016105fa565b613663836801bc16d674ec800000615d16565b613678888866737572706c757360c81b61422d565b10156136c65760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a204e4f5420656e6f75676820737572706c7573000060448201526064016105fa565b6136e4856136dc670de0b6b3a764000086615d16565b899190614531565b506137108666737572706c757360c81b613707866801bc16d674ec800000615d16565b8a929190613f68565b60006040518060400160405280613730898b6149f890919063ffffffff16565b815260200161373f8a896149f8565b9052905060006137678989731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b614345565b905060006137888a896e1d985b1a59185d1bdc94195c9a5bd9608a1b61422d565b6137929042615cea565b60058c01549091506000906137a8906001615cea565b905060005b87811015613bcc57600a8d018989838181106137cb576137cb615e1e565b90506020028101906137dd9190615ca3565b6040516137eb929190615a61565b9081526040519081900360200190205460ff16156138605760405162461bcd60e51b815260206004820152602c60248201527f5374616b655574696c733a205075626b657920616c726561647920757365642060448201526b1bdc88185b1a595b985d195960a21b60648201526084016105fa565b603089898381811061387457613874615e1e565b90506020028101906138869190615ca3565b9050146138d55760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a205055424b45595f4c454e475448204552524f520060448201526064016105fa565b60608787838181106138e9576138e9615e1e565b90506020028101906138fb9190615ca3565b9050146139555760405162461bcd60e51b815260206004820152602260248201527f5374616b655574696c733a205349474e41545552455f4c454e4754482045525260448201526127a960f11b60648201526084016105fa565b6139e589898381811061396a5761396a615e1e565b905060200281019061397c9190615ca3565b868a8a8681811061398f5761398f615e1e565b90506020028101906139a19190615ca3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250670de0b6b3a7640000925061441f915050565b6040805161014081019091526001815260208101613a038385615cea565b815260208082018e9052604082018d90528751606083015287015160808201524260a082015260c08101859052600060e082015261010001888884818110613a4d57613a4d615e1e565b9050602002810190613a5f9190615ca3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250600a8e018a8a84818110613aab57613aab615e1e565b9050602002810190613abd9190615ca3565b604051613acb929190615a61565b90815260408051602092819003830190208351815460ff191660ff909116178155838301516001820155908301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e08301516007820155610100830151600882015561012083015180519192613b5792600985019290910190615280565b509050507f4d20e41c35e82c2be5c6aec202394b90627345c43e9b763e6f2389c417278a2d898983818110613b8e57613b8e615e1e565b9050602002810190613ba09190615ca3565b8d8d604051613bb29493929190615ba8565b60405180910390a180613bc481615dad565b9150506137ad565b5050505050613c1286613c09876040518060400160405280601281526020017170726f706f73656456616c696461746f727360701b815250613f35565b899190866141d7565b613c3d86661cd958dd5c995960ca1b613c34866801bc16d674ec800000615d16565b8a9291906141d7565b600588018054849190600090613c54908490615cea565b90915550505050505050505050565b60408051606081018252600080825260016020830181905292820183905291613c8f9187918791613d3d565b60408051606081018252600180825260208201526000918101829052613cb9918791869190613d3d565b613cf184613ce88560405180604001604052806009815260200168616c6c6f77616e636560b81b815250613f35565b879190856144e0565b60408051858152602081018590529081018390527f06ef86357fa27838732e0c7206341897ec58306010a37af61bdfeaf5617248d19060600160405180910390a1506001949350505050565b8115613dca57613d5b84846936b0b4b73a30b4b732b960b11b614632565b6001600160a01b0316336001600160a01b031614613dca5760405162461bcd60e51b815260206004820152602660248201527f4d61696e7461696e65725574696c733a2073656e646572204e4f54206d61696e6044820152653a30b4b732b960d11b60648201526084016105fa565b6000613dde8585635459504560e01b61422d565b90508060041415613e52578160005b60200201511515600114613e4d5760405162461bcd60e51b815260206004820152602160248201527f4d61696e7461696e65725574696c733a2054595045204e4f5420616c6c6f77656044820152601960fa1b60648201526084016105fa565b613ebc565b8060051415613e6357816001613ded565b8060061415613e7457816002613ded565b60405162461bcd60e51b815260206004820152601d60248201527f4d61696e7461696e65725574696c733a20696e76616c6964205459504500000060448201526064016105fa565b5050505050565b6000613eda8484651dd85b1b195d60d21b856141d7565b5060019392505050565b6000610708613ef66201518042615dc8565b111580156105d05750613f0b61070842615d35565b82600201541092915050565b60006105cd83836d6d696e69476f7665726e616e636560901b614632565b60008282604051602001613f4a929190615a3b565b60405160208183030381529060405280519060200120905092915050565b808460010160008585604051602001613f8b929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020019081526020016000206000828254613fbe9190615d35565b909155505050505050565b60006105cd83836d1dda5d1a191c985dd85b141bdbdb60921b614632565b600061400683836e1dda5d1a191c985dd85b109bdbdcdd608a1b61422d565b90504261402284846a0c4dedee6e8a6eed2e8c6d60ab1b61422d565b106105d0576105cd8383691c1c9a5bdc909bdbdcdd60b21b61422d565b600061404b8786613fc9565b6040516348b4aac360e11b815260006004820152600160248201526044810186905260648101859052608481018490526001600160a01b039190911690639169558690869060a4016020604051808303818588803b1580156140ac57600080fd5b505af11580156140c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906140e5919061542e565b90506001600160a01b038616614164578754604051637a94c56560e11b815230600482015260248101879052604481018390526001600160a01b039091169063f5298aca90606401600060405180830381600087803b15801561414757600080fd5b505af115801561415b573d6000803e3d6000fd5b505050506141cc565b8754604051637921219560e11b81526001600160a01b039091169063f242432a906141999030908a908a908790600401615a8d565b600060405180830381600087803b1580156141b357600080fd5b505af11580156141c7573d6000803e3d6000fd5b505050505b979650505050505050565b8084600101600085856040516020016141fa929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020019081526020016000206000828254613fbe9190615cea565b60008360010160008484604051602001614251929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020019081526020016000205490509392505050565b600061429060018701858585614a40565b801561433b57506142c9858760010160090186866040516142b2929190615a61565b908152602001604051809103902060020154613f17565b6001600160a01b0316638650c0726040518163ffffffff1660e01b815260040160206040518083038186803b15801561430157600080fd5b505afa158015614315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143399190615411565b155b9695505050505050565b60608360020160008484604051602001614369929190918252602082015260400190565b604051602081830303815290604052805190602001208152602001908152602001600020805461439890615d78565b80601f01602080910402602001604051908101604052809291908181526020018280546143c490615d78565b80156144115780601f106143e657610100808354040283529160200191614411565b820191906000526020600020905b8154815290600101906020018083116143f457829003601f168201915b505050505090509392505050565b6f219ab540356cbb839cbe05303d7705fa6001600160a01b0316632289511882878787876144878c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508c9050614aa6565b6040518763ffffffff1660e01b81526004016144a7959493929190615b5b565b6000604051808303818588803b1580156144c057600080fd5b505af11580156144d4573d6000803e3d6000fd5b50505050505050505050565b808460010160008585604051602001614503929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020019081526020016000208190555050505050565b6000816145488585651dd85b1b195d60d21b61422d565b10156145ac5760405162461bcd60e51b815260206004820152602d60248201527f4d61696e7461696e65725574696c733a204e4f5420656e6f7567682062616c6160448201526c1b98d9481a5b881dd85b1b195d609a1b60648201526084016105fa565b613eda8484651dd85b1b195d60d21b85613f68565b8084600301600085856040516020016145e4929190918252602082015260400190565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60008360030160008484604051602001614656929190918252602082015260400190565b60408051601f19818403018152918152815160209283012083529082019290925201600020546001600160a01b0316949350505050565b8084600201600085856040516020016146b0929190918252602082015260400190565b6040516020818303038152906040528051906020012081526020019081526020016000209080519060200190613ebc929190615280565b835460405163f759cc3b60e01b815260048101849052600091829182916001600160a01b03169063f759cc3b9060240160206040518083038186803b15801561472f57600080fd5b505afa158015614743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614767919061542e565b8754604080516396ce079560e01b8152905192935086926000926001600160a01b0316916396ce0795916004808301926020929190829003018186803b1580156147b057600080fd5b505afa1580156147c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147e8919061542e565b6147f28484615d16565b6147fc9190615d02565b90506000614815898966737572706c757360c81b61422d565b90508082106148b5578954604080516396ce079560e01b81529051929350839286926001600160a01b0316916396ce0795916004808301926020929190829003018186803b15801561486657600080fd5b505afa15801561487a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061489e919061542e565b6148a89084615d16565b6148b29190615d02565b92505b6000806148c48b8b8688614e92565b90925090506148df8b8b66737572706c757360c81b87613f68565b8b546001600160a01b031663f5298aca308c6148fb858a615d35565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561494957600080fd5b505af115801561495d573d6000803e3d6000fd5b5050505061496d8c600101613ee4565b156149c65760006149b66149846201518042615dc8565b61498e9042615d35565b6040518060400160405280600a815260200169313ab937213ab33332b960b11b815250613f35565b90506149c48c8c83896141d7565b505b6149d1826002615d16565b6149db9085615d35565b6149e5868b615d35565b9750975050505050505094509492505050565b6000614a0b83836266656560e81b61422d565b905042614a258484680cccacaa6eed2e8c6d60bb1b61422d565b106105d0576105cd8383677072696f7246656560c01b61422d565b6000846009018484604051614a56929190615a61565b9081526040519081900360200190205460ff1660011480156115c0575081856009018585604051614a88929190615a61565b90815260200160405180910390206001015411159050949350505050565b6000670de0b6b3a7640000821015614b0f5760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b60648201526084016105fa565b614b1d633b9aca0083615dc8565b15614b865760405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b60648201526084016105fa565b6000614b96633b9aca0084615d02565b905060006002614ba588614ffd565b604051614bb29190615a71565b602060405180830381855afa158015614bcf573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614bf2919061542e565b90506000600280614c068860006040615093565b604051614c139190615a71565b602060405180830381855afa158015614c30573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614c53919061542e565b6002614c73614c6e8a6040614c69816060615d35565b615093565b614ffd565b604051614c809190615a71565b602060405180830381855afa158015614c9d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614cc0919061542e565b60408051602081019390935282015260600160408051601f1981840301815290829052614cec91615a71565b602060405180830381855afa158015614d09573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614d2c919061542e565b90506000600280848a604051602001614d46929190615a3b565b60408051601f1981840301815290829052614d6091615a71565b602060405180830381855afa158015614d7d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614da0919061542e565b6002614dab8761519f565b604080516020810192909252810186905260600160408051601f1981840301815290829052614dd991615a71565b602060405180830381855afa158015614df6573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614e19919061542e565b60408051602081019390935282015260600160408051601f1981840301815290829052614e4591615a71565b602060405180830381855afa158015614e62573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190614e85919061542e565b9998505050505050505050565b6000806000614ea18787613fc9565b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015614ed957600080fd5b505afa158015614eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f11919061542e565b905060026402540be400614f258388615d16565b614f2f9190615d02565b614f399190615d02565b925060026402540be400614f4d8387615d16565b614f579190615d02565b614f619190615d02565b9150614f6d8787613fc9565b60405163b150798960e01b815260048101859052602481018490526001600160a01b03919091169063b150798990859060440160408051808303818588803b158015614fb857600080fd5b505af1158015614fcc573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190614ff1919061593e565b50505094509492505050565b6060602082511015801561501357506040825111155b61501f5761501f615ddc565b81516040141561502d575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156150705761506983826151e5565b9392505050565b6150698361508883600087516040614c699190615d35565b6151e5565b50919050565b6060816150a181601f615cea565b10156150e05760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016105fa565b6150ea8284615cea565b8451101561512e5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016105fa565b60608215801561514d5760405191506000825260208201604052612ba3565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561518657805183526020928301920161516e565b5050858452601f01601f19166040525050949350505050565b600081815b60088110156151cd57600892831b60ff831617929190911c906151c681615dad565b90506151a4565b5080156151dc576151dc615ddc565b5060c01b919050565b6060806040519050835180825260208201818101602087015b818310156152165780518352602092830192016151fe565b50855184518101855292509050808201602086015b8183101561524357805183526020928301920161522b565b508651929092011591909101601f01601f191660405250905092915050565b60405180604001604052806002906020820280368337509192915050565b82805461528c90615d78565b90600052602060002090601f0160209004810192826152ae57600085556152f4565b82601f106152c757805160ff19168380011785556152f4565b828001600101855582156152f4579182015b828111156152f45782518255916020019190600101906152d9565b50615300929150615304565b5090565b5b808211156153005760008155600101615305565b60008083601f84011261532b57600080fd5b50813567ffffffffffffffff81111561534357600080fd5b6020830191508360208260051b850101111561535e57600080fd5b9250929050565b60008083601f84011261537757600080fd5b50813567ffffffffffffffff81111561538f57600080fd5b60208301915083602082850101111561535e57600080fd5b6000806000606084860312156153bc57600080fd5b83516153c781615e4a565b60208501519093506153d881615e4a565b60408501519092506153e981615e4a565b809150509250925092565b60006020828403121561540657600080fd5b813561506981615e62565b60006020828403121561542357600080fd5b815161506981615e62565b60006020828403121561544057600080fd5b5051919050565b6000806040838503121561545a57600080fd5b50508035926020909101359150565b60008060006060848603121561547e57600080fd5b833592506020840135915060408401356153e981615e4a565b60008060008060008060a087890312156154b057600080fd5b8635955060208701359450604087013567ffffffffffffffff8111156154d557600080fd5b6154e189828a01615365565b9095509350506060870135915060808701356154fc81615e4a565b809150509295509295509295565b60008060006060848603121561551f57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561554c57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806060858703121561557e57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156155a357600080fd5b6155af87828801615319565b95989497509550505050565b600080600080606085870312156155d157600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156155f657600080fd5b6155af87828801615365565b6000806000806080858703121561561857600080fd5b843593506020850135925060408501359150606085013561563881615e4a565b939692955090935050565b60008060008060006080868803121561565b57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff81111561568757600080fd5b61569388828901615319565b969995985093965092949392505050565b60008060008060008060c087890312156156bd57600080fd5b8635955060208701359450604087013593506060870135925060808701356156e481615e4a565b915060a087013567ffffffffffffffff81111561570057600080fd5b8701604081018910156154fc57600080fd5b60008060008060008060c0878903121561572b57600080fd5b86359550602087013594506040870135935060608701359250608087013561575281615e4a565b8092505060a087013590509295509295509295565b60008060008060008060008060c0898b03121561578357600080fd5b88359750602089013596506040890135955060608901359450608089013567ffffffffffffffff808211156157b757600080fd5b6157c38c838d01615319565b909650945060a08b01359150808211156157dc57600080fd5b506157e98b828c01615319565b999c989b5096995094979396929594505050565b60008060008060008060008060008060e08b8d03121561581c57600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b013567ffffffffffffffff8082111561585057600080fd5b61585c8e838f01615319565b909850965060a08d013591508082111561587557600080fd5b6158818e838f01615319565b909650945060c08d013591508082111561589a57600080fd5b506158a78d828e01615319565b915080935050809150509295989b9194979a5092959850565b600080600080600060a086880312156158d857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c0878903121561591457600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806040838503121561595157600080fd5b505080516020909101519092909150565b600082604081018360005b60028110156159db5783830387528135601e1987360301811261598f57600080fd5b86018035602067ffffffffffffffff8211156159aa57600080fd5b8136038913156159b957600080fd5b6159c686838386016159e6565b9981019995509390930192505060010161596d565b509095945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452615a27816020860160208601615d4c565b601f01601f19169290920160200192915050565b82815260008251615a53816020850160208701615d4c565b919091016020019392505050565b8183823760009101908152919050565b60008251615a83818460208701615d4c565b9190910192915050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020808252825182820181905260009190848201906040850190845b81811015615b065783516001600160a01b031683529284019291840191600101615ae1565b50909695505050505050565b602081526000612ab16020830184866159e6565b606081526000615b3a6060830186886159e6565b6020830194909452506001600160a01b039190911660409091015292915050565b608081526000615b6f6080830187896159e6565b8281036020840152615b818187615a0f565b90508281036040840152615b958186615a0f565b9150508260608301529695505050505050565b606081526000615bbc6060830186886159e6565b6020830194909452506040015292915050565b60208082526024908201527f5374616b655574696c733a204d41585f4d41494e5441494e45525f4645452045604082015263292927a960e11b606082015260800190565b600061014086835260208084018760005b6003811015615c4157815183529183019190830190600101615c24565b505050608084018660005b6005811015615c725781516001600160a01b031683529183019190830190600101615c4c565b50505050806101208401526141cc81840185615962565b8381526040602082015260006115c06040830184866159e6565b6000808335601e19843603018112615cba57600080fd5b83018035915067ffffffffffffffff821115615cd557600080fd5b60200191503681900382131561535e57600080fd5b60008219821115615cfd57615cfd615df2565b500190565b600082615d1157615d11615e08565b500490565b6000816000190483118215151615615d3057615d30615df2565b500290565b600082821015615d4757615d47615df2565b500390565b60005b83811015615d67578181015183820152602001615d4f565b83811115611fc75750506000910152565b600181811c90821680615d8c57607f821691505b6020821081141561508d57634e487b7160e01b600052602260045260246000fd5b6000600019821415615dc157615dc1615df2565b5060010190565b600082615dd757615dd7615e08565b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114615e5f57600080fd5b50565b8015158114615e5f57600080fdfea26469706673582212205c31ee0a4fa021f82f0737c6fe9ccbed6ab23e0eeefd2b000024cfcfcef4a6c464736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101fa5760003560e01c806394bf980d11610119578063bbf1555c116100ac578063d30807f81161007b578063d30807f814610517578063e0b9dabe14610537578063f1016dfb14610557578063fd805ee51461057757600080fd5b8063bbf1555c146104b1578063caafe848146104c4578063ccc68fc3146104d7578063d1dedac8146104f757600080fd5b8063a4ff4e5e116100e8578063a4ff4e5e1461045b578063b13302881461047b578063b3cd425414610485578063b3ce61f31461049157600080fd5b806394bf980d146103db578063955ba8d3146103fb5780639877d3261461041b5780639e8c22831461043b57600080fd5b8063521f883e116101915780637948bd45116101605780637948bd45146103715780637e49bfac1461037b57806383faca401461039b5780638c3c85ce146103bb57600080fd5b8063521f883e14610302578063569391b6146103225780636d6079b21461034257806376b050541461036257600080fd5b80633147a52a116101cd5780633147a52a146102965780633802c20d146102b65780633a66037d146102d657806349937056146102e957600080fd5b80630d552313146101ff57806316614f5e14610234578063303cb36f1461025657806330d2c2ac14610276575b600080fd5b81801561020b57600080fd5b5061021f61021a366004615447565b610597565b60405190151581526020015b60405180910390f35b81801561024057600080fd5b5061025461024f366004615712565b6105d6565b005b81801561026257600080fd5b506102546102713660046157fd565b610696565b81801561028257600080fd5b5061025461029136600461550a565b610dc3565b8180156102a257600080fd5b506102546102b1366004615643565b610ded565b8180156102c257600080fd5b506102546102d1366004615497565b611411565b61021f6102e43660046155bb565b6115aa565b6102f4630966018081565b60405190815260200161022b565b81801561030e57600080fd5b5061025461031d36600461550a565b6115c9565b81801561032e57600080fd5b5061025461033d366004615447565b6116be565b81801561034e57600080fd5b5061021f61035d36600461550a565b6117ad565b6102f4670de0b6b3a764000081565b6102f46203f48081565b81801561038757600080fd5b5061025461039636600461550a565b6119ec565b8180156103a757600080fd5b506102546103b636600461550a565b611b7a565b8180156103c757600080fd5b506102546103d6366004615602565b611cdc565b8180156103e757600080fd5b506102546103f63660046155bb565b611ec6565b81801561040757600080fd5b506102f46104163660046158c0565b611fcd565b81801561042757600080fd5b50610254610436366004615469565b612435565b81801561044757600080fd5b50610254610456366004615447565b6124de565b81801561046757600080fd5b50610254610476366004615568565b6125cb565b6102f4624f1a0081565b6102f46402540be40081565b81801561049d57600080fd5b506102546104ac366004615536565b612807565b61021f6104bf366004615447565b6129d3565b6102f46104d236600461550a565b612a78565b6104ea6104e5366004615447565b612ab9565b60405161022b9190615ac5565b81801561050357600080fd5b50610254610512366004615536565b612bac565b81801561052357600080fd5b506102546105323660046156a4565b612c40565b81801561054357600080fd5b506102f46105523660046158fb565b612f09565b81801561056357600080fd5b50610254610572366004615767565b6132b3565b81801561058357600080fd5b5061021f610592366004615536565b613c63565b6040805160608101825260018082526020820181905260009282018390526105c29185918591613d3d565b6105cd838334613ec3565b90505b92915050565b85601001548311156106035760405162461bcd60e51b81526004016105fa90615bcf565b60405180910390fd5b604051635fae04e760e01b81526004810186905260248101859052604481018490526001600160a01b038316606482015273__$7cc3f5085d749a3b94d028420e2680a54c$__90635fae04e79060840160006040518083038186803b15801561066b57600080fd5b505af415801561067f573d6000803e3d6000fd5b5050505061068e858583611b7a565b505050505050565b60028a01546001600160a01b031633146106f25760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a2073656e646572204e4f54204f5241434c4500000060448201526064016105fa565b6106fe8a600101613ee4565b1561074b5760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a204f5241434c45206973206163746976650000000060448201526064016105fa565b6000610755615262565b6000805b8881101561091f57600088888381811061077557610775615e1e565b90506020020135905088888381811061079057610790615e1e565b90506020020135856107a29190615cea565b94508686838181106107b6576107b6615e1e565b90506020020160208101906107cb91906153f4565b1561080c576107db600184615cea565b92506801bc16d674ec800000811115610808576108016801bc16d674ec80000082615d35565b905061080c565b5060005b801561090c576402540be4008f6001016009018c8c8581811061083157610831615e1e565b90506020028101906108439190615ca3565b604051610851929190615a61565b9081526020016040518091039020600401548261086e9190615d16565b6108789190615d02565b84518590610887908390615cea565b9052508c8c1461090c576402540be4008f6001016009018c8c858181106108b0576108b0615e1e565b90506020028101906108c29190615ca3565b6040516108d0929190615a61565b908152602001604051809103902060050154826108ed9190615d16565b6108f79190615d02565b602085018051610908908390615cea565b9052505b508061091781615dad565b915050610759565b50600061092c8d8d613f17565b6001600160a01b031663c5dd6fee856040518263ffffffff1660e01b815260040161095991815260200190565b602060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190615411565b9050806109fa5760405162461bcd60e51b815260206004820152601b60248201527f5374616b655574696c733a204661696c656420746f20636c61696d000000000060448201526064016105fa565b50610a3a8b610a318c6040518060400160405280601081526020016f61637469766556616c696461746f727360801b815250613f35565b8e919084613f68565b610a5e8c8b74746f74616c41637469766556616c696461746f727360581b84613f68565b60208201518251610a6f9190615cea565b610a799084615d35565b9250506000610a888c8c613fc9565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af8919061542e565b90506000610b068d8d613fe7565b9050600081118015610b1f5750670de0b6b3a764000082115b8015610b2b57508a8c14155b15610d39576000610b3c8e8e613fc9565b60405163a95b089f60e01b81526000600482015260016024820152604481018790526001600160a01b03919091169063a95b089f9060640160206040518083038186803b158015610b8c57600080fd5b505afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc4919061542e565b90508e60000160009054906101000a90046001600160a01b03166001600160a01b031663f759cc3b8e6040518263ffffffff1660e01b8152600401610c0b91815260200190565b60206040518083038186803b158015610c2357600080fd5b505afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b919061542e565b8f54604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015610c9f57600080fd5b505afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061542e565b610ce19087615d16565b610ceb9190615d02565b610cf59082615d35565b90506402540be400610d078383615d16565b610d119190615d02565b91508184600160200201818151610d289190615cea565b905250610d358286615d35565b9450505b50670de0b6b3a7640000811115610d7557828110610d545750815b610d678d8d60008e85600060001961403f565b50610d728184615d35565b92505b8215610d9157610d918c8c66737572706c757360c81b866141d7565b610da68b8360005b60200201518e9190613ec3565b50610db38a836001610d99565b5050505050505050505050505050565b610dd58282635459504560e01b61422d565b600b14610de157600080fd5b600f9092019190915550565b60408051606081018252600180825260208201819052600092820192909252610e1a918691869190613d3d565b610e2685600101613ee4565b15610e735760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a204f5241434c45206973206163746976650000000060448201526064016105fa565b8015801590610e83575060408111155b610eca5760405162461bcd60e51b81526020600482015260186024820152775374616b655574696c733a204d4158203634206e6f64657360401b60448201526064016105fa565b600685015460005b82811015610f7957610f098787868685818110610ef157610ef1615e1e565b9050602002810190610f039190615ca3565b8661427f565b610f675760405162461bcd60e51b815260206004820152602960248201527f5374616b655574696c733a204e4f5420616c6c207075626b65797320617265206044820152687374616b6561626c6560b81b60648201526084016105fa565b80610f7181615dad565b915050610ed2565b50506000610faf846040518060400160405280601081526020016f61637469766556616c696461746f727360801b815250613f35565b90506000610fe7856040518060400160405280601281526020017170726f706f73656456616c696461746f727360701b815250613f35565b90506000600a880185858381610fff57610fff615e1e565b90506020028101906110119190615ca3565b60405161101f929190615a61565b90815260405190819003602001902060020154905060006110588883731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b614345565b90506000805b8681101561136957600a8b0188888381811061107c5761107c615e1e565b905060200281019061108e9190615ca3565b60405161109c929190615a61565b9081526020016040518091039020600201548414611183576110e984661cd958dd5c995960ca1b6110cd8585615d35565b6110e0906801bc16d674ec800000615d16565b8d929190613f68565b61110184876110f88585615d35565b8d9291906141d7565b61111084866110e08585615d35565b905080600a8b0188888381811061112957611129615e1e565b905060200281019061113b9190615ca3565b604051611149929190615a61565b9081526040519081900360200190206002015493506111808a85731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b614345565b92505b6000600a8c0189898481811061119b5761119b615e1e565b90506020028101906111ad9190615ca3565b6040516111bb929190615a61565b908152602001604051809103902060090180546111d790615d78565b80601f016020809104026020016040519081016040528092919081815260200182805461120390615d78565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b505050505090506112a089898481811061126c5761126c615e1e565b905060200281019061127e9190615ca3565b868461129b670de0b6b3a76400006801bc16d674ec800000615d35565b61441f565b6002600a8d018a8a858181106112b8576112b8615e1e565b90506020028101906112ca9190615ca3565b6040516112d8929190615a61565b908152604051908190036020019020805460ff9290921660ff199092169190911790557fbc28e8595f241c3a0166b245c13eb3884c23fe15e7d51b7a9ab1395284fd992489898481811061132e5761132e615e1e565b90506020028101906113409190615ca3565b60405161134e929190615b12565b60405180910390a1508061136181615dad565b91505061105e565b5061139f83661cd958dd5c995960ca1b611383848a615d35565b611396906801bc16d674ec800000615d16565b8c929190613f68565b6113b783866113ae848a615d35565b8c9291906141d7565b6113c68385611396848a615d35565b6113ea898974746f74616c41637469766556616c696461746f727360581b896141d7565b5061068e93508692506114099150849050670de0b6b3a7640000615d16565b869190613ec3565b6040805160608101825260008082526001602083018190529282019290925261143e918891889190613d3d565b600061144a8787613f17565b6001600160a01b0316637bf821e9868686866040518563ffffffff1660e01b815260040161147b9493929190615b26565b602060405180830381600087803b15801561149557600080fd5b505af11580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190615411565b9050806115285760405162461bcd60e51b8152602060048201526024808201527f5374616b655574696c733a20756e7375636365737366756c20696e74657261636044820152633a34b7b760e11b60648201526084016105fa565b6040516355e66bad60e01b815260048101889052602481018790526001600160a01b038316604482015273__$7cc3f5085d749a3b94d028420e2680a54c$__906355e66bad9060640160006040518083038186803b15801561158957600080fd5b505af415801561159d573d6000803e3d6000fd5b5050505050505050505050565b60006115c085858585896001016005015461427f565b95945050505050565b60408051606081018252600081526001602082018190529181018290526115f4918591859190613d3d565b61162c82691c1c9a5bdc909bdbdcdd60b21b61162386836e1dda5d1a191c985dd85b109bdbdcdd608a1b61422d565b869291906144e0565b61164c826a0c4dedee6e8a6eed2e8c6d60ab1b6116236203f48042615cea565b61166a83836e1dda5d1a191c985dd85b109bdbdcdd608a1b846144e0565b7fc4e4809b1d2eee26da1591233b49c17f3755402df1c9c71533883844bdf2403b828261169a6203f48042615cea565b604080519384526020840192909252908201526060015b60405180910390a1505050565b60408051606081018252600081526001602082018190529181018290526116e9918491849190613d3d565b61170282826a1cdd185ad954185d5cd95960aa1b61422d565b1561175a5760405162461bcd60e51b815260206004820152602260248201527f5374616b655574696c733a207374616b696e6720616c72656164792070617573604482015261195960f21b60648201526084016105fa565b61177582826a1cdd185ad954185d5cd95960aa1b60016144e0565b6040518181527fcf61a69571fcb149379b9264df303e430a464346ff265a1bf29782c491aba6d5906020015b60405180910390a15050565b604080516060810182526001808252602082018190529181018290526000916117d99186918691613d3d565b60405163f7325cdf60e01b8152600481018590526024810184905273__$88e9f91c78a6ae79a6edc42fa4982a1d74$__9063f7325cdf9060440160206040518083038186803b15801561182b57600080fd5b505af415801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190615411565b156118d65760405162461bcd60e51b815260206004820152603b60248201527f5374616b655574696c733a20796f752061726520696e20707269736f6e2c206760448201527f657420696e20746f756368207769746820676f7665726e616e6365000000000060648201526084016105fa565b8147101561193b5760405162461bcd60e51b815260206004820152602c60248201527f5374616b655574696c733a206e6f7420656e6f7567682062616c616e6365206960448201526b6e20506f7274616c20283f2960a01b60648201526084016105fa565b6000611948858585614531565b604051909150600090339085908381818185875af1925050503d806000811461198d576040519150601f19603f3d011682016040523d82523d6000602084013e611992565b606091505b505090508180156119a05750805b6115c05760405162461bcd60e51b815260206004820152601e60248201527f5374616b655574696c733a204661696c656420746f2073656e6420455448000060448201526064016105fa565b600b83015483906001600160a01b03163314611a545760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a2073656e646572204e4f5420474f5645524e414e436044820152604560f81b60648201526084016105fa565b60405163f7325cdf60e01b8152600481018490526024810183905273__$88e9f91c78a6ae79a6edc42fa4982a1d74$__9063f7325cdf9060440160206040518083038186803b158015611aa657600080fd5b505af4158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190615411565b611b2a5760405162461bcd60e51b815260206004820152601960248201527f5374616b655574696c733a204e4f5420696e20707269736f6e0000000000000060448201526064016105fa565b611b418383671c995b19585cd95960c21b426144e0565b6040518281527ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659060200160405180910390a150505050565b60408051606081018252600180825260208201819052600092820192909252611ba7918591859190613d3d565b624f1a00811115611c175760405162461bcd60e51b815260206004820152603460248201527f5374656b655574696c733a2073686f756c64206265206d6f7265207468616e2060448201527313525397d590531251105513d497d411549253d160621b60648201526084016105fa565b6309660180811115611c885760405162461bcd60e51b815260206004820152603460248201527f5374656b655574696c733a2073686f756c64206265206c657373207468616e2060448201527313505617d590531251105513d497d411549253d160621b60648201526084016105fa565b611ca683836e1d985b1a59185d1bdc94195c9a5bd9608a1b846144e0565b60408051838152602081018390527fe0113e91eb2c77db54ab5f4e1d8116cd63fe74f4efd73c65aa7827d2f34403ed91016116b1565b6040805160608101825260008152600160208201819052918101829052611d07918591859190613d3d565b6000611d2784846f0d2dce8cae4ccc2c6cae698cadccee8d60831b61422d565b855460405163fcd295e360e01b81526001600160a01b0385811660048301526024820187905292935091169063fcd295e39060440160206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190615411565b15611df95760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a20616c726561647920696e7465726661636500000060448201526064016105fa565b611e3283611e29836040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b869190856145c1565b611e5284846f0d2dce8cae4ccc2c6cae698cadccee8d60831b60016141d7565b84546040516327b03e0160e21b81526001600160a01b038481166004830152602482018690526001604483015290911690639ec0f804906064015b600060405180830381600087803b158015611ea757600080fd5b505af1158015611ebb573d6000803e3d6000fd5b505050505050505050565b604051600a850190611edb9084908490615a61565b90815260200160405180910390206007015442118015611f255750604051600a850190611f0b9084908490615a61565b90815260405190819003602001902054600360ff90911614155b15611fc75773__$88e9f91c78a6ae79a6edc42fa4982a1d74$__632013f9c784866001016009018585604051611f5c929190615a61565b908152604051908190036020018120600301546001600160e01b031960e085901b168252611f969291600401918252602082015260400190565b60006040518083038186803b158015611fae57600080fd5b505af4158015611fc2573d6000803e3d6000fd5b505050505b50505050565b60408051606081018252600080825260016020830152918101829052611ff890869086908490613d3d565b66038d7ea4c68000341161204e5760405162461bcd60e51b815260206004820152601f60248201527f5374616b655574696c733a206174206c6561737420302e30303120657468200060448201526064016105fa565b42821161209d5760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a20646561646c696e65206e6f74206d65740000000060448201526064016105fa565b6120a785856129d3565b6120f35760405162461bcd60e51b815260206004820152601a60248201527f5374616b655574696c733a206d696e74696e672070617573656400000000000060448201526064016105fa565b60006120ff8686613fc9565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561213757600080fd5b505afa15801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f919061542e565b905034811061218f576121878787338834898961403f565b9150506115c0565b600034670de0b6b3a76400008311156121c1576121b28989338a8760008b61403f565b91506121be8382615d35565b90505b885460405163f759cc3b60e01b8152600481018990526000916001600160a01b03169063f759cc3b9060240160206040518083038186803b15801561220557600080fd5b505afa158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d919061542e565b8a54604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b15801561228157600080fd5b505afa158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b9919061542e565b6122c39084615d16565b6122cd9190615d02565b8a5460405163731133e960e01b8152336004820152602481018b90526044810183905260806064820152600060848201529192506001600160a01b03169063731133e99060a401600060405180830381600087803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b5061235f92508b91508a905066737572706c757360c81b856141d7565b8661236a8285615cea565b10156123b85760405162461bcd60e51b815260206004820152601d60248201527f5374616b655574696c733a206c657373207468616e206d696e6745544800000060448201526064016105fa565b6123c48a600101613ee4565b1561241d57600061240d6123db6201518042615dc8565b6123e59042615d35565b6040518060400160405280600a81526020016936b4b73a213ab33332b960b11b815250613f35565b905061241b8a8a83856141d7565b505b6124278184615cea565b9a9950505050505050505050565b6040805160608101825260018152600060208201819052918101829052612460918591859190613d3d565b6040516355e66bad60e01b815260048101849052602481018390526001600160a01b038216604482015273__$7cc3f5085d749a3b94d028420e2680a54c$__906355e66bad9060640160006040518083038186803b1580156124c157600080fd5b505af41580156124d5573d6000803e3d6000fd5b50505050505050565b6040805160608101825260008152600160208201819052918101829052612509918491849190613d3d565b61252282826a1cdd185ad954185d5cd95960aa1b61422d565b6001146125805760405162461bcd60e51b815260206004820152602660248201527f5374616b655574696c733a207374616b696e6720616c7265616479204e4f54206044820152651c185d5cd95960d21b60648201526084016105fa565b61259b82826a1cdd185ad954185d5cd95960aa1b60006144e0565b6040518181527fb65b578bda484b20413a2e121e50adf4c8d77c34c2459a2f658d8a228b8279cb906020016117a1565b6000600a8501838383816125e1576125e1615e1e565b90506020028101906125f39190615ca3565b604051612601929190615a61565b9081526040805191829003602090810183206003015460608401835260018085529184018290526000928401929092529092506126419186918491613d3d565b60005b8281101561068e57600a860184848381811061266257612662615e1e565b90506020028101906126749190615ca3565b604051612682929190615a61565b90815260405190819003602001902054600260ff909116146126a357600080fd5b81600a87018585848181106126ba576126ba615e1e565b90506020028101906126cc9190615ca3565b6040516126da929190615a61565b908152602001604051809103902060030154146126f657600080fd5b6003600a870185858481811061270e5761270e615e1e565b90506020028101906127209190615ca3565b60405161272e929190615a61565b908152604051908190036020019020805460ff9290921660ff199092169190911790557f5e69ec28ebc1f4385eadf0f37268df9a109addb8e0992e1efad2609670cb25dc600a870185858481811061278857612788615e1e565b905060200281019061279a9190615ca3565b6040516127a8929190615a61565b9081526020016040518091039020600201548585848181106127cc576127cc615e1e565b90506020028101906127de9190615ca3565b6040516127ed93929190615c89565b60405180910390a1806127ff81615dad565b915050612644565b6040805160608101825260008152600160208201819052918101829052612832918591859190613d3d565b600061286c83612864846040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b869190614632565b90506001600160a01b038116158015906129045750845460405163fcd295e360e01b81526001600160a01b038381166004830152602482018690529091169063fcd295e39060440160206040518083038186803b1580156128cc57600080fd5b505afa1580156128e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129049190615411565b61295a5760405162461bcd60e51b815260206004820152602160248201527f5374616b655574696c733a20616c7265616479204e4f5420696e7465726661636044820152606560f81b60648201526084016105fa565b6129948361298a846040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b86919060006145c1565b84546040516327b03e0160e21b81526001600160a01b038381166004830152602482018690526000604483015290911690639ec0f80490606401611e8d565b60006129ee83836a1cdd185ad954185d5cd95960aa1b61422d565b1580156105cd5750612a008383613f17565b6001600160a01b0316638650c0726040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3857600080fd5b505afa158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a709190615411565b159392505050565b6000612ab183612aa98460405180604001604052806009815260200168616c6c6f77616e636560b81b815250613f35565b86919061422d565b949350505050565b60606000612adb84846f0d2dce8cae4ccc2c6cae698cadccee8d60831b61422d565b905060008167ffffffffffffffff811115612af857612af8615e34565b604051908082528060200260200182016040528015612b21578160200160208202803683370190505b50905060005b82811015612ba357612b6785612b5f836040518060400160405280600a815260200169696e746572666163657360b01b815250613f35565b889190614632565b828281518110612b7957612b79615e1e565b6001600160a01b039092166020928302919091019091015280612b9b81615dad565b915050612b27565b50949350505050565b60408051606081018252600180825260208201819052918101829052612bd6918591859190613d3d565b8360100154811115612bfa5760405162461bcd60e51b81526004016105fa90615bcf565b60405163d236b06160e01b815260048101849052602481018390526044810182905273__$7cc3f5085d749a3b94d028420e2680a54c$__9063d236b06190606401611f96565b8560100154831115612c645760405162461bcd60e51b81526004016105fa90615bcf565b6040805160a08101825287546001600160a01b039081168252848116602080840191909152600c8a0154821683850152600d8a01548216606080850191909152600e8b01549092166080840152835191820184528782528101869052600f890154818401529151631de8080b60e31b81529091906000908190819073__$7cc3f5085d749a3b94d028420e2680a54c$__9063ef40405890612d0f908d9088908a908c90600401615c13565b60606040518083038186803b158015612d2757600080fd5b505af4158015612d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5f91906153a7565b925092509250612dbf89731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b612db686604080516001600160a01b0392909216600160f81b1760208084019190915281518084039091018152918101905290565b8d92919061468d565b612dcb8b8b8b85611cdc565b8a546040516322af599760e01b8152670de0b6b3a76400006004820152602481018b90526001600160a01b03909116906322af599790604401600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050600b8b015460405163f2fde38b60e01b81526001600160a01b0391821660048201529082169063f2fde38b90602401600060405180830381600087803b158015612e7f57600080fd5b505af1158015612e93573d6000803e3d6000fd5b50508c5460405163a22cb46560e01b81526001600160a01b03858116600483015260016024830152909116925063a22cb4659150604401600060405180830381600087803b158015612ee457600080fd5b505af1158015612ef8573d6000803e3d6000fd5b505050505050505050505050505050565b60408051606081018252600080825260016020830152918101829052612f3490879087908490613d3d565b428211612f835760405162461bcd60e51b815260206004820152601c60248201527f5374616b655574696c733a20646561646c696e65206e6f74206d65740000000060448201526064016105fa565b8654604051627eeac760e11b8152306004820152602481018790526000916001600160a01b03169062fdd58e9060440160206040518083038186803b158015612fcb57600080fd5b505afa158015612fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613003919061542e565b8854604051637921219560e11b81529192506001600160a01b03169063f242432a9061303990339030908b908b90600401615a8d565b600060405180830381600087803b15801561305357600080fd5b505af1158015613067573d6000803e3d6000fd5b50508954604051627eeac760e11b8152306004820152602481018a90528493506001600160a01b03909116915062fdd58e9060440160206040518083038186803b1580156130b457600080fd5b505afa1580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec919061542e565b6130f69190615d35565b601189015490955090506131178787681a5b9a5d1a585d195960ba1b61422d565b6131219190615cea565b42111561313957613134878787876146e7565b945090505b8315613210576131498686613fc9565b6001600160a01b031663916955866001600087878610156131735761316e8689615d35565b613176565b60005b6040516001600160e01b031960e087901b16815260ff9485166004820152939092166024840152604483015260648201526084810185905260a401602060405180830381600087803b1580156131cb57600080fd5b505af11580156131df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613203919061542e565b61320d9082615cea565b90505b604051600090339083908381818185875af1925050503d8060008114613252576040519150601f19603f3d011682016040523d82523d6000602084013e613257565b606091505b50509050806132a85760405162461bcd60e51b815260206004820181905260248201527f5374616b655574696c733a204661696c656420746f2073656e6420457468657260448201526064016105fa565b509695505050505050565b604080516060810182526001808252602082018190526000928201929092526132e0918991889190613d3d565b6040805160608101825260008082526001602083018190529282019290925261330d918991899190613d3d565b60405163f7325cdf60e01b8152600481018890526024810186905273__$88e9f91c78a6ae79a6edc42fa4982a1d74$",
  "libraries": {
    "OracleUtils": "0x380eF052F78BBef740bDd2edb0E567525164Bc25",
    "MaintainerUtils": "0x672FC28Ba198c8d4e392c49F0996dA612cbB4330"
  },
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "Contracts relying on this library must initialize StakeUtils.StakePoolALL \"fee\" variables are limited by PERCENTAGE_DENOMINATOR. * For ex, when fee is equal to PERCENTAGE_DENOMINATOR/2, it means 50% fee Note refer to DataStoreUtils before reviewing Note refer to MaintainerUtilsLib before reviewing Note refer to OracleUtilsLib before reviewing Note *suggested* refer to GeodeUtils before reviewing Note beware of the staking pool and operator implementations: Type 4 stands for Operators: They maintain Beacon Chain Validators on behalf of Planets and Comets * only if they are allowed to Operators have properties like fee(as a percentage), maintainer. Type 5 stands for Public Staking Pool (Planets): * Every Planet is also an Operator by design. * * Planets inherits Operator functionalities and parameters, with additional * * properties related to miniGovernances and staking pools - surplus, secured, withdrawalPool etc. * ID of a pool represents an id of gETH. * Creation of staking pools are not permissionless but the usage of it is. * * Meaning Everyone can stake and unstake using public pools. Type 6 stands for Private Staking Pools (Comets): * It is permissionless, one can directly create a Comet by simply * * choosing a name and sending MIN_AMOUNT which is expected to be 32 ether. * GeodeUtils generates IDs based on types, meaning same name can be used for a Planet and a Comet simultaneously. * The creation process is permissionless but staking is not. * * Meaning Only Comet's maintainer can stake but everyone can unstake * In Comets, there is a Withdrawal Queue instead of DWP. * NOT IMPLEMENTED YET Type 11 stands for a new Mini Governance implementation id: * like always CONTROLLER is the implementation contract position * requires the approval of Senate * Pools are in \"Isolation Mode\" until their mini governance is upgraded to given proposal ID. * * Meaning, no more Depositing or Staking can happen.",
    "kind": "dev",
    "methods": {
      "approveOperator(DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "details": "If planet decreases the approved validator count, below current running validator, operator can only withdraw until to new allowence.only maintainer of _planetId can approve an Operator",
        "params": {
          "allowance": "the MAX number of validators that can be created by the Operator for a given Planet",
          "operatorId": "the id of the Operator to allow them create validators for a given Planet",
          "poolId": "the gETH id of the Planet, only Maintainer can call this function"
        }
      },
      "beaconStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,bytes[])": {
        "details": "To save gas cost, pubkeys should be arranged by planedIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from planet1  pk4, pk5 from planet2  pk6 from planet3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "pubkeys": "Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake."
        }
      },
      "blameOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)": {
        "details": "anyone can call this functionif operator has given enough allowence, they can rotate the validators to avoid being prisoned"
      },
      "canDeposit(DataStoreUtils.DataStore storage,uint256)": {
        "details": "minting is paused when stakePaused == 1, meaning true."
      },
      "changePoolMaintainer(DataStoreUtils.DataStore storage,uint256,bytes,bytes32,address)": {
        "details": "requires the old Password and a new passwordHash, this saves the MiniGovernance contract from Double Horn Attack: when Both Senate and Governance is malicious.currently this is enough to ensure the future implementations will improve the miniGovernance security, * we are also working on improving the Isolation Mode, which will allow Portal-less withdrawals for all pool types"
      },
      "decreaseMaintainerWallet(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "only maintainer can decrease the balance directly, * other than that it can be used to propose Validatorsif a maintainer is in prison, it can not decrease the wallet"
      },
      "depositPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "params": {
          "deadline": "withdrawal pool parameter // debt  msg.value // 100   10  => buyback // 100   100 => buyback // 10    100 => buyback + mint // 0     x   => mint",
          "mingETH": "withdrawal pool parameter",
          "planetId": "id of the staking pool, withdrawal pool and gETH to be used."
        }
      },
      "fetchUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],uint256[],bool[])": {
        "details": "although OnlyOracle, logically this has nothing to do with Telescope. * So we are keeping it here.operator is prisoned if: 1. withdrawn without signalled, being sneaky. in such case they also doesn't receive the boost 2. signalled without withdrawal, deceiving other operators",
        "params": {
          "isExit": "according to eip-4895, there can be multiple ways to distriute the rewards * and not all of them requires exit. Even in such cases reward can be catched from * withdrawal credential and distributed."
        }
      },
      "increaseMaintainerWallet(DataStoreUtils.DataStore storage,uint256)": {
        "details": "only maintainer can increase the balance directly, * other than that it also collects validator rewards"
      },
      "initiateOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,uint256)": {
        "details": "requires ID to be approved as a node operator with a specific CONTROLLER",
        "params": {
          "_validatorPeriod": "the expected maximum staking interval Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()"
        }
      },
      "initiatePlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,string[2])": {
        "details": "requires ID to be approved as a planet with a specific CONTROLLER",
        "params": {
          "_interfaceSpecs": "0: interface name, 1: interface symbol, currently ERC20 specs."
        }
      },
      "operatorAllowance(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "an operator can not create new validators if: * 1. allowence is 0 (zero) * 2. lower than the current (proposed + active) number of validators * But if operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowenceallowence doesn't change when new validators created or old ones are unstaked.",
        "returns": {
          "allowance": "allowance"
        }
      },
      "pauseStakingForPool(DataStoreUtils.DataStore storage,uint256)": {
        "details": "pausing requires pool to be NOT paused already"
      },
      "proposeStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],bytes[])": {
        "details": "DEPOSIT_AMOUNT_PRESTAKE = 1 ether, which is the minimum number to create validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within maintainerWallet.Max number of validators to propose is MAX_DEPOSITS_PER_CALL (currently 64)",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "poolId": "the id of the staking pool whose TYPE can be 5 or 6.",
          "pubkeys": "Array of BLS12-381 public keys of the validators that will be proposed",
          "signatures": "Array of BLS12-381 signatures of the validators that will be proposed"
        }
      },
      "releasePrisoned(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "details": "in different situations such as a faulty improsenment or coordinated testing periods * Governance can vote on releasing the prisonersonlyGovernance"
      },
      "setInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,address)": {
        "details": "every interface has a unique index within \"interfaces\" dynamic array. * even if unsetted, it just replaces the implementation with address(0) for obvious security reasons",
        "params": {
          "_interface": "address of the new gETH ERC1155 interface for given ID"
        }
      },
      "setMiniGovernanceVersion(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "details": "CONTROLLER of the proposal id represents the implementation address"
      },
      "signalUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes[])": {
        "details": "to maintain the health of Geode Universe, we should protect the race conditions. * opeators should know when others are unstaking so they don't spend money for no boost."
      },
      "switchMaintainerFee(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "there is a 7 days delay before the new fee is activated, * this protect the pool maintainers from making bad operator choices",
        "params": {
          "newFee": "new fee percentage in terms of PERCENTAGE_DENOMINATOR, reverts if given more than MAX_MAINTAINER_FEE"
        }
      },
      "switchWithdrawalBoost(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "to prevent malicious swings in the withdrawal boost that can harm the competition, Boost changes is also has a delay.",
        "params": {
          "withdrawalBoost": "the percentage of arbitrague that will be shared with Operator on Unstake. Can be used to incentivise Unstakes in case of depeg"
        }
      },
      "unpauseStakingForPool(DataStoreUtils.DataStore storage,uint256)": {
        "details": "unpausing requires pool to be paused already"
      },
      "unsetInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "every interface has a unique interface index within interfaces dynamic array. * even if unsetted, it just replaces the implementation with address(0) for obvious security reasonsold Interfaces will still be active if not unsetted",
        "params": {
          "index": "index of given interface at the \"interfaces\" dynamic array"
        }
      },
      "withdrawPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256,uint256)": {
        "params": {
          "deadline": "TX is expected to revert by Swap.sol if not meet",
          "gEthToWithdraw": "amount of g-derivative that should be withdrawn",
          "minETH": "TX is expected to revert by Swap.sol if not meet"
        }
      }
    },
    "title": "StakeUtils library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BOOST_SWITCH_LATENCY()": {
        "notice": "when a maintainer changes the withdrawalBoost, it is effective after a delay"
      },
      "IGNORABLE_DEBT()": {
        "notice": "ignoring any buybacks if the DWP has a low debt"
      },
      "MIN_VALIDATOR_PERIOD()": {
        "notice": "limiting the operator.validatorPeriod, currently around 5 years"
      },
      "PERCENTAGE_DENOMINATOR()": {
        "notice": "PERCENTAGE_DENOMINATOR represents 100%"
      },
      "allInterfaces(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "lists all interfaces, unsetted interfaces will return address(0)"
      },
      "approveOperator(DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "notice": "To allow a Node Operator run validators for your Planet with Max number of validators. * This number can be set again at any given point in the future."
      },
      "beaconStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,bytes[])": {
        "notice": "Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to MaintainerWallet."
      },
      "blameOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)": {
        "notice": "allows improsening an Operator if the validator have not been exited until expectedExit"
      },
      "canDeposit(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "checks if staking is allowed in a pool. * when a pool is paused for staking NO new funds can be minted.staking is not allowed if: 1. MiniGovernance is in Isolation Mode, this means it is not upgraded to current version 2. Staking is simply paused by the Pool maintainer"
      },
      "canStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes)": {
        "notice": "external function to check if a validator can use planet funds"
      },
      "changeOperatorMaintainer(DataStoreUtils.DataStore storage,uint256,address)": {
        "notice": "changes maintainer of the given operator (TYPE 4)"
      },
      "changePoolMaintainer(DataStoreUtils.DataStore storage,uint256,bytes,bytes32,address)": {
        "notice": "changes pool maintainer  (TYPE 5-6) + conducts a Senate change on miniGovernance"
      },
      "depositPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256)": {
        "notice": "Allowing users to deposit into a public staking pool. * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-"
      },
      "fetchUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],uint256[],bool[])": {
        "notice": "Operator finalizing an Unstake event by calling Telescope's multisig: * distributing fees + boost * distributes rewards by burning the derivative * does a buyback if necessary * putting the extra within surplus."
      },
      "initiateOperator(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,uint256)": {
        "notice": "initiates ID as an node operator"
      },
      "initiatePlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,address,string[2])": {
        "notice": "initiates ID as a planet (public pool)"
      },
      "operatorAllowance(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "*operatorAllowence is the number of validators that the given Operator is allowed to create on behalf of the Planet"
      },
      "proposeStake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,bytes[],bytes[])": {
        "notice": "Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated for some time, * it is optimistically allowed to take funds from staking pools."
      },
      "releasePrisoned(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "notice": "releases an imprisoned operator immidately"
      },
      "setInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,address)": {
        "notice": "sets a erc1155Interface for gETH"
      },
      "setMiniGovernanceVersion(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256)": {
        "notice": "called when a proposal(TYPE=11) for a new MiniGovernance is approved by Senate"
      },
      "signalUnstake(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,bytes[])": {
        "notice": "allows giving a unstake signal, meaning validator has been exited. * And boost can be claimed upon arrival of the funds."
      },
      "unsetInterface(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "unsets a erc1155Interface for gETH with given index -acquired from allInterfaces()-"
      },
      "updateValidatorPeriod(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "updates validatorPeriod for given operator, limited by MAX_VALIDATOR_PERIOD"
      },
      "withdrawPlanet(StakeUtils.StakePool storage,DataStoreUtils.DataStore storage,uint256,uint256,uint256,uint256)": {
        "notice": "withdraw funds from Dynamic Staking Pool (Public Staking Pool + DWP) * If not in Boostrap Period, first checks the surplus, than swaps from DWP to create debt"
      }
    },
    "notice": "Exclusively contains functions related to ETH Liquid Staking designbiggest part of the functionality is related to Dynamic Staking Pools which relies on continuous buybacks (DWP) to maintain the price health with debt/surplus calculations",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}