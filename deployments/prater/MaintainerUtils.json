{
  "address": "0xA87975427D8207A4bdD5Ef74193Fb7d72e251c39",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        }
      ],
      "name": "IdInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "MaintainerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveTimestamp",
          "type": "uint256"
        }
      ],
      "name": "MaintainerFeeSwitched",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SWITCH_LATENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36d6e8ffc8a9429f0906f8faf0fc41d4e1cd99a8e2df3505f8c905668972c26b",
  "receipt": {
    "to": null,
    "from": "0x5297F1EA60D4b60E85eF323DECEc1A907295B6E6",
    "contractAddress": "0xA87975427D8207A4bdD5Ef74193Fb7d72e251c39",
    "transactionIndex": 7,
    "gasUsed": "1565738",
    "logsBloom": "0x
    "blockHash": "0x70d005e47aad91630a32954899f878baf9f650efa499312bae2df042a47a6757",
    "transactionHash": "0x36d6e8ffc8a9429f0906f8faf0fc41d4e1cd99a8e2df3505f8c905668972c26b",
    "logs": [],
    "blockNumber": 7845409,
    "cumulativeGasUsed": "1841372",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11ddb6c4e4cbaa5092547f659772ac7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"}],\"name\":\"IdInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"}],\"name\":\"MaintainerFeeSwitched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SWITCH_LATENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100% Note refer to DataStoreUtils before reviewing\",\"kind\":\"dev\",\"methods\":{\"changeMaintainer(DataStoreUtils.DataStore storage,uint256,address)\":{\"details\":\"it is wise to change the CONTROLLER before the maintainer, in case of any migrationhandle with care NOTE intended (suggested) usage is to set a contract address that will govern the id for maintainer, while keeping the controller as a multisig or provide smt like 0x000000000000000000000000000000000000dEaD\"},\"getMaintainerFromId(DataStoreUtils.DataStore storage,uint256)\":{\"details\":\"every ID has one maintainer that is set by CONTROLLER\"},\"getMaintainerWalletBalance(DataStoreUtils.DataStore storage,uint256)\":{\"params\":{\"id\":\"the id of the Maintainer\"},\"returns\":{\"walletBalance\":\"the balance of Operator with the given _operatorId has\"}},\"initiateComet(DataStoreUtils.DataStore storage,uint256,uint256,address)\":{\"details\":\"requires ID to be approved as comet with a specific CONTROLLER, NOTE CONTROLLER check will be surpassed with portal.\"},\"initiateOperator(DataStoreUtils.DataStore storage,uint256,uint256,address)\":{\"details\":\"requires ID to be approved as a node operator with a specific CONTROLLER\"},\"initiatePlanet(DataStoreUtils.DataStore storage,uint256[3],address[5],string[2])\":{\"details\":\"requires ID to be approved as a planet with a specific CONTROLLER\",\"params\":{\"addressSpecs\":\"0:gETH, 1:_maintainer, 2:DEFAULT_gETH_INTERFACE_, 3:DEFAULT_DWP, 4:DEFAULT_LP_TOKEN\",\"interfaceSpecs\":\"0: interface name, 1: interface symbol\",\"uintSpecs\":\"0:_id, 1:_fee, 2:_MINI_GOVERNANCE_VERSION\"}},\"switchMaintainerFee(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"details\":\"advise that 100% == PERCENTAGE_DENOMINATOR\",\"params\":{\"id\":\"planet, comet or operator ID\"}}},\"title\":\"MaintainerUtils library to be used with a DataStore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_A()\":{\"notice\":\"default DWP parameters\"},\"FEE_SWITCH_LATENCY()\":{\"notice\":\"when a maintainer changes the fee, it is effective after a delay\"},\"PERCENTAGE_DENOMINATOR()\":{\"notice\":\"PERCENTAGE_DENOMINATOR represents 100%\"},\"changeMaintainer(DataStoreUtils.DataStore storage,uint256,address)\":{\"notice\":\"CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\"},\"getMaintainerFromId(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"\\\"Maintainer\\\" is a shared logic (like \\\"NAME\\\") by both operators and private or public pools. Maintainers have permissiones to maintain the given id like setting a new fee or interface as well as creating validators etc. for operators.\"},\"getMaintainerWalletBalance(DataStoreUtils.DataStore storage,uint256)\":{\"notice\":\"When a fee is collected it is put in the maintainer's walletMaintainer wallet also keeps Ether put in Portal by Operator Maintainer to make proposeStake easier, instead of sending n ETH to contract while preStaking for n validator(s) for each time. Operator can put some ETHs to their wallet and from there, ETHs can be used to proposeStake. Then when it is approved and staked, it will be added back to the wallet to be used for other proposeStake calls.\"},\"initiateComet(DataStoreUtils.DataStore storage,uint256,uint256,address)\":{\"notice\":\"initiates ID as a comet (private pool)\"},\"initiateOperator(DataStoreUtils.DataStore storage,uint256,uint256,address)\":{\"notice\":\"initiates ID as a node operator\"},\"initiatePlanet(DataStoreUtils.DataStore storage,uint256[3],address[5],string[2])\":{\"notice\":\"initiates ID as a planet (public pool): deploys a miniGovernance, a Dynamic Withdrawal Pool, an ERC1155Interface\"},\"switchMaintainerFee(DataStoreUtils.DataStore storage,uint256,uint256)\":{\"notice\":\"Changes the fee that is applied by distributeFee on Oracle Updates.\"}},\"notice\":\"for Geode, there are different TYPEs active within Staking operations. These types(4,5,6) always has a maintainer. The staking logic is shaped around the control of maintainers over pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/MaintainerUtilsLib.sol\":\"MaintainerUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0edeb16b9821ae2b16e9d69c383b38d3ad2fbb3e0c06cf809a0786d96e602551\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title Storage Management Library for dynamic structs, based on data types and ids\\r\\n *\\r\\n * DataStoreUtils is a storage management tool designed to create a safe and scalable\\r\\n * storage layout with the help of ids and keys.\\r\\n * Mainly focusing on upgradable contracts with multiple user types to create a\\r\\n * sustainable development environment.\\r\\n *\\r\\n * In summary, extra gas cost that would be saved with Storage packing are\\r\\n * ignored to create upgradable structs*.\\r\\n *\\r\\n * IDs are the representation of a user with any given key as properties.\\r\\n * Type for ID is not mandatory, not all IDs should have an explicit type.\\r\\n * Thus there is no checks of types or keys.\\r\\n *\\r\\n * @notice distinct id and key pairs return different storage slots\\r\\n *\\r\\n */\\r\\nlibrary DataStoreUtils {\\r\\n    /**\\r\\n     * @notice Main Struct for reading and writing data to storage for given (id, key) pairs\\r\\n     * @param allIdsByType optional categorization for given ID, requires direct access, type => id[]\\r\\n     * @param uintData keccak(id, key) =>  returns uint256\\r\\n     * @param bytesData keccak(id, key) => returns bytes\\r\\n     * @param addressData keccak(id, key) =>  returns address\\r\\n     * @dev any other storage type can be expressed as bytes\\r\\n     * @param __gap keep the struct size at 16\\r\\n     */\\r\\n    struct DataStore {\\r\\n        mapping(uint256 => uint256[]) allIdsByType;\\r\\n        mapping(bytes32 => uint256) uintData;\\r\\n        mapping(bytes32 => bytes) bytesData;\\r\\n        mapping(bytes32 => address) addressData;\\r\\n        uint256[12] __gap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              ** HELPER **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @notice hashes given id with parameter to be used as key in getters and setters\\r\\n     * @return key bytes32 hash of id and parameter to be stored\\r\\n     **/\\r\\n    function getKey(uint256 _id, bytes32 _param)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 key)\\r\\n    {\\r\\n        key = keccak256(abi.encodePacked(_id, _param));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA GETTERS **\\r\\n     **/\\r\\n\\r\\n    function readUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (uint256 data) {\\r\\n        data = self.uintData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (bytes memory data) {\\r\\n        data = self.bytesData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    function readAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key\\r\\n    ) internal view returns (address data) {\\r\\n        data = self.addressData[getKey(_id, _key)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                              **DATA SETTERS **\\r\\n     **/\\r\\n    function writeUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _data\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function addUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _addend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] += _addend;\\r\\n    }\\r\\n\\r\\n    function subUintForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        uint256 _minuend\\r\\n    ) internal {\\r\\n        self.uintData[getKey(_id, _key)] -= _minuend;\\r\\n    }\\r\\n\\r\\n    function writeBytesForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        self.bytesData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n\\r\\n    function writeAddressForId(\\r\\n        DataStore storage self,\\r\\n        uint256 _id,\\r\\n        bytes32 _key,\\r\\n        address _data\\r\\n    ) internal {\\r\\n        self.addressData[getKey(_id, _key)] = _data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf4fe299cff8dd092657d494b2f967aaceb141b52563a233586ffe9676169f727\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title GeodeUtils library\\r\\n * @notice Exclusively contains functions responsible for administration of DATASTORE,\\r\\n * including functions related to \\\"limited upgradability\\\" with Senate & Proposals.\\r\\n * @dev Contracts relying on this library must initialize GeodeUtils.Universe\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * @dev Admin functions are already protected\\r\\n * Note this library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary GeodeUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event GovernanceTaxUpdated(uint256 newFee);\\r\\n    event MaxGovernanceTaxUpdated(uint256 newMaxFee);\\r\\n    event ControllerChanged(uint256 id, address newCONTROLLER);\\r\\n    event Proposed(\\r\\n        uint256 id,\\r\\n        address CONTROLLER,\\r\\n        uint256 TYPE,\\r\\n        uint256 deadline\\r\\n    );\\r\\n    event ProposalApproved(uint256 id);\\r\\n    event ElectorTypeSet(uint256 TYPE, bool isElector);\\r\\n    event Vote(uint256 proposalId, uint256 electorId);\\r\\n    event NewSenate(address senate, uint256 senateExpiry);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposal basically refers to give the control of an ID to a CONTROLLER.\\r\\n     *\\r\\n     * @notice A Proposal has 4 specs:\\r\\n     * @param TYPE: separates the proposals and related functionality between different ID types.\\r\\n     * * RESERVED TYPES on GeodeUtils:\\r\\n     * * * TYPE 0: inactive\\r\\n     * * * TYPE 1: Senate: controls state of governance, contract updates and other members of A Universe\\r\\n     * * * TYPE 2: Upgrade: address of the implementation for desired contract upgrade\\r\\n     * * * TYPE 3: **gap** : formally it represented the admin contract, however since UUPS is being used as a upgrade path,\\r\\n     * this TYPE is now reserved.\\r\\n     *\\r\\n     * @param name: id is created by keccak(name, type)\\r\\n     *\\r\\n     * @param CONTROLLER: the address that refers to the change that is proposed by given proposal ID.\\r\\n     * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\r\\n     *\\r\\n     * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\r\\n     * * Expired proposals can not be approved by Senate\\r\\n     * * Expired proposals can not be overriden by new proposals\\r\\n     **/\\r\\n    struct Proposal {\\r\\n        address CONTROLLER;\\r\\n        uint256 TYPE;\\r\\n        bytes NAME;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Universe is A blockchain. In this case, it defines Ethereum\\r\\n     * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\r\\n     * Suggests updates, such as new planets, operators, comets, contract upgrades and new Senate, on the Ecosystem -without any permission to force them-\\r\\n     * @param SENATE An address that controls the state of governance, updates and other users in the Geode Ecosystem\\r\\n     * Note SENATE is proposed by Governance and voted by all elector types, operates if \\u230a2/3\\u230b approves.\\r\\n     * @param GOVERNANCE_TAX operation fee of the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_TAX\\r\\n     * @param MAX_GOVERNANCE_TAX set by SENATE, limited by PERCENTAGE_DENOMINATOR\\r\\n     * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\r\\n     * @param approvedUpgrade only 1 implementation contract can be \\\"approved\\\" at any given time. @dev safe to set to address(0) after every upgrade\\r\\n     * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\r\\n     * @param _electorTypes only given types can vote @dev MUST only change during upgrades.\\r\\n     * @param _proposalForId proposals are kept seperately instead of setting the parameters of id in DATASTORE, and then setting it's type; to allow surpassing type checks to save gas cost\\r\\n     * @param __gap keep the struct size at 16\\r\\n     **/\\r\\n    struct Universe {\\r\\n        address SENATE;\\r\\n        address GOVERNANCE;\\r\\n        uint256 GOVERNANCE_TAX;\\r\\n        uint256 MAX_GOVERNANCE_TAX;\\r\\n        uint256 SENATE_EXPIRY;\\r\\n        address approvedUpgrade;\\r\\n        uint256 _electorCount;\\r\\n        mapping(uint256 => bool) _electorTypes;\\r\\n        mapping(uint256 => Proposal) _proposalForId;\\r\\n        uint256[7] __gap;\\r\\n    }\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\r\\n    uint32 public constant MAX_PROPOSAL_DURATION = 2 weeks;\\r\\n    uint32 public constant MAX_SENATE_PERIOD = 365 days; // 1 year\\r\\n\\r\\n    modifier onlySenate(Universe storage self) {\\r\\n        require(msg.sender == self.SENATE, \\\"GeodeUtils: SENATE role needed\\\");\\r\\n        require(\\r\\n            block.timestamp < self.SENATE_EXPIRY,\\r\\n            \\\"GeodeUtils: SENATE not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance(Universe storage self) {\\r\\n        require(\\r\\n            msg.sender == self.GOVERNANCE,\\r\\n            \\\"GeodeUtils: GOVERNANCE role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"GeodeUtils: CONTROLLER role needed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE GETTERS **\\r\\n     **/\\r\\n\\r\\n    /**\\r\\n     * @return address of SENATE\\r\\n     **/\\r\\n    function getSenate(Universe storage self) external view returns (address) {\\r\\n        return self.SENATE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return address of GOVERNANCE\\r\\n     **/\\r\\n    function getGovernance(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return self.GOVERNANCE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice MAX_GOVERNANCE_TAX must limit GOVERNANCE_TAX even if MAX is changed\\r\\n     * @return active GOVERNANCE_TAX, limited by MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @return MAX_GOVERNANCE_TAX\\r\\n     */\\r\\n    function getMaxGovernanceTax(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.MAX_GOVERNANCE_TAX;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the expiration date of current SENATE as a timestamp\\r\\n     */\\r\\n    function getSenateExpiry(Universe storage self)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.SENATE_EXPIRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                         ** UNIVERSE SETTERS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev can not set the fee more than MAX_GOVERNANCE_TAX\\r\\n     * @dev no need to check PERCENTAGE_DENOMINATOR because MAX_GOVERNANCE_TAX is limited already\\r\\n     * @return true if the operation was succesful, might be helpful when governance rights are distributed\\r\\n     */\\r\\n    function setGovernanceTax(Universe storage self, uint256 newFee)\\r\\n        external\\r\\n        onlyGovernance(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newFee <= self.MAX_GOVERNANCE_TAX,\\r\\n            \\\"GeodeUtils: cannot be more than MAX_GOVERNANCE_TAX\\\"\\r\\n        );\\r\\n\\r\\n        self.GOVERNANCE_TAX = newFee;\\r\\n\\r\\n        emit GovernanceTaxUpdated(newFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev can not set a fee more than PERCENTAGE_DENOMINATOR (100%)\\r\\n     * @return true if the operation was succesful\\r\\n     */\\r\\n    function setMaxGovernanceTax(Universe storage self, uint256 newMaxFee)\\r\\n        external\\r\\n        onlySenate(self)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newMaxFee <= PERCENTAGE_DENOMINATOR,\\r\\n            \\\"GeodeUtils: fee more than 100%\\\"\\r\\n        );\\r\\n\\r\\n        self.MAX_GOVERNANCE_TAX = newMaxFee;\\r\\n\\r\\n        emit MaxGovernanceTaxUpdated(newMaxFee);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** ID **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Some TYPEs may require permissionless creation. But to allow anyone to claim any ID,\\r\\n     * meaning malicious actors can claim names and operate pools to mislead people. To prevent this\\r\\n     * TYPEs will be considered during id generation.\\r\\n     */\\r\\n    function _generateId(bytes calldata _NAME, uint256 _TYPE)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(keccak256(abi.encodePacked(_NAME, _TYPE)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns address(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getCONTROLLERFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address) {\\r\\n        return DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns uint(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getTYPEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256) {\\r\\n        return DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns bytes(0) for empty ids, mandatory\\r\\n     */\\r\\n    function getNAMEFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (bytes memory) {\\r\\n        return DATASTORE.readBytesForId(id, \\\"NAME\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice only the current CONTROLLER can change\\r\\n     * @dev this operation can not be reverted by the old CONTROLLER\\r\\n     * @dev in case the current controller wants to remove the\\r\\n     * need to upgrade to Controller they should provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeIdCONTROLLER(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newCONTROLLER\\r\\n    ) external onlyController(DATASTORE, id) {\\r\\n        require(\\r\\n            newCONTROLLER != address(0),\\r\\n            \\\"GeodeUtils: CONTROLLER can not be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\r\\n\\r\\n        emit ControllerChanged(id, newCONTROLLER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                                          ** PROPOSALS **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * CONTROLLER Proposals\\r\\n     */\\r\\n\\r\\n    function getProposal(Universe storage self, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (Proposal memory)\\r\\n    {\\r\\n        return self._proposalForId[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice a proposal can never be overriden.\\r\\n     * @notice DATASTORE(id) will not be updated until the proposal is approved.\\r\\n     * @dev refer to structure of Proposal for explanations of params\\r\\n     */\\r\\n    function newProposal(\\r\\n        Universe storage self,\\r\\n        address _CONTROLLER,\\r\\n        uint256 _TYPE,\\r\\n        bytes calldata _NAME,\\r\\n        uint256 duration\\r\\n    ) external returns (uint256 id) {\\r\\n        require(\\r\\n            duration >= MIN_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration should be higher than MIN_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n        require(\\r\\n            duration <= MAX_PROPOSAL_DURATION,\\r\\n            \\\"GeodeUtils: duration exceeds MAX_PROPOSAL_DURATION\\\"\\r\\n        );\\r\\n\\r\\n        id = _generateId(_NAME, _TYPE);\\r\\n\\r\\n        require(\\r\\n            self._proposalForId[id].deadline == 0,\\r\\n            \\\"GeodeUtils: NAME already proposed\\\"\\r\\n        );\\r\\n\\r\\n        self._proposalForId[id] = Proposal({\\r\\n            CONTROLLER: _CONTROLLER,\\r\\n            TYPE: _TYPE,\\r\\n            NAME: _NAME,\\r\\n            deadline: block.timestamp + duration\\r\\n        });\\r\\n\\r\\n        emit Proposed(id, _CONTROLLER, _TYPE, block.timestamp + duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice type specific changes for reserved_types(1,2,3) are implemented here,\\r\\n     *  any other addition should take place in Portal, as not related\\r\\n     *  @param id given ID proposal that has been approved by Senate\\r\\n     *  @dev Senate should not be able to approve approved proposals\\r\\n     *  @dev Senate should not be able to approve expired proposals\\r\\n     *  @dev Senate should not be able to approve SENATE proposals :)\\r\\n     */\\r\\n    function approveProposal(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external onlySenate(self) {\\r\\n        require(\\r\\n            self._proposalForId[id].deadline > block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[id].TYPE != 1,\\r\\n            \\\"GeodeUtils: Senate can not approve Senate Election\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(\\r\\n            id,\\r\\n            \\\"CONTROLLER\\\",\\r\\n            self._proposalForId[id].CONTROLLER\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"TYPE\\\", self._proposalForId[id].TYPE);\\r\\n        DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposalForId[id].NAME);\\r\\n\\r\\n        if (self._proposalForId[id].TYPE == 2) {\\r\\n            self.approvedUpgrade = self._proposalForId[id].CONTROLLER;\\r\\n        }\\r\\n\\r\\n        if (self._electorTypes[DATASTORE.readUintForId(id, \\\"TYPE\\\")]) {\\r\\n            self._electorCount += 1;\\r\\n        }\\r\\n\\r\\n        DATASTORE.allIdsByType[self._proposalForId[id].TYPE].push(id);\\r\\n        self._proposalForId[id].deadline = block.timestamp;\\r\\n\\r\\n        emit ProposalApproved(id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * SENATE Proposals\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice only elector types can vote for senate\\r\\n     * @param _TYPE selected type\\r\\n     * @param isElector true if selected _type can vote for senate from now on\\r\\n     * @dev can not set with the same value again, preventing double increment/decrements\\r\\n     */\\r\\n    function setElectorType(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        bool isElector\\r\\n    ) external onlyGovernance(self) {\\r\\n        require(\\r\\n            self._electorTypes[_TYPE] != isElector,\\r\\n            \\\"GeodeUtils: type already _isElector\\\"\\r\\n        );\\r\\n        require(\\r\\n            _TYPE != 0 && _TYPE != 1 && _TYPE != 2 && _TYPE != 3,\\r\\n            \\\"GeodeUtils: 0, Senate, Upgrade cannot be elector\\\"\\r\\n        );\\r\\n\\r\\n        self._electorTypes[_TYPE] = isElector;\\r\\n\\r\\n        if (isElector) {\\r\\n            self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\r\\n        } else {\\r\\n            self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\r\\n        }\\r\\n\\r\\n        emit ElectorTypeSet(_TYPE, isElector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\r\\n     * NOTE mathematically, min 4 elector is needed for (c+1)*2/3 to work properly\\r\\n     * @notice id can not vote if:\\r\\n     * - approved already\\r\\n     * - proposal is expired\\r\\n     * - not its type is elector\\r\\n     * - not senate proposal\\r\\n     * @param electorId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\r\\n     * @dev pins id as \\\"voted\\\" when approved\\r\\n     * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\r\\n     */\\r\\n    function approveSenate(\\r\\n        Universe storage self,\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 proposalId,\\r\\n        uint256 electorId\\r\\n    ) external onlyController(DATASTORE, electorId) {\\r\\n        require(\\r\\n            self._proposalForId[proposalId].TYPE == 1,\\r\\n            \\\"GeodeUtils: NOT Senate Proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._proposalForId[proposalId].deadline >= block.timestamp,\\r\\n            \\\"GeodeUtils: proposal expired\\\"\\r\\n        );\\r\\n        require(\\r\\n            self._electorTypes[DATASTORE.readUintForId(electorId, \\\"TYPE\\\")],\\r\\n            \\\"GeodeUtils: NOT an elector\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(\\r\\n                proposalId,\\r\\n                DataStoreUtils.getKey(electorId, \\\"voted\\\")\\r\\n            ) == 0,\\r\\n            \\\" GeodeUtils: already approved\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeUintForId(\\r\\n            proposalId,\\r\\n            DataStoreUtils.getKey(electorId, \\\"voted\\\"),\\r\\n            1\\r\\n        );\\r\\n        DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\r\\n\\r\\n        if (\\r\\n            DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\r\\n            ((self._electorCount + 1) * 2) / 3\\r\\n        ) {\\r\\n            self._proposalForId[proposalId].deadline = block.timestamp;\\r\\n            _setSenate(\\r\\n                self,\\r\\n                self._proposalForId[proposalId].CONTROLLER,\\r\\n                MAX_SENATE_PERIOD\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Vote(proposalId, electorId);\\r\\n    }\\r\\n\\r\\n    function _setSenate(\\r\\n        Universe storage self,\\r\\n        address _newSenate,\\r\\n        uint256 _senatePeriod\\r\\n    ) internal {\\r\\n        self.SENATE = _newSenate;\\r\\n        self.SENATE_EXPIRY = block.timestamp + _senatePeriod;\\r\\n\\r\\n        emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if it is allowed to change a specific contract with the current version.\\r\\n     * @return True if it is allowed by senate and false if not.\\r\\n     * @dev address(0) should return false\\r\\n     * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\r\\n     **/\\r\\n    function isUpgradeAllowed(\\r\\n        Universe storage self,\\r\\n        address proposedImplementation\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            self.approvedUpgrade != address(0) &&\\r\\n            self.approvedUpgrade == proposedImplementation;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4060116387aec71c57e12ce4bbf0b10fa2e5748eb140c5f3e1cb44fb5b1b896e\",\"license\":\"MIT\"},\"contracts/Portal/utils/MaintainerUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./DataStoreUtilsLib.sol\\\";\\r\\nimport \\\"../../interfaces/IgETH.sol\\\";\\r\\nimport \\\"../../interfaces/IMiniGovernance.sol\\\";\\r\\nimport {IERC20InterfacePermitUpgradable as IgETHInterface} from \\\"../../interfaces/IERC20InterfacePermitUpgradable.sol\\\";\\r\\nimport \\\"../../interfaces/ISwap.sol\\\";\\r\\nimport \\\"../../interfaces/ILPToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Icebear & Crash Bandicoot\\r\\n * @title MaintainerUtils library to be used with a DataStore\\r\\n * @notice for Geode, there are different TYPEs active within Staking operations.\\r\\n * These types(4,5,6) always has a maintainer.\\r\\n * The staking logic is shaped around the control of maintainers over pools.\\r\\n *\\r\\n * @dev ALL \\\"fee\\\" variables are limited by PERCENTAGE_DENOMINATOR = 100%\\r\\n * Note refer to DataStoreUtils before reviewing\\r\\n */\\r\\nlibrary MaintainerUtils {\\r\\n    using DataStoreUtils for DataStoreUtils.DataStore;\\r\\n\\r\\n    event IdInitiated(uint256 id, uint256 TYPE);\\r\\n    event MaintainerChanged(uint256 id, address newMaintainer);\\r\\n    event MaintainerFeeSwitched(\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        uint256 effectiveTimestamp // the timestamp when the fee will start to be used after switch\\r\\n    );\\r\\n\\r\\n    /// @notice PERCENTAGE_DENOMINATOR represents 100%\\r\\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10**10;\\r\\n\\r\\n    /// @notice when a maintainer changes the fee, it is effective after a delay\\r\\n    uint256 public constant FEE_SWITCH_LATENCY = 3 days;\\r\\n\\r\\n    /// @notice default DWP parameters\\r\\n    uint256 public constant DEFAULT_A = 60;\\r\\n    uint256 public constant DEFAULT_FEE = (4 * PERCENTAGE_DENOMINATOR) / 10000;\\r\\n    uint256 public constant DEFAULT_ADMIN_FEE =\\r\\n        (5 * PERCENTAGE_DENOMINATOR) / 10;\\r\\n\\r\\n    modifier initiator(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _TYPE,\\r\\n        uint256 _id,\\r\\n        address _maintainer\\r\\n    ) {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\"),\\r\\n            \\\"MaintainerUtils: sender NOT CONTROLLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"TYPE\\\") == _TYPE,\\r\\n            \\\"MaintainerUtils: id NOT correct TYPE\\\"\\r\\n        );\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"initiated\\\") == 0,\\r\\n            \\\"MaintainerUtils: already initiated\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(_id, \\\"maintainer\\\", _maintainer);\\r\\n\\r\\n        _;\\r\\n\\r\\n        DATASTORE.writeUintForId(_id, \\\"initiated\\\", block.timestamp);\\r\\n\\r\\n        emit IdInitiated(_id, _TYPE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice restricts the access to given function based on TYPE\\r\\n     * @notice also allows onlyMaintainer check whenever required\\r\\n     * @param expectMaintainer restricts the access to only maintainer\\r\\n     * @param restrictionMap 0: Operator = TYPE(4), Planet = TYPE(5), Comet = TYPE(6),\\r\\n     */\\r\\n    function authenticate(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        bool expectMaintainer,\\r\\n        bool[3] memory restrictionMap\\r\\n    ) internal view {\\r\\n        if (expectMaintainer) {\\r\\n            require(\\r\\n                msg.sender == DATASTORE.readAddressForId(id, \\\"maintainer\\\"),\\r\\n                \\\"MaintainerUtils: sender NOT maintainer\\\"\\r\\n            );\\r\\n        }\\r\\n        uint256 typeOfId = DATASTORE.readUintForId(id, \\\"TYPE\\\");\\r\\n        if (typeOfId == 4) {\\r\\n            require(\\r\\n                restrictionMap[0] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else if (typeOfId == 5) {\\r\\n            require(\\r\\n                restrictionMap[1] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else if (typeOfId == 6) {\\r\\n            require(\\r\\n                restrictionMap[2] == true,\\r\\n                \\\"MaintainerUtils: TYPE NOT allowed\\\"\\r\\n            );\\r\\n        } else revert(\\\"MaintainerUtils: invalid TYPE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      ** Initiate ID functions **\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a node operator\\r\\n     * @dev requires ID to be approved as a node operator with a specific CONTROLLER\\r\\n     */\\r\\n    function initiateOperator(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        address maintainer\\r\\n    ) external initiator(DATASTORE, 4, id, maintainer) {\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a planet (public pool): deploys a miniGovernance, a Dynamic Withdrawal Pool, an ERC1155Interface\\r\\n     * @dev requires ID to be approved as a planet with a specific CONTROLLER\\r\\n     * @param uintSpecs 0:_id, 1:_fee, 2:_MINI_GOVERNANCE_VERSION\\r\\n     * @param addressSpecs 0:gETH, 1:_maintainer, 2:DEFAULT_gETH_INTERFACE_, 3:DEFAULT_DWP, 4:DEFAULT_LP_TOKEN\\r\\n     * @param interfaceSpecs 0: interface name, 1: interface symbol\\r\\n     */\\r\\n    function initiatePlanet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256[3] memory uintSpecs,\\r\\n        address[5] memory addressSpecs,\\r\\n        string[2] calldata interfaceSpecs\\r\\n    )\\r\\n        external\\r\\n        initiator(DATASTORE, 5, uintSpecs[0], addressSpecs[1])\\r\\n        returns (\\r\\n            address miniGovernance,\\r\\n            address gInterface,\\r\\n            address withdrawalPool\\r\\n        )\\r\\n    {\\r\\n        DATASTORE.writeUintForId(uintSpecs[0], \\\"fee\\\", uintSpecs[1]);\\r\\n        {\\r\\n            miniGovernance = _deployMiniGovernance(\\r\\n                DATASTORE,\\r\\n                addressSpecs[0],\\r\\n                uintSpecs[0],\\r\\n                uintSpecs[2],\\r\\n                addressSpecs[1]\\r\\n            );\\r\\n        }\\r\\n        {\\r\\n            gInterface = Clones.clone(addressSpecs[2]);\\r\\n            IgETHInterface(gInterface).initialize(\\r\\n                uintSpecs[0],\\r\\n                interfaceSpecs[0],\\r\\n                interfaceSpecs[1],\\r\\n                addressSpecs[0]\\r\\n            );\\r\\n        }\\r\\n        {\\r\\n            withdrawalPool = _deployWithdrawalPool(\\r\\n                DATASTORE,\\r\\n                uintSpecs[0],\\r\\n                addressSpecs[0],\\r\\n                addressSpecs[3],\\r\\n                addressSpecs[4]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice initiates ID as a comet (private pool)\\r\\n     * @dev requires ID to be approved as comet with a specific CONTROLLER,\\r\\n     * NOTE CONTROLLER check will be surpassed with portal.\\r\\n     */\\r\\n    function initiateComet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 fee,\\r\\n        address maintainer\\r\\n    ) external initiator(DATASTORE, 6, id, maintainer) {\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deploys a mini governance contract that will be used as a withdrawal credential\\r\\n     * using an approved MINI_GOVERNANCE_VERSION\\r\\n     * @return miniGovernance address which is deployed\\r\\n     */\\r\\n    function _deployMiniGovernance(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        address _gETH,\\r\\n        uint256 _id,\\r\\n        uint256 _versionId,\\r\\n        address _maintainer\\r\\n    ) internal returns (address miniGovernance) {\\r\\n        ERC1967Proxy newGovernance = new ERC1967Proxy(\\r\\n            DATASTORE.readAddressForId(_versionId, \\\"CONTROLLER\\\"),\\r\\n            abi.encodeWithSelector(\\r\\n                IMiniGovernance(address(0)).initialize.selector,\\r\\n                _gETH,\\r\\n                address(this),\\r\\n                _maintainer,\\r\\n                _id,\\r\\n                _versionId\\r\\n            )\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(\\r\\n            _id,\\r\\n            \\\"miniGovernance\\\",\\r\\n            address(newGovernance)\\r\\n        );\\r\\n        miniGovernance = address(newGovernance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deploys a new withdrawal pool using DEFAULT_DWP\\r\\n     * @dev sets the withdrawal pool and LP token for id\\r\\n     * @return withdrawalPool address which is deployed\\r\\n     */\\r\\n    function _deployWithdrawalPool(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        address _gETH,\\r\\n        address _DEFAULT_DWP,\\r\\n        address _DEFAULT_LP_TOKEN\\r\\n    ) internal returns (address withdrawalPool) {\\r\\n        withdrawalPool = Clones.clone(_DEFAULT_DWP);\\r\\n        bytes memory NAME = DATASTORE.readBytesForId(_id, \\\"NAME\\\");\\r\\n        address WPToken = ISwap(withdrawalPool).initialize(\\r\\n            IgETH(_gETH),\\r\\n            _id,\\r\\n            string(abi.encodePacked(NAME, \\\"-Geode LP Token\\\")),\\r\\n            string(abi.encodePacked(NAME, \\\"-LP\\\")),\\r\\n            DEFAULT_A,\\r\\n            DEFAULT_FEE,\\r\\n            DEFAULT_ADMIN_FEE,\\r\\n            _DEFAULT_LP_TOKEN\\r\\n        );\\r\\n        DATASTORE.writeAddressForId(_id, \\\"withdrawalPool\\\", withdrawalPool);\\r\\n        DATASTORE.writeAddressForId(_id, \\\"LPToken\\\", WPToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice \\\"Maintainer\\\" is a shared logic (like \\\"NAME\\\") by both operators and private or public pools.\\r\\n     * Maintainers have permissiones to maintain the given id like setting a new fee or interface as\\r\\n     * well as creating validators etc. for operators.\\r\\n     * @dev every ID has one maintainer that is set by CONTROLLER\\r\\n     */\\r\\n    function getMaintainerFromId(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (address maintainer) {\\r\\n        maintainer = DATASTORE.readAddressForId(id, \\\"maintainer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\r\\n     * @dev it is wise to change the CONTROLLER before the maintainer, in case of any migration\\r\\n     * @dev handle with care\\r\\n     * NOTE intended (suggested) usage is to set a contract address that will govern the id for maintainer,\\r\\n     * while keeping the controller as a multisig or provide smt like 0x000000000000000000000000000000000000dEaD\\r\\n     */\\r\\n    function changeMaintainer(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        address newMaintainer\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\r\\n            \\\"MaintainerUtils: sender NOT CONTROLLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            newMaintainer != address(0),\\r\\n            \\\"MaintainerUtils: maintainer can NOT be zero\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.writeAddressForId(id, \\\"maintainer\\\", newMaintainer);\\r\\n        emit MaintainerChanged(id, newMaintainer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets fee percentage in terms of PERCENTAGE_DENOMINATOR.\\r\\n     * @dev even if MAX_MAINTAINER_FEE is decreased later, it returns limited maximum.\\r\\n     * @param id planet, comet or operator ID\\r\\n     * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100 as a perfcentage\\r\\n     */\\r\\n    function getMaintainerFee(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) internal view returns (uint256 fee) {\\r\\n        if (DATASTORE.readUintForId(id, \\\"feeSwitch\\\") > block.timestamp) {\\r\\n            return DATASTORE.readUintForId(id, \\\"priorFee\\\");\\r\\n        }\\r\\n        return DATASTORE.readUintForId(id, \\\"fee\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the fee that is applied by distributeFee on Oracle Updates.\\r\\n     * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\r\\n     * @param id planet, comet or operator ID\\r\\n     */\\r\\n    function switchMaintainerFee(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id,\\r\\n        uint256 newFee\\r\\n    ) external {\\r\\n        DATASTORE.writeUintForId(\\r\\n            id,\\r\\n            \\\"priorFee\\\",\\r\\n            DATASTORE.readUintForId(id, \\\"fee\\\")\\r\\n        );\\r\\n        DATASTORE.writeUintForId(\\r\\n            id,\\r\\n            \\\"feeSwitch\\\",\\r\\n            block.timestamp + FEE_SWITCH_LATENCY\\r\\n        );\\r\\n        DATASTORE.writeUintForId(id, \\\"fee\\\", newFee);\\r\\n\\r\\n        emit MaintainerFeeSwitched(\\r\\n            id,\\r\\n            newFee,\\r\\n            block.timestamp + FEE_SWITCH_LATENCY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice When a fee is collected it is put in the maintainer's wallet\\r\\n     * @notice Maintainer wallet also keeps Ether put in Portal by Operator Maintainer to make proposeStake easier, instead of sending n ETH to contract\\r\\n     * while preStaking for n validator(s) for each time. Operator can put some ETHs to their wallet\\r\\n     * and from there, ETHs can be used to proposeStake. Then when it is approved and staked, it will be\\r\\n     * added back to the wallet to be used for other proposeStake calls.\\r\\n     * @param id the id of the Maintainer\\r\\n     * @return walletBalance the balance of Operator with the given _operatorId has\\r\\n     */\\r\\n    function getMaintainerWalletBalance(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256 walletBalance) {\\r\\n        walletBalance = DATASTORE.readUintForId(id, \\\"wallet\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To increase the balance of a Maintainer's wallet\\r\\n     * @param _id the id of the Operator\\r\\n     * @param _value Ether (in Wei) amount to increase the wallet balance.\\r\\n     * @return success boolean value which is true if successful, should be used by Operator is Maintainer is a contract.\\r\\n     */\\r\\n    function _increaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    ) internal returns (bool success) {\\r\\n        DATASTORE.addUintForId(_id, \\\"wallet\\\", _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice To decrease the balance of an Operator's wallet\\r\\n     * @dev only maintainer can decrease the balance\\r\\n     * @param _id the id of the Operator\\r\\n     * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\r\\n     * @return success boolean value which is \\\"sent\\\", should be used by Operator is Maintainer is a contract.\\r\\n     */\\r\\n    function _decreaseMaintainerWallet(\\r\\n        DataStoreUtils.DataStore storage DATASTORE,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    ) internal returns (bool success) {\\r\\n        require(\\r\\n            DATASTORE.readUintForId(_id, \\\"wallet\\\") >= _value,\\r\\n            \\\"MaintainerUtils: NOT enough balance in wallet\\\"\\r\\n        );\\r\\n\\r\\n        DATASTORE.subUintForId(_id, \\\"wallet\\\", _value);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6907af199f6dc7e9f15f5ceeb4c72d2f1e6ade7238faa66c89d8c323eb74f1f1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20InterfacePermitUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\nimport \\\"./IgETH.sol\\\";\\r\\n\\r\\ninterface IERC20InterfacePermitUpgradable {\\r\\n    function initialize(\\r\\n        uint256 id_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address gETH_1155\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2de0a3b7b87ebc81abe043870ccb18635e6ed66ddfa3fa6f2c918720e952ad33\",\"license\":\"MIT\"},\"contracts/interfaces/ILPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface ILPToken {\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function initialize(string memory name, string memory symbol)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external;\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6b2b267ab9433da79265b376641d50d5ac1c6ed77bdb822b58f908fc0b70ed9d\",\"license\":\"MIT\"},\"contracts/interfaces/IMiniGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\r\\n\\r\\ninterface IMiniGovernance {\\r\\n    function initialize(\\r\\n        address _gETH,\\r\\n        address _PORTAL,\\r\\n        address _MAINTAINER,\\r\\n        uint256 _ID,\\r\\n        uint256 _VERSION\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function getCurrentVersion() external view returns (uint256);\\r\\n\\r\\n    function getProposedVersion() external view returns (uint256);\\r\\n\\r\\n    function isolationMode() external view returns (bool);\\r\\n\\r\\n    function fetchUpgradeProposal() external;\\r\\n\\r\\n    function approveProposal(uint256 _id) external;\\r\\n\\r\\n    function refreshSenate(bytes32 newPassword) external;\\r\\n\\r\\n    function changeMaintainer(\\r\\n        bytes calldata password,\\r\\n        bytes32 newPasswordHash,\\r\\n        address newMaintainer\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    function claimUnstake(uint256 claim) external returns (bool success);\\r\\n}\\r\\n\",\"keccak256\":\"0xbdfef16de87e422f47fdbd27a47741b6612a11d869b972cd83690ed72fb10b0e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.7;\\r\\n\\r\\nimport \\\"./IgETH.sol\\\";\\r\\n\\r\\ninterface ISwap {\\r\\n    function donateBalancedFees(uint256 EthDonation, uint256 gEthDonation)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    // pool data view functions\\r\\n    function getERC1155() external view returns (address);\\r\\n\\r\\n    function getA() external view returns (uint256);\\r\\n\\r\\n    function getAPrecise() external view returns (uint256);\\r\\n\\r\\n    function getSwapFee() external view returns (uint256);\\r\\n\\r\\n    function getToken() external view returns (uint256);\\r\\n\\r\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n    function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n    function getDebt() external view returns (uint256);\\r\\n\\r\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\r\\n\\r\\n    // min return calculation functions\\r\\n    function calculateSwap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidity(uint256 amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function calculateRemoveLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex\\r\\n    ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n    // state modifying functions\\r\\n    function initialize(\\r\\n        IgETH _gEth,\\r\\n        uint256 _pooledTokenId,\\r\\n        string memory lpTokenName,\\r\\n        string memory lpTokenSymbol,\\r\\n        uint256 _a,\\r\\n        uint256 _fee,\\r\\n        uint256 _adminFee,\\r\\n        address lpTokenTargetAddress\\r\\n    ) external returns (address lpToken);\\r\\n\\r\\n    function swap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx,\\r\\n        uint256 minDy,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 minToMint,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata minAmounts,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function removeLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex,\\r\\n        uint256 minAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityImbalance(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 maxBurnAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdrawAdminFees() external;\\r\\n\\r\\n    function setAdminFee(uint256 newAdminFee) external;\\r\\n\\r\\n    function setSwapFee(uint256 newSwapFee) external;\\r\\n\\r\\n    function rampA(uint256 futureA, uint256 futureTime) external;\\r\\n\\r\\n    function stopRampA() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x61b7c8501a075177dbce108e72b015434ef0cd35a20de5a9f74c61d34836978f\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.7;\\r\\n\\r\\ninterface IgETH {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function uri(uint256) external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    function burnBatch(\\r\\n        address account,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values\\r\\n    ) external;\\r\\n\\r\\n    function totalSupply(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function denominator() external view returns (uint256);\\r\\n\\r\\n    function pricePerShare(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setPricePerShare(uint256 price, uint256 id) external;\\r\\n\\r\\n    function isInterface(address _interface, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setInterface(\\r\\n        address _interface,\\r\\n        uint256 id,\\r\\n        bool isSet\\r\\n    ) external;\\r\\n\\r\\n    function updateMinterRole(address Minter) external;\\r\\n\\r\\n    function updatePauserRole(address Pauser) external;\\r\\n\\r\\n    function updateOracleRole(address Oracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x233c5eef588ce7699ead6ef2eddd219104331f819ffab3ac5dcd9a5aa09667f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611b6c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000cc5760003560e01c8063b300e3dd1162000083578063b300e3dd1462000173578063b315ed1014620001a3578063b3cd425414620001ad578063d236b06114620001ba578063e9bd99fc14620001df578063ef40405814620001f657600080fd5b80632b6cd29314620000d15780633a02e2c314620000ed5780634fcc1def146200011457806355e66bad146200011e5780635fae04e71462000143578063746a46151462000168575b600080fd5b620000da603c81565b6040519081526020015b60405180910390f35b818015620000fa57600080fd5b50620001126200010c36600462000f37565b62000246565b005b620000da6200039b565b8180156200012b57600080fd5b50620001126200013d36600462000ece565b620003bf565b8180156200015057600080fd5b50620001126200016236600462000f37565b620004da565b620000da6203f48081565b6200018a6200018436600462000eab565b620004f9565b6040516001600160a01b039091168152602001620000e4565b620000da6200051c565b620000da6402540be40081565b818015620001c757600080fd5b5062000112620001d936600462000f0a565b62000530565b620000da620001f036600462000eab565b620005e1565b8180156200020357600080fd5b506200021b6200021536600462000dee565b620005f9565b604080516001600160a01b0394851681529284166020840152921691810191909152606001620000e4565b83600684836200026584836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b031614620002a15760405162461bcd60e51b8152600401620002989062001110565b60405180910390fd5b82620002b68584635459504560e01b6200088e565b14620002d65760405162461bcd60e51b8152600401620002989062001156565b620002ef8483681a5b9a5d1a585d195960ba1b6200088e565b156200030f5760405162461bcd60e51b81526004016200029890620010ce565b6200032a84836936b0b4b73a30b4b732b960b11b84620008ba565b6200033e88886266656560e81b8962000905565b620003588483681a5b9a5d1a585d195960ba1b4262000905565b60408051838152602081018590527f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb910160405180910390a15050505050505050565b612710620003b06402540be4006004620012ae565b620003bc91906200128b565b81565b620003d983836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b0316146200040c5760405162461bcd60e51b8152600401620002989062001110565b6001600160a01b038116620004785760405162461bcd60e51b815260206004820152602b60248201527f4d61696e7461696e65725574696c733a206d61696e7461696e65722063616e2060448201526a4e4f54206265207a65726f60a81b606482015260840162000298565b6200049383836936b0b4b73a30b4b732b960b11b84620008ba565b604080518381526001600160a01b03831660208201527f72774bc96991002276ea2f17557bc24e67733a3dcf2e8b390d38921daab1ab3191015b60405180910390a1505050565b83600484836200026584836921a7a72a2927a62622a960b11b62000858565b60006200051583836936b0b4b73a30b4b732b960b11b62000858565b9392505050565b600a620003b06402540be4006005620012ae565b6200055e82677072696f7246656560c01b6200055486836266656560e81b6200088e565b8692919062000905565b6200057f82680cccacaa6eed2e8c6d60bb1b620005546203f4804262001270565b6200059383836266656560e81b8462000905565b7f858b42af33bcca877f5e42f628f75d4e121337f568d1e168400fa15d178875c28282620005c56203f4804262001270565b60408051938452602084019290925290820152606001620004cd565b6000620005158383651dd85b1b195d60d21b6200088e565b600080808660058783602002015187600160200201516200062984836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b0316146200065c5760405162461bcd60e51b8152600401620002989062001110565b82620006718584635459504560e01b6200088e565b14620006915760405162461bcd60e51b8152600401620002989062001156565b620006aa8483681a5b9a5d1a585d195960ba1b6200088e565b15620006ca5760405162461bcd60e51b81526004016200029890620010ce565b620006e584836936b0b4b73a30b4b732b960b11b84620008ba565b895160208b015162000701918d916266656560e81b9062000905565b88518a5160408c015160208c015162000720938f93909290916200092f565b965062000734896002602002015162000a0a565b8a519096506001600160a01b03871690636ebd362c90620007568b80620011e7565b6200076560208e018e620011e7565b8f516040516001600160e01b031960e089901b1681526200078f969594939291906004016200119a565b600060405180830381600087803b158015620007aa57600080fd5b505af1158015620007bf573d6000803e3d6000fd5b50505050620007f58b8b600060038110620007de57620007de62001356565b60200201518b5160608d015160808e015162000aa9565b9450620008118483681a5b9a5d1a585d195960ba1b4262000905565b60408051838152602081018590527f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb910160405180910390a1505050509450945094915050565b60008360030160006200086c858562000c2b565b81526020810191909152604001600020546001600160a01b0316949350505050565b6000836001016000620008a2858562000c2b565b81526020019081526020016000205490509392505050565b80846003016000620008cd868662000c2b565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b8084600101600062000918868662000c2b565b815260208101919091526040016000205550505050565b6000806200094c87856921a7a72a2927a62622a960b11b62000858565b604080516001600160a01b038981166024830152306044830152861660648201526084810188905260a48082018890528251808303909101815260c490910182526020810180516001600160e01b03166314d6c7d760e31b1790529051620009b49062000d13565b620009c192919062001030565b604051809103906000f080158015620009de573d6000803e3d6000fd5b50905062000a0087866d6d696e69476f7665726e616e636560901b84620008ba565b9695505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811662000aa45760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000298565b919050565b600062000ab68362000a0a565b9050600062000ace8787634e414d4560e01b62000c57565b90506000826001600160a01b031663303e9bea87898560405160200162000af6919062000fd2565b6040516020818303038152906040528660405160200162000b18919062001007565b60408051601f19818403018152919052603c61271062000b3f6402540be4006004620012ae565b62000b4b91906200128b565b600a62000b5f6402540be4006005620012ae565b62000b6b91906200128b565b8c6040518963ffffffff1660e01b815260040162000b919897969594939291906200105e565b602060405180830381600087803b15801562000bac57600080fd5b505af115801562000bc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000be7919062000dce565b905062000c0888886d1dda5d1a191c985dd85b141bdbdb60921b86620008ba565b62000c2088886626282a37b5b2b760c91b84620008ba565b505095945050505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b606083600201600062000c6b858562000c2b565b8152602001908152602001600020805462000c869062001303565b80601f016020809104026020016040519081016040528092919081815260200182805462000cb49062001303565b801562000d055780601f1062000cd95761010080835404028352916020019162000d05565b820191906000526020600020905b81548152906001019060200180831162000ce757829003601f168201915b505050505090509392505050565b6107b1806200138683390190565b600082601f83011262000d3357600080fd5b60405160a0810181811067ffffffffffffffff8211171562000d6557634e487b7160e01b600052604160045260246000fd5b604052808360a0810186101562000d7b57600080fd5b60005b600581101562000dab57813562000d95816200136c565b8352602092830192919091019060010162000d7e565b509195945050505050565b806040810183101562000dc857600080fd5b92915050565b60006020828403121562000de157600080fd5b815162000515816200136c565b600080600080610140858703121562000e0657600080fd5b84359350602086603f87011262000e1c57600080fd5b62000e2662001238565b80828801608089018a81111562000e3c57600080fd5b60005b600381101562000e5e5782358552938501939185019160010162000e3f565b5082975062000e6e8b8262000d21565b9650505050505061012085013567ffffffffffffffff81111562000e9157600080fd5b62000e9f8782880162000db6565b91505092959194509250565b6000806040838503121562000ebf57600080fd5b50508035926020909101359150565b60008060006060848603121562000ee457600080fd5b8335925060208401359150604084013562000eff816200136c565b809150509250925092565b60008060006060848603121562000f2057600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121562000f4e57600080fd5b843593506020850135925060408501359150606085013562000f70816200136c565b939692955090935050565b6000815180845262000f95816020860160208601620012d0565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825162000fe6818460208701620012d0565b6e16a3b2b7b232902628102a37b5b2b760891b920191825250600f01919050565b600082516200101b818460208701620012d0565b6202d4c560ec1b920191825250600301919050565b6001600160a01b0383168152604060208201819052600090620010569083018462000f7b565b949350505050565b6001600160a01b03898116825260208201899052610100604083018190526000916200108d8483018b62000f7b565b91508382036060850152620010a3828a62000f7b565b92508760808501528660a08501528560c085015280851660e085015250509998505050505050505050565b60208082526022908201527f4d61696e7461696e65725574696c733a20616c726561647920696e6974696174604082015261195960f21b606082015260800190565b60208082526026908201527f4d61696e7461696e65725574696c733a2073656e646572204e4f5420434f4e546040820152652927a62622a960d11b606082015260800190565b60208082526024908201527f4d61696e7461696e65725574696c733a206964204e4f5420636f7272656374206040820152635459504560e01b606082015260800190565b868152608060208201526000620011b660808301878962000fa9565b8281036040840152620011cb81868862000fa9565b91505060018060a01b0383166060830152979650505050505050565b6000808335601e19843603018112620011ff57600080fd5b83018035915067ffffffffffffffff8211156200121b57600080fd5b6020019150368190038213156200123157600080fd5b9250929050565b6040516060810167ffffffffffffffff811182821017156200126a57634e487b7160e01b600052604160045260246000fd5b60405290565b6000821982111562001286576200128662001340565b500190565b600082620012a957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620012cb57620012cb62001340565b500290565b60005b83811015620012ed578181015183820152602001620012d3565b83811115620012fd576000848401525b50505050565b600181811c908216806200131857607f821691505b602082108114156200133a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200138257600080fd5b5056fe60806040526040516107b13803806107b183398101604081905261002291610307565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610424565b60008051602061076a8339815191521461006957610069610475565b6100758282600061007c565b50506104a1565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610117838360405180606001604052806027815260200161078a602791396101de565b9392505050565b610131816102bc60201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd60008051602061076a83398151915260001b6102cb60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b03168560405161026191906103d5565b600060405180830381855af49150503d806000811461029c576040519150601f19603f3d011682016040523d82523d6000602084013e6102a1565b606091505b5090925090506102b28282866102ce565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102dd575081610117565b8251156102ed5782518084602001fd5b8160405162461bcd60e51b815260040161018f91906103f1565b6000806040838503121561031a57600080fd5b82516001600160a01b038116811461033157600080fd5b60208401519092506001600160401b038082111561034e57600080fd5b818501915085601f83011261036257600080fd5b8151818111156103745761037461048b565b604051601f8201601f19908116603f0116810190838211818310171561039c5761039c61048b565b816040528281528860208487010111156103b557600080fd5b6103c6836020830160208801610449565b80955050505050509250929050565b600082516103e7818460208701610449565b9190910192915050565b6020815260008251806020840152610410816040850160208701610449565b601f01601f19169190910160400192915050565b60008282101561044457634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561046457818101518382015260200161044c565b838111156100ab5750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6102ba806104b06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e838360405180606001604052806027815260200161025e602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b60606001600160a01b0384163b6101305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161014b91906101de565b600060405180830381855af49150503d8060008114610186576040519150601f19603f3d011682016040523d82523d6000602084013e61018b565b606091505b509150915061019b8282866101a5565b9695505050505050565b606083156101b457508161004e565b8251156101c45782518084602001fd5b8160405162461bcd60e51b815260040161012791906101fa565b600082516101f081846020870161022d565b9190910192915050565b602081526000825180602084015261021981604085016020870161022d565b601f01601f19169190910160400192915050565b60005b83811015610248578181015183820152602001610230565b83811115610257576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203f90f01760a3fb86c9c8320cdb707a76979bbded46a4033a6a8dc276b5de4a1864736f6c63430008070033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204cb50a405157ef298d26d9184e9fed65969e3ebb2cce10c40b29f9dec9327ca764736f6c63430008070033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610620000cc5760003560e01c8063b300e3dd1162000083578063b300e3dd1462000173578063b315ed1014620001a3578063b3cd425414620001ad578063d236b06114620001ba578063e9bd99fc14620001df578063ef40405814620001f657600080fd5b80632b6cd29314620000d15780633a02e2c314620000ed5780634fcc1def146200011457806355e66bad146200011e5780635fae04e71462000143578063746a46151462000168575b600080fd5b620000da603c81565b6040519081526020015b60405180910390f35b818015620000fa57600080fd5b50620001126200010c36600462000f37565b62000246565b005b620000da6200039b565b8180156200012b57600080fd5b50620001126200013d36600462000ece565b620003bf565b8180156200015057600080fd5b50620001126200016236600462000f37565b620004da565b620000da6203f48081565b6200018a6200018436600462000eab565b620004f9565b6040516001600160a01b039091168152602001620000e4565b620000da6200051c565b620000da6402540be40081565b818015620001c757600080fd5b5062000112620001d936600462000f0a565b62000530565b620000da620001f036600462000eab565b620005e1565b8180156200020357600080fd5b506200021b6200021536600462000dee565b620005f9565b604080516001600160a01b0394851681529284166020840152921691810191909152606001620000e4565b83600684836200026584836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b031614620002a15760405162461bcd60e51b8152600401620002989062001110565b60405180910390fd5b82620002b68584635459504560e01b6200088e565b14620002d65760405162461bcd60e51b8152600401620002989062001156565b620002ef8483681a5b9a5d1a585d195960ba1b6200088e565b156200030f5760405162461bcd60e51b81526004016200029890620010ce565b6200032a84836936b0b4b73a30b4b732b960b11b84620008ba565b6200033e88886266656560e81b8962000905565b620003588483681a5b9a5d1a585d195960ba1b4262000905565b60408051838152602081018590527f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb910160405180910390a15050505050505050565b612710620003b06402540be4006004620012ae565b620003bc91906200128b565b81565b620003d983836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b0316146200040c5760405162461bcd60e51b8152600401620002989062001110565b6001600160a01b038116620004785760405162461bcd60e51b815260206004820152602b60248201527f4d61696e7461696e65725574696c733a206d61696e7461696e65722063616e2060448201526a4e4f54206265207a65726f60a81b606482015260840162000298565b6200049383836936b0b4b73a30b4b732b960b11b84620008ba565b604080518381526001600160a01b03831660208201527f72774bc96991002276ea2f17557bc24e67733a3dcf2e8b390d38921daab1ab3191015b60405180910390a1505050565b83600484836200026584836921a7a72a2927a62622a960b11b62000858565b60006200051583836936b0b4b73a30b4b732b960b11b62000858565b9392505050565b600a620003b06402540be4006005620012ae565b6200055e82677072696f7246656560c01b6200055486836266656560e81b6200088e565b8692919062000905565b6200057f82680cccacaa6eed2e8c6d60bb1b620005546203f4804262001270565b6200059383836266656560e81b8462000905565b7f858b42af33bcca877f5e42f628f75d4e121337f568d1e168400fa15d178875c28282620005c56203f4804262001270565b60408051938452602084019290925290820152606001620004cd565b6000620005158383651dd85b1b195d60d21b6200088e565b600080808660058783602002015187600160200201516200062984836921a7a72a2927a62622a960b11b62000858565b6001600160a01b0316336001600160a01b0316146200065c5760405162461bcd60e51b8152600401620002989062001110565b82620006718584635459504560e01b6200088e565b14620006915760405162461bcd60e51b8152600401620002989062001156565b620006aa8483681a5b9a5d1a585d195960ba1b6200088e565b15620006ca5760405162461bcd60e51b81526004016200029890620010ce565b620006e584836936b0b4b73a30b4b732b960b11b84620008ba565b895160208b015162000701918d916266656560e81b9062000905565b88518a5160408c015160208c015162000720938f93909290916200092f565b965062000734896002602002015162000a0a565b8a519096506001600160a01b03871690636ebd362c90620007568b80620011e7565b6200076560208e018e620011e7565b8f516040516001600160e01b031960e089901b1681526200078f969594939291906004016200119a565b600060405180830381600087803b158015620007aa57600080fd5b505af1158015620007bf573d6000803e3d6000fd5b50505050620007f58b8b600060038110620007de57620007de62001356565b60200201518b5160608d015160808e015162000aa9565b9450620008118483681a5b9a5d1a585d195960ba1b4262000905565b60408051838152602081018590527f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb910160405180910390a1505050509450945094915050565b60008360030160006200086c858562000c2b565b81526020810191909152604001600020546001600160a01b0316949350505050565b6000836001016000620008a2858562000c2b565b81526020019081526020016000205490509392505050565b80846003016000620008cd868662000c2b565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b8084600101600062000918868662000c2b565b815260208101919091526040016000205550505050565b6000806200094c87856921a7a72a2927a62622a960b11b62000858565b604080516001600160a01b038981166024830152306044830152861660648201526084810188905260a48082018890528251808303909101815260c490910182526020810180516001600160e01b03166314d6c7d760e31b1790529051620009b49062000d13565b620009c192919062001030565b604051809103906000f080158015620009de573d6000803e3d6000fd5b50905062000a0087866d6d696e69476f7665726e616e636560901b84620008ba565b9695505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811662000aa45760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640162000298565b919050565b600062000ab68362000a0a565b9050600062000ace8787634e414d4560e01b62000c57565b90506000826001600160a01b031663303e9bea87898560405160200162000af6919062000fd2565b6040516020818303038152906040528660405160200162000b18919062001007565b60408051601f19818403018152919052603c61271062000b3f6402540be4006004620012ae565b62000b4b91906200128b565b600a62000b5f6402540be4006005620012ae565b62000b6b91906200128b565b8c6040518963ffffffff1660e01b815260040162000b919897969594939291906200105e565b602060405180830381600087803b15801562000bac57600080fd5b505af115801562000bc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000be7919062000dce565b905062000c0888886d1dda5d1a191c985dd85b141bdbdb60921b86620008ba565b62000c2088886626282a37b5b2b760c91b84620008ba565b505095945050505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b606083600201600062000c6b858562000c2b565b8152602001908152602001600020805462000c869062001303565b80601f016020809104026020016040519081016040528092919081815260200182805462000cb49062001303565b801562000d055780601f1062000cd95761010080835404028352916020019162000d05565b820191906000526020600020905b81548152906001019060200180831162000ce757829003601f168201915b505050505090509392505050565b6107b1806200138683390190565b600082601f83011262000d3357600080fd5b60405160a0810181811067ffffffffffffffff8211171562000d6557634e487b7160e01b600052604160045260246000fd5b604052808360a0810186101562000d7b57600080fd5b60005b600581101562000dab57813562000d95816200136c565b8352602092830192919091019060010162000d7e565b509195945050505050565b806040810183101562000dc857600080fd5b92915050565b60006020828403121562000de157600080fd5b815162000515816200136c565b600080600080610140858703121562000e0657600080fd5b84359350602086603f87011262000e1c57600080fd5b62000e2662001238565b80828801608089018a81111562000e3c57600080fd5b60005b600381101562000e5e5782358552938501939185019160010162000e3f565b5082975062000e6e8b8262000d21565b9650505050505061012085013567ffffffffffffffff81111562000e9157600080fd5b62000e9f8782880162000db6565b91505092959194509250565b6000806040838503121562000ebf57600080fd5b50508035926020909101359150565b60008060006060848603121562000ee457600080fd5b8335925060208401359150604084013562000eff816200136c565b809150509250925092565b60008060006060848603121562000f2057600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121562000f4e57600080fd5b843593506020850135925060408501359150606085013562000f70816200136c565b939692955090935050565b6000815180845262000f95816020860160208601620012d0565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825162000fe6818460208701620012d0565b6e16a3b2b7b232902628102a37b5b2b760891b920191825250600f01919050565b600082516200101b818460208701620012d0565b6202d4c560ec1b920191825250600301919050565b6001600160a01b0383168152604060208201819052600090620010569083018462000f7b565b949350505050565b6001600160a01b03898116825260208201899052610100604083018190526000916200108d8483018b62000f7b565b91508382036060850152620010a3828a62000f7b565b92508760808501528660a08501528560c085015280851660e085015250509998505050505050505050565b60208082526022908201527f4d61696e7461696e65725574696c733a20616c726561647920696e6974696174604082015261195960f21b606082015260800190565b60208082526026908201527f4d61696e7461696e65725574696c733a2073656e646572204e4f5420434f4e546040820152652927a62622a960d11b606082015260800190565b60208082526024908201527f4d61696e7461696e65725574696c733a206964204e4f5420636f7272656374206040820152635459504560e01b606082015260800190565b868152608060208201526000620011b660808301878962000fa9565b8281036040840152620011cb81868862000fa9565b91505060018060a01b0383166060830152979650505050505050565b6000808335601e19843603018112620011ff57600080fd5b83018035915067ffffffffffffffff8211156200121b57600080fd5b6020019150368190038213156200123157600080fd5b9250929050565b6040516060810167ffffffffffffffff811182821017156200126a57634e487b7160e01b600052604160045260246000fd5b60405290565b6000821982111562001286576200128662001340565b500190565b600082620012a957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620012cb57620012cb62001340565b500290565b60005b83811015620012ed578181015183820152602001620012d3565b83811115620012fd576000848401525b50505050565b600181811c908216806200131857607f821691505b602082108114156200133a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200138257600080fd5b5056fe60806040526040516107b13803806107b183398101604081905261002291610307565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610424565b60008051602061076a8339815191521461006957610069610475565b6100758282600061007c565b50506104a1565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610117838360405180606001604052806027815260200161078a602791396101de565b9392505050565b610131816102bc60201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd60008051602061076a83398151915260001b6102cb60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b03168560405161026191906103d5565b600060405180830381855af49150503d806000811461029c576040519150601f19603f3d011682016040523d82523d6000602084013e6102a1565b606091505b5090925090506102b28282866102ce565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102dd575081610117565b8251156102ed5782518084602001fd5b8160405162461bcd60e51b815260040161018f91906103f1565b6000806040838503121561031a57600080fd5b82516001600160a01b038116811461033157600080fd5b60208401519092506001600160401b038082111561034e57600080fd5b818501915085601f83011261036257600080fd5b8151818111156103745761037461048b565b604051601f8201601f19908116603f0116810190838211818310171561039c5761039c61048b565b816040528281528860208487010111156103b557600080fd5b6103c6836020830160208801610449565b80955050505050509250929050565b600082516103e7818460208701610449565b9190910192915050565b6020815260008251806020840152610410816040850160208701610449565b601f01601f19169190910160400192915050565b60008282101561044457634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561046457818101518382015260200161044c565b838111156100ab5750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6102ba806104b06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e838360405180606001604052806027815260200161025e602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b60606001600160a01b0384163b6101305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161014b91906101de565b600060405180830381855af49150503d8060008114610186576040519150601f19603f3d011682016040523d82523d6000602084013e61018b565b606091505b509150915061019b8282866101a5565b9695505050505050565b606083156101b457508161004e565b8251156101c45782518084602001fd5b8160405162461bcd60e51b815260040161012791906101fa565b600082516101f081846020870161022d565b9190910192915050565b602081526000825180602084015261021981604085016020870161022d565b601f01601f19169190910160400192915050565b60005b83811015610248578181015183820152602001610230565b83811115610257576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203f90f01760a3fb86c9c8320cdb707a76979bbded46a4033a6a8dc276b5de4a1864736f6c63430008070033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204cb50a405157ef298d26d9184e9fed65969e3ebb2cce10c40b29f9dec9327ca764736f6c63430008070033",
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "ALL \"fee\" variables are limited by PERCENTAGE_DENOMINATOR = 100% Note refer to DataStoreUtils before reviewing",
    "kind": "dev",
    "methods": {
      "changeMaintainer(DataStoreUtils.DataStore storage,uint256,address)": {
        "details": "it is wise to change the CONTROLLER before the maintainer, in case of any migrationhandle with care NOTE intended (suggested) usage is to set a contract address that will govern the id for maintainer, while keeping the controller as a multisig or provide smt like 0x000000000000000000000000000000000000dEaD"
      },
      "getMaintainerFromId(DataStoreUtils.DataStore storage,uint256)": {
        "details": "every ID has one maintainer that is set by CONTROLLER"
      },
      "getMaintainerWalletBalance(DataStoreUtils.DataStore storage,uint256)": {
        "params": {
          "id": "the id of the Maintainer"
        },
        "returns": {
          "walletBalance": "the balance of Operator with the given _operatorId has"
        }
      },
      "initiateComet(DataStoreUtils.DataStore storage,uint256,uint256,address)": {
        "details": "requires ID to be approved as comet with a specific CONTROLLER, NOTE CONTROLLER check will be surpassed with portal."
      },
      "initiateOperator(DataStoreUtils.DataStore storage,uint256,uint256,address)": {
        "details": "requires ID to be approved as a node operator with a specific CONTROLLER"
      },
      "initiatePlanet(DataStoreUtils.DataStore storage,uint256[3],address[5],string[2])": {
        "details": "requires ID to be approved as a planet with a specific CONTROLLER",
        "params": {
          "addressSpecs": "0:gETH, 1:_maintainer, 2:DEFAULT_gETH_INTERFACE_, 3:DEFAULT_DWP, 4:DEFAULT_LP_TOKEN",
          "interfaceSpecs": "0: interface name, 1: interface symbol",
          "uintSpecs": "0:_id, 1:_fee, 2:_MINI_GOVERNANCE_VERSION"
        }
      },
      "switchMaintainerFee(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "details": "advise that 100% == PERCENTAGE_DENOMINATOR",
        "params": {
          "id": "planet, comet or operator ID"
        }
      }
    },
    "title": "MaintainerUtils library to be used with a DataStore",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_A()": {
        "notice": "default DWP parameters"
      },
      "FEE_SWITCH_LATENCY()": {
        "notice": "when a maintainer changes the fee, it is effective after a delay"
      },
      "PERCENTAGE_DENOMINATOR()": {
        "notice": "PERCENTAGE_DENOMINATOR represents 100%"
      },
      "changeMaintainer(DataStoreUtils.DataStore storage,uint256,address)": {
        "notice": "CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS"
      },
      "getMaintainerFromId(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "\"Maintainer\" is a shared logic (like \"NAME\") by both operators and private or public pools. Maintainers have permissiones to maintain the given id like setting a new fee or interface as well as creating validators etc. for operators."
      },
      "getMaintainerWalletBalance(DataStoreUtils.DataStore storage,uint256)": {
        "notice": "When a fee is collected it is put in the maintainer's walletMaintainer wallet also keeps Ether put in Portal by Operator Maintainer to make proposeStake easier, instead of sending n ETH to contract while preStaking for n validator(s) for each time. Operator can put some ETHs to their wallet and from there, ETHs can be used to proposeStake. Then when it is approved and staked, it will be added back to the wallet to be used for other proposeStake calls."
      },
      "initiateComet(DataStoreUtils.DataStore storage,uint256,uint256,address)": {
        "notice": "initiates ID as a comet (private pool)"
      },
      "initiateOperator(DataStoreUtils.DataStore storage,uint256,uint256,address)": {
        "notice": "initiates ID as a node operator"
      },
      "initiatePlanet(DataStoreUtils.DataStore storage,uint256[3],address[5],string[2])": {
        "notice": "initiates ID as a planet (public pool): deploys a miniGovernance, a Dynamic Withdrawal Pool, an ERC1155Interface"
      },
      "switchMaintainerFee(DataStoreUtils.DataStore storage,uint256,uint256)": {
        "notice": "Changes the fee that is applied by distributeFee on Oracle Updates."
      }
    },
    "notice": "for Geode, there are different TYPEs active within Staking operations. These types(4,5,6) always has a maintainer. The staking logic is shaped around the control of maintainers over pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}