{
  "address": "0xd07A36C1d111A978f0626d19175E0453900d1F4D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCONTROLLER",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isElector",
          "type": "bool"
        }
      ],
      "name": "ElectorTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "GovernanceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senateExpiry",
          "type": "uint256"
        }
      ],
      "name": "NewSenate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "CONTROLLER",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "Proposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "voterId",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GOVERNANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_DURATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SENATE_PERIOD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_DURATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba1a30a9ca8c94bb4f1404e141f124886513f07fd6dd101011c7856273105fbc",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0xd07A36C1d111A978f0626d19175E0453900d1F4D",
    "transactionIndex": 2,
    "gasUsed": "1515115",
    "logsBloom": "0x
    "blockHash": "0xb809e3ec33ca1c577f98e3d9b0fe943cd5aeb8cead87397032d6be8546e6fef3",
    "transactionHash": "0xba1a30a9ca8c94bb4f1404e141f124886513f07fd6dd101011c7856273105fbc",
    "logs": [],
    "blockNumber": 8557491,
    "cumulativeGasUsed": "1557115",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ade6b4939fda34d609e172906ec4e12a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCONTROLLER\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isElector\",\"type\":\"bool\"}],\"name\":\"ElectorTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"GovernanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senateExpiry\",\"type\":\"uint256\"}],\"name\":\"NewSenate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CONTROLLER\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voterId\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GOVERNANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SENATE_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"Reserved ID_TYPEs: * Type 0 : NULL * Type 1 : SENATE ELECTIONS * * Every SENATE has an expiration date, a new one should be elected before it ends. * * Only the controllers of IDs with TYPEs that are set true on _electorTypes can vote. * * 2/3 is the expected concensus, however this logic seems to be improved in the future. * Type 2 : CONTRACT UPGRADES * * Provides Limited Upgradability on Portal and Withdrawal Contract * * Contract can be upgradable once Senate approves it. * Type 3 : __GAP__ * * ormally represented the admin contract, but we use UUPS. Reserved to be never used.Contracts relying on this library must initialize GeodeUtils.DualGovernanceFunctions are already protected accordinglyreview DataStoreUtils\",\"kind\":\"dev\",\"methods\":{\"approveProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256)\":{\"details\":\"Senate is not able to approve approved proposalsSenate is not able to approve expired proposalsSenate is not able to approve SENATE proposals\",\"params\":{\"id\":\"given ID proposal that has been approved by Senate\"}},\"approveSenate(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"pins id as \\\"voted\\\" when approvedincreases \\\"approvalCount\\\" of proposalId by 1 when approved\",\"params\":{\"voterId\":\"should have the voting rights, msg.sender should be the CONTROLLER of given ID\"}},\"changeIdCONTROLLER(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"details\":\"this operation can not be reverted by the old CONTROLLER !can not provide address(0), try 0x000000000000000000000000000000000000dEaD\"},\"changeSenate(GeodeUtils.DualGovernance storage,address)\":{\"details\":\"does not change the expiry\"},\"getGovernance(GeodeUtils.DualGovernance storage)\":{\"returns\":{\"_0\":\"address of GOVERNANCE*\"}},\"getGovernanceFee(GeodeUtils.DualGovernance storage)\":{\"details\":\"MAX_GOVERNANCE_FEE MUST limit GOVERNANCE_FEE even if MAX is changed laterMUST return 0 until cooldown period is active\"},\"getProposal(GeodeUtils.DualGovernance storage,uint256)\":{\"details\":\"refer to Proposal struct\"},\"getSenate(GeodeUtils.DualGovernance storage)\":{\"returns\":{\"_0\":\"address of SENATE*\"}},\"getSenateExpiry(GeodeUtils.DualGovernance storage)\":{\"returns\":{\"_0\":\"the expiration date of current SENATE as a timestamp\"}},\"isElector(GeodeUtils.DualGovernance storage,uint256)\":{\"details\":\"->  view\"},\"isUpgradeAllowed(GeodeUtils.DualGovernance storage,address)\":{\"details\":\"address(0) should return falseDO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022*\",\"returns\":{\"_0\":\"True if it is allowed by senate and false if not.\"}},\"newProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,address,uint256,bytes,uint256)\":{\"details\":\"DATASTORE[id] will not be updated until the proposal is approvedProposals can NEVER be overridenrefer to Proposal struct\"},\"setElectorType(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,bool)\":{\"details\":\"can not set with the same value again, preventing double increment/decrements\",\"params\":{\"_TYPE\":\"selected type\",\"_isElector\":\"true if selected _type can vote for senate from now on\"}},\"setGovernanceFee(GeodeUtils.DualGovernance storage,uint256)\":{\"details\":\"Can not set the fee more than MAX_GOVERNANCE_FEE\"}},\"stateVariables\":{\"FEE_COOLDOWN\":{\"details\":\"fee switch will be automatically switched on after given timestampfee switch can be switched on with the approval of Senate (a contract upgrade)\"}},\"title\":\"Geode Dual Governance\",\"version\":1},\"userdoc\":{\"events\":{\"GovernanceFeeUpdated(uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"FEE_COOLDOWN()\":{\"notice\":\"prevents Governance from collecting any fees till given timestamp:April 2025\"},\"MAX_GOVERNANCE_FEE()\":{\"notice\":\"limiting the GOVERNANCE_FEE, 5%\"},\"approveProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"onlySenate, approves a proposal and records given data tospecific changes for the reserved types (1,2,3) are implemented here,  any other addition should take place in Portal, as not related\"},\"approveSenate(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"onlyController, Proposed CONTROLLER is the new Senate after 2/3 of the electors approved NOTE mathematically, min 3 elector is needed for (c+1)*2/3 to work properlyid can not vote if: - approved already - proposal is expired - not its type is elector - not senate proposal\"},\"changeIdCONTROLLER(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"notice\":\"onlyController, change the CONTROLLER of an ID\"},\"changeSenate(GeodeUtils.DualGovernance storage,address)\":{\"notice\":\"onlySenate, Sometimes it is useful to be able to change the Senate's address.\"},\"getGovernanceFee(GeodeUtils.DualGovernance storage)\":{\"notice\":\"active GOVERNANCE_FEE limited by FEE_COOLDOWN and MAX_GOVERNANCE_FEE\"},\"isUpgradeAllowed(GeodeUtils.DualGovernance storage,address)\":{\"notice\":\"Get if it is allowed to change a specific contract with the current version.\"},\"newProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,address,uint256,bytes,uint256)\":{\"notice\":\"onlyGovernance, creates a new Proposal\"},\"setElectorType(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,bool)\":{\"notice\":\"onlyGovernance, only elector types can vote for senate\"},\"setGovernanceFee(GeodeUtils.DualGovernance storage,uint256)\":{\"notice\":\"onlyGovernance, sets the governance fee\"}},\"notice\":\"Exclusively contains functions for the administration of the Isolated Storage, and Limited Upgradability with Dual Governance of Governance and Senate Note This library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/GeodeUtilsLib.sol\":\"GeodeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title Isolated Storage Layout\\n * A Storage Management Library for Dynamic Structs\\n *\\n * * DataStoreUtils is a storage management tool designed to create a safe and scalable\\n * * storage layout with the help of data types, IDs and keys.\\n *\\n * * Focusing on upgradable contracts with multiple user types to create a\\n * * sustainable development environment.\\n * * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create upgradable structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots\\n * @dev TYPEs are defined in globals.sol\\n *\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev While it is good practice to keep record,\\n * * TYPE for ID is NOT mandatory, an ID might not have an explicit type.\\n * * Thus there is no checks of types or keys.\\n */\\n\\nlibrary DataStoreUtils {\\n  /**\\n   * @notice Main Struct for reading and writing operations for given (id, key) pairs\\n   * @param allIdsByType type => id[], optional categorization for IDs, requires direct access\\n   * @param uintData keccak(id, key) =>  returns uint256\\n   * @param bytesData keccak(id, key) => returns bytes\\n   * @param addressData keccak(id, key) =>  returns address\\n   * @param __gap keep the struct size at 16\\n   * @dev any other storage type can be expressed as uint or bytes\\n   */\\n  struct IsolatedStorage {\\n    mapping(uint256 => uint256[]) allIdsByType;\\n    mapping(bytes32 => uint256) uintData;\\n    mapping(bytes32 => bytes) bytesData;\\n    mapping(bytes32 => address) addressData;\\n    uint256[12] __gap;\\n  }\\n\\n  /**\\n   *                              ** HELPERS **\\n   **/\\n\\n  /**\\n   * @notice generaliazed method of generating an ID\\n   * @dev Some TYPEs may require permissionless creation. Allowing anyone to claim any ID,\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(\\n    bytes memory _name,\\n    uint256 _type\\n  ) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encodePacked(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hashes given id and a parameter to be used as key in getters and setters\\n   * @return key bytes32 hash of id and parameter to be stored\\n   **/\\n  function getKey(\\n    uint256 id,\\n    bytes32 param\\n  ) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encodePacked(id, param));\\n  }\\n\\n  /**\\n   *                              ** DATA GETTERS **\\n   **/\\n\\n  function readUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytesForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddressForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   *                              ** ARRAY GETTERS **\\n   **/\\n\\n  function readUintArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   *                              ** DATA SETTERS **\\n   **/\\n\\n  function writeUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytesForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddressForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   *                              ** ARRAY SETTERS **\\n   **/\\n\\n  function appendUintArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   *                              ** BATCH ARRAY SETTERS **\\n   **/\\n\\n  function appendUintArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0xa792c6f0c02220de88911ee11ab57c13f69cf020d618556754a713fe320b201a\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {ID_TYPE, PERCENTAGE_DENOMINATOR} from \\\"./globals.sol\\\";\\nimport {DataStoreUtils as DSU} from \\\"./DataStoreUtilsLib.sol\\\";\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title Geode Dual Governance\\n * @notice Exclusively contains functions for the administration of the Isolated Storage,\\n * and Limited Upgradability with Dual Governance of Governance and Senate\\n * Note This library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\n *\\n * @dev Reserved ID_TYPEs:\\n *\\n * * Type 0 : NULL\\n *\\n * * Type 1 : SENATE ELECTIONS\\n * * * Every SENATE has an expiration date, a new one should be elected before it ends.\\n * * * Only the controllers of IDs with TYPEs that are set true on _electorTypes can vote.\\n * * * 2/3 is the expected concensus, however this logic seems to be improved in the future.\\n *\\n * * Type 2 : CONTRACT UPGRADES\\n * * * Provides Limited Upgradability on Portal and Withdrawal Contract\\n * * * Contract can be upgradable once Senate approves it.\\n *\\n * * Type 3 : __GAP__\\n * * * ormally represented the admin contract, but we use UUPS. Reserved to be never used.\\n *\\n * @dev Contracts relying on this library must initialize GeodeUtils.DualGovernance\\n * @dev Functions are already protected accordingly\\n *\\n * @dev review DataStoreUtils\\n */\\nlibrary GeodeUtils {\\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\\n  using DSU for DSU.IsolatedStorage;\\n\\n  /// @notice EVENTS\\n  event GovernanceFeeUpdated(uint256 newFee);\\n  event ControllerChanged(uint256 indexed id, address newCONTROLLER);\\n  event Proposed(\\n    uint256 id,\\n    address CONTROLLER,\\n    uint256 indexed TYPE,\\n    uint256 deadline\\n  );\\n  event ProposalApproved(uint256 id);\\n  event ElectorTypeSet(uint256 TYPE, bool isElector);\\n  event Vote(uint256 indexed proposalId, uint256 indexed voterId);\\n  event NewSenate(address senate, uint256 senateExpiry);\\n\\n  /**\\n   * @notice Proposals give the control of a specific ID to a CONTROLLER\\n   *\\n   * @notice A Proposal has 4 specs:\\n   * @param TYPE: refer to globals.sol\\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n   * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n   * @param NAME: DataStore generates ID by keccak(name, type)\\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n   * * Expired proposals can not be approved by Senate\\n   * * Expired proposals can not be overriden by new proposals\\n   **/\\n  struct Proposal {\\n    address CONTROLLER;\\n    uint256 TYPE;\\n    bytes NAME;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice DualGovernance allows 2 parties to manage a contract with proposals and approvals\\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n   * Suggests updates, such as new operators, contract upgrades, a new Senate -without any permission to force them-\\n   * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n   * Note SENATE is proposed by Governance and voted by all elector TYPEs, approved if \\u230a2/3\\u230b votes.\\n   * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\n   * @param GOVERNANCE_FEE operation fee on the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_FEE\\n   * @param approvedVersion only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n   * * @dev safe to set to address(0) after every upgrade as isUpgradeAllowed returns false for address(0)\\n   * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\n   * @param _electorTypes only given TYPEs can vote\\n   * @param _proposals till approved, proposals are kept separated from the Isolated Storage\\n   * @param __gap keep the struct size at 16\\n   **/\\n  struct DualGovernance {\\n    address GOVERNANCE;\\n    address SENATE;\\n    uint256 SENATE_EXPIRY;\\n    uint256 GOVERNANCE_FEE;\\n    address approvedVersion;\\n    uint256 _electorCount;\\n    mapping(uint256 => bool) _electorTypes;\\n    mapping(uint256 => Proposal) _proposals;\\n    uint256[8] __gap;\\n  }\\n\\n  /**\\n   * @notice limiting the GOVERNANCE_FEE, 5%\\n   */\\n  uint256 public constant MAX_GOVERNANCE_FEE =\\n    (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /**\\n   * @notice prevents Governance from collecting any fees till given timestamp:\\n   * @notice April 2025\\n   * @dev fee switch will be automatically switched on after given timestamp\\n   * @dev fee switch can be switched on with the approval of Senate (a contract upgrade)\\n   */\\n  uint256 public constant FEE_COOLDOWN = 1743454800;\\n\\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 public constant MAX_PROPOSAL_DURATION = 4 weeks;\\n  uint32 public constant MAX_SENATE_PERIOD = 365 days;\\n\\n  modifier onlySenate(DualGovernance storage self) {\\n    require(msg.sender == self.SENATE, \\\"GU: SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GU: SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyGovernance(DualGovernance storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GU: GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DSU.IsolatedStorage storage DATASTORE, uint256 id) {\\n    require(\\n      msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\n      \\\"GU: CONTROLLER role needed\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice                                     ** DualGovernance **\\n   **/\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @return address of SENATE\\n   **/\\n  function getSenate(\\n    DualGovernance storage self\\n  ) external view returns (address) {\\n    return self.SENATE;\\n  }\\n\\n  /**\\n   * @return address of GOVERNANCE\\n   **/\\n  function getGovernance(\\n    DualGovernance storage self\\n  ) external view returns (address) {\\n    return self.GOVERNANCE;\\n  }\\n\\n  /**\\n   * @return the expiration date of current SENATE as a timestamp\\n   */\\n  function getSenateExpiry(\\n    DualGovernance storage self\\n  ) external view returns (uint256) {\\n    return self.SENATE_EXPIRY;\\n  }\\n\\n  /**\\n   * @notice active GOVERNANCE_FEE limited by FEE_COOLDOWN and MAX_GOVERNANCE_FEE\\n   * @dev MAX_GOVERNANCE_FEE MUST limit GOVERNANCE_FEE even if MAX is changed later\\n   * @dev MUST return 0 until cooldown period is active\\n   */\\n  function getGovernanceFee(\\n    DualGovernance storage self\\n  ) external view returns (uint256) {\\n    return\\n      block.timestamp < FEE_COOLDOWN\\n        ? 0\\n        : MAX_GOVERNANCE_FEE > self.GOVERNANCE_FEE\\n        ? self.GOVERNANCE_FEE\\n        : MAX_GOVERNANCE_FEE;\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyGovernance, sets the governance fee\\n   * @dev Can not set the fee more than MAX_GOVERNANCE_FEE\\n   */\\n  function setGovernanceFee(\\n    DualGovernance storage self,\\n    uint256 newFee\\n  ) external onlyGovernance(self) {\\n    require(newFee <= MAX_GOVERNANCE_FEE, \\\"GU: > MAX_GOVERNANCE_FEE\\\");\\n\\n    self.GOVERNANCE_FEE = newFee;\\n\\n    emit GovernanceFeeUpdated(newFee);\\n  }\\n\\n  /**\\n   * @notice                                     ** ID **\\n   */\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyController, change the CONTROLLER of an ID\\n   * @dev this operation can not be reverted by the old CONTROLLER !\\n   * @dev can not provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GU: CONTROLLER can not be zero\\\");\\n\\n    DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n\\n  /**\\n   * @notice                                     ** PROPOSALS **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @dev refer to Proposal struct\\n   */\\n  function getProposal(\\n    DualGovernance storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self._proposals[id];\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyGovernance, creates a new Proposal\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   * @dev refer to Proposal struct\\n   */\\n  function newProposal(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSU.generateId(_NAME, _TYPE);\\n\\n    require(self._proposals[id].deadline == 0, \\\"GU: NAME already proposed\\\");\\n\\n    require(\\n      (DATASTORE.readBytesForId(id, \\\"NAME\\\")).length == 0,\\n      \\\"GU: ID already exist\\\"\\n    );\\n\\n    require(_CONTROLLER != address(0), \\\"GU: CONTROLLER can NOT be ZERO\\\");\\n    require(\\n      _TYPE != ID_TYPE.NONE && _TYPE != ID_TYPE.__GAP__,\\n      \\\"GU: TYPE is NONE or GAP\\\"\\n    );\\n    require(\\n      duration >= MIN_PROPOSAL_DURATION && duration <= MAX_PROPOSAL_DURATION,\\n      \\\"GU: invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self._proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(id, _CONTROLLER, _TYPE, _deadline);\\n  }\\n\\n  /**\\n   * @notice onlySenate, approves a proposal and records given data to\\n   *  @notice specific changes for the reserved types (1,2,3) are implemented here,\\n   *  any other addition should take place in Portal, as not related\\n   *  @param id given ID proposal that has been approved by Senate\\n   *  @dev Senate is not able to approve approved proposals\\n   *  @dev Senate is not able to approve expired proposals\\n   *  @dev Senate is not able to approve SENATE proposals\\n   */\\n  function approveProposal(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (uint256 _type, address _controller) {\\n    require(\\n      self._proposals[id].deadline > block.timestamp,\\n      \\\"GU: NOT an active proposal\\\"\\n    );\\n\\n    _type = self._proposals[id].TYPE;\\n    _controller = self._proposals[id].CONTROLLER;\\n\\n    require(_type != ID_TYPE.SENATE, \\\"GU: can NOT approve SENATE election\\\");\\n\\n    DATASTORE.writeUintForId(id, \\\"TYPE\\\", _type);\\n    DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", _controller);\\n    DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposals[id].NAME);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.CONTRACT_UPGRADE) {\\n      self.approvedVersion = _controller;\\n    }\\n\\n    if (isElector(self, _type)) {\\n      self._electorCount += 1;\\n    }\\n\\n    // important\\n    self._proposals[id].deadline = block.timestamp;\\n\\n    emit ProposalApproved(id);\\n  }\\n\\n  /**\\n   * @notice                                       ** SENATE ELECTIONS **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  function isElector(\\n    DualGovernance storage self,\\n    uint256 _TYPE\\n  ) public view returns (bool) {\\n    return self._electorTypes[_TYPE];\\n  }\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice internal function to set a new senate with a given period\\n   */\\n  function _setSenate(\\n    DualGovernance storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlySenate, Sometimes it is useful to be able to change the Senate's address.\\n   * @dev does not change the expiry\\n   */\\n  function changeSenate(\\n    DualGovernance storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @notice onlyGovernance, only elector types can vote for senate\\n   * @param _TYPE selected type\\n   * @param _isElector true if selected _type can vote for senate from now on\\n   * @dev can not set with the same value again, preventing double increment/decrements\\n   */\\n  function setElectorType(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _TYPE,\\n    bool _isElector\\n  ) external onlyGovernance(self) {\\n    require(_isElector != isElector(self, _TYPE), \\\"GU: type already elector\\\");\\n    require(\\n      _TYPE > ID_TYPE.__GAP__,\\n      \\\"GU: 0, Senate, Upgrade, GAP cannot be elector\\\"\\n    );\\n\\n    self._electorTypes[_TYPE] = _isElector;\\n\\n    if (_isElector) {\\n      self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\n    } else {\\n      self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\n    }\\n\\n    emit ElectorTypeSet(_TYPE, _isElector);\\n  }\\n\\n  /**\\n   * @notice onlyController, Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\n   * NOTE mathematically, min 3 elector is needed for (c+1)*2/3 to work properly\\n   * @notice id can not vote if:\\n   * - approved already\\n   * - proposal is expired\\n   * - not its type is elector\\n   * - not senate proposal\\n   * @param voterId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\n   * @dev pins id as \\\"voted\\\" when approved\\n   * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\n   */\\n  function approveSenate(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 proposalId,\\n    uint256 voterId\\n  ) external onlyController(DATASTORE, voterId) {\\n    uint256 _type = self._proposals[proposalId].TYPE;\\n    require(_type == ID_TYPE.SENATE, \\\"GU: NOT Senate Proposal\\\");\\n    require(\\n      self._proposals[proposalId].deadline >= block.timestamp,\\n      \\\"GU: proposal expired\\\"\\n    );\\n    require(\\n      isElector(self, DATASTORE.readUintForId(voterId, \\\"TYPE\\\")),\\n      \\\"GU: NOT an elector\\\"\\n    );\\n    require(\\n      DATASTORE.readUintForId(proposalId, DSU.getKey(voterId, \\\"voted\\\")) == 0,\\n      \\\" GU: already approved\\\"\\n    );\\n\\n    DATASTORE.writeUintForId(proposalId, DSU.getKey(voterId, \\\"voted\\\"), 1);\\n    DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\n\\n    if (\\n      DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\n      ((self._electorCount + 1) * 2) / 3\\n    ) {\\n      self._proposals[proposalId].deadline = block.timestamp;\\n      _setSenate(\\n        self,\\n        self._proposals[proposalId].CONTROLLER,\\n        block.timestamp + MAX_SENATE_PERIOD\\n      );\\n    }\\n\\n    emit Vote(proposalId, voterId);\\n  }\\n\\n  /**\\n   * @notice                                       ** LIMITED UPGRADABILITY **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice Get if it is allowed to change a specific contract with the current version.\\n   * @return True if it is allowed by senate and false if not.\\n   * @dev address(0) should return false\\n   * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\n   **/\\n  function isUpgradeAllowed(\\n    DualGovernance storage self,\\n    address proposedImplementation\\n  ) external view returns (bool) {\\n    return\\n      self.approvedVersion != address(0) &&\\n      self.approvedVersion == proposedImplementation;\\n  }\\n}\\n\",\"keccak256\":\"0x778b193b23ba4dae7dc6b1ddafcd9a460eff6e8f624be6f1fff8aa69efb8606c\",\"license\":\"MIT\"},\"contracts/Portal/utils/globals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// PERCENTAGE_DENOMINATOR represents 100%\\nuint256 constant PERCENTAGE_DENOMINATOR = 10 ** 10;\\n\\n/**\\n * @notice ID_TYPE is like an ENUM, widely used within Portal and Modules like Withdrawal Contract\\n * @dev Why not use enums, they basically do the same thing?\\n * * We like using a explicit defined uints than linearly increasing ones.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate and Senate Election Proposals\\n  uint256 internal constant SENATE = 1;\\n\\n  /// @notice TYPE 2: Contract Upgrade\\n  uint256 internal constant CONTRACT_UPGRADE = 2;\\n\\n  /// @notice TYPE 3: *gap*: formally represented the admin contract, now reserved to be never used\\n  uint256 internal constant __GAP__ = 3;\\n\\n  /// @notice TYPE 4: Node Operators\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: Staking Pools\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 21: Module: Withdrawal Contract\\n  uint256 internal constant MODULE_WITHDRAWAL_CONTRACT = 21;\\n\\n  /// @notice TYPE 31: Module: A new gETH interface\\n  uint256 internal constant MODULE_GETH_INTERFACE = 31;\\n\\n  /// @notice TYPE 41: Module: A new Liquidity Pool\\n  uint256 internal constant MODULE_LIQUDITY_POOL = 41;\\n\\n  /// @notice TYPE 42: Module: A new Liquidity Pool token\\n  uint256 internal constant MODULE_LIQUDITY_POOL_TOKEN = 42;\\n}\\n\\n/**\\n * @notice VALIDATOR_STATE keeping track of validators within The Staking Library\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is exited, not currently used much\\n  uint8 internal constant EXITED = 3;\\n\\n  /// @notice STATE 69: proposal was malicious(alien), maybe faulty signatures or probably: (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xda2ab3b886f2e31a1c6dabf2115aead8022e6b91bf0495e3793b7a5189824478\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611a7361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061012b5760003560e01c8063791150f5116100b7578063bd9682161161007b578063bd968216146102e7578063cc2feb68146102f1578063d0e7d619146102fc578063d9fc310f1461031c578063ff7027141461035957600080fd5b8063791150f514610275578063944ee22d14610295578063980426e9146102b4578063a96b61fa146102bc578063b21f2188146102dc57600080fd5b806358d876db116100fe57806358d876db146101e45780635bd2b113146102045780636797415514610232578063714812781461024757806376d1ba9d1461026257600080fd5b806309988f57146101305780631c6839541461016c5780631cc8ff03146101a25780632c5d1298146101c4575b600080fd5b61015761013e36600461183a565b6000908152600691909101602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61018a61017a3660046116a7565b600101546001600160a01b031690565b6040516001600160a01b039091168152602001610163565b8180156101ae57600080fd5b506101c26101bd3660046117c2565b61036c565b005b8180156101d057600080fd5b506101c26101df3660046116c0565b61052c565b8180156101f057600080fd5b506101c26101ff36600461183a565b6105df565b81801561021057600080fd5b5061022461021f3660046116ec565b6106b5565b604051908152602001610163565b6102246102403660046116a7565b6002015490565b61018a6102553660046116a7565b546001600160a01b031690565b6102246102703660046116a7565b610a12565b81801561028157600080fd5b506101c2610290366004611808565b610a79565b61029f6201518081565b60405163ffffffff9091168152602001610163565b610224610d65565b8180156102c857600080fd5b506101c26102d736600461185c565b610d84565b61029f6301e1338081565b61029f6224ea0081565b6102246367eb025081565b61030f61030a36600461183a565b610eb2565b60405161016391906118ea565b81801561032857600080fd5b5061033c610337366004611796565b610fc6565b604080519283526001600160a01b03909116602083015201610163565b6101576103673660046116c0565b61130d565b835484906001600160a01b031633146103a05760405162461bcd60e51b8152600401610397906118b3565b60405180910390fd5b600083815260068601602052604090205460ff16151582151514156104075760405162461bcd60e51b815260206004820152601860248201527f47553a207479706520616c726561647920656c6563746f7200000000000000006044820152606401610397565b6003831161046d5760405162461bcd60e51b815260206004820152602d60248201527f47553a20302c2053656e6174652c20557067726164652c204741502063616e6e60448201526c37ba1031329032b632b1ba37b960991b6064820152608401610397565b60008381526006860160205260409020805460ff191683158015919091179091556104c157600083815260208590526040812054600587018054919290916104b690849061194c565b909155506104eb9050565b600083815260208590526040812054600587018054919290916104e59084906119a5565b90915550505b6040805184815283151560208201527fd30c2f5058959ec9e0f8b4a5f4f92d0d293345e5bfe4947ba7063ae6e7590c81910160405180910390a15050505050565b600182015482906001600160a01b031633146105835760405162461bcd60e51b815260206004820152601660248201527511d54e8814d153905511481c9bdb19481b995959195960521b6044820152606401610397565b806002015442106105cb5760405162461bcd60e51b815260206004820152601260248201527111d54e8814d15390551148195e1c1a5c995960721b6044820152606401610397565b6105da83838560020154611342565b505050565b815482906001600160a01b0316331461060a5760405162461bcd60e51b8152600401610397906118b3565b606461061c6402540be4006005611986565b6106269190611964565b8211156106755760405162461bcd60e51b815260206004820152601860248201527f47553a203e204d41585f474f5645524e414e43455f46454500000000000000006044820152606401610397565b600383018290556040518281527f78ec98f839c83f9772deb71634aae776280186c92df2a27e1de8dee2053ba599906020015b60405180910390a1505050565b865460009088906001600160a01b031633146106e35760405162461bcd60e51b8152600401610397906118b3565b61072485858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061139f915050565b600081815260078b016020526040902060030154909250156107885760405162461bcd60e51b815260206004820152601960248201527f47553a204e414d4520616c72656164792070726f706f736564000000000000006044820152606401610397565b61079a8883634e414d4560e01b6113d3565b51156107df5760405162461bcd60e51b815260206004820152601460248201527311d54e88125108185b1c9958591e48195e1a5cdd60621b6044820152606401610397565b6001600160a01b0387166108355760405162461bcd60e51b815260206004820152601e60248201527f47553a20434f4e54524f4c4c45522063616e204e4f54206265205a45524f00006044820152606401610397565b8515801590610845575060038614155b6108915760405162461bcd60e51b815260206004820152601760248201527f47553a2054595045206973204e4f4e45206f72204741500000000000000000006044820152606401610397565b6201518083108015906108a757506224ea008311155b6108f35760405162461bcd60e51b815260206004820152601d60248201527f47553a20696e76616c69642070726f706f73616c206475726174696f6e0000006044820152606401610397565b60006108ff844261194c565b90506040518060800160405280896001600160a01b0316815260200188815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602091820184905285815260078d018252604090819020835181546001600160a01b0319166001600160a01b0390911617815583830151600182015590830151805191926109af926002850192909101906115f2565b50606091820151600390910155604080518581526001600160a01b038b16602082015290810183905288917fb56e333cd6082a862942820ad6871b5a17d922a7506ff536fc0830784a46b2c6910160405180910390a25050979650505050505050565b60006367eb02504210610a705760038201546064610a366402540be4006005611986565b610a409190611964565b11610a66576064610a576402540be4006005611986565b610a619190611964565b610a73565b8160030154610a73565b60005b92915050565b8281610a9382826921a7a72a2927a62622a960b11b611485565b6001600160a01b0316336001600160a01b031614610af35760405162461bcd60e51b815260206004820152601a60248201527f47553a20434f4e54524f4c4c455220726f6c65206e65656465640000000000006044820152606401610397565b60008481526007870160205260409020600190810154908114610b585760405162461bcd60e51b815260206004820152601760248201527f47553a204e4f542053656e6174652050726f706f73616c0000000000000000006044820152606401610397565b6000858152600788016020526040902060030154421115610bb25760405162461bcd60e51b815260206004820152601460248201527311d54e881c1c9bdc1bdcd85b08195e1c1a5c995960621b6044820152606401610397565b610bc88761013e8887635459504560e01b6114b9565b610c095760405162461bcd60e51b815260206004820152601260248201527123aa9d102727aa1030b71032b632b1ba37b960711b6044820152606401610397565b610c2785610c1f86641d9bdd195960da1b6114e3565b8891906114b9565b15610c6c5760405162461bcd60e51b81526020600482015260156024820152740811d54e88185b1c9958591e48185c1c1c9bdd9959605a1b6044820152606401610397565b610c8c85610c8286641d9bdd195960da1b6114e3565b889190600161150f565b610ca986866c185c1c1c9bdd985b10dbdd5b9d609a1b6001611537565b600387600501546001610cbc919061194c565b610cc7906002611986565b610cd19190611964565b610cec87876c185c1c1c9bdd985b10dbdd5b9d609a1b6114b9565b10610d2f576000858152600788016020526040902042600382018190559054610d2f9189916001600160a01b031690610d2a906301e133809061194c565b611342565b604051849086907f33952ef907843fd2ddd118a92dd935debf65b72965a557a364ea08deffca032f90600090a350505050505050565b6064610d776402540be4006005611986565b610d819190611964565b81565b8282610d9e82826921a7a72a2927a62622a960b11b611485565b6001600160a01b0316336001600160a01b031614610dfe5760405162461bcd60e51b815260206004820152601a60248201527f47553a20434f4e54524f4c4c455220726f6c65206e65656465640000000000006044820152606401610397565b6001600160a01b038316610e545760405162461bcd60e51b815260206004820152601e60248201527f47553a20434f4e54524f4c4c45522063616e206e6f74206265207a65726f00006044820152606401610397565b610e6d85856921a7a72a2927a62622a960b11b86611570565b6040516001600160a01b038416815284907ff0d0c255199b45799d6fd3623dce5e99a7cb09d662754eff92d8d0e73a537f0a9060200160405180910390a25050505050565b610ee6604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000828152600784016020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092526002810180549293919291840191610f32906119ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e906119ec565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b50505050508152602001600382015481525050905092915050565b6001830154600090819085906001600160a01b031633146110225760405162461bcd60e51b815260206004820152601660248201527511d54e8814d153905511481c9bdb19481b995959195960521b6044820152606401610397565b8060020154421061106a5760405162461bcd60e51b815260206004820152601260248201527111d54e8814d15390551148195e1c1a5c995960721b6044820152606401610397565b600084815260078701602052604090206003015442106110cc5760405162461bcd60e51b815260206004820152601a60248201527f47553a204e4f5420616e206163746976652070726f706f73616c0000000000006044820152606401610397565b6000848152600787016020526040902060018082015491549194506001600160a01b03909116925083141561114f5760405162461bcd60e51b815260206004820152602360248201527f47553a2063616e204e4f5420617070726f76652053454e41544520656c65637460448201526234b7b760e91b6064820152608401610397565b6111628585635459504560e01b8661150f565b61117b85856921a7a72a2927a62622a960b11b85611570565b61123984634e414d4560e01b88600701600088815260200190815260200160002060020180546111aa906119ec565b80601f01602080910402602001604051908101604052809291908181526020018280546111d6906119ec565b80156112235780601f106111f857610100808354040283529160200191611223565b820191906000526020600020905b81548152906001019060200180831161120657829003601f168201915b5050505050886115b9909392919063ffffffff16565b60008381526020868152604082208054600181018255908352912001849055600283141561127f576004860180546001600160a01b0319166001600160a01b0384161790555b600083815260068701602052604090205460ff16156112b35760018660050160008282546112ad919061194c565b90915550505b60008481526007870160205260409081902042600390910155517f28ec9e38ba73636ceb2f6c1574136f83bd46284a3c74734b711bf45e12f8d929906112fc9086815260200190565b60405180910390a150935093915050565b60048201546000906001600160a01b03161580159061133b575060048301546001600160a01b038381169116145b9392505050565b6001830180546001600160a01b0319166001600160a01b0384169081179091556002840182905560408051918252602082018390527f3f34afe456fb5b36c04b5d1e2ef0750086747ac542262fbf14a0b1aae5fd7ee891016106a8565b600082826040516020016113b4929190611891565b60408051601f1981840301815291905280516020909101209392505050565b60608360020160006113e585856114e3565b815260200190815260200160002080546113fe906119ec565b80601f016020809104026020016040519081016040528092919081815260200182805461142a906119ec565b80156114775780601f1061144c57610100808354040283529160200191611477565b820191906000526020600020905b81548152906001019060200180831161145a57829003601f168201915b505050505090509392505050565b600083600301600061149785856114e3565b81526020810191909152604001600020546001600160a01b0316949350505050565b60008360010160006114cb85856114e3565b81526020019081526020016000205490509392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b8084600101600061152086866114e3565b815260208101919091526040016000205550505050565b8084600101600061154886866114e3565b81526020019081526020016000206000828254611565919061194c565b909155505050505050565b8084600301600061158186866114e3565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b808460020160006115ca86866114e3565b815260200190815260200160002090805190602001906115eb9291906115f2565b5050505050565b8280546115fe906119ec565b90600052602060002090601f0160209004810192826116205760008555611666565b82601f1061163957805160ff1916838001178555611666565b82800160010185558215611666579182015b8281111561166657825182559160200191906001019061164b565b50611672929150611676565b5090565b5b808211156116725760008155600101611677565b80356001600160a01b03811681146116a257600080fd5b919050565b6000602082840312156116b957600080fd5b5035919050565b600080604083850312156116d357600080fd5b823591506116e36020840161168b565b90509250929050565b600080600080600080600060c0888a03121561170757600080fd5b873596506020880135955061171e6040890161168b565b945060608801359350608088013567ffffffffffffffff8082111561174257600080fd5b818a0191508a601f83011261175657600080fd5b81358181111561176557600080fd5b8b602082850101111561177757600080fd5b60208301955080945050505060a0880135905092959891949750929550565b6000806000606084860312156117ab57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156117d857600080fd5b843593506020850135925060408501359150606085013580151581146117fd57600080fd5b939692955090935050565b6000806000806080858703121561181e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561184d57600080fd5b50508035926020909101359150565b60008060006060848603121561187157600080fd5b83359250602084013591506118886040850161168b565b90509250925092565b600083516118a38184602088016119bc565b9190910191825250602001919050565b6020808252601a908201527f47553a20474f5645524e414e434520726f6c65206e6565646564000000000000604082015260600190565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015280518060a085015261192e8160c08601602085016119bc565b606094909401516080840152505060c0601f909201601f1916010190565b6000821982111561195f5761195f611a27565b500190565b60008261198157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156119a0576119a0611a27565b500290565b6000828210156119b7576119b7611a27565b500390565b60005b838110156119d75781810151838201526020016119bf565b838111156119e6576000848401525b50505050565b600181811c90821680611a0057607f821691505b60208210811415611a2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d968cbe03b4bebf9a37708890278dfd42b4c169737f1d732d0574b3d8156a5cc64736f6c63430008070033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061012b5760003560e01c8063791150f5116100b7578063bd9682161161007b578063bd968216146102e7578063cc2feb68146102f1578063d0e7d619146102fc578063d9fc310f1461031c578063ff7027141461035957600080fd5b8063791150f514610275578063944ee22d14610295578063980426e9146102b4578063a96b61fa146102bc578063b21f2188146102dc57600080fd5b806358d876db116100fe57806358d876db146101e45780635bd2b113146102045780636797415514610232578063714812781461024757806376d1ba9d1461026257600080fd5b806309988f57146101305780631c6839541461016c5780631cc8ff03146101a25780632c5d1298146101c4575b600080fd5b61015761013e36600461183a565b6000908152600691909101602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61018a61017a3660046116a7565b600101546001600160a01b031690565b6040516001600160a01b039091168152602001610163565b8180156101ae57600080fd5b506101c26101bd3660046117c2565b61036c565b005b8180156101d057600080fd5b506101c26101df3660046116c0565b61052c565b8180156101f057600080fd5b506101c26101ff36600461183a565b6105df565b81801561021057600080fd5b5061022461021f3660046116ec565b6106b5565b604051908152602001610163565b6102246102403660046116a7565b6002015490565b61018a6102553660046116a7565b546001600160a01b031690565b6102246102703660046116a7565b610a12565b81801561028157600080fd5b506101c2610290366004611808565b610a79565b61029f6201518081565b60405163ffffffff9091168152602001610163565b610224610d65565b8180156102c857600080fd5b506101c26102d736600461185c565b610d84565b61029f6301e1338081565b61029f6224ea0081565b6102246367eb025081565b61030f61030a36600461183a565b610eb2565b60405161016391906118ea565b81801561032857600080fd5b5061033c610337366004611796565b610fc6565b604080519283526001600160a01b03909116602083015201610163565b6101576103673660046116c0565b61130d565b835484906001600160a01b031633146103a05760405162461bcd60e51b8152600401610397906118b3565b60405180910390fd5b600083815260068601602052604090205460ff16151582151514156104075760405162461bcd60e51b815260206004820152601860248201527f47553a207479706520616c726561647920656c6563746f7200000000000000006044820152606401610397565b6003831161046d5760405162461bcd60e51b815260206004820152602d60248201527f47553a20302c2053656e6174652c20557067726164652c204741502063616e6e60448201526c37ba1031329032b632b1ba37b960991b6064820152608401610397565b60008381526006860160205260409020805460ff191683158015919091179091556104c157600083815260208590526040812054600587018054919290916104b690849061194c565b909155506104eb9050565b600083815260208590526040812054600587018054919290916104e59084906119a5565b90915550505b6040805184815283151560208201527fd30c2f5058959ec9e0f8b4a5f4f92d0d293345e5bfe4947ba7063ae6e7590c81910160405180910390a15050505050565b600182015482906001600160a01b031633146105835760405162461bcd60e51b815260206004820152601660248201527511d54e8814d153905511481c9bdb19481b995959195960521b6044820152606401610397565b806002015442106105cb5760405162461bcd60e51b815260206004820152601260248201527111d54e8814d15390551148195e1c1a5c995960721b6044820152606401610397565b6105da83838560020154611342565b505050565b815482906001600160a01b0316331461060a5760405162461bcd60e51b8152600401610397906118b3565b606461061c6402540be4006005611986565b6106269190611964565b8211156106755760405162461bcd60e51b815260206004820152601860248201527f47553a203e204d41585f474f5645524e414e43455f46454500000000000000006044820152606401610397565b600383018290556040518281527f78ec98f839c83f9772deb71634aae776280186c92df2a27e1de8dee2053ba599906020015b60405180910390a1505050565b865460009088906001600160a01b031633146106e35760405162461bcd60e51b8152600401610397906118b3565b61072485858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061139f915050565b600081815260078b016020526040902060030154909250156107885760405162461bcd60e51b815260206004820152601960248201527f47553a204e414d4520616c72656164792070726f706f736564000000000000006044820152606401610397565b61079a8883634e414d4560e01b6113d3565b51156107df5760405162461bcd60e51b815260206004820152601460248201527311d54e88125108185b1c9958591e48195e1a5cdd60621b6044820152606401610397565b6001600160a01b0387166108355760405162461bcd60e51b815260206004820152601e60248201527f47553a20434f4e54524f4c4c45522063616e204e4f54206265205a45524f00006044820152606401610397565b8515801590610845575060038614155b6108915760405162461bcd60e51b815260206004820152601760248201527f47553a2054595045206973204e4f4e45206f72204741500000000000000000006044820152606401610397565b6201518083108015906108a757506224ea008311155b6108f35760405162461bcd60e51b815260206004820152601d60248201527f47553a20696e76616c69642070726f706f73616c206475726174696f6e0000006044820152606401610397565b60006108ff844261194c565b90506040518060800160405280896001600160a01b0316815260200188815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050602091820184905285815260078d018252604090819020835181546001600160a01b0319166001600160a01b0390911617815583830151600182015590830151805191926109af926002850192909101906115f2565b50606091820151600390910155604080518581526001600160a01b038b16602082015290810183905288917fb56e333cd6082a862942820ad6871b5a17d922a7506ff536fc0830784a46b2c6910160405180910390a25050979650505050505050565b60006367eb02504210610a705760038201546064610a366402540be4006005611986565b610a409190611964565b11610a66576064610a576402540be4006005611986565b610a619190611964565b610a73565b8160030154610a73565b60005b92915050565b8281610a9382826921a7a72a2927a62622a960b11b611485565b6001600160a01b0316336001600160a01b031614610af35760405162461bcd60e51b815260206004820152601a60248201527f47553a20434f4e54524f4c4c455220726f6c65206e65656465640000000000006044820152606401610397565b60008481526007870160205260409020600190810154908114610b585760405162461bcd60e51b815260206004820152601760248201527f47553a204e4f542053656e6174652050726f706f73616c0000000000000000006044820152606401610397565b6000858152600788016020526040902060030154421115610bb25760405162461bcd60e51b815260206004820152601460248201527311d54e881c1c9bdc1bdcd85b08195e1c1a5c995960621b6044820152606401610397565b610bc88761013e8887635459504560e01b6114b9565b610c095760405162461bcd60e51b815260206004820152601260248201527123aa9d102727aa1030b71032b632b1ba37b960711b6044820152606401610397565b610c2785610c1f86641d9bdd195960da1b6114e3565b8891906114b9565b15610c6c5760405162461bcd60e51b81526020600482015260156024820152740811d54e88185b1c9958591e48185c1c1c9bdd9959605a1b6044820152606401610397565b610c8c85610c8286641d9bdd195960da1b6114e3565b889190600161150f565b610ca986866c185c1c1c9bdd985b10dbdd5b9d609a1b6001611537565b600387600501546001610cbc919061194c565b610cc7906002611986565b610cd19190611964565b610cec87876c185c1c1c9bdd985b10dbdd5b9d609a1b6114b9565b10610d2f576000858152600788016020526040902042600382018190559054610d2f9189916001600160a01b031690610d2a906301e133809061194c565b611342565b604051849086907f33952ef907843fd2ddd118a92dd935debf65b72965a557a364ea08deffca032f90600090a350505050505050565b6064610d776402540be4006005611986565b610d819190611964565b81565b8282610d9e82826921a7a72a2927a62622a960b11b611485565b6001600160a01b0316336001600160a01b031614610dfe5760405162461bcd60e51b815260206004820152601a60248201527f47553a20434f4e54524f4c4c455220726f6c65206e65656465640000000000006044820152606401610397565b6001600160a01b038316610e545760405162461bcd60e51b815260206004820152601e60248201527f47553a20434f4e54524f4c4c45522063616e206e6f74206265207a65726f00006044820152606401610397565b610e6d85856921a7a72a2927a62622a960b11b86611570565b6040516001600160a01b038416815284907ff0d0c255199b45799d6fd3623dce5e99a7cb09d662754eff92d8d0e73a537f0a9060200160405180910390a25050505050565b610ee6604051806080016040528060006001600160a01b031681526020016000815260200160608152602001600081525090565b6000828152600784016020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092526002810180549293919291840191610f32906119ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5e906119ec565b8015610fab5780601f10610f8057610100808354040283529160200191610fab565b820191906000526020600020905b815481529060010190602001808311610f8e57829003601f168201915b50505050508152602001600382015481525050905092915050565b6001830154600090819085906001600160a01b031633146110225760405162461bcd60e51b815260206004820152601660248201527511d54e8814d153905511481c9bdb19481b995959195960521b6044820152606401610397565b8060020154421061106a5760405162461bcd60e51b815260206004820152601260248201527111d54e8814d15390551148195e1c1a5c995960721b6044820152606401610397565b600084815260078701602052604090206003015442106110cc5760405162461bcd60e51b815260206004820152601a60248201527f47553a204e4f5420616e206163746976652070726f706f73616c0000000000006044820152606401610397565b6000848152600787016020526040902060018082015491549194506001600160a01b03909116925083141561114f5760405162461bcd60e51b815260206004820152602360248201527f47553a2063616e204e4f5420617070726f76652053454e41544520656c65637460448201526234b7b760e91b6064820152608401610397565b6111628585635459504560e01b8661150f565b61117b85856921a7a72a2927a62622a960b11b85611570565b61123984634e414d4560e01b88600701600088815260200190815260200160002060020180546111aa906119ec565b80601f01602080910402602001604051908101604052809291908181526020018280546111d6906119ec565b80156112235780601f106111f857610100808354040283529160200191611223565b820191906000526020600020905b81548152906001019060200180831161120657829003601f168201915b5050505050886115b9909392919063ffffffff16565b60008381526020868152604082208054600181018255908352912001849055600283141561127f576004860180546001600160a01b0319166001600160a01b0384161790555b600083815260068701602052604090205460ff16156112b35760018660050160008282546112ad919061194c565b90915550505b60008481526007870160205260409081902042600390910155517f28ec9e38ba73636ceb2f6c1574136f83bd46284a3c74734b711bf45e12f8d929906112fc9086815260200190565b60405180910390a150935093915050565b60048201546000906001600160a01b03161580159061133b575060048301546001600160a01b038381169116145b9392505050565b6001830180546001600160a01b0319166001600160a01b0384169081179091556002840182905560408051918252602082018390527f3f34afe456fb5b36c04b5d1e2ef0750086747ac542262fbf14a0b1aae5fd7ee891016106a8565b600082826040516020016113b4929190611891565b60408051601f1981840301815291905280516020909101209392505050565b60608360020160006113e585856114e3565b815260200190815260200160002080546113fe906119ec565b80601f016020809104026020016040519081016040528092919081815260200182805461142a906119ec565b80156114775780601f1061144c57610100808354040283529160200191611477565b820191906000526020600020905b81548152906001019060200180831161145a57829003601f168201915b505050505090509392505050565b600083600301600061149785856114e3565b81526020810191909152604001600020546001600160a01b0316949350505050565b60008360010160006114cb85856114e3565b81526020019081526020016000205490509392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b8084600101600061152086866114e3565b815260208101919091526040016000205550505050565b8084600101600061154886866114e3565b81526020019081526020016000206000828254611565919061194c565b909155505050505050565b8084600301600061158186866114e3565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b808460020160006115ca86866114e3565b815260200190815260200160002090805190602001906115eb9291906115f2565b5050505050565b8280546115fe906119ec565b90600052602060002090601f0160209004810192826116205760008555611666565b82601f1061163957805160ff1916838001178555611666565b82800160010185558215611666579182015b8281111561166657825182559160200191906001019061164b565b50611672929150611676565b5090565b5b808211156116725760008155600101611677565b80356001600160a01b03811681146116a257600080fd5b919050565b6000602082840312156116b957600080fd5b5035919050565b600080604083850312156116d357600080fd5b823591506116e36020840161168b565b90509250929050565b600080600080600080600060c0888a03121561170757600080fd5b873596506020880135955061171e6040890161168b565b945060608801359350608088013567ffffffffffffffff8082111561174257600080fd5b818a0191508a601f83011261175657600080fd5b81358181111561176557600080fd5b8b602082850101111561177757600080fd5b60208301955080945050505060a0880135905092959891949750929550565b6000806000606084860312156117ab57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156117d857600080fd5b843593506020850135925060408501359150606085013580151581146117fd57600080fd5b939692955090935050565b6000806000806080858703121561181e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561184d57600080fd5b50508035926020909101359150565b60008060006060848603121561187157600080fd5b83359250602084013591506118886040850161168b565b90509250925092565b600083516118a38184602088016119bc565b9190910191825250602001919050565b6020808252601a908201527f47553a20474f5645524e414e434520726f6c65206e6565646564000000000000604082015260600190565b6020815260018060a01b03825116602082015260208201516040820152600060408301516080606084015280518060a085015261192e8160c08601602085016119bc565b606094909401516080840152505060c0601f909201601f1916010190565b6000821982111561195f5761195f611a27565b500190565b60008261198157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156119a0576119a0611a27565b500290565b6000828210156119b7576119b7611a27565b500390565b60005b838110156119d75781810151838201526020016119bf565b838111156119e6576000848401525b50505050565b600181811c90821680611a0057607f821691505b60208210811415611a2157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d968cbe03b4bebf9a37708890278dfd42b4c169737f1d732d0574b3d8156a5cc64736f6c63430008070033",
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "Reserved ID_TYPEs: * Type 0 : NULL * Type 1 : SENATE ELECTIONS * * Every SENATE has an expiration date, a new one should be elected before it ends. * * Only the controllers of IDs with TYPEs that are set true on _electorTypes can vote. * * 2/3 is the expected concensus, however this logic seems to be improved in the future. * Type 2 : CONTRACT UPGRADES * * Provides Limited Upgradability on Portal and Withdrawal Contract * * Contract can be upgradable once Senate approves it. * Type 3 : __GAP__ * * ormally represented the admin contract, but we use UUPS. Reserved to be never used.Contracts relying on this library must initialize GeodeUtils.DualGovernanceFunctions are already protected accordinglyreview DataStoreUtils",
    "kind": "dev",
    "methods": {
      "approveProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256)": {
        "details": "Senate is not able to approve approved proposalsSenate is not able to approve expired proposalsSenate is not able to approve SENATE proposals",
        "params": {
          "id": "given ID proposal that has been approved by Senate"
        }
      },
      "approveSenate(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "pins id as \"voted\" when approvedincreases \"approvalCount\" of proposalId by 1 when approved",
        "params": {
          "voterId": "should have the voting rights, msg.sender should be the CONTROLLER of given ID"
        }
      },
      "changeIdCONTROLLER(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "details": "this operation can not be reverted by the old CONTROLLER !can not provide address(0), try 0x000000000000000000000000000000000000dEaD"
      },
      "changeSenate(GeodeUtils.DualGovernance storage,address)": {
        "details": "does not change the expiry"
      },
      "getGovernance(GeodeUtils.DualGovernance storage)": {
        "returns": {
          "_0": "address of GOVERNANCE*"
        }
      },
      "getGovernanceFee(GeodeUtils.DualGovernance storage)": {
        "details": "MAX_GOVERNANCE_FEE MUST limit GOVERNANCE_FEE even if MAX is changed laterMUST return 0 until cooldown period is active"
      },
      "getProposal(GeodeUtils.DualGovernance storage,uint256)": {
        "details": "refer to Proposal struct"
      },
      "getSenate(GeodeUtils.DualGovernance storage)": {
        "returns": {
          "_0": "address of SENATE*"
        }
      },
      "getSenateExpiry(GeodeUtils.DualGovernance storage)": {
        "returns": {
          "_0": "the expiration date of current SENATE as a timestamp"
        }
      },
      "isElector(GeodeUtils.DualGovernance storage,uint256)": {
        "details": "->  view"
      },
      "isUpgradeAllowed(GeodeUtils.DualGovernance storage,address)": {
        "details": "address(0) should return falseDO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022*",
        "returns": {
          "_0": "True if it is allowed by senate and false if not."
        }
      },
      "newProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,address,uint256,bytes,uint256)": {
        "details": "DATASTORE[id] will not be updated until the proposal is approvedProposals can NEVER be overridenrefer to Proposal struct"
      },
      "setElectorType(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,bool)": {
        "details": "can not set with the same value again, preventing double increment/decrements",
        "params": {
          "_TYPE": "selected type",
          "_isElector": "true if selected _type can vote for senate from now on"
        }
      },
      "setGovernanceFee(GeodeUtils.DualGovernance storage,uint256)": {
        "details": "Can not set the fee more than MAX_GOVERNANCE_FEE"
      }
    },
    "stateVariables": {
      "FEE_COOLDOWN": {
        "details": "fee switch will be automatically switched on after given timestampfee switch can be switched on with the approval of Senate (a contract upgrade)"
      }
    },
    "title": "Geode Dual Governance",
    "version": 1
  },
  "userdoc": {
    "events": {
      "GovernanceFeeUpdated(uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_COOLDOWN()": {
        "notice": "prevents Governance from collecting any fees till given timestamp:April 2025"
      },
      "MAX_GOVERNANCE_FEE()": {
        "notice": "limiting the GOVERNANCE_FEE, 5%"
      },
      "approveProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "onlySenate, approves a proposal and records given data tospecific changes for the reserved types (1,2,3) are implemented here,  any other addition should take place in Portal, as not related"
      },
      "approveSenate(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "onlyController, Proposed CONTROLLER is the new Senate after 2/3 of the electors approved NOTE mathematically, min 3 elector is needed for (c+1)*2/3 to work properlyid can not vote if: - approved already - proposal is expired - not its type is elector - not senate proposal"
      },
      "changeIdCONTROLLER(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "notice": "onlyController, change the CONTROLLER of an ID"
      },
      "changeSenate(GeodeUtils.DualGovernance storage,address)": {
        "notice": "onlySenate, Sometimes it is useful to be able to change the Senate's address."
      },
      "getGovernanceFee(GeodeUtils.DualGovernance storage)": {
        "notice": "active GOVERNANCE_FEE limited by FEE_COOLDOWN and MAX_GOVERNANCE_FEE"
      },
      "isUpgradeAllowed(GeodeUtils.DualGovernance storage,address)": {
        "notice": "Get if it is allowed to change a specific contract with the current version."
      },
      "newProposal(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,address,uint256,bytes,uint256)": {
        "notice": "onlyGovernance, creates a new Proposal"
      },
      "setElectorType(GeodeUtils.DualGovernance storage,DataStoreUtils.IsolatedStorage storage,uint256,bool)": {
        "notice": "onlyGovernance, only elector types can vote for senate"
      },
      "setGovernanceFee(GeodeUtils.DualGovernance storage,uint256)": {
        "notice": "onlyGovernance, sets the governance fee"
      }
    },
    "notice": "Exclusively contains functions for the administration of the Isolated Storage, and Limited Upgradability with Dual Governance of Governance and Senate Note This library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}