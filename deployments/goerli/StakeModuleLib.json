{
  "address": "0xfBa032Ae72D017b3960BaC1C206A7A02513645be",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "Delegation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtgETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedgETH",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        }
      ],
      "name": "FallbackOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "FeeSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        }
      ],
      "name": "IdInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "MaintainerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Prisoned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "StakeProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "ValidatorPeriodSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        }
      ],
      "name": "VisibilitySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FALLBACK_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNORABLE_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ALLOWANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GOVERNANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MAINTENANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_EXPIRY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRISON_SENTENCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWITCH_LATENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2e6a310dcdc17f59e71898eb98982349d6c8304bfb436654a9884858b1f16f5",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0xfBa032Ae72D017b3960BaC1C206A7A02513645be",
    "transactionIndex": 2,
    "gasUsed": "5298748",
    "logsBloom": "0x
    "blockHash": "0x290a1141fbc4c30e9333e1b36836918bea6dbd5bcff994ff08395f8b1023ad47",
    "transactionHash": "0xa2e6a310dcdc17f59e71898eb98982349d6c8304bfb436654a9884858b1f16f5",
    "logs": [],
    "blockNumber": 8995273,
    "cumulativeGasUsed": "5354138",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "86d7817b142b36f089c0f393516f23fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"Delegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtgETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedgETH\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"FallbackOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"FeeSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"}],\"name\":\"IdInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Prisoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"StakeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"ValidatorPeriodSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"name\":\"VisibilitySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FALLBACK_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNORABLE_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALLOWANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GOVERNANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MAINTENANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_EXPIRY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISON_SENTENCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWITCH_LATENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"review: DataStoreModule for the IsolatedStorage logic.review: OracleExtensionLib for oracle logic.Every pool is isolated and every validator is unique. Segregate all the risk.CONTROLLER and Maintainer: CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important. maintainer is the worker, can be used to automate some daily tasks: * distributing validators for Staking Pools or creating validators for Operators. * not so crucial in terms of security.Users: Type 4 : Permissioned Operators * Needs to be onboarded by the Dual Governance (Senate + Governance). * Maintains Beacon Chain Validators on behalf of the Staking Pools. * Can participate in the Operator Marketplace after initiation. * Can utilize maintainers for staking operations. Type 5 : Permissionless Configurable Staking Pools * Permissionless to create. * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc. * Can be public or private, can use a whitelist if private. * Can utilize maintainers for validator distribution on Operator Marketplace. * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * accruing rewards and keeping Staked Ether safe and isolated.Packages: An ID can only point to 1(one) Package version at a time. Built by utilizing the Modules! Can be upgraded by a dual governance, via pullUpgrade. * A Package's dual governance consists of Portal(governance) and the pool owner(senate). Type 10011 : Withdrawal Contract * Mandatory. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Staking Pools are in \\\"Isolation Mode\\\" until their Withdrawal Contract is upgraded. * * Meaning, no more Depositing or Validator Proposal can happen. * Custodian of the validator funds after creation, including any type of rewards and fees. Type 10021 : Liquidity Pool implementation * Optional. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Liquidity Pools are in \\\"Isolation Mode\\\" until upgraded.Middlewares: Can support many different versions that can be utilized by the Pool Owners. No particular way to build one. Can not be upgraded. Currently only gETHMiddlewares. Type 20011 : gETHMiddleware * Optional. * CONTROLLER is the implementation contract position (always) * Requires the approval of Senate * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeUtils.PooledStakingFunctions are protected with authentication function\",\"events\":{\"IdInitiated(uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"blameOperator(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,bytes)\":{\"details\":\"anyone can call this function while the state is ACTIVEif operator has given enough allowance, they SHOULD rotate the validators to avoid being prisonedthis function lacks 2 other punishable acts: 1. while state is PROPOSED: validator proposed, it is passed, but haven't been created even tho it has been a MAX_BEACON_DELAY 2. while state is EXIT_REQUESTED:  validator requested exit, but it haven't been executed even tho it has been MAX_BEACON_DELAY\"},\"changeMaintainer(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"details\":\"there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migrationwe don't use _authenticate here because malicious maintainers can imprison operators * and prevent them entering here, smh.\"},\"decreaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"only CONTROLLER can decrease the balance externally,\",\"returns\":{\"success\":\"if the amount was sent and deducted\"}},\"delegate(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256[],uint256[],uint256)\":{\"details\":\"When decreased the approved validator count below current active+proposed validators, operator can NOT create new validators.\",\"params\":{\"allowances\":\"the MAX number of validators that can be created by the Operator, for given Pool\",\"operatorIds\":\"array of Operator IDs to allow them create validators\",\"poolId\":\"the gETH id of the Pool\"}},\"deployLiquidityPool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"details\":\"gives full allowance to the pool (should not be a problem as Portal only temporarily holds gETH)unlike withdrawal Contract, a controller can deploy a liquidity pool after initiation as well_package_data of a liquidity pool is only the staking pool's name.\"},\"deposit(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"details\":\"an example for minting + buybacks Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- * debt  msgValue * 100   10  => buyback * 100   100 => buyback * 10    100 => buyback + mint * 1     x   => mint * 0.5   x   => mint * 0     x   => mint\",\"params\":{\"deadline\":\"liquidity pool parameter\",\"mingETH\":\"liquidity pool parameter\",\"poolId\":\"id of the staking pool, liquidity pool and gETH to be used.\"}},\"getMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"details\":\"respecs to the switching delay.\",\"returns\":{\"fee\":\"= percentage * PERCENTAGE_DENOMINATOR / 100\"}},\"getValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"custom:visibility\":\"-> view-public\"},\"increaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"details\":\"anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\"},\"initiateOperator(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"details\":\"operators can fund their internal wallet on initiation by simply sending some ether.\",\"params\":{\"fee\":\"as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR represents 100%\",\"maintainer\":\"an address that automates daily operations, a script, a contract...\",\"validatorPeriod\":\"the expected maximum staking interval. This value should between * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above. Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()\"}},\"initiatePool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,address,bytes,bytes,bool[3])\":{\"details\":\"checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.requires exactly 1 validator worth of funds to be deposited on initiation, prevent sybil attacks.\",\"params\":{\"config\":\"array(3)= [private(true) or public(false), deploy a middleware(if true), deploy liquidity pool(if true)]\",\"fee\":\"as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\",\"maintainer\":\"an address that automates daily operations, a script, a contract... not so critical.\",\"middlewareVersion\":\"Pool creators can choose any allowed version as their gETHMiddleware\",\"middleware_data\":\"middlewares might require additional data on initialization; like name, symbol, etc.\",\"name\":\"is utilized while generating an ID for the Pool, similar to any other ID generation.\"}},\"isPriceValid(StakeModuleLib.PooledStaking storage,uint256)\":{\"details\":\"known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false\"},\"isPrisoned(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"details\":\"rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\"},\"isWhitelisted(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"details\":\"Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set\"},\"operatorAllowance(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"an operator can not create new validators if: * 1. if operator is a monopoly * 2. allowance is filled * * But if operator is set as a fallback, it can if FALLBACK_THRESHOLD (80%) is reached on all allowances.If operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked.\"},\"proposeStake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"details\":\"DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"poolId\":\"the id of the staking pool\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that will be proposed\",\"signatures1\":\"Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance\",\"signatures31\":\"Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call\"}},\"setPoolVisibility(DataStoreModuleLib.IsolatedStorage storage,uint256,bool)\":{\"details\":\"whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again. Note private pools can whitelist addresses with the help of a third party contract.\",\"params\":{\"makePrivate\":\"true if pool should be private, false for public pools\"}},\"setWhitelist(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"details\":\"Whitelisting contracts should implement IWhitelist interface.\"},\"stake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,bytes[])\":{\"details\":\"To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\"}},\"switchMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"Can NOT be called again while its currently switching.advise that 100% == PERCENTAGE_DENOMINATOR\"},\"switchValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\"}},\"title\":\"SML: The Staking Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FALLBACK_THRESHOLD()\":{\"notice\":\"if a pool has 80% of its allowances filled, fallback operator is active.\"},\"IGNORABLE_DEBT()\":{\"notice\":\"ignoring any buybacks if the Liquidity Pool has a low debt\"},\"MAX_ALLOWANCE()\":{\"notice\":\"effective on allowance per operator, prevents overflow. Exclusive, save gas with +1.\"},\"MAX_GOVERNANCE_FEE()\":{\"notice\":\"limiting the GOVERNANCE_FEE to 5%\"},\"MAX_MAINTENANCE_FEE()\":{\"notice\":\"limiting the pool and operator maintenance fee, 10%\"},\"MIN_VALIDATOR_PERIOD()\":{\"notice\":\"limiting the operator.validatorPeriod, between 3 months to 2 years\"},\"PRICE_EXPIRY()\":{\"notice\":\"price of gETH is only valid for 24H, minting is not allowed afterwards.\"},\"PRISON_SENTENCE()\":{\"notice\":\"limiting the access for Operators in case of bad/malicious/faulty behaviour\"},\"SWITCH_LATENCY()\":{\"notice\":\"some parameter changes are effective after a delay\"},\"blameOperator(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,bytes)\":{\"notice\":\"allows imprisoning an Operator if the validator have not been exited until expected exit\"},\"canStake(StakeModuleLib.PooledStaking storage,bytes)\":{\"notice\":\"external function to check if a validator can use the pool funds\"},\"changeMaintainer(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"notice\":\"CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\"},\"decreaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"external function to decrease the internal wallet balance\"},\"delegate(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256[],uint256[],uint256)\":{\"notice\":\"To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future.\"},\"deployLiquidityPool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"deploys a bound liquidity pool for a staking pool, if it does not have one.\"},\"deposit(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"notice\":\"Allowing users to deposit into a staking pool.If a pool is not public only the maintainer can deposit.\"},\"getMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\"},\"increaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"external function to increase the internal wallet balance\"},\"initiateOperator(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"notice\":\"initiates ID as a Permissionned Node Operatorrequires ID to be approved as a node operator with a specific CONTROLLER\"},\"initiatePool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,address,bytes,bytes,bool[3])\":{\"notice\":\"Creates a Configurable Trustless Staking Pool!\"},\"isMintingAllowed(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Isolation Mode, can have many reasons\"},\"isPriceValid(StakeModuleLib.PooledStaking storage,uint256)\":{\"notice\":\"returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update\"},\"isPrisoned(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"Checks if the given operator is Prisoned\"},\"isPrivatePool(DataStoreModuleLib.IsolatedStorage storage,uint256)\":{\"notice\":\"returns true if the pool is private\"},\"isWhitelisted(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"notice\":\"checks if the Whitelist allows staker to use given private pool\"},\"operatorAllowance(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool\"},\"proposeStake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"notice\":\"Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools.\"},\"setPoolVisibility(DataStoreModuleLib.IsolatedStorage storage,uint256,bool)\":{\"notice\":\"changes the visibility of the pool\"},\"setWhitelist(DataStoreModuleLib.IsolatedStorage storage,uint256,address)\":{\"notice\":\"private pools can whitelist addresses with the help of a third party contract.\"},\"stake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,bytes[])\":{\"notice\":\"Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet.\"},\"switchMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\"},\"switchValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\"}},\"notice\":\"Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool, improving the user experience for stakers and removing the \\\"need\\\" for centralized or decentralized intermediaries. * Exclusively contains functions related to: * 1. Initiators and Configurable Staking Pools. * 2. Pool and Operator management. * 3. Validator Delegation. * 4. Depositing. * 5. Staking Operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/modules/StakeModule/libs/StakeModuleLib.sol\":\"StakeModuleLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Portal/globals/id_type.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice ID_TYPE is an internal library that acts like an ENUM.\\n *\\n * @dev Used within the limited upgradability pattern:\\n *\\n * NONE & GAP: should not be used.\\n *\\n * Dual Governance:\\n * * SENATE: points to a proposal that will update the current SENATE address of a package(or Portal).\\n * * CONTRACT_UPGRADE: proposal to change the given contract's implementation.\\n *\\n * Users:\\n * * OPERATOR: permissionned Node Operators (hosted on Portal).\\n * * POOL: permissionless staking pools (hosted on Portal).\\n *\\n * Packages: (hosted on StakeModuleLib)\\n * * An ID can only point to 1(one) Package version' implementation address at a given point.\\n * * Can be upgraded by a dual governance, via pullUpgrade.\\n * * * Portal's dual governance consists of a Governance Token(governance) and a Senate(senate).\\n * * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n * * Built by utilizing the Modules.\\n * * LiquidityPool and WithdrawalContract are some examples.\\n *\\n * Middlewares: (hosted on StakeModuleLib)\\n * * An ID can point to multiple Middleware version' implementation address at the same time.\\n * * Can not be upgraded.\\n * * Do not have any guides to build really.\\n * * Currently only gETHMiddlewares\\n *\\n *  Limits:\\n *  * We simply set limits to separate a group of types from others. Like Packages and Middlewares.\\n *\\n * @dev all LIMIT parameters are exclusive, prevents double usage.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate\\n  uint256 internal constant SENATE = 1;\\n\\n  /// @notice TYPE 2: Contract Upgrade\\n  uint256 internal constant CONTRACT_UPGRADE = 2;\\n\\n  /// @notice TYPE 3: *gap*: formally represented the admin contract. reserved to be never used.\\n  uint256 internal constant __GAP__ = 3;\\n\\n  /// --\\n\\n  /// @notice TYPE 4: USER: Permissionned Node Operator\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: USER: Staking Pool\\n  uint256 internal constant POOL = 5;\\n\\n  /// --\\n\\n  /// @notice TYPE 10000: Limit: exclusive, minimum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MIN_PACKAGE = 10000;\\n\\n  /// @notice TYPE 10011: Package: Portal is also a package\\n  uint256 internal constant PACKAGE_PORTAL = 10001;\\n\\n  /// @notice TYPE 10011: Package: The Withdrawal Credential Contract\\n  uint256 internal constant PACKAGE_WITHDRAWAL_CONTRACT = 10011;\\n\\n  /// @notice TYPE 10021: Package: A Liquidity Pool\\n  uint256 internal constant PACKAGE_LIQUIDITY_POOL = 10021;\\n\\n  /// @notice TYPE 19999: Limit: exclusive, maximum TYPE that will be percieved as a package\\n  uint256 internal constant LIMIT_MAX_PACKAGE = 19999;\\n\\n  /// --\\n\\n  /// @notice TYPE 20000: Limit: exclusive, minimum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MIN_MIDDLEWARE = 20000;\\n\\n  /// @notice TYPE 20031: Middleware: A new gETH interface\\n  uint256 internal constant MIDDLEWARE_GETH = 20011;\\n\\n  /// @notice TYPE 29999: Limit: exclusive, maximum TYPE that will be percieved as a middleware\\n  uint256 internal constant LIMIT_MAX_MIDDLEWARE = 29999;\\n}\\n\",\"keccak256\":\"0x22cf16610bc2eb45e48ab258a26bc2456a81c9adacf6ad95374b90027938bc0e\",\"license\":\"MIT\"},\"contracts/Portal/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 10 ** 10;\\n\",\"keccak256\":\"0xf3a2ec72fdfc804f088c4f7245f1dbb881b23fae868ce7d8efa3f66c6008f60d\",\"license\":\"MIT\"},\"contracts/Portal/globals/reserved_key_space.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Reserved Key Space for DataStoreModule\\n * * helps preventing potential dev mistakes.\\n * * helps keeping track of them.\\n * * limits keys to bytes32.\\n *\\n * @dev utilize a key with rks.key\\n * @dev keep this list in alphabetical order, per module.\\n * @dev NEVER name your variables something else other than *its string value*.\\n * @dev ! array keys with readUint returns the lenght of the array !\\n */\\nlibrary RESERVED_KEY_SPACE {\\n  /**\\n   * @dev reserved on GeodeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition representing body of an id\\n   */\\n  bytes32 internal constant CONTROLLER = \\\"CONTROLLER\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition base of an id\\n   */\\n  bytes32 internal constant NAME = \\\"NAME\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition identifier for an id, based on ID_TYPEs\\n   */\\n  bytes32 internal constant TYPE = \\\"TYPE\\\";\\n\\n  /**\\n   * @dev reserved on StakeModuleLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of active validators run by an operator for a pool\\n   */\\n  bytes32 internal constant activeValidators = \\\"activeValidators\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition max amount of validators for an operator to run, for a specific pool.\\n   */\\n  bytes32 internal constant allowance = \\\"allowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition special operator that has max allowance, if threshold is hit for the pool\\n   */\\n  bytes32 internal constant fallbackOperator = \\\"fallbackOperator\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee of the pool or operator, will be shadowed by priorFee if switching\\n   */\\n  bytes32 internal constant fee = \\\"fee\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed fee change\\n   */\\n  bytes32 internal constant feeSwitch = \\\"feeSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition the timestamp of an \\\"user\\\" TYPE id\\n   */\\n  bytes32 internal constant initiated = \\\"initiated\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition bound liquidity pool of a pool\\n   */\\n  bytes32 internal constant liquidityPool = \\\"liquidityPool\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition hot wallet for pool and operators, automatooor\\n   */\\n  bytes32 internal constant maintainer = \\\"maintainer\\\";\\n\\n  /**\\n   * @custom:type address array, direct call returns length\\n   * @custom:definition contracts with more than one versions, ex: gETHMiddlewares of a pool\\n   */\\n  bytes32 internal constant middlewares = \\\"middlewares\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition effective timestamp pointing to the latest delayed validator period change\\n   */\\n  bytes32 internal constant periodSwitch = \\\"periodSwitch\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition fee that will be effective if fee is currently switching\\n   */\\n  bytes32 internal constant priorFee = \\\"priorFee\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition fee that will be effective if validatorPeriod is currently switching\\n   */\\n  bytes32 internal constant priorPeriod = \\\"priorPeriod\\\";\\n\\n  /**\\n   * @custom:type uint, bool\\n   * @custom:definition 1(true) if id is a private pool\\n   */\\n  bytes32 internal constant privatePool = \\\"privatePool\\\";\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition proposed validator count for\\n   */\\n  bytes32 internal constant proposedValidators = \\\"proposedValidators\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition timestamp of the date of the latest imprisonment for an operator\\n   */\\n  bytes32 internal constant release = \\\"release\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition 32 eth is secured, per proposed-but-not-yet-activated validator\\n   */\\n  bytes32 internal constant secured = \\\"secured\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition collateral waiting to be staked, in wei\\n   */\\n  bytes32 internal constant surplus = \\\"surplus\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition sum of all allowances for a pool\\n   */\\n\\n  bytes32 internal constant totalAllowance = \\\"totalAllowance\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition seconds, time that passes before the expected exit is reached for a validator\\n   */\\n  bytes32 internal constant validatorPeriod = \\\"validatorPeriod\\\";\\n\\n  /**\\n   * @custom:type bytes array, direct call returns length\\n   * @custom:definition lists all (any state) validators' pubkeys for a pool, or an operator\\n   */\\n  bytes32 internal constant validators = \\\"validators\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition custodian of validator funds for a pool\\n   */\\n  bytes32 internal constant withdrawalContract = \\\"withdrawalContract\\\";\\n\\n  /**\\n   * @custom:type bytes\\n   * @custom:definition derived from withdrawalContract\\n   */\\n  bytes32 internal constant withdrawalCredential = \\\"withdrawalCredential\\\";\\n\\n  /**\\n   * @custom:type uint\\n   * @custom:definition size of the internal wallet, which accrues fees etc. in wei\\n   */\\n  bytes32 internal constant wallet = \\\"wallet\\\";\\n\\n  /**\\n   * @custom:type address\\n   * @custom:definition whitelist contract for the pool\\n   */\\n  bytes32 internal constant whitelist = \\\"whitelist\\\";\\n\\n  /**\\n   * @dev reserved on OracleExtensionLib\\n   */\\n\\n  /**\\n   * @custom:type uint, relational, pool[operator]\\n   * @custom:definition number of alienated validators run by an operator for a pool\\n   */\\n  bytes32 internal constant alienValidators = \\\"alienValidators\\\";\\n}\\n\",\"keccak256\":\"0x110d62f5818e418932e5bc947fecffdfd190315513d1c40fe760d1d334123b17\",\"license\":\"MIT\"},\"contracts/Portal/globals/validator_state.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice VALIDATOR_STATE: keeping track of validators within The Staking Library.\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract.\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator.\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is called to be exited.\\n  uint8 internal constant EXIT_REQUESTED = 3;\\n\\n  /// @notice STATE 4: validator is fully exited.\\n  uint8 internal constant EXITED = 4;\\n\\n  /// @notice STATE 69: proposal was malicious(alien). Maybe faulty signatures or probably (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0x9e12a47317b172a14100c2ba9c3e71a94505575374c16e598672fc224b9549a3\",\"license\":\"MIT\"},\"contracts/Portal/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.7;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x47661fc872b08aa96131860eb7a6a2c398987b151104ab8dd70ce2ed5a31a5e4\",\"license\":\"Unlicense\"},\"contracts/Portal/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IGeodeModule} from \\\"./modules/IGeodeModule.sol\\\";\\nimport {IStakeModule} from \\\"./modules/IStakeModule.sol\\\";\\n\\ninterface IPortal is IStakeModule, IGeodeModule {\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function pushUpgrade(uint256 packageType) external returns (bytes memory versionName);\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n\\n  function setGovernanceFee(uint256 newFee) external;\\n}\\n\",\"keccak256\":\"0x9e862d4a2050534fd05b8880f3a5b982dc701630430d7f87a2b7554323b11c41\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0x5f8a92104d98c387d41e038463b666ccc095e8c38272e9f45aef9f74d352f903\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n/** This interface is designed to be compatible with the Vyper version.\\n * @notice This is the Ethereum 2.0 deposit contract interface.\\n * For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ninterface IDepositContract {\\n  /**\\n   * @notice Submit a Phase 0 DepositData object.\\n   * @param pubkey A BLS12-381 public key.\\n   * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n   * @param signature A BLS12-381 signature.\\n   * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n   *Used as a protection against malformed input.\\n   */\\n  function deposit(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xaa602358c13dc8a69d0ea06021fc1187e1f5ece809797273d05956b4ac877cd9\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IERC1155Burnable is IERC165, IERC1155, IERC1155MetadataURI {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC165, IERC1155, IERC1155MetadataURI {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x815e777c097747b9d7e2ba44129420204b2d446736fb8e04733ebf2d482d81ad\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IWhitelist {\\n  function isAllowed(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19fef7cf90817c40e9c773d5a4c2ee81e8bf48791fdd406b2349821c89a5411c\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/middlewares/IgETHMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IgETHMiddleware {\\n  function initialize(uint256 id_, address erc1155_, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0xd441be9f2e81a66fc6a257ad47cc48ef55bdc963dd8e540eaf684b632c56b41e\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/modules/IDataStoreModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IDataStoreModule {\\n  function generateId(string calldata _name, uint256 _type) external pure returns (uint256 id);\\n\\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32 key);\\n\\n  function allIdsByType(uint256 _type, uint256 _index) external view returns (uint256);\\n\\n  function allIdsByTypeLength(uint256 _type) external view returns (uint256);\\n\\n  function readUint(uint256 id, bytes32 key) external view returns (uint256 data);\\n\\n  function readAddress(uint256 id, bytes32 key) external view returns (address data);\\n\\n  function readBytes(uint256 id, bytes32 key) external view returns (bytes memory data);\\n\\n  function readUintArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArray(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n}\\n\",\"keccak256\":\"0x3d5e228c67d74312869502cf3f1c8ffa72be88bc97e31253298872a4d7d0ed85\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/modules/IGeodeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {GeodeModuleLib as GML} from \\\"../../modules/GeodeModule/libs/GeodeModuleLib.sol\\\";\\n\\ninterface IGeodeModule is IDataStoreModule {\\n  function isolationMode() external view returns (bool);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address governance,\\n      address senate,\\n      address approvedUpgrade,\\n      uint256 senateExpiry,\\n      uint256 packageType\\n    );\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposal(uint256 id) external view returns (GML.Proposal memory proposal);\\n\\n  function propose(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external returns (uint256 id);\\n\\n  function rescueSenate(address _newSenate) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (address _controller, uint256 _type, bytes memory _name);\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n}\\n\",\"keccak256\":\"0x102636466dac45ca6e7390d45cbe791170fc013a15b0d064823f83623eecaace\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/modules/ILiquidityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface ILiquidityModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function LiquidityParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address lpToken,\\n      uint256 pooledTokenId,\\n      uint256 initialA,\\n      uint256 futureA,\\n      uint256 initialATime,\\n      uint256 futureATime,\\n      uint256 swapFee,\\n      uint256 adminFee\\n    );\\n\\n  function getA() external view returns (uint256);\\n\\n  function getAPrecise() external view returns (uint256);\\n\\n  function getBalance(uint8 index) external view returns (uint256);\\n\\n  function getDebt() external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[2] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function withdrawAdminFees(address receiver) external;\\n\\n  function setAdminFee(uint256 newAdminFee) external;\\n\\n  function setSwapFee(uint256 newSwapFee) external;\\n\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n  function stopRampA() external;\\n}\\n\",\"keccak256\":\"0x4826f93a4438926045119b431893b8f662cd2b5cb04b45707fc08d35c8434fdd\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/modules/IStakeModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {IDataStoreModule} from \\\"./IDataStoreModule.sol\\\";\\nimport {StakeModuleLib as SML} from \\\"../../modules/StakeModule/libs/StakeModuleLib.sol\\\";\\n\\ninterface IStakeModule is IDataStoreModule {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function StakeParams()\\n    external\\n    view\\n    returns (\\n      address gETH,\\n      address oraclePosition,\\n      uint256 validatorsIndex,\\n      uint256 verificationIndex,\\n      uint256 monopolyThreshold,\\n      uint256 oracleUpdateTimestamp,\\n      uint256 dailyPriceIncreaseLimit,\\n      uint256 dailyPriceDecreaseLimit,\\n      uint256 governanceFee,\\n      bytes32 priceMerkleRoot,\\n      bytes32 balanceMerkleRoot\\n    );\\n\\n  function getValidator(bytes calldata pubkey) external view returns (SML.Validator memory);\\n\\n  function getPackageVersion(uint256 _type) external view returns (uint256);\\n\\n  function isMiddleware(uint256 _type, uint256 _version) external view returns (bool);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function deployLiquidityPool(uint256 poolId) external;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external payable returns (uint256 poolId);\\n\\n  function setPoolVisibility(uint256 poolId, bool makePrivate) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function changeMaintainer(uint256 poolId, address newMaintainer) external;\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256);\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(uint256 id) external payable returns (bool);\\n\\n  function decreaseWalletBalance(uint256 id, uint256 value) external returns (bool);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function blameOperator(bytes calldata pk) external;\\n\\n  function getValidatorPeriod(uint256 id) external view returns (uint256);\\n\\n  function switchValidatorPeriod(uint256 operatorId, uint256 newPeriod) external;\\n\\n  function operatorAllowance(uint256 poolId, uint256 operatorId) external view returns (uint256);\\n\\n  function delegate(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances,\\n    uint256 fallbackOperator\\n  ) external;\\n\\n  function isWhitelisted(uint256 poolId, address staker) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external payable returns (uint256 boughtgETH, uint256 mintedgETH);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function stake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(uint256[] calldata feeThefts, bytes[] calldata proofs) external;\\n\\n  function reportBeacon(\\n    bytes32 priceMerkleRoot,\\n    bytes32 balanceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(uint256 poolId, uint256 price, bytes32[] calldata priceProof) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0x3c55c18a40794f0b18d9abe9703bebcda49f351b7f89398ac69c7fa65ace3e54\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/packages/IGeodePackage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {IGeodeModule} from \\\"../modules/IGeodeModule.sol\\\";\\nimport {IPortal} from \\\"../IPortal.sol\\\";\\n\\ninterface IGeodePackage is IGeodeModule {\\n  function initialize(\\n    uint256 poolId,\\n    address owner,\\n    bytes calldata versionName,\\n    bytes memory data\\n  ) external;\\n\\n  function getPortal() external view returns (IPortal);\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function pullUpgrade() external;\\n}\\n\",\"keccak256\":\"0xa945f92e5585fdaea1408ec9967b6536d5c44c8983e22ff435b503abfcb02d41\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/packages/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {ILiquidityModule} from \\\"../modules/ILiquidityModule.sol\\\";\\nimport {IGeodePackage} from \\\"./IGeodePackage.sol\\\";\\n\\ninterface ILiquidityPool is ILiquidityModule, IGeodePackage {}\\n\",\"keccak256\":\"0xbf7927cec5953f7850969189e50a4093085e72b3b2a00c97658c11658b651e9a\",\"license\":\"MIT\"},\"contracts/Portal/modules/DataStoreModule/libs/DataStoreModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @title DSML: DataStore Module Library\\n *\\n * @notice A Storage Management Library created for the contracts and modules that inherits DataStoreModule (DSM).\\n * Enables Dynamic Structs with unlimited key space.\\n * Provides an Isolated Storage Layout with IDs and KEYs.\\n * Focusing on upgradable contracts with various data types to create a\\n * * sustainable development environment.\\n * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create dynamic structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots. No collisions!\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n * @dev review: For a safer development process, NEVER use the IsolatedStorage with strings. Refer to globals/reserved_key_space.sol\\n *\\n * @dev While it is a good practice for keeping a record;\\n * * TYPE for ID is NOT mandatory, an ID might not have an explicit type.\\n * * e.g., When a relational data is added with getKey, like allowance, it has a unique ID but no TYPE.\\n * * Thus there are no checks for types or keys.\\n *\\n * @dev readUint(id, arrayName) returns the lenght of array.\\n *\\n * @dev Contracts relying on this library must use DataStoreModuleLib.IsolatedStorage\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DataStoreModuleLib {\\n  /**\\n   * @notice Main Struct for reading/writing operations for given (id, key) pairs.\\n   *\\n   * @param allIdsByType type => id[], optional categorization for IDs, can be directly accessed.\\n   * @param uintData keccak(id, key) =>  returns uint256\\n   * @param bytesData keccak(id, key) => returns bytes\\n   * @param addressData keccak(id, key) =>  returns address\\n   * @param __gap keep the struct size at 16\\n   *\\n   * @dev any other storage type can be expressed as uint or bytes. E.g., bools are 0/1 as uints.\\n   */\\n  struct IsolatedStorage {\\n    mapping(uint256 => uint256[]) allIdsByType;\\n    mapping(bytes32 => uint256) uintData;\\n    mapping(bytes32 => bytes) bytesData;\\n    mapping(bytes32 => address) addressData;\\n    uint256[12] __gap;\\n  }\\n\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @notice generalized method of generating an ID\\n   *\\n   * @dev Some TYPEs may require permissionless creation, allowing anyone to claim any ID;\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(bytes memory _name, uint256 _type) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encodePacked(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hash of given ID and a KEY defines the key for the IsolatedStorage\\n   * @return key bytes32, hash.\\n   **/\\n  function getKey(uint256 id, bytes32 param) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encodePacked(id, param));\\n  }\\n\\n  /**\\n   * @custom:section                           ** DATA GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUint(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytes(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddress(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   * @custom:section                           ** ARRAY GETTERS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function readUintArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** DATA SETTERS **\\n   */\\n\\n  function writeUint(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUint(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUint(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytes(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddress(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ARRAY SETTERS **\\n   */\\n\\n  function appendUintArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArray(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** BATCH ARRAY SETTERS **\\n   */\\n\\n  function appendUintArrayBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    for (uint256 i = 0; i < _data.length; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    for (uint256 i = 0; i < _data.length; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n\\n    for (uint256 i = 0; i < _data.length; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0x2d74bdce38dca73f27695089cac1345d962794837fb0e5a042fa3a33bd6ee2ed\",\"license\":\"MIT\"},\"contracts/Portal/modules/GeodeModule/libs/GeodeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// globals\\nimport {PERCENTAGE_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\n\\n/**\\n * @title GML: Geode Module Library\\n *\\n * @notice Dual Governance & Limited Upgradability:\\n * Administration of the Isolated Storage with a Dual Governance consisting a Governance and a Senate.\\n * Administration of a UUPS contract with Limited Upgradability for Packages like Portal, LiquidityPool.\\n *\\n * @dev review: DataStoreModule for the IsolatedStorage logic.\\n * @dev review: Reserved TYPEs are defined within globals/id_type.sol\\n *\\n * @dev SENATE_EXPIRY is not mandatory to utilize. Simply set it to MAX_UINT256 if rescueSenate is not needed.\\n *\\n * @dev There are 3 ways to set a new Senate:\\n * 1. With a proposal TYPE 1. Proposal's controller becomes the new Senate, refreshes the expiry.\\n * 2. Current Senate can call changeSenate, which doesn't change the expiry\\n * 3. As a circuit breaker: If senate is expired, then rescue senate can be called by governance.\\n * @dev Currently, there are no way to set a new Governance.\\n *\\n *\\n * @dev Contracts relying on this library must use GeodeModuleLib.DualGovernance\\n * @dev This is an external library, requires deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary GeodeModuleLib {\\n  using DSML for DSML.IsolatedStorage;\\n\\n  /**\\n   * @custom:section                           ** STRUCTS **\\n   */\\n\\n  /**\\n   * @notice Giving the control of a specific ID to proposed CONTROLLER.\\n   *\\n   * @param TYPE: refer to globals/id_type.sol\\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n   * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n   * @param NAME: DataStore generates ID by keccak(name, type)\\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n   * * Expired proposals can not be approved by Senate\\n   * * Expired proposals can not be overriden by new proposals\\n   **/\\n  struct Proposal {\\n    address CONTROLLER;\\n    uint256 TYPE;\\n    bytes NAME;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Dual Governance allows 2 parties to manage a package with proposals and approvals.\\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n   * Suggests updates, such as new operators, contract upgrades, a new Senate (without any permission to force them)\\n   * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n   * @param APPROVED_UPGRADE only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n   * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Might not be utilized. Limited by MAX_SENATE_PERIOD\\n   * @param PACKAGE_TYPE every package has a specific TYPE. Defined in globals/id_type.sol\\n   * @param CONTRACT_VERSION always refers to the upgrade proposal ID. Does NOT increase uniformly like one might expect.\\n   * @param proposals till approved, proposals are kept separated from the Isolated Storage\\n   * @param __gap keep the struct size at 16\\n   **/\\n  struct DualGovernance {\\n    address GOVERNANCE;\\n    address SENATE;\\n    address APPROVED_UPGRADE;\\n    uint256 SENATE_EXPIRY;\\n    uint256 PACKAGE_TYPE;\\n    uint256 CONTRACT_VERSION;\\n    mapping(uint256 => Proposal) proposals;\\n    uint256[9] __gap;\\n  }\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice a proposal can have a duration between 1 days to 4 weeks (inclusive)\\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 public constant MAX_PROPOSAL_DURATION = 4 weeks;\\n\\n  /// @notice if expiry is utilized, a senate can be active for a year.\\n  /// @dev \\\"MAX\\\" underlines a new senate can be set without expecting an expiry\\n  uint32 public constant MAX_SENATE_PERIOD = 365 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event Proposed(uint256 indexed TYPE, uint256 ID, address CONTROLLER, uint256 deadline);\\n  event Approved(uint256 ID);\\n  event NewSenate(address senate, uint256 expiry);\\n  event ControllerChanged(uint256 indexed ID, address CONTROLLER);\\n\\n  /**\\n   * @custom:section                           ** MODIFIERS **\\n   */\\n  modifier onlyGovernance(DualGovernance storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GML:GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlySenate(DualGovernance storage self) {\\n    require(msg.sender == self.SENATE, \\\"GML:SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GML:SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DSML.IsolatedStorage storage DATASTORE, uint256 id) {\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"GML:CONTROLLER role needed\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @custom:section                           ** LIMITED UUPS VERSION CONTROL **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Check if it is allowed to change the package version to given proposedImplementation.\\n   * @dev provided for _authorizeUpgrade\\n   * @dev currentImplementation should always be UUPS._getImplementation()\\n   * @dev currentImplementation or zero as proposedImplementation will return false\\n   **/\\n  function isUpgradeAllowed(\\n    DualGovernance storage self,\\n    address proposedImplementation,\\n    address currentImplementation\\n  ) external view returns (bool) {\\n    return\\n      (self.APPROVED_UPGRADE != address(0)) &&\\n      (proposedImplementation != currentImplementation) &&\\n      (self.APPROVED_UPGRADE == proposedImplementation);\\n  }\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  function getProposal(\\n    DualGovernance storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self.proposals[id];\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:subsection                        ** INTERNAL **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n  function _setSenate(DualGovernance storage self, address _newSenate, uint256 _expiry) internal {\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY GOVERNANCE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice generates a new ID with given TYPE and NAME, proposes it to be owned by a CONTROLLER.\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   */\\n  function propose(\\n    DualGovernance storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSML.generateId(_NAME, _TYPE);\\n\\n    require(self.proposals[id].deadline == 0, \\\"GML:already proposed\\\");\\n    require((DATASTORE.readBytes(id, rks.NAME)).length == 0, \\\"GML:ID already exist\\\");\\n    require(_CONTROLLER != address(0), \\\"GML:CONTROLLER can NOT be ZERO\\\");\\n    require(\\n      (_TYPE != ID_TYPE.NONE) && (_TYPE != ID_TYPE.__GAP__) && (_TYPE != ID_TYPE.POOL),\\n      \\\"GML:TYPE is NONE, GAP or POOL\\\"\\n    );\\n    require(\\n      (duration >= MIN_PROPOSAL_DURATION) && (duration <= MAX_PROPOSAL_DURATION),\\n      \\\"GML:invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self.proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(_TYPE, id, _CONTROLLER, _deadline);\\n  }\\n\\n  /**\\n   * @notice changes Senate in a scenerio where the current Senate acts maliciously!\\n   * * We are sure this will not be the case, but creating a method for possible recovery is a must.\\n   * @notice Normally, Governance creates Senate Proposals frequently to signal it does not have\\n   * * any intent of malicious overtake.\\n   * note: If Governance does not send a Senate Proposal \\\"a while\\\" before the SENATE_EXPIRY,\\n   * * we recommend users to take their money out.\\n   * @dev Obviously, Governance needs to wait for SENATE_EXPIRY.\\n   * @dev Refreshes the expiry\\n   */\\n  function rescueSenate(\\n    DualGovernance storage self,\\n    address _newSenate\\n  ) external onlyGovernance(self) {\\n    require(block.timestamp > self.SENATE_EXPIRY, \\\"GML:cannot rescue yet\\\");\\n\\n    _setSenate(self, _newSenate, block.timestamp + MAX_SENATE_PERIOD);\\n  }\\n\\n  /**\\n   * @custom:subsection                        ** ONLY SENATE **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice approves a proposal and records given data to DataStore\\n   * @notice specific changes for the reserved types (1,2,3) are implemented here,\\n   * any other addition should take place in Portal, as not related. Note that GM has additional logic for TYPE 2 approvals.\\n   * @param id given ID proposal that has will be approved by Senate\\n   * @dev Senate is not able to approve approved proposals\\n   * @dev Senate is not able to approve expired proposals\\n   */\\n  function approveProposal(\\n    DualGovernance storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (address _controller, uint256 _type, bytes memory _name) {\\n    require(self.proposals[id].deadline > block.timestamp, \\\"GML:NOT an active proposal\\\");\\n\\n    _controller = self.proposals[id].CONTROLLER;\\n    _type = self.proposals[id].TYPE;\\n    _name = self.proposals[id].NAME;\\n\\n    DATASTORE.writeUint(id, rks.TYPE, _type);\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, _controller);\\n    DATASTORE.writeBytes(id, rks.NAME, _name);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.SENATE) {\\n      _setSenate(self, _controller, block.timestamp + MAX_SENATE_PERIOD);\\n    } else if (_type == ID_TYPE.CONTRACT_UPGRADE) {\\n      self.APPROVED_UPGRADE = _controller;\\n    }\\n\\n    // important\\n    self.proposals[id].deadline = block.timestamp;\\n\\n    emit Approved(id);\\n  }\\n\\n  /**\\n   * @notice It is useful to be able to change the Senate's address without changing the expiry.\\n   * @dev Does not change the expiry\\n   */\\n  function changeSenate(DualGovernance storage self, address _newSenate) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ONLY CONTROLLER **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice change the CONTROLLER of an ID\\n   * @dev this operation can not be reverted by the old CONTROLLER!!!\\n   * @dev can not provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GML:CONTROLLER can not be zero\\\");\\n\\n    DATASTORE.writeAddress(id, rks.CONTROLLER, newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n}\\n\",\"keccak256\":\"0x620f3b69b7907139e9bd87b190641fe84d8905c43a30c87f88e9b1ab0067db48\",\"license\":\"MIT\"},\"contracts/Portal/modules/StakeModule/libs/DepositContractLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// interfaces\\nimport {IDepositContract} from \\\"../../../interfaces/helpers/IDepositContract.sol\\\";\\n// libraries\\nimport {BytesLib} from \\\"../../../helpers/BytesLib.sol\\\";\\n\\n/**\\n * @title DCL: Deposit Contract Library\\n *\\n * @notice Includes constants & functions that helps to the deposit process.\\n *\\n * @dev DEPOSIT_CONTRACT is chain specific and should be changed before deployments.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary DepositContractLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @custom:section                           ** FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i = 0; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(_stakeAmount % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot))\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  /**\\n   * @notice converts an address to withdrawal credential, used on validator creation\\n   */\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return abi.encodePacked(bytes32(w) | bytes32(uint256(uint160(address(wcAddress)))));\\n  }\\n\\n  /**\\n   * @notice deposit to DEPOSIT_CONTRACT and initiate a validator.\\n   */\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x31ce87ce9addab6b0b08e27e8df45a11040d559e8390dc6e1118a6ba7db72327\",\"license\":\"MIT\"},\"contracts/Portal/modules/StakeModule/libs/StakeModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// globals\\nimport {PERCENTAGE_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\nimport {ID_TYPE} from \\\"../../../globals/id_type.sol\\\";\\nimport {VALIDATOR_STATE} from \\\"../../../globals/validator_state.sol\\\";\\nimport {RESERVED_KEY_SPACE as rks} from \\\"../../../globals/reserved_key_space.sol\\\";\\n// libraries\\nimport {DataStoreModuleLib as DSML} from \\\"../../DataStoreModule/libs/DataStoreModuleLib.sol\\\";\\nimport {DepositContractLib as DCL} from \\\"./DepositContractLib.sol\\\";\\n// interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\nimport {IgETHMiddleware} from \\\"../../../interfaces/middlewares/IgETHMiddleware.sol\\\";\\nimport {IGeodePackage} from \\\"../../../interfaces/packages/IGeodePackage.sol\\\";\\nimport {ILiquidityPool} from \\\"../../../interfaces/packages/ILiquidityPool.sol\\\";\\nimport {IWhitelist} from \\\"../../../interfaces/helpers/IWhitelist.sol\\\";\\n// external\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @title SML: The Staking Library\\n *\\n * @notice Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool,\\n * improving the user experience for stakers and removing the \\\"need\\\" for centralized or decentralized intermediaries.\\n * * Exclusively contains functions related to:\\n * * 1. Initiators and Configurable Staking Pools.\\n * * 2. Pool and Operator management.\\n * * 3. Validator Delegation.\\n * * 4. Depositing.\\n * * 5. Staking Operations.\\n *\\n * @dev review: DataStoreModule for the IsolatedStorage logic.\\n * @dev review: OracleExtensionLib for oracle logic.\\n *\\n * @dev Every pool is isolated and every validator is unique. Segregate all the risk.\\n *\\n * @dev CONTROLLER and Maintainer:\\n * CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important.\\n * maintainer is the worker, can be used to automate some daily tasks:\\n * * distributing validators for Staking Pools or creating validators for Operators.\\n * * not so crucial in terms of security.\\n *\\n * @dev Users:\\n * Type 4 : Permissioned Operators\\n * * Needs to be onboarded by the Dual Governance (Senate + Governance).\\n * * Maintains Beacon Chain Validators on behalf of the Staking Pools.\\n * * Can participate in the Operator Marketplace after initiation.\\n * * Can utilize maintainers for staking operations.\\n *\\n * Type 5 : Permissionless Configurable Staking Pools\\n * * Permissionless to create.\\n * * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc.\\n * * Can be public or private, can use a whitelist if private.\\n * * Can utilize maintainers for validator distribution on Operator Marketplace.\\n * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation,\\n * * accruing rewards and keeping Staked Ether safe and isolated.\\n *\\n * @dev Packages:\\n * An ID can only point to 1(one) Package version at a time.\\n * Built by utilizing the Modules!\\n * Can be upgraded by a dual governance, via pullUpgrade.\\n * * A Package's dual governance consists of Portal(governance) and the pool owner(senate).\\n *\\n * Type 10011 : Withdrawal Contract\\n * * Mandatory.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Staking Pools are in \\\"Isolation Mode\\\" until their Withdrawal Contract is upgraded.\\n * * * Meaning, no more Depositing or Validator Proposal can happen.\\n * * Custodian of the validator funds after creation, including any type of rewards and fees.\\n *\\n * Type 10021 : Liquidity Pool implementation\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Version Release Requires the approval of Senate\\n * * Upgrading to a new version is optional for pool owners.\\n * * * Liquidity Pools are in \\\"Isolation Mode\\\" until upgraded.\\n *\\n * @dev Middlewares:\\n * Can support many different versions that can be utilized by the Pool Owners.\\n * No particular way to build one.\\n * Can not be upgraded.\\n * Currently only gETHMiddlewares.\\n *\\n * Type 20011 : gETHMiddleware\\n * * Optional.\\n * * CONTROLLER is the implementation contract position (always)\\n * * Requires the approval of Senate\\n * * Currently should be utilized on initiation.\\n *\\n * @dev Contracts relying on this library must initialize StakeUtils.PooledStaking\\n *\\n * @dev Functions are protected with authentication function\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\nlibrary StakeModuleLib {\\n  using DSML for DSML.IsolatedStorage;\\n\\n  /**\\n   * @custom:section                           ** STRUCTS **\\n   */\\n\\n  /**\\n   * @notice Helper Struct to pack constant data that does not change per validator on batch proposals\\n   * * needed for that famous Solidity feature.\\n   */\\n  struct ConstantValidatorData {\\n    uint64 index;\\n    uint64 period;\\n    uint256 poolFee;\\n    uint256 operatorFee;\\n    uint256 governanceFee;\\n    bytes withdrawalCredential;\\n  }\\n\\n  /**\\n   * @param state state of the validator, refer to globals.sol\\n   * @param index representing this validator's placement on the chronological order of the validators proposals\\n   * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n   * @param period the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n   * @param poolId needed for withdrawal_credential\\n   * @param operatorId needed for staking after allowance\\n   * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n   * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n   * @param governanceFee although governance fee is zero right now, all fees are crucial for the price calculation by the oracle.\\n   * @param signature31 BLS12-381 signature for the validator, used when the remaining 31 ETH is sent on validator activation.\\n   **/\\n  struct Validator {\\n    uint64 state;\\n    uint64 index;\\n    uint64 createdAt;\\n    uint64 period;\\n    uint256 poolId;\\n    uint256 operatorId;\\n    uint256 poolFee;\\n    uint256 operatorFee;\\n    uint256 governanceFee;\\n    bytes signature31;\\n  }\\n\\n  /**\\n   * @param gETH constant, ERC1155, all Geode Staking Derivatives.\\n   * @param ORACLE_POSITION constant, address of the Oracle https://github.com/Geodefi/Telescope-Eth\\n   * @param VALIDATORS_INDEX total number of validators that are proposed at any given point.\\n   * * Includes all validators: proposed, active, alienated, exited.\\n   * @param VERIFICATION_INDEX the highest index of the validators that are verified (as not alien) by the Holy Oracle.\\n   * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated by the Holy Oracle.\\n   * @param ORACLE_UPDATE_TIMESTAMP timestamp of the latest oracle update\\n   * @param DAILY_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval, per second.\\n   * @param DAILY_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval, per second.\\n   * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool, updated by the Holy Oracle.\\n   * @param GOVERNANCE_FEE **reserved** Although it is 0 right now, It can be updated in the future.\\n   * @param BALANCE_MERKLE_ROOT merkle root of the balances and other validator related data, useful on withdrawals, updated by the Holy Oracle.\\n   * @param validators pubkey => Validator, contains all the data about proposed, alienated, active, exit-called and fully exited validators.\\n   * @param packages TYPE => version id, pointing to the latest versions of the given package.\\n   * * Like default Withdrawal Contract version.\\n   * @param middlewares TYPE => version id => isAllowed, useful to check if given version of the middleware can be used.\\n   * * Like all the whitelisted gETHMiddlewares.\\n   * @param __gap keep the struct size at 16\\n   **/\\n  struct PooledStaking {\\n    IgETH gETH;\\n    address ORACLE_POSITION;\\n    uint256 VALIDATORS_INDEX;\\n    uint256 VERIFICATION_INDEX;\\n    uint256 MONOPOLY_THRESHOLD;\\n    uint256 ORACLE_UPDATE_TIMESTAMP;\\n    uint256 DAILY_PRICE_INCREASE_LIMIT;\\n    uint256 DAILY_PRICE_DECREASE_LIMIT;\\n    uint256 GOVERNANCE_FEE;\\n    bytes32 PRICE_MERKLE_ROOT;\\n    bytes32 BALANCE_MERKLE_ROOT;\\n    mapping(bytes => Validator) validators;\\n    mapping(uint256 => uint256) packages;\\n    mapping(uint256 => mapping(uint256 => bool)) middlewares;\\n    uint256[2] __gap;\\n  }\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice limiting the GOVERNANCE_FEE to 5%\\n  uint256 public constant MAX_GOVERNANCE_FEE = (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /// @notice limiting the pool and operator maintenance fee, 10%\\n  uint256 public constant MAX_MAINTENANCE_FEE = (PERCENTAGE_DENOMINATOR * 10) / 100;\\n\\n  /// @notice effective on allowance per operator, prevents overflow. Exclusive, save gas with +1.\\n  uint256 public constant MAX_ALLOWANCE = 10 ** 6 + 1;\\n\\n  /// @notice if a pool has 80% of its allowances filled, fallback operator is active.\\n  uint256 public constant FALLBACK_THRESHOLD = (PERCENTAGE_DENOMINATOR * 80) / 100;\\n\\n  /// @notice price of gETH is only valid for 24H, minting is not allowed afterwards.\\n  uint256 public constant PRICE_EXPIRY = 24 hours;\\n\\n  /// @notice ignoring any buybacks if the Liquidity Pool has a low debt\\n  uint256 public constant IGNORABLE_DEBT = 1 ether;\\n\\n  /// @notice limiting the operator.validatorPeriod, between 3 months to 2 years\\n  uint256 public constant MIN_VALIDATOR_PERIOD = 3 * 30 days;\\n  uint256 public constant MAX_VALIDATOR_PERIOD = 2 * 365 days;\\n\\n  /// @notice some parameter changes are effective after a delay\\n  uint256 public constant SWITCH_LATENCY = 3 days;\\n\\n  /// @notice limiting the access for Operators in case of bad/malicious/faulty behaviour\\n  uint256 public constant PRISON_SENTENCE = 14 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event IdInitiated(uint256 id, uint256 indexed TYPE);\\n  event VisibilitySet(uint256 id, bool isPrivate);\\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\\n  event ValidatorPeriodSwitched(uint256 indexed operatorId, uint256 period, uint256 effectiveAfter);\\n  event Delegation(uint256 poolId, uint256 indexed operatorId, uint256 allowance);\\n  event FallbackOperator(uint256 poolId, uint256 indexed operatorId);\\n  event Prisoned(uint256 indexed operatorId, bytes proof, uint256 releaseTimestamp);\\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\\n  event StakeProposal(uint256 poolId, uint256 operatorId, bytes[] pubkeys);\\n  event Stake(bytes[] pubkeys);\\n\\n  /**\\n   * @custom:section                           ** AUTHENTICATION **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice restricts the access to given function based on TYPE and msg.sender\\n   * @param _expectCONTROLLER restricts the access to only CONTROLLER.\\n   * @param _expectMaintainer restricts the access to only maintainer.\\n   * @param _restrictionMap Restricts which TYPEs can pass the authentication.\\n   * * [0: Operator = TYPE(4), 1: Pool = TYPE(5)]\\n   * @dev can only be used after an ID is initiated\\n   * @dev CONTROLLERS and maintainers of the Prisoned Operators can not access.\\n   */\\n  function _authenticate(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    bool _expectCONTROLLER,\\n    bool _expectMaintainer,\\n    bool[2] memory _restrictionMap\\n  ) internal view {\\n    require(DATASTORE.readUint(_id, rks.initiated) != 0, \\\"SML:not initiated\\\");\\n\\n    uint256 typeOfId = DATASTORE.readUint(_id, rks.TYPE);\\n\\n    if (typeOfId == ID_TYPE.OPERATOR) {\\n      require(_restrictionMap[0], \\\"SML:TYPE NOT allowed\\\");\\n      if (_expectCONTROLLER || _expectMaintainer) {\\n        require(!isPrisoned(DATASTORE, _id), \\\"SML:prisoned, get in touch with governance\\\");\\n      }\\n    } else if (typeOfId == ID_TYPE.POOL) {\\n      require(_restrictionMap[1], \\\"SML:TYPE NOT allowed\\\");\\n    } else revert(\\\"SML:invalid TYPE\\\");\\n\\n    if (_expectMaintainer) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.maintainer),\\n        \\\"SML:sender NOT maintainer\\\"\\n      );\\n      return;\\n    }\\n\\n    if (_expectCONTROLLER) {\\n      require(\\n        msg.sender == DATASTORE.readAddress(_id, rks.CONTROLLER),\\n        \\\"SML:sender NOT CONTROLLER\\\"\\n      );\\n      return;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** OPERATOR INITIATOR **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice initiates ID as a Permissionned Node Operator\\n   * @notice requires ID to be approved as a node operator with a specific CONTROLLER\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR represents 100%\\n   * @param validatorPeriod the expected maximum staking interval. This value should between\\n   * * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above.\\n   * Operator can unstake at any given point before this period ends.\\n   * If operator disobeys this rule, it can be prisoned with blameOperator()\\n   * @param maintainer an address that automates daily operations, a script, a contract...\\n   * @dev operators can fund their internal wallet on initiation by simply sending some ether.\\n   */\\n  function initiateOperator(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external {\\n    require(DATASTORE.readUint(id, rks.initiated) == 0, \\\"SML:already initiated\\\");\\n    require(DATASTORE.readUint(id, rks.TYPE) == ID_TYPE.OPERATOR, \\\"SML:TYPE NOT allowed\\\");\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"SML:sender NOT CONTROLLER\\\");\\n\\n    DATASTORE.writeUint(id, rks.initiated, block.timestamp);\\n\\n    _setMaintenanceFee(DATASTORE, id, fee);\\n    _setValidatorPeriod(DATASTORE, id, validatorPeriod);\\n    _setMaintainer(DATASTORE, id, maintainer);\\n    _increaseWalletBalance(DATASTORE, id, msg.value);\\n\\n    emit IdInitiated(id, ID_TYPE.OPERATOR);\\n  }\\n\\n  /**\\n   * @custom:section                           ** STAKING POOL INITIATOR **\\n   *\\n   * @dev this section also contains the helper functions for packages and middlewares.\\n   */\\n\\n  /**\\n   * @notice Creates a Configurable Trustless Staking Pool!\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\\n   * @param middlewareVersion Pool creators can choose any allowed version as their gETHMiddleware\\n   * @param maintainer an address that automates daily operations, a script, a contract... not so critical.\\n   * @param name is utilized while generating an ID for the Pool, similar to any other ID generation.\\n   * @param middleware_data middlewares might require additional data on initialization; like name, symbol, etc.\\n   * @param config array(3)= [private(true) or public(false), deploy a middleware(if true), deploy liquidity pool(if true)]\\n   * @dev checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.\\n   * @dev requires exactly 1 validator worth of funds to be deposited on initiation, prevent sybil attacks.\\n   */\\n  function initiatePool(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 fee,\\n    uint256 middlewareVersion,\\n    address maintainer,\\n    bytes calldata name,\\n    bytes calldata middleware_data,\\n    bool[3] calldata config\\n  ) external returns (uint256 poolId) {\\n    require(msg.value == DCL.DEPOSIT_AMOUNT, \\\"SML:need 1 validator worth of funds\\\");\\n\\n    poolId = DSML.generateId(name, ID_TYPE.POOL);\\n    require(DATASTORE.readUint(poolId, rks.initiated) == 0, \\\"SML:already initiated\\\");\\n    require(poolId > 10 ** 9, \\\"SML:Wow! Low pool id\\\");\\n\\n    DATASTORE.writeUint(poolId, rks.initiated, block.timestamp);\\n\\n    DATASTORE.writeUint(poolId, rks.TYPE, ID_TYPE.POOL);\\n    DATASTORE.writeAddress(poolId, rks.CONTROLLER, msg.sender);\\n    DATASTORE.writeBytes(poolId, rks.NAME, name);\\n    DATASTORE.allIdsByType[ID_TYPE.POOL].push(poolId);\\n\\n    _setMaintainer(DATASTORE, poolId, maintainer);\\n    _setMaintenanceFee(DATASTORE, poolId, fee);\\n\\n    // deploy a withdrawal Contract - mandatory\\n    _deployWithdrawalContract(self, DATASTORE, poolId);\\n\\n    if (config[0]) {\\n      // set pool to private\\n      setPoolVisibility(DATASTORE, poolId, true);\\n    }\\n    if (config[1]) {\\n      // deploy a gETH middleware(erc20 etc.) - optional\\n      _deploygETHMiddleware(self, DATASTORE, poolId, middlewareVersion, middleware_data);\\n    }\\n    if (config[2]) {\\n      // deploy a bound liquidity pool - optional\\n      deployLiquidityPool(self, DATASTORE, poolId);\\n    }\\n\\n    // initially 1 ETHER = 1 ETHER\\n    self.gETH.setPricePerShare(1 ether, poolId);\\n\\n    // mint gETH and send back to the caller\\n    uint256 mintedgETH = _mintgETH(self, DATASTORE, poolId, msg.value);\\n    self.gETH.safeTransferFrom(address(this), msg.sender, poolId, mintedgETH, \\\"\\\");\\n\\n    emit IdInitiated(poolId, ID_TYPE.POOL);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** POOL INITIATOR HELPERS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set a gETHMiddleware\\n   * @param _middleware address of the new gETHMiddleware for given ID\\n   * @dev every middleware has a unique index within the middlewares dynamic array.\\n   * @dev if ever unset, SHOULD replace the implementation with address(0) for obvious security reasons.\\n   */\\n  function _setgETHMiddleware(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address _middleware\\n  ) internal {\\n    require(!self.gETH.isMiddleware(_middleware, id), \\\"SML:already middleware\\\");\\n\\n    DATASTORE.appendAddressArray(id, rks.middlewares, _middleware);\\n\\n    self.gETH.setMiddleware(_middleware, id, true);\\n  }\\n\\n  /**\\n   * @notice deploys a new gETHMiddleware by cloning (no upgradability)\\n   * @param _id gETH id, also required for IgETHMiddleware.initialize\\n   * @param _versionId provided version id, can use any as a middleware if allowed for TYPE = MIDDLEWARE_GETH\\n   * @param _middleware_data middlewares might require additional data on initialization; like name, symbol, etc.\\n   * @dev currrently, can NOT deploy a middleware after initiation, thus only used by the initiator.\\n   * @dev currrently, can NOT unset a middleware.\\n   */\\n  function _deploygETHMiddleware(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _versionId,\\n    bytes memory _middleware_data\\n  ) internal {\\n    require(_versionId > 0);\\n    require(self.middlewares[ID_TYPE.MIDDLEWARE_GETH][_versionId], \\\"SML:not a middleware\\\");\\n\\n    address newgETHMiddleware = Clones.clone(DATASTORE.readAddress(_versionId, rks.CONTROLLER));\\n\\n    IgETHMiddleware(newgETHMiddleware).initialize(_id, address(self.gETH), _middleware_data);\\n\\n    _setgETHMiddleware(self, DATASTORE, _id, newgETHMiddleware);\\n\\n    // isolate the contract from middleware risk for ID\\n    self.gETH.avoidMiddlewares(_id, true);\\n  }\\n\\n  /**\\n   * @notice deploys a new package for given id with given type from packages mapping.\\n   * @param _type given package type\\n   * @param _poolId pool id, required for IGeodePackage.initialize\\n   * @param _package_data packages might require additional data on initialization\\n   * @dev no cloning because GeodePackages has Limited Upgradability (based on UUPS)\\n   */\\n  function _deployGeodePackage(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _type,\\n    bytes memory _package_data\\n  ) internal returns (address packageInstance) {\\n    uint256 versionId = self.packages[_type];\\n    require(versionId > 0);\\n\\n    packageInstance = address(\\n      new ERC1967Proxy(DATASTORE.readAddress(versionId, rks.CONTROLLER), \\\"\\\")\\n    );\\n    // we don't call on deployment because initialize uses _getImplementation() which is not available\\n    IGeodePackage(packageInstance).initialize(\\n      _poolId,\\n      DATASTORE.readAddress(_poolId, rks.CONTROLLER),\\n      DATASTORE.readBytes(versionId, rks.NAME),\\n      _package_data\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys a Withdrawal Contract that will be used as a withdrawal credential on validator creation\\n   * @dev every pool requires a Withdrawal Contract, thus this function is only used by the initiator\\n   */\\n  function _deployWithdrawalContract(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) internal {\\n    require(\\n      DATASTORE.readAddress(_poolId, rks.withdrawalContract) == address(0),\\n      \\\"SML:already deployed\\\"\\n    );\\n\\n    address wp = _deployGeodePackage(\\n      self,\\n      DATASTORE,\\n      _poolId,\\n      ID_TYPE.PACKAGE_WITHDRAWAL_CONTRACT,\\n      bytes(\\\"\\\")\\n    );\\n\\n    DATASTORE.writeAddress(_poolId, rks.withdrawalContract, wp);\\n    DATASTORE.writeBytes(_poolId, rks.withdrawalCredential, DCL.addressToWC(wp));\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** BOUND LIQUIDITY POOL **\\n   *\\n   * @custom:visibility -> public\\n   */\\n\\n  /**\\n   * @notice deploys a bound liquidity pool for a staking pool, if it does not have one.\\n   * @dev gives full allowance to the pool (should not be a problem as Portal only temporarily holds gETH)\\n   * @dev unlike withdrawal Contract, a controller can deploy a liquidity pool after initiation as well\\n   * @dev _package_data of a liquidity pool is only the staking pool's name.\\n   */\\n  function deployLiquidityPool(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(DATASTORE.readAddress(poolId, rks.liquidityPool) == address(0), \\\"SML:already deployed\\\");\\n\\n    address lp = _deployGeodePackage(\\n      self,\\n      DATASTORE,\\n      poolId,\\n      ID_TYPE.PACKAGE_LIQUIDITY_POOL,\\n      DATASTORE.readBytes(poolId, rks.NAME)\\n    );\\n\\n    DATASTORE.writeAddress(poolId, rks.liquidityPool, lp);\\n    // approve gETH so we can use it in buybacks\\n    self.gETH.setApprovalForAll(lp, true);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** BOUND LIQUIDITY POOL **\\n   */\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice changes the visibility of the pool\\n   * @param makePrivate true if pool should be private, false for public pools\\n   * @dev whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again.\\n   * Note private pools can whitelist addresses with the help of a third party contract.\\n   */\\n  function setPoolVisibility(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    bool makePrivate\\n  ) public {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(makePrivate != isPrivatePool(DATASTORE, poolId), \\\"SML:already set\\\");\\n\\n    DATASTORE.writeUint(poolId, rks.privatePool, makePrivate ? 1 : 0);\\n\\n    if (!makePrivate) {\\n      DATASTORE.writeAddress(poolId, rks.whitelist, address(0));\\n    }\\n\\n    emit VisibilitySet(poolId, makePrivate);\\n  }\\n\\n  /**\\n   * @notice private pools can whitelist addresses with the help of a third party contract.\\n   * @dev Whitelisting contracts should implement IWhitelist interface.\\n   */\\n  function setWhitelist(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    address whitelist\\n  ) external {\\n    _authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(isPrivatePool(DATASTORE, poolId), \\\"SML:must be private pool\\\");\\n\\n    DATASTORE.writeAddress(poolId, rks.whitelist, whitelist);\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the pool is private\\n   */\\n  function isPrivatePool(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return (DATASTORE.readUint(poolId, rks.privatePool) == 1);\\n  }\\n\\n  /**\\n   * @notice checks if the Whitelist allows staker to use given private pool\\n   * @dev Owner of the pool doesn't need whitelisting\\n   * @dev Otherwise requires a whitelisting address to be set\\n   */\\n  function isWhitelisted(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    address staker\\n  ) public view returns (bool) {\\n    if (DATASTORE.readAddress(poolId, rks.CONTROLLER) == staker) {\\n      return true;\\n    }\\n\\n    address whitelist = DATASTORE.readAddress(poolId, rks.whitelist);\\n    require(whitelist != address(0), \\\"SML:no whitelist\\\");\\n\\n    return IWhitelist(whitelist).isAllowed(staker);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ID MANAGEMENT **\\n   *\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** MAINTAINER **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Set the maintainer address on initiation or later\\n   * @param _newMaintainer address of the new maintainer\\n   */\\n  function _setMaintainer(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    address _newMaintainer\\n  ) internal {\\n    require(_newMaintainer != address(0), \\\"SML:maintainer can NOT be zero\\\");\\n\\n    DATASTORE.writeAddress(_id, rks.maintainer, _newMaintainer);\\n    emit MaintainerChanged(_id, _newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\n   * @dev there can only be 1 maintainer per ID.\\n   * @dev it is wise to change the maintainer before the CONTROLLER, in case of any migration\\n   * @dev we don't use _authenticate here because malicious maintainers can imprison operators\\n   * * and prevent them entering here, smh.\\n   */\\n  function changeMaintainer(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newMaintainer\\n  ) external {\\n    require(DATASTORE.readUint(id, rks.initiated) != 0, \\\"SML:ID is not initiated\\\");\\n    require(msg.sender == DATASTORE.readAddress(id, rks.CONTROLLER), \\\"SML:sender NOT CONTROLLER\\\");\\n    uint256 typeOfId = DATASTORE.readUint(id, rks.TYPE);\\n    require(typeOfId == ID_TYPE.OPERATOR || typeOfId == ID_TYPE.POOL, \\\"SML:invalid TYPE\\\");\\n\\n    _setMaintainer(DATASTORE, id, newMaintainer);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** FEE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\\n   *\\n   * @dev respecs to the switching delay.\\n   *\\n   * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100\\n   */\\n  function getMaintenanceFee(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 fee) {\\n    if (DATASTORE.readUint(id, rks.feeSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorFee);\\n    }\\n    return DATASTORE.readUint(id, rks.fee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set fee with NO DELAY\\n   */\\n  function _setMaintenanceFee(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _newFee\\n  ) internal {\\n    require(_newFee <= MAX_MAINTENANCE_FEE, \\\"SML:> MAX_MAINTENANCE_FEE \\\");\\n    DATASTORE.writeUint(_id, rks.fee, _newFee);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\\n   * @dev Can NOT be called again while its currently switching.\\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\n   */\\n  function switchMaintenanceFee(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 newFee\\n  ) external {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(block.timestamp > DATASTORE.readUint(id, rks.feeSwitch), \\\"SML:currently switching\\\");\\n\\n    DATASTORE.writeUint(id, rks.priorFee, DATASTORE.readUint(id, rks.fee));\\n    DATASTORE.writeUint(id, rks.feeSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setMaintenanceFee(DATASTORE, id, newFee);\\n\\n    emit FeeSwitched(id, newFee, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** INTERNAL WALLET **\\n   *\\n   * @dev Internal wallet of an ID accrues fees over time.\\n   * It is also used by Node Operators to fund 1 ETH per validator proposal, which is reimbursed if/when activated.\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Simply increases the balance of an IDs Maintainer wallet\\n   * @param _value Ether (in Wei) amount to increase the wallet balance.\\n   */\\n  function _increaseWalletBalance(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    DATASTORE.addUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @notice To decrease the balance of an Operator's wallet internally\\n   * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\n   */\\n  function _decreaseWalletBalance(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal {\\n    require(DATASTORE.readUint(_id, rks.wallet) >= _value, \\\"SML:insufficient wallet balance\\\");\\n    DATASTORE.subUint(_id, rks.wallet, _value);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice external function to increase the internal wallet balance\\n   * @dev anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\\n   */\\n  function increaseWalletBalance(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, false, false, [true, true]);\\n    _increaseWalletBalance(DATASTORE, id, msg.value);\\n    success = true;\\n  }\\n\\n  /**\\n   * @notice external function to decrease the internal wallet balance\\n   * @dev only CONTROLLER can decrease the balance externally,\\n   * @return success if the amount was sent and deducted\\n   */\\n  function decreaseWalletBalance(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 value\\n  ) external returns (bool success) {\\n    _authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(address(this).balance >= value, \\\"SML:insufficient contract balance\\\");\\n\\n    _decreaseWalletBalance(DATASTORE, id, value);\\n    address controller = DATASTORE.readAddress(id, rks.CONTROLLER);\\n\\n    (success, ) = payable(controller).call{value: value}(\\\"\\\");\\n    require(success, \\\"SML:Failed to send ETH\\\");\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** OPERATORS PERIOD **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  function getValidatorPeriod(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 period) {\\n    if (DATASTORE.readUint(id, rks.periodSwitch) > block.timestamp) {\\n      return DATASTORE.readUint(id, rks.priorPeriod);\\n    }\\n    return DATASTORE.readUint(id, rks.validatorPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice internal function to set validator period with NO DELAY\\n   */\\n  function _setValidatorPeriod(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    uint256 _newPeriod\\n  ) internal {\\n    require(_newPeriod >= MIN_VALIDATOR_PERIOD, \\\"SML:< MIN_VALIDATOR_PERIOD\\\");\\n    require(_newPeriod <= MAX_VALIDATOR_PERIOD, \\\"SML:> MAX_VALIDATOR_PERIOD\\\");\\n\\n    DATASTORE.writeUint(_operatorId, rks.validatorPeriod, _newPeriod);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\\n   * @dev limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\\n   */\\n  function switchValidatorPeriod(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 operatorId,\\n    uint256 newPeriod\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, true, false, [true, false]);\\n\\n    require(\\n      block.timestamp > DATASTORE.readUint(operatorId, rks.periodSwitch),\\n      \\\"SML:currently switching\\\"\\n    );\\n\\n    DATASTORE.writeUint(\\n      operatorId,\\n      rks.priorPeriod,\\n      DATASTORE.readUint(operatorId, rks.validatorPeriod)\\n    );\\n    DATASTORE.writeUint(operatorId, rks.periodSwitch, block.timestamp + SWITCH_LATENCY);\\n\\n    _setValidatorPeriod(DATASTORE, operatorId, newPeriod);\\n\\n    emit ValidatorPeriodSwitched(operatorId, newPeriod, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRISON **\\n   *\\n   * When node operators act in a malicious way, which can also be interpereted as\\n   * an honest mistake like using a faulty signature, Oracle imprisons the operator.\\n   * These conditions are:\\n   * * 1. Created a malicious validator(alien): faulty withdrawal credential, faulty signatures etc.\\n   * * 2. Have not respect the validatorPeriod (or blamed for some other valid case)\\n   * * 3. Stole block fees or MEV boost rewards from the pool\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Checks if the given operator is Prisoned\\n   * @dev rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function isPrisoned(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 operatorId\\n  ) public view returns (bool) {\\n    return (block.timestamp < DATASTORE.readUint(operatorId, rks.release));\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Put an operator in prison\\n   * @dev rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function _imprison(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    bytes calldata _proof\\n  ) internal {\\n    _authenticate(DATASTORE, _operatorId, false, false, [true, false]);\\n\\n    DATASTORE.writeUint(_operatorId, rks.release, block.timestamp + PRISON_SENTENCE);\\n\\n    emit Prisoned(_operatorId, _proof, block.timestamp + PRISON_SENTENCE);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice allows imprisoning an Operator if the validator have not been exited until expected exit\\n   * @dev anyone can call this function while the state is ACTIVE\\n   * @dev if operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned\\n   *\\n   * @dev this function lacks 2 other punishable acts:\\n   * 1. while state is PROPOSED: validator proposed, it is passed, but haven't been created even tho it has been a MAX_BEACON_DELAY\\n   * 2. while state is EXIT_REQUESTED:  validator requested exit, but it haven't been executed even tho it has been MAX_BEACON_DELAY\\n   */\\n  function blameOperator(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    bytes calldata pk\\n  ) external {\\n    require(\\n      self.validators[pk].state == VALIDATOR_STATE.ACTIVE,\\n      \\\"SML:validator is never activated\\\"\\n    );\\n    require(\\n      block.timestamp > self.validators[pk].createdAt + self.validators[pk].period,\\n      \\\"SML:validator is active\\\"\\n    );\\n\\n    _imprison(DATASTORE, self.validators[pk].operatorId, pk);\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR DELEGATION **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool\\n   * @dev an operator can not create new validators if:\\n   * * 1. if operator is a monopoly\\n   * * 2. allowance is filled\\n   * * * But if operator is set as a fallback, it can if FALLBACK_THRESHOLD (80%) is reached on all allowances.\\n   * @dev If operator withdraws a validator, then able to create a new one.\\n   * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowance\\n   * @dev allowance doesn't change when new validators created or old ones are unstaked.\\n   */\\n  function operatorAllowance(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) public view returns (uint256 remValidators) {\\n    // monopoly check\\n    {\\n      // readUint for an array gives us length\\n      uint256 numOperatorValidators = DATASTORE.readUint(operatorId, rks.validators);\\n      uint256 monopoly_threshold = self.MONOPOLY_THRESHOLD;\\n      if (numOperatorValidators >= monopoly_threshold) {\\n        return 0;\\n      } else {\\n        remValidators = monopoly_threshold - numOperatorValidators;\\n      }\\n    }\\n\\n    // fallback check\\n    {\\n      if (operatorId == DATASTORE.readUint(poolId, rks.fallbackOperator)) {\\n        // readUint for an array gives us length\\n        uint256 numPoolValidators = DATASTORE.readUint(poolId, rks.validators);\\n        uint256 totalAllowance = DATASTORE.readUint(poolId, rks.totalAllowance);\\n        if (\\n          totalAllowance == 0 ||\\n          (((numPoolValidators * PERCENTAGE_DENOMINATOR) / totalAllowance) >= FALLBACK_THRESHOLD)\\n        ) {\\n          return remValidators;\\n        }\\n      }\\n    }\\n\\n    // approval check\\n    {\\n      uint256 allowance = DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.allowance));\\n      uint256 pooledValidators = DATASTORE.readUint(\\n        poolId,\\n        DSML.getKey(operatorId, rks.proposedValidators)\\n      ) + DATASTORE.readUint(poolId, DSML.getKey(operatorId, rks.activeValidators));\\n      if (pooledValidators >= allowance) {\\n        return 0;\\n      } else {\\n        uint256 remAllowance = allowance - pooledValidators;\\n        if (remValidators > remAllowance) {\\n          remValidators = remAllowance;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  function _setFallbackOperator(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) internal {\\n    DATASTORE.writeUint(poolId, rks.fallbackOperator, operatorId);\\n    emit FallbackOperator(poolId, operatorId);\\n  }\\n\\n  function _approveOperator(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    uint256 allowance\\n  ) internal returns (uint256 oldAllowance) {\\n    bytes32 allowanceKey = DSML.getKey(operatorId, rks.allowance);\\n\\n    oldAllowance = DATASTORE.readUint(poolId, allowanceKey);\\n    DATASTORE.writeUint(poolId, allowanceKey, allowance);\\n\\n    emit Delegation(poolId, operatorId, allowance);\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool with a given number of validators.\\n   * * This number can be set again at any given point in the future.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorIds array of Operator IDs to allow them create validators\\n   * @param allowances the MAX number of validators that can be created by the Operator, for given Pool\\n   * @dev When decreased the approved validator count below current active+proposed validators,\\n   * operator can NOT create new validators.\\n   */\\n  function delegate(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances,\\n    uint256 fallbackOperator\\n  ) external {\\n    _authenticate(DATASTORE, poolId, false, true, [false, true]);\\n    require(operatorIds.length == allowances.length, \\\"SML:allowances should match\\\");\\n    for (uint256 i = 0; i < operatorIds.length; ) {\\n      require(\\n        DATASTORE.readUint(operatorIds[i], rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:id not operator\\\"\\n      );\\n      require(allowances[i] < MAX_ALLOWANCE, \\\"SML:> MAX_ALLOWANCE, set fallback\\\");\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    if (fallbackOperator != 0) {\\n      require(\\n        DATASTORE.readUint(fallbackOperator, rks.TYPE) == ID_TYPE.OPERATOR,\\n        \\\"SML:fallback not operator\\\"\\n      );\\n    }\\n\\n    uint256 newCumulativeSubset;\\n    uint256 oldCumulativeSubset;\\n    for (uint256 i = 0; i < operatorIds.length; ) {\\n      newCumulativeSubset += allowances[i];\\n      oldCumulativeSubset += _approveOperator(DATASTORE, poolId, operatorIds[i], allowances[i]);\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    if (newCumulativeSubset > oldCumulativeSubset) {\\n      DATASTORE.addUint(poolId, rks.totalAllowance, newCumulativeSubset - oldCumulativeSubset);\\n    } else if (newCumulativeSubset < oldCumulativeSubset) {\\n      DATASTORE.subUint(poolId, rks.totalAllowance, oldCumulativeSubset - newCumulativeSubset);\\n    }\\n\\n    _setFallbackOperator(DATASTORE, poolId, fallbackOperator);\\n  }\\n\\n  /**\\n   * @custom:section                           ** POOLING  **\\n   */\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT HELPERS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function _isGeodePackageIsolated(address _packageAddress) internal view returns (bool) {\\n    return IGeodePackage(_packageAddress).isolationMode();\\n  }\\n\\n  /**\\n   * @notice returns wrapped bound liquidity pool. If deployed, if not in isolationMode.\\n   * @dev returns address(0) if no pool or it is under isolation\\n   */\\n  function _getLiquidityPool(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) internal view returns (ILiquidityPool) {\\n    address liqPool = DATASTORE.readAddress(_poolId, rks.liquidityPool);\\n    if (liqPool == address(0)) {\\n      return ILiquidityPool(address(0));\\n    } else if (_isGeodePackageIsolated(liqPool)) {\\n      return ILiquidityPool(address(0));\\n    } else {\\n      return ILiquidityPool(liqPool);\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice returns true if the price is valid:\\n   * - last price syncinc happened less than 24h\\n   * - there has been no oracle reports since the last update\\n   *\\n   * @dev known bug / feature: if there have been no oracle updates,\\n   * * this function will return true.\\n   *\\n   * lastupdate + PRICE_EXPIRY >= block.timestamp ? true\\n   *    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true\\n   *    : false\\n   */\\n  function isPriceValid(\\n    PooledStaking storage self,\\n    uint256 poolId\\n  ) public view returns (bool isValid) {\\n    uint256 lastupdate = self.gETH.priceUpdateTimestamp(poolId);\\n    unchecked {\\n      isValid =\\n        lastupdate + PRICE_EXPIRY >= block.timestamp &&\\n        lastupdate >= self.ORACLE_UPDATE_TIMESTAMP;\\n    }\\n  }\\n\\n  /**\\n   * @notice checks if staking is allowed in given staking pool\\n   * @notice staking is not allowed if:\\n   * 1. Price is not valid\\n   * 2. WithdrawalContract is in Isolation Mode, can have many reasons\\n   */\\n  function isMintingAllowed(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return\\n      (isPriceValid(self, poolId)) &&\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalContract)));\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** DEPOSIT **\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice mints gETH for a given ETH amount, keeps the tokens in Portal.\\n   * @dev fails if minting is not allowed: invalid price, or isolationMode.\\n   */\\n  function _mintgETH(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _ethAmount\\n  ) internal returns (uint256 mintedgETH) {\\n    require(isMintingAllowed(self, DATASTORE, _poolId), \\\"SML:minting is not allowed\\\");\\n\\n    uint256 price = self.gETH.pricePerShare(_poolId);\\n    require(price > 0, \\\"SML:price is zero?\\\");\\n\\n    mintedgETH = (((_ethAmount * self.gETH.denominator()) / price));\\n    self.gETH.mint(address(this), _poolId, mintedgETH, \\\"\\\");\\n    DATASTORE.addUint(_poolId, rks.surplus, _ethAmount);\\n  }\\n\\n  /**\\n   * @notice conducts a buyback using the given liquidity pool\\n   * @param _poolId id of the gETH that will be bought\\n   * @param _maxEthToSell max ETH amount to sell in the liq pool\\n   * @param _deadline TX is expected to revert by Swap.sol if not meet\\n   * @dev this function assumes that pool is deployed by deployLiquidityPool\\n   * as index 0 is ETH and index 1 is gETH!\\n   */\\n  function _buyback(\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId,\\n    uint256 _maxEthToSell,\\n    uint256 _deadline\\n  ) internal returns (uint256 remETH, uint256 boughtgETH) {\\n    ILiquidityPool LP = _getLiquidityPool(DATASTORE, _poolId);\\n    // skip if no liquidity pool is found\\n    if (address(LP) != address(0)) {\\n      uint256 debt = LP.getDebt();\\n      // skip if debt is too low\\n      if (debt > IGNORABLE_DEBT) {\\n        if (_maxEthToSell > debt) {\\n          // if debt is lower, then only sell debt\\n          remETH = _maxEthToSell - debt;\\n        } else {\\n          // if eth is lower, then sell all eth, remETH already 0\\n          debt = _maxEthToSell;\\n        }\\n        // SWAP in LP\\n        boughtgETH = LP.swap{value: debt}(0, 1, debt, 0, _deadline);\\n      } else {\\n        remETH = _maxEthToSell;\\n      }\\n    } else {\\n      remETH = _maxEthToSell;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Allowing users to deposit into a staking pool.\\n   * @notice If a pool is not public only the maintainer can deposit.\\n   * @param poolId id of the staking pool, liquidity pool and gETH to be used.\\n   * @param mingETH liquidity pool parameter\\n   * @param deadline liquidity pool parameter\\n   * @dev an example for minting + buybacks\\n   * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\\n   * * debt  msgValue\\n   * * 100   10  => buyback\\n   * * 100   100 => buyback\\n   * * 10    100 => buyback + mint\\n   * * 1     x   => mint\\n   * * 0.5   x   => mint\\n   * * 0     x   => mint\\n   */\\n  function deposit(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external returns (uint256 boughtgETH, uint256 mintedgETH) {\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(deadline > block.timestamp, \\\"SML:deadline not met\\\");\\n    require(receiver != address(0), \\\"SML:receiver is zero address\\\");\\n\\n    if (isPrivatePool(DATASTORE, poolId)) {\\n      require(isWhitelisted(DATASTORE, poolId, msg.sender), \\\"SML:sender NOT whitelisted\\\");\\n    }\\n\\n    uint256 remEth = msg.value;\\n    (remEth, boughtgETH) = _buyback(DATASTORE, poolId, remEth, deadline);\\n\\n    if (remEth > 0) {\\n      mintedgETH = _mintgETH(self, DATASTORE, poolId, remEth);\\n    }\\n\\n    require(boughtgETH + mintedgETH >= mingETH, \\\"SML:less than minimum\\\");\\n\\n    // send back to user\\n    self.gETH.safeTransferFrom(address(this), receiver, poolId, boughtgETH + mintedgETH, \\\"\\\");\\n\\n    emit Deposit(poolId, boughtgETH, mintedgETH);\\n  }\\n\\n  /**\\n   * @custom:section                           ** VALIDATOR CREATION **\\n   *\\n   * @dev Creation of a Validator takes 2 steps: propose and beacon stake.\\n   * Before entering stake() function, _canStake verifies the eligibility of\\n   * given pubKey that is proposed by an operator with proposeStake function.\\n   * Eligibility is defined by an optimistic alienation, check OracleUtils._alienateValidator() for info.\\n   */\\n\\n  /**\\n   * @custom:visibility -> view\\n   */\\n\\n  /**\\n   * @notice internal function to check if a validator can use the pool funds\\n   *\\n   *  @param _pubkey BLS12-381 public key of the validator\\n   *  @return true if:\\n   *   - pubkey should be proposed\\n   *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\n   *   - validator's index should be covered by VERIFICATION_INDEX. Updated by Telescope.\\n   * Note: while distributing the rewards, if a validator has 1 Eth, it is safe to assume that the balance belongs to Operator\\n   */\\n  function _canStake(\\n    PooledStaking storage self,\\n    bytes calldata _pubkey,\\n    uint256 _verificationIndex\\n  ) internal view returns (bool) {\\n    return\\n      (self.validators[_pubkey].state == VALIDATOR_STATE.PROPOSED) &&\\n      (self.validators[_pubkey].index <= _verificationIndex);\\n  }\\n\\n  /**\\n   * @notice external function to check if a validator can use the pool funds\\n   */\\n  function canStake(\\n    PooledStaking storage self,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    return _canStake(self, pubkey, self.VERIFICATION_INDEX);\\n  }\\n\\n  /**\\n   * @dev -> external\\n   */\\n\\n  /**\\n   * @notice Validator Credentials Proposal function, first step of crating validators.\\n   * * Once a pubKey is proposed and not alienated after verificationIndex updated,\\n   * * it is optimistically allowed to take funds from staking pools.\\n   *\\n   * @param poolId the id of the staking pool\\n   * @param operatorId the id of the Operator whose maintainer calling this function\\n   * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\\n   * @param signatures1 Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's\\n   * maintainer balance\\n   * @param signatures31 Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call\\n   *\\n   * @dev DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator.\\n   * 31 Ether will be staked after verification of oracles. 32 in total.\\n   * 1 ether will be sent back to Node Operator when the finalized deposit is successful.\\n   * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\\n   * @dev ProposeStake requires enough funds within Wallet.\\n   * @dev Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)\\n   */\\n  function proposeStake(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external {\\n    // checks\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n    _authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(\\n      !(_isGeodePackageIsolated(DATASTORE.readAddress(poolId, rks.withdrawalContract))),\\n      \\\"SML:withdrawalContract is isolated\\\"\\n    );\\n\\n    uint256 pkLen = pubkeys.length;\\n\\n    require((pkLen > 0) && (pkLen <= DCL.MAX_DEPOSITS_PER_CALL), \\\"SML:1 - 50 validators\\\");\\n\\n    require(\\n      pkLen == signatures1.length && pkLen == signatures31.length,\\n      \\\"SML:invalid input length\\\"\\n    );\\n\\n    require(\\n      operatorAllowance(self, DATASTORE, poolId, operatorId) >= pkLen,\\n      \\\"SML:insufficient allowance\\\"\\n    );\\n\\n    require(\\n      DATASTORE.readUint(poolId, rks.surplus) >= DCL.DEPOSIT_AMOUNT * pkLen,\\n      \\\"SML:NOT enough surplus\\\"\\n    );\\n\\n    for (uint256 i = 0; i < pkLen; ) {\\n      require(pubkeys[i].length == DCL.PUBKEY_LENGTH, \\\"SML:PUBKEY_LENGTH ERROR\\\");\\n      require(signatures1[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n      require(signatures31[i].length == DCL.SIGNATURE_LENGTH, \\\"SML:SIGNATURE_LENGTH ERROR\\\");\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    ConstantValidatorData memory valData = ConstantValidatorData({\\n      index: uint64(self.VALIDATORS_INDEX + 1),\\n      period: uint64(getValidatorPeriod(DATASTORE, operatorId)),\\n      poolFee: getMaintenanceFee(DATASTORE, poolId),\\n      operatorFee: getMaintenanceFee(DATASTORE, operatorId),\\n      governanceFee: self.GOVERNANCE_FEE,\\n      withdrawalCredential: DATASTORE.readBytes(poolId, rks.withdrawalCredential)\\n    });\\n\\n    for (uint256 i = 0; i < pkLen; ) {\\n      require(\\n        self.validators[pubkeys[i]].state == VALIDATOR_STATE.NONE,\\n        \\\"SML: used or alienated pk\\\"\\n      );\\n\\n      self.validators[pubkeys[i]] = Validator(\\n        VALIDATOR_STATE.PROPOSED,\\n        valData.index + uint64(i),\\n        uint64(block.timestamp),\\n        valData.period,\\n        poolId,\\n        operatorId,\\n        valData.poolFee,\\n        valData.operatorFee,\\n        valData.governanceFee,\\n        signatures31[i]\\n      );\\n\\n      DCL.depositValidator(\\n        pubkeys[i],\\n        valData.withdrawalCredential,\\n        signatures1[i],\\n        DCL.DEPOSIT_AMOUNT_PRESTAKE\\n      );\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    _decreaseWalletBalance(DATASTORE, operatorId, (pkLen * DCL.DEPOSIT_AMOUNT_PRESTAKE));\\n\\n    DATASTORE.subUint(poolId, rks.surplus, (pkLen * DCL.DEPOSIT_AMOUNT));\\n    DATASTORE.addUint(poolId, rks.secured, (pkLen * DCL.DEPOSIT_AMOUNT));\\n\\n    DATASTORE.addUint(poolId, DSML.getKey(operatorId, rks.proposedValidators), pkLen);\\n    DATASTORE.appendBytesArrayBatch(poolId, rks.validators, pubkeys);\\n    DATASTORE.appendBytesArrayBatch(operatorId, rks.validators, pubkeys);\\n\\n    self.VALIDATORS_INDEX += pkLen;\\n\\n    emit StakeProposal(poolId, operatorId, pubkeys);\\n  }\\n\\n  /**\\n   *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\\n   *  1 Eth per successful validator boostraping is returned back to Wallet.\\n   *\\n   *  @param operatorId the id of the Operator whose maintainer calling this function\\n   *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\\n   *\\n   *  @dev To save gas cost, pubkeys should be arranged by poolIds.\\n   *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\\n   *  pk1, pk2, pk3 from pool1\\n   *  pk4, pk5 from pool2\\n   *  pk6 from pool3\\n   *  seperate them in similar groups as much as possible.\\n   *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)\\n   *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\\n   */\\n  function stake(\\n    PooledStaking storage self,\\n    DSML.IsolatedStorage storage DATASTORE,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys\\n  ) external {\\n    _authenticate(DATASTORE, operatorId, false, true, [true, false]);\\n\\n    require(\\n      (pubkeys.length > 0) && (pubkeys.length <= DCL.MAX_DEPOSITS_PER_CALL),\\n      \\\"SML:1 - 50 validators\\\"\\n    );\\n\\n    {\\n      uint256 _verificationIndex = self.VERIFICATION_INDEX;\\n      for (uint256 j = 0; j < pubkeys.length; ) {\\n        require(\\n          _canStake(self, pubkeys[j], _verificationIndex),\\n          \\\"SML:NOT all pubkeys are stakeable\\\"\\n        );\\n\\n        unchecked {\\n          j += 1;\\n        }\\n      }\\n    }\\n\\n    {\\n      bytes32 activeValKey = DSML.getKey(operatorId, rks.activeValidators);\\n      bytes32 proposedValKey = DSML.getKey(operatorId, rks.proposedValidators);\\n      uint256 poolId = self.validators[pubkeys[0]].poolId;\\n      bytes memory withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n\\n      uint256 lastIdChange = 0;\\n      for (uint256 i = 0; i < pubkeys.length; ) {\\n        uint256 newPoolId = self.validators[pubkeys[i]].poolId;\\n        if (poolId != newPoolId) {\\n          uint256 sinceLastIdChange;\\n\\n          unchecked {\\n            sinceLastIdChange = i - lastIdChange;\\n          }\\n\\n          DATASTORE.subUint(poolId, rks.secured, (DCL.DEPOSIT_AMOUNT * (sinceLastIdChange)));\\n          DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n          DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n\\n          lastIdChange = i;\\n          poolId = newPoolId;\\n          withdrawalCredential = DATASTORE.readBytes(poolId, rks.withdrawalCredential);\\n        }\\n\\n        DCL.depositValidator(\\n          pubkeys[i],\\n          withdrawalCredential,\\n          self.validators[pubkeys[i]].signature31,\\n          (DCL.DEPOSIT_AMOUNT - DCL.DEPOSIT_AMOUNT_PRESTAKE)\\n        );\\n\\n        self.validators[pubkeys[i]].state = VALIDATOR_STATE.ACTIVE;\\n\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n      {\\n        uint256 sinceLastIdChange;\\n        unchecked {\\n          sinceLastIdChange = pubkeys.length - lastIdChange;\\n        }\\n        if (sinceLastIdChange > 0) {\\n          DATASTORE.subUint(poolId, rks.secured, DCL.DEPOSIT_AMOUNT * (sinceLastIdChange));\\n          DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\\n          DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\\n        }\\n      }\\n\\n      _increaseWalletBalance(DATASTORE, operatorId, DCL.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length);\\n\\n      emit Stake(pubkeys);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2ed8713f284dbc62e24966bcf2dfea5f76dc2e46ac091b30b52340b48b75b55c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x615f236200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106200023a5760003560e01c80638a58855e116200013a578063b55463a411620000c4578063d53e3971116200008f578063d53e39711462000547578063e89dd310146200056c578063ea976d151462000591578063f9af87ca146200059c578063f9f185f314620005c157600080fd5b8063b55463a41462000503578063b61bf1a5146200050e578063ba6825ef1462000519578063c9f1cdb8146200053057600080fd5b8063a1f0cb831162000105578063a1f0cb8314620004b1578063a87ef4c514620004d6578063addfb0d414620004ed578063b133028814620004f857600080fd5b80638a58855e1462000454578063980426e9146200046b5780639d22eed414620004755780639d55e0f6146200048c57600080fd5b806341675ad011620001c8578063672bbf951162000193578063672bbf9514620003e757806367601a2d14620003fe57806368d1ee23146200040857806376b05054146200042d57806377c1eaea146200043d57600080fd5b806341675ad0146200037a57806349937056146200039f578063527e479014620003ab5780636377f9a814620003d057600080fd5b80631aa2dfc411620002095780631aa2dfc414620002d05780631e12742014620002f5578063286ff578146200031a5780633aeaeb1f146200035557600080fd5b806306be4278146200023f57806306d8fb23146200026b57806312ed4277146200028457806317bc130c14620002ab575b600080fd5b620002566200025036600462004c9d565b620005e6565b60405190151581526020015b60405180910390f35b620002756200068e565b60405190815260200162000262565b8180156200029157600080fd5b50620002a9620002a336600462004e8e565b620006b1565b005b818015620002b857600080fd5b50620002a9620002ca36600462004dc6565b62000845565b818015620002dd57600080fd5b50620002a9620002ef36600462005044565b62000992565b8180156200030257600080fd5b50620002756200031436600462004f7b565b620012ce565b8180156200032757600080fd5b506200033f6200033936600462005110565b620016f8565b6040805192835260208301919091520162000262565b8180156200036257600080fd5b50620002a96200037436600462004df3565b6200196c565b8180156200038757600080fd5b50620002a96200039936600462004dc6565b62001ae0565b620002756303c2670081565b818015620003b857600080fd5b50620002a9620003ca36600462004ee4565b62001bef565b62000256620003e136600462004cc0565b62002134565b62000256620003f836600462004e3f565b62002263565b6200027562002277565b8180156200041557600080fd5b50620002a96200042736600462004d8a565b6200228b565b62000275670de0b6b3a764000081565b620002756200044e36600462004c9d565b62002398565b620002566200046536600462004dc6565b62002409565b620002756200244e565b620002566200048636600462004c9d565b62002462565b8180156200049957600080fd5b50620002a9620004ab36600462004dc6565b62002489565b818015620004be57600080fd5b50620002a9620004d036600462004cc0565b620025d3565b62000275620004e736600462004c9d565b620026fd565b62000275620f424181565b620002756276a70081565b620002756203f48081565b620002756201518081565b620002566200052a36600462004c9d565b6200274b565b620002756200054136600462004f48565b6200276d565b8180156200055457600080fd5b50620002566200056636600462004c9d565b6200294c565b8180156200057957600080fd5b50620002a96200058b36600462004cf8565b6200298c565b620002756212750081565b818015620005a957600080fd5b5062000256620005bb36600462004dc6565b62002c9a565b818015620005ce57600080fd5b50620002a9620005e036600462004cc0565b62002df4565b815460405163908d67ed60e01b81526004810183905260009182916001600160a01b039091169063908d67ed9060240160206040518083038186803b1580156200062f57600080fd5b505afa15801562000644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066a919062004c83565b9050426201518082011015801562000686575083600501548110155b949350505050565b6064620006a26402540be400600a62005577565b620006ae919062005560565b81565b600260ff1684600b018383604051620006cc9291906200527a565b908152604051908190036020019020546001600160401b031614620007385760405162461bcd60e51b815260206004820181905260248201527f534d4c3a76616c696461746f72206973206e657665722061637469766174656460448201526064015b60405180910390fd5b83600b0182826040516200074e9291906200527a565b908152604051908190036020018120546001600160401b03600160c01b9091041690600b8601906200078490859085906200527a565b90815260405190819003602001902054620007b191906001600160401b03600160801b9091041662005532565b6001600160401b031642116200080a5760405162461bcd60e51b815260206004820152601760248201527f534d4c3a76616c696461746f722069732061637469766500000000000000000060448201526064016200072f565b6200083f8385600b018484604051620008259291906200527a565b908152602001604051809103902060020154848462002e95565b50505050565b6040805180820190915260018082526000602083018190526200086e9286928692909162002f38565b6200088a83836b0e0cae4d2dec8a6eed2e8c6d60a31b620031ab565b4211620008d45760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016200072f565b62000911826a1c1c9a5bdc94195c9a5bd960aa1b6200090786836e1d985b1a59185d1bdc94195c9a5bd9608a1b620031ab565b86929190620031d7565b62000935826b0e0cae4d2dec8a6eed2e8c6d60a31b620009076203f4804262005517565b6200094283838362003201565b817f876113dea338eedc856851b937db5d25520a6013d424528e69b20a166879e35a82620009746203f4804262005517565b604080519283526020830191909152015b60405180910390a2505050565b604080518082019091526001808252600060208301819052620009ba928c928b929162002f38565b60408051808201909152600080825260016020830152620009e1918b918b91819062002f38565b62000a0d62000a078a8a711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b62003302565b1562000a675760405162461bcd60e51b815260206004820152602260248201527f534d4c3a7769746864726177616c436f6e74726163742069732069736f6c6174604482015261195960f21b60648201526084016200072f565b84801580159062000a79575060328111155b62000abf5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016200072f565b808414801562000ace57508082145b62000b1c5760405162461bcd60e51b815260206004820152601860248201527f534d4c3a696e76616c696420696e707574206c656e677468000000000000000060448201526064016200072f565b8062000b2b8c8c8c8c6200276d565b101562000b7b5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a696e73756666696369656e7420616c6c6f77616e636500000000000060448201526064016200072f565b62000b90816801bc16d674ec80000062005577565b62000ba78b8b66737572706c757360c81b620031ab565b101562000bf05760405162461bcd60e51b8152602060048201526016602482015275534d4c3a4e4f5420656e6f75676820737572706c757360501b60448201526064016200072f565b60005b8181101562000d7957603088888381811062000c135762000c136200577a565b905060200281019062000c2791906200549b565b90501462000c785760405162461bcd60e51b815260206004820152601760248201527f534d4c3a5055424b45595f4c454e475448204552524f5200000000000000000060448201526064016200072f565b606086868381811062000c8f5762000c8f6200577a565b905060200281019062000ca391906200549b565b90501462000cf45760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016200072f565b606084848381811062000d0b5762000d0b6200577a565b905060200281019062000d1f91906200549b565b90501462000d705760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016200072f565b60010162000bf3565b5060006040518060c001604052808d60020154600162000d9a919062005517565b6001600160401b0316815260200162000db48d8c62002398565b6001600160401b0316815260200162000dce8d8d620026fd565b815260200162000ddf8d8c620026fd565b815260088e0154602082015260400162000e128d8d731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b62003379565b9052905060005b828110156200116e576000600b8e018a8a8481811062000e3d5762000e3d6200577a565b905060200281019062000e5191906200549b565b60405162000e619291906200527a565b908152604051908190036020019020546001600160401b03161462000ec95760405162461bcd60e51b815260206004820152601960248201527f534d4c3a2075736564206f7220616c69656e6174656420706b0000000000000060448201526064016200072f565b604080516101408101909152600181528251602082019062000eed90849062005532565b6001600160401b03168152602001426001600160401b0316815260200183602001516001600160401b031681526020018c81526020018b815260200183604001518152602001836060015181526020018360800151815260200186868481811062000f5c5762000f5c6200577a565b905060200281019062000f7091906200549b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250600b8e018a8a8481811062000fbf5762000fbf6200577a565b905060200281019062000fd391906200549b565b60405162000fe39291906200527a565b9081526040805191829003602090810190922083518154858501519386015160608701516001600160401b03908116600160c01b026001600160c01b03928216600160801b02929092166fffffffffffffffffffffffffffffffff968216600160401b026fffffffffffffffffffffffffffffffff1990941691909416179190911793909316179190911781556080830151600182015560a0830151600282015560c0830151600382015560e08301516004820155610100830151600582015561012083015180519192620010c19260068501929091019062004ae5565b5090505062001165898983818110620010de57620010de6200577a565b9050602002810190620010f291906200549b565b8460a001518a8a868181106200110c576200110c6200577a565b90506020028101906200112091906200549b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250670de0b6b3a7640000925062003435915050565b60010162000e19565b506200118f8b8a62001189670de0b6b3a76400008662005577565b62003500565b620011be8a66737572706c757360c81b620011b46801bc16d674ec8000008662005577565b8e92919062003579565b620011ed8a661cd958dd5c995960ca1b620011e36801bc16d674ec8000008662005577565b8e929190620035b6565b6200121d8a620012138b7170726f706f73656456616c696461746f727360701b620035e8565b8d919085620035b6565b620012468a6976616c696461746f727360b01b6200123c8a8c620055b3565b8e92919062003614565b62001265896976616c696461746f727360b01b6200123c8a8c620055b3565b818c60020160008282546200127b919062005517565b90915550506040517f4fa0073e48dccfe9a97fe60b530f2f680ffb8b7621e547381f187e12306fb2b790620012b8908c908c908c908c906200546f565b60405180910390a1505050505050505050505050565b60006801bc16d674ec8000003414620013365760405162461bcd60e51b815260206004820152602360248201527f534d4c3a6e65656420312076616c696461746f7220776f727468206f662066756044820152626e647360e81b60648201526084016200072f565b6200137a86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060059250620036c6915050565b9050620013958a82681a5b9a5d1a585d195960ba1b620031ab565b15620013dc5760405162461bcd60e51b815260206004820152601560248201527414d3530e985b1c9958591e481a5b9a5d1a585d1959605a1b60448201526064016200072f565b633b9aca008111620014285760405162461bcd60e51b815260206004820152601460248201527314d3530e95dbddc848131bddc81c1bdbdb081a5960621b60448201526064016200072f565b620014428a82681a5b9a5d1a585d195960ba1b42620031d7565b620014588a82635459504560e01b6005620031d7565b620014738a826921a7a72a2927a62622a960b11b33620036fc565b620014d781634e414d4560e01b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d62003747909392919063ffffffff16565b6005600090815260208b8152604082208054600181018255908352912001819055620015058a82896200377d565b620015128a828b6200382c565b6200151f8b8b83620038b1565b6200152e602083018362004c43565b156200154257620015428a8260016200228b565b62001554604083016020840162004c43565b156200159f576200159f8b8b838b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620039c892505050565b620015b1606083016040840162004c43565b15620015c457620015c48b8b8362002489565b8a546040516322af599760e01b8152670de0b6b3a76400006004820152602481018390526001600160a01b03909116906322af599790604401600060405180830381600087803b1580156200161857600080fd5b505af11580156200162d573d6000803e3d6000fd5b505050506000620016418c8c843462003b2b565b8c54604051637921219560e11b81529192506001600160a01b03169063f242432a9062001679903090339087908790600401620052cc565b600060405180830381600087803b1580156200169457600080fd5b505af1158015620016a9573d6000803e3d6000fd5b5050505060057f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb83604051620016e191815260200190565b60405180910390a2509a9950505050505050505050565b604080518082019091526000808252600160208301529081906200172490889088908490819062002f38565b4284116200176c5760405162461bcd60e51b815260206004820152601460248201527314d3530e991958591b1a5b99481b9bdd081b595d60621b60448201526064016200072f565b6001600160a01b038316620017c45760405162461bcd60e51b815260206004820152601c60248201527f534d4c3a7265636569766572206973207a65726f20616464726573730000000060448201526064016200072f565b620017d0878762002462565b156200183157620017e387873362002134565b620018315760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a73656e646572204e4f542077686974656c697374656400000000000060448201526064016200072f565b34620018408888838862003d87565b9350905080156200185c57620018598989898462003b2b565b91505b8562001869838562005517565b1015620018b15760405162461bcd60e51b8152602060048201526015602482015274534d4c3a6c657373207468616e206d696e696d756d60581b60448201526064016200072f565b88546001600160a01b031663f242432a30868a620018d0878962005517565b6040518563ffffffff1660e01b8152600401620018f19493929190620052cc565b600060405180830381600087803b1580156200190c57600080fd5b505af115801562001921573d6000803e3d6000fd5b505060408051868152602081018690528a93507f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec977092500160405180910390a250965096945050505050565b620019858585681a5b9a5d1a585d195960ba1b620031ab565b15620019cc5760405162461bcd60e51b815260206004820152601560248201527414d3530e985b1c9958591e481a5b9a5d1a585d1959605a1b60448201526064016200072f565b6004620019e28686635459504560e01b620031ab565b1462001a025760405162461bcd60e51b81526004016200072f9062005393565b62001a1c85856921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b03161462001a4f5760405162461bcd60e51b81526004016200072f90620053c1565b62001a698585681a5b9a5d1a585d195960ba1b42620031d7565b62001a768585856200382c565b62001a8385858462003201565b62001a908585836200377d565b62001a9d85853462003f11565b60047f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb8560405162001ad191815260200190565b60405180910390a25050505050565b6040805180820190915260018082526020820181905262001b08918591859160009062002f38565b62001b218383680cccacaa6eed2e8c6d60bb1b620031ab565b421162001b6b5760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016200072f565b62001b8f82677072696f7246656560c01b6200090786836266656560e81b620031ab565b62001bb082680cccacaa6eed2e8c6d60bb1b620009076203f4804262005517565b62001bbd8383836200382c565b817f331610f5071297e919aff9d24ba73d5c09c631f7c63a47096d051b7ab429c8bf82620009746203f4804262005517565b60408051808201909152600180825260006020830181905262001c1792879287929162002f38565b801580159062001c28575060328111155b62001c6e5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016200072f565b600385015460005b8281101562001d155762001cb48785858481811062001c995762001c996200577a565b905060200281019062001cad91906200549b565b8562003f28565b62001d0c5760405162461bcd60e51b815260206004820152602160248201527f534d4c3a4e4f5420616c6c207075626b65797320617265207374616b6561626c6044820152606560f81b60648201526084016200072f565b60010162001c76565b5050600062001d38846f61637469766556616c696461746f727360801b620035e8565b9050600062001d5d857170726f706f73656456616c696461746f727360701b620035e8565b9050600087600b018585600081811062001d7b5762001d7b6200577a565b905060200281019062001d8f91906200549b565b60405162001d9f9291906200527a565b908152604051908190036020019020600101549050600062001dda8883731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b62003379565b90506000805b86811015620020755760008b600b0189898481811062001e045762001e046200577a565b905060200281019062001e1891906200549b565b60405162001e289291906200527a565b908152602001604051809103902060010154905080851462001eca5782820362001e7686661cd958dd5c995960ca1b62001e6c846801bc16d674ec80000062005577565b8f92919062003579565b62001e848c87898462003579565b62001e928c878a84620035b6565b82935081955062001ec686731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b8e620033799092919063ffffffff16565b9450505b62001ffc89898481811062001ee35762001ee36200577a565b905060200281019062001ef791906200549b565b868f600b018d8d8881811062001f115762001f116200577a565b905060200281019062001f2591906200549b565b60405162001f359291906200527a565b9081526020016040518091039020600601805462001f5390620056cc565b80601f016020809104026020016040519081016040528092919081815260200182805462001f8190620056cc565b801562001fd25780601f1062001fa65761010080835404028352916020019162001fd2565b820191906000526020600020905b81548152906001019060200180831162001fb457829003601f168201915b5050505050670de0b6b3a76400006801bc16d674ec80000062001ff6919062005599565b62003435565b6002600b8d018a8a858181106200201757620020176200577a565b90506020028101906200202b91906200549b565b6040516200203b9291906200527a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790555060010162001de0565b50808603868214620020cc57620020b084661cd958dd5c995960ca1b620020a6846801bc16d674ec80000062005577565b8d92919062003579565b620020be8a85878462003579565b620020cc8a858884620035b6565b50620020ed8989620020e789670de0b6b3a764000062005577565b62003f11565b7ff3bc9a49558b2409ef29bf09ea870b1478948cf4a349dfaa48d23cd15fb200a187876040516200212092919062005304565b60405180910390a150505050505050505050565b60006001600160a01b0382166200215a85856921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316141562002173575060016200225c565b60006200218e8585681dda1a5d195b1a5cdd60ba1b620032cc565b90506001600160a01b038116620021db5760405162461bcd60e51b815260206004820152601060248201526f14d3530e9b9bc81dda1a5d195b1a5cdd60821b60448201526064016200072f565b60405163babcc53960e01b81526001600160a01b03848116600483015282169063babcc5399060240160206040518083038186803b1580156200221d57600080fd5b505afa15801562002232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002258919062004c63565b9150505b9392505050565b600062000686848484876003015462003f28565b6064620006a26402540be400605062005577565b604080518082019091526000808252600160208301819052620022b392869286929162002f38565b620022bf838362002462565b15158115151415620023065760405162461bcd60e51b815260206004820152600f60248201526e14d3530e985b1c9958591e481cd95d608a1b60448201526064016200072f565b62002338826a1c1c9a5d985d19541bdbdb60aa1b83620023285760006200232b565b60015b8692919060ff16620031d7565b806200235957620023598383681dda1a5d195b1a5cdd60ba1b6000620036fc565b6040805183815282151560208201527f86ba6fb9ba1b2952b69896940c9d8a35e8daefe421f499e41e43ee0e72330e1a910160405180910390a1505050565b600042620023b784846b0e0cae4d2dec8a6eed2e8c6d60a31b620031ab565b1115620023e157620023d983836a1c1c9a5bdc94195c9a5bd960aa1b620031ab565b905062002403565b6200240083836e1d985b1a59185d1bdc94195c9a5bd9608a1b620031ab565b90505b92915050565b6000620024178483620005e6565b80156200068657506200244562000a078484711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b15949350505050565b6064620006a26402540be400600562005577565b60006200247f83836a1c1c9a5d985d19541bdbdb60aa1b620031ab565b6001149392505050565b604080518082019091526000808252600160208301819052620024b192859285929162002f38565b6000620024d083836c1b1a5c5d5a591a5d1e541bdbdb609a1b620032cc565b6001600160a01b0316146200251f5760405162461bcd60e51b815260206004820152601460248201527314d3530e985b1c9958591e4819195c1b1bde595960621b60448201526064016200072f565b6000620025458484846127256200253f8383634e414d4560e01b62003379565b62003fab565b90506200256583836c1b1a5c5d5a591a5d1e541bdbdb609a1b84620036fc565b835460405163a22cb46560e01b81526001600160a01b038381166004830152600160248301529091169063a22cb465906044015b600060405180830381600087803b158015620025b457600080fd5b505af1158015620025c9573d6000803e3d6000fd5b5050505050505050565b620025ec8383681a5b9a5d1a585d195960ba1b620031ab565b6200263a5760405162461bcd60e51b815260206004820152601760248201527f534d4c3a4944206973206e6f7420696e6974696174656400000000000000000060448201526064016200072f565b6200265483836921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b031614620026875760405162461bcd60e51b81526004016200072f90620053c1565b60006200269d8484635459504560e01b620031ab565b90506004811480620026af5750600581145b620026f05760405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016200072f565b6200083f8484846200377d565b600042620027198484680cccacaa6eed2e8c6d60bb1b620031ab565b11156200273857620023d98383677072696f7246656560c01b620031ab565b6200240083836266656560e81b620031ab565b60006200276483836672656c6561736560c81b620031ab565b42109392505050565b6000806200278a85846976616c696461746f727360b01b620031ab565b6004870154909150808210620027a65760009250505062000686565b620027b2828262005599565b925050620027d7905084846f3330b6363130b1b5a7b832b930ba37b960811b620031ab565b8214156200287a576000620027fb85856976616c696461746f727360b01b620031ab565b905060006200281d86866d746f74616c416c6c6f77616e636560901b620031ab565b905080158062002869575060646200283c6402540be400605062005577565b62002848919062005560565b816200285a6402540be4008562005577565b62002866919062005560565b10155b156200287757505062000686565b50505b6000620028a284620028998568616c6c6f77616e636560b81b620035e8565b879190620031ab565b90506000620028d385620028ca866f61637469766556616c696461746f727360801b620035e8565b889190620031ab565b6200290286620028f9877170726f706f73656456616c696461746f727360701b620035e8565b899190620031ab565b6200290e919062005517565b9050818110620029245760009250505062000686565b600062002932828462005599565b90508084111562002941578093505b505050949350505050565b60408051808201909152600180825260208201526000906200297690849084908490819062002f38565b6200298383833462003f11565b50600192915050565b604080518082019091526000808252600160208301819052620029b5928a928a92909162002f38565b83821462002a065760405162461bcd60e51b815260206004820152601b60248201527f534d4c3a616c6c6f77616e6365732073686f756c64206d61746368000000000060448201526064016200072f565b60005b8481101562002b0d57600462002a4687878481811062002a2d5762002a2d6200577a565b8c92602090910201359050635459504560e01b620031ab565b1462002a8b5760405162461bcd60e51b815260206004820152601360248201527229a6a61d34b2103737ba1037b832b930ba37b960691b60448201526064016200072f565b620f424184848381811062002aa45762002aa46200577a565b905060200201351062002b045760405162461bcd60e51b815260206004820152602160248201527f534d4c3a3e204d41585f414c4c4f57414e43452c207365742066616c6c6261636044820152606b60f81b60648201526084016200072f565b60010162002a09565b50801562002b7a57600462002b2b8883635459504560e01b620031ab565b1462002b7a5760405162461bcd60e51b815260206004820152601960248201527f534d4c3a66616c6c6261636b206e6f74206f70657261746f720000000000000060448201526064016200072f565b60008060005b8681101562002c0f5785858281811062002b9e5762002b9e6200577a565b905060200201358362002bb2919062005517565b925062002bf88a8a8a8a8581811062002bcf5762002bcf6200577a565b9050602002013589898681811062002beb5762002beb6200577a565b90506020020135620040cc565b62002c04908362005517565b915060010162002b80565b508082111562002c4c5762002c46886d746f74616c416c6c6f77616e636560901b62002c3c848662005599565b8c929190620035b6565b62002c82565b8082101562002c825762002c82886d746f74616c416c6c6f77616e636560901b62002c78858562005599565b8c92919062003579565b62002c8f8989856200414a565b505050505050505050565b6040805180820190915260018082526020820181905260009162002cc5918691869190859062002f38565b8147101562002d215760405162461bcd60e51b815260206004820152602160248201527f534d4c3a696e73756666696369656e7420636f6e74726163742062616c616e636044820152606560f81b60648201526084016200072f565b62002d2e84848462003500565b600062002d4a85856921a7a72a2927a62622a960b11b620032cc565b9050806001600160a01b03168360405160006040518083038185875af1925050503d806000811462002d99576040519150601f19603f3d011682016040523d82523d6000602084013e62002d9e565b606091505b5050809250508162002dec5760405162461bcd60e51b81526020600482015260166024820152750a69a98748cc2d2d8cac840e8de40e6cadcc8408aa8960531b60448201526064016200072f565b509392505050565b60408051808201909152600080825260016020830181905262002e1c92869286929162002f38565b62002e28838362002462565b62002e765760405162461bcd60e51b815260206004820152601860248201527f534d4c3a6d757374206265207072697661746520706f6f6c000000000000000060448201526064016200072f565b62002e908383681dda1a5d195b1a5cdd60ba1b84620036fc565b505050565b604080518082019091526001815260006020820181905262002ebd9186918691819062002f38565b62002ee6836672656c6561736560c81b62002edc621275004262005517565b87929190620031d7565b827f6cc873968ba5c560db266aea333bf3b836de0031c3be1d57c3ab7618880a0452838362002f19621275004262005517565b60405162002f2a939291906200536d565b60405180910390a250505050565b62002f518585681a5b9a5d1a585d195960ba1b620031ab565b62002f935760405162461bcd60e51b815260206004820152601160248201527014d3530e9b9bdd081a5b9a5d1a585d1959607a1b60448201526064016200072f565b600062002fa98686635459504560e01b620031ab565b905060048114156200305a57815162002fd65760405162461bcd60e51b81526004016200072f9062005393565b838062002fe05750825b15620030545762002ff286866200274b565b15620030545760405162461bcd60e51b815260206004820152602a60248201527f534d4c3a707269736f6e65642c2067657420696e20746f756368207769746820604482015269676f7665726e616e636560b01b60648201526084016200072f565b620030c4565b600581141562003088576020820151620030545760405162461bcd60e51b81526004016200072f9062005393565b60405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016200072f565b82156200314e57620030e586866936b0b4b73a30b4b732b960b11b620032cc565b6001600160a01b0316336001600160a01b031614620031475760405162461bcd60e51b815260206004820152601960248201527f534d4c3a73656e646572204e4f54206d61696e7461696e65720000000000000060448201526064016200072f565b50620031a4565b8315620031a2576200316f86866921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b031614620031475760405162461bcd60e51b81526004016200072f90620053c1565b505b5050505050565b6000836001016000620031bf8585620035e8565b81526020019081526020016000205490509392505050565b80846001016000620031ea8686620035e8565b815260208101919091526040016000205550505050565b6276a700811015620032565760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3c204d494e5f56414c494441544f525f504552494f4400000000000060448201526064016200072f565b6303c26700811115620032ac5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3e204d41585f56414c494441544f525f504552494f4400000000000060448201526064016200072f565b62002e9083836e1d985b1a59185d1bdc94195c9a5bd9608a1b84620031d7565b6000836003016000620032e08585620035e8565b81526020810191909152604001600020546001600160a01b0316949350505050565b6000816001600160a01b0316638650c0726040518163ffffffff1660e01b815260040160206040518083038186803b1580156200333e57600080fd5b505afa15801562003353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002403919062004c63565b60608360020160006200338d8585620035e8565b81526020019081526020016000208054620033a890620056cc565b80601f0160208091040260200160405190810160405280929190818152602001828054620033d690620056cc565b8015620034275780601f10620033fb5761010080835404028352916020019162003427565b820191906000526020600020905b8154815290600101906020018083116200340957829003601f168201915b505050505090509392505050565b73ff50ed3d0ec03ac01d4c79aad74928bff48a7b2b6001600160a01b031663228951188287878787620034a38c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508c90506200419e565b6040518763ffffffff1660e01b8152600401620034c59594939291906200531a565b6000604051808303818588803b158015620034df57600080fd5b505af1158015620034f4573d6000803e3d6000fd5b50505050505050505050565b80620035178484651dd85b1b195d60d21b620031ab565b1015620035675760405162461bcd60e51b815260206004820152601f60248201527f534d4c3a696e73756666696369656e742077616c6c65742062616c616e63650060448201526064016200072f565b62002e908383651dd85b1b195d60d21b845b808460010160006200358c8686620035e8565b81526020019081526020016000206000828254620035ab919062005599565b909155505050505050565b80846001016000620035c98686620035e8565b81526020019081526020016000206000828254620035ab919062005517565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000620036228484620035e8565b60008181526001870160205260408120549192505b8351811015620036ab578381815181106200365657620036566200577a565b60200260200101518760020160006200367e8580620036759062005703565b965087620035e8565b81526020019081526020016000209080519060200190620036a192919062004ae5565b5060010162003637565b50600091825260019095016020526040902093909355505050565b60008282604051602001620036dd929190620052a8565b60408051601f1981840301815291905280516020909101209392505050565b808460030160006200370f8686620035e8565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b808460020160006200375a8686620035e8565b81526020019081526020016000209080519060200190620031a492919062004ae5565b6001600160a01b038116620037d55760405162461bcd60e51b815260206004820152601e60248201527f534d4c3a6d61696e7461696e65722063616e204e4f54206265207a65726f000060448201526064016200072f565b620037f083836936b0b4b73a30b4b732b960b11b84620036fc565b6040516001600160a01b038216815282907f72774bc96991002276ea2f17557bc24e67733a3dcf2e8b390d38921daab1ab319060200162000985565b6064620038406402540be400600a62005577565b6200384c919062005560565b8111156200389d5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3e204d41585f4d41494e54454e414e43455f4645452000000000000060448201526064016200072f565b62002e9083836266656560e81b84620031d7565b6000620038d58383711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b6001600160a01b031614620039245760405162461bcd60e51b815260206004820152601460248201527314d3530e985b1c9958591e4819195c1b1bde595960621b60448201526064016200072f565b60006200394684848461271b6040518060200160405280600081525062003fab565b90506200396b8383711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b84620036fc565b6200083f82731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b620039be84604080516001600160a01b0392909216600160f81b1760208084019190915281518084039091018152918101905290565b8692919062003747565b60008211620039d657600080fd5b614e2b6000908152600d86016020908152604080832085845290915290205460ff1662003a3d5760405162461bcd60e51b8152602060048201526014602482015273534d4c3a6e6f742061206d6964646c657761726560601b60448201526064016200072f565b600062003a6362003a5d86856921a7a72a2927a62622a960b11b620032cc565b620045c3565b8654604051637104db2360e11b81529192506001600160a01b038084169263e209b6469262003a9c9289929116908790600401620053f8565b600060405180830381600087803b15801562003ab757600080fd5b505af115801562003acc573d6000803e3d6000fd5b5050505062003ade868686846200465f565b8554604051630492f6e160e01b815260048101869052600160248201526001600160a01b0390911690630492f6e190604401600060405180830381600087803b158015620034df57600080fd5b600062003b3a85858562002409565b62003b885760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a6d696e74696e67206973206e6f7420616c6c6f77656400000000000060448201526064016200072f565b845460405163f759cc3b60e01b8152600481018590526000916001600160a01b03169063f759cc3b9060240160206040518083038186803b15801562003bcd57600080fd5b505afa15801562003be2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003c08919062004c83565b90506000811162003c515760405162461bcd60e51b8152602060048201526012602482015271534d4c3a7072696365206973207a65726f3f60701b60448201526064016200072f565b8554604080516396ce079560e01b8152905183926001600160a01b0316916396ce0795916004808301926020929190829003018186803b15801562003c9557600080fd5b505afa15801562003caa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cd0919062004c83565b62003cdc908562005577565b62003ce8919062005560565b865460405163731133e960e01b8152306004820152602481018790526044810183905260806064820152600060848201529193506001600160a01b03169063731133e99060a401600060405180830381600087803b15801562003d4a57600080fd5b505af115801562003d5f573d6000803e3d6000fd5b5062003d7e925087915086905066737572706c757360c81b86620035b6565b50949350505050565b600080600062003d9887876200478a565b90506001600160a01b0381161562003f03576000816001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562003de657600080fd5b505afa15801562003dfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e21919062004c83565b9050670de0b6b3a764000081111562003ef8578086111562003e515762003e49818762005599565b935062003e54565b50845b6040516348b4aac360e11b815260006004820181905260016024830152604482018390526064820152608481018690526001600160a01b03831690639169558690839060a4016020604051808303818588803b15801562003eb457600080fd5b505af115801562003ec9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062003ef0919062004c83565b925062003efc565b8593505b5062003f07565b8492505b5094509492505050565b62002e908383651dd85b1b195d60d21b84620035b6565b6000600160ff1685600b01858560405162003f459291906200527a565b908152604051908190036020019020546001600160401b031614801562003fa257508185600b01858560405162003f7e9291906200527a565b908152604051908190036020019020546001600160401b03600160401b9091041611155b95945050505050565b6000828152600c860160205260408120548062003fc757600080fd5b62003fe186826921a7a72a2927a62622a960b11b620032cc565b60405162003fef9062004b74565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200402b573d6000803e3d6000fd5b5091506001600160a01b038216639934b281866200405889826921a7a72a2927a62622a960b11b620032cc565b6200406c8a86634e414d4560e01b62003379565b876040518563ffffffff1660e01b81526004016200408e949392919062005424565b600060405180830381600087803b158015620040a957600080fd5b505af1158015620040be573d6000803e3d6000fd5b505050505095945050505050565b600080620040e78468616c6c6f77616e636560b81b620035e8565b9050620040f6868683620031ab565b91506200410686868386620031d7565b604080518681526020810185905285917f22d413fb5bc865837d8577bccf9aa8b2de36e0481c69792daac701c2edadebe3910160405180910390a250949350505050565b6200416b83836f3330b6363130b1b5a7b832b930ba37b960811b84620031d7565b807fde64ceff4e356721296ea0a08a5432c5e3f243f08dd88098a025edfeea0eecb8836040516200098591815260200190565b6000670de0b6b3a7640000821015620042095760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b60648201526084016200072f565b62004219633b9aca008362005721565b15620042845760405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b60648201526084016200072f565b600062004296633b9aca008462005560565b905060006002620042a788620047e2565b604051620042b691906200528a565b602060405180830381855afa158015620042d4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620042f9919062004c83565b905060006002806200430f88600060406200487e565b6040516200431e91906200528a565b602060405180830381855afa1580156200433c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062004361919062004c83565b600262004387620043818a60406200437b81606062005599565b6200487e565b620047e2565b6040516200439691906200528a565b602060405180830381855afa158015620043b4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620043d9919062004c83565b60408051602081019390935282015260600160408051601f198184030181529082905262004407916200528a565b602060405180830381855afa15801562004425573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200444a919062004c83565b90506000600280848a6040516020016200446692919062005252565b60408051601f198184030181529082905262004482916200528a565b602060405180830381855afa158015620044a0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620044c5919062004c83565b6002620044d28762004996565b604080516020810192909252810186905260600160408051601f198184030181529082905262004502916200528a565b602060405180830381855afa15801562004520573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062004545919062004c83565b60408051602081019390935282015260600160408051601f198184030181529082905262004573916200528a565b602060405180830381855afa15801562004591573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620045b6919062004c83565b9998505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166200465a5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016200072f565b919050565b8354604051634d280a5560e01b81526001600160a01b0383811660048301526024820185905290911690634d280a559060440160206040518083038186803b158015620046ab57600080fd5b505afa158015620046c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620046e6919062004c63565b156200472e5760405162461bcd60e51b8152602060048201526016602482015275534d4c3a616c7265616479206d6964646c657761726560501b60448201526064016200072f565b6200474a83836a6d6964646c65776172657360a81b84620049e3565b8354604051632895f3cb60e11b81526001600160a01b03838116600483015260248201859052600160448301529091169063512be7969060640162002599565b600080620047aa84846c1b1a5c5d5a591a5d1e541bdbdb609a1b620032cc565b90506001600160a01b038116620047c657600091505062002403565b620047d18162003302565b15620023d957600091505062002403565b60606020825110158015620047f957506040825111155b62004808576200480862005738565b81516040141562004817575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020141562004856576200225c838262004a64565b6200225c8362004872836000875160406200437b919062005599565b62004a64565b50919050565b6060816200488e81601f62005517565b1015620048cf5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200072f565b620048db828462005517565b84511015620049215760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200072f565b60608215801562004942576040519150600082526020820160405262003d7e565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200497d57805183526020928301920162004963565b5050858452601f01601f19166040525050949350505050565b600081815b6008811015620049c857600892831b60ff831617929190911c90620049c08162005703565b90506200499b565b508015620049da57620049da62005738565b5060c01b919050565b6000620049f18484620035e8565b600081815260018701602052604081208054929350849260038901929162004a2b91908362004a208362005703565b9190505585620035e8565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b6060806040519050835180825260208201818101602087015b8183101562004a9757805183526020928301920162004a7d565b50855184518101855292509050808201602086015b8183101562004ac657805183526020928301920162004aac565b508651929092011591909101601f01601f191660405250905092915050565b82805462004af390620056cc565b90600052602060002090601f01602090048101928262004b17576000855562004b62565b82601f1062004b3257805160ff191683800117855562004b62565b8280016001018555821562004b62579182015b8281111562004b6257825182559160200191906001019062004b45565b5062004b7092915062004b82565b5090565b61073580620057b983390190565b5b8082111562004b70576000815560010162004b83565b80356001600160a01b03811681146200465a57600080fd5b60008083601f84011262004bc457600080fd5b5081356001600160401b0381111562004bdc57600080fd5b6020830191508360208260051b850101111562004bf857600080fd5b9250929050565b60008083601f84011262004c1257600080fd5b5081356001600160401b0381111562004c2a57600080fd5b60208301915083602082850101111562004bf857600080fd5b60006020828403121562004c5657600080fd5b81356200225c81620057a6565b60006020828403121562004c7657600080fd5b81516200225c81620057a6565b60006020828403121562004c9657600080fd5b5051919050565b6000806040838503121562004cb157600080fd5b50508035926020909101359150565b60008060006060848603121562004cd657600080fd5b833592506020840135915062004cef6040850162004b99565b90509250925092565b600080600080600080600060a0888a03121562004d1457600080fd5b873596506020880135955060408801356001600160401b038082111562004d3a57600080fd5b62004d488b838c0162004bb1565b909750955060608a013591508082111562004d6257600080fd5b5062004d718a828b0162004bb1565b989b979a50959894979596608090950135949350505050565b60008060006060848603121562004da057600080fd5b8335925060208401359150604084013562004dbb81620057a6565b809150509250925092565b60008060006060848603121562004ddc57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121562004e0c57600080fd5b8535945060208601359350604086013592506060860135915062004e336080870162004b99565b90509295509295909350565b60008060006040848603121562004e5557600080fd5b8335925060208401356001600160401b0381111562004e7357600080fd5b62004e818682870162004bff565b9497909650939450505050565b6000806000806060858703121562004ea557600080fd5b843593506020850135925060408501356001600160401b0381111562004eca57600080fd5b62004ed88782880162004bff565b95989497509550505050565b60008060008060006080868803121562004efd57600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111562004f2957600080fd5b62004f378882890162004bb1565b969995985093965092949392505050565b6000806000806080858703121562004f5f57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000806000806000806101408b8d03121562004f9c57600080fd5b8a35995060208b0135985060408b0135975060608b0135965062004fc360808c0162004b99565b955060a08b01356001600160401b038082111562004fe057600080fd5b62004fee8e838f0162004bff565b909750955060c08d01359150808211156200500857600080fd5b50620050178d828e0162004bff565b9094509250506101408b018c10156200502f57600080fd5b60e08b0190509295989b9194979a5092959850565b60008060008060008060008060008060e08b8d0312156200506457600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b01356001600160401b03808211156200509857600080fd5b620050a68e838f0162004bb1565b909850965060a08d0135915080821115620050c057600080fd5b620050ce8e838f0162004bb1565b909650945060c08d0135915080821115620050e857600080fd5b50620050f78d828e0162004bb1565b915080935050809150509295989b9194979a5092959850565b60008060008060008060c087890312156200512a57600080fd5b86359550602087013594506040870135935060608701359250608087013591506200515860a0880162004b99565b90509295509295509295565b81835260006020808501808196508560051b810191508460005b87811015620051ee5782840389528135601e19883603018112620051a157600080fd5b870180356001600160401b03811115620051ba57600080fd5b803603891315620051ca57600080fd5b620051d98682898501620051fb565b9a87019a95505050908401906001016200517e565b5091979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526200523e8160208601602086016200569d565b601f01601f19169290920160200192915050565b828152600082516200526c8160208501602087016200569d565b919091016020019392505050565b8183823760009101908152919050565b600082516200529e8184602087016200569d565b9190910192915050565b60008351620052bc8184602088016200569d565b9190910191825250602001919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020815260006200068660208301848662005164565b60808152600062005330608083018789620051fb565b828103602084015262005344818762005224565b905082810360408401526200535a818662005224565b9150508260608301529695505050505050565b60408152600062005383604083018587620051fb565b9050826020830152949350505050565b60208082526014908201527314d3530e95165411481393d508185b1b1bddd95960621b604082015260600190565b60208082526019908201527f534d4c3a73656e646572204e4f5420434f4e54524f4c4c455200000000000000604082015260600190565b8381526001600160a01b038316602082015260606040820181905260009062003fa29083018462005224565b8481526001600160a01b0384166020820152608060408201819052600090620054509083018562005224565b828103606084015262005464818562005224565b979650505050505050565b8481528360208201526060604082015260006200549160608301848662005164565b9695505050505050565b6000808335601e19843603018112620054b357600080fd5b8301803591506001600160401b03821115620054ce57600080fd5b60200191503681900382131562004bf857600080fd5b604051601f8201601f191681016001600160401b03811182821017156200550f576200550f62005790565b604052919050565b600082198211156200552d576200552d6200574e565b500190565b60006001600160401b038083168185168083038211156200555757620055576200574e565b01949350505050565b60008262005572576200557262005764565b500490565b60008160001904831182151516156200559457620055946200574e565b500290565b600082821015620055ae57620055ae6200574e565b500390565b60006001600160401b0380841115620055d057620055d062005790565b8360051b6020620055e3818301620054e4565b8681528181019086368582011115620055fb57600080fd5b600094505b8885101562005691578035868111156200561957600080fd5b8801601f36818301126200562c57600080fd5b81358881111562005641576200564162005790565b62005654818301601f19168801620054e4565b915080825236878285010111156200566b57600080fd5b808784018884013760009082018701528452506001949094019391830191830162005600565b50979650505050505050565b60005b83811015620056ba578181015183820152602001620056a0565b838111156200083f5750506000910152565b600181811c90821680620056e157607f821691505b602082108114156200487857634e487b7160e01b600052602260045260246000fd5b60006000198214156200571a576200571a6200574e565b5060010190565b60008262005733576200573362005764565b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114620057b557600080fd5b5056fe6080604052604051610735380380610735833981016040819052610022916102dc565b61002e82826000610035565b505061043b565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161070e602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103aa565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a0578251610299576001600160a01b0385163b6102995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102aa565b6102aa83836102b2565b949350505050565b8151156102c25781518083602001fd5b8060405162461bcd60e51b815260040161014891906103c6565b600080604083850312156102ef57600080fd5b82516001600160a01b038116811461030657600080fd5b60208401519092506001600160401b038082111561032357600080fd5b818501915085601f83011261033757600080fd5b81518181111561034957610349610425565b604051601f8201601f19908116603f0116810190838211818310171561037157610371610425565b8160405282815288602084870101111561038a57600080fd5b61039b8360208301602088016103f9565b80955050505050509250929050565b600082516103bc8184602087016103f9565b9190910192915050565b60208152600082518060208401526103e58160408501602087016103f9565b601f01601f19169190910160400192915050565b60005b838110156104145781810151838201526020016103fc565b838111156100645750506000910152565b634e487b7160e01b600052604160045260246000fd5b6102c48061044a6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e8383604051806060016040528060278152602001610268602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516100e091906101e8565b600060405180830381855af49150503d806000811461011b576040519150601f19603f3d011682016040523d82523d6000602084013e610120565b606091505b50915091506101318683838761013b565b9695505050505050565b606083156101ac5782516101a5576001600160a01b0385163b6101a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816101b6565b6101b683836101be565b949350505050565b8151156101ce5781518083602001fd5b8060405162461bcd60e51b815260040161019c9190610204565b600082516101fa818460208701610237565b9190910192915050565b6020815260008251806020840152610223816040850160208701610237565b601f01601f19169190910160400192915050565b60005b8381101561025257818101518382015260200161023a565b83811115610261576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122051cce14dd9337037379bd43ee81331c1b371dbeb3f61c2ba0ccdb3ad0e551a9664736f6c63430008070033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f5f8d71b620306a9d6c3bd744dfa7b1cac59cd0eb0a04bfd52749d9d3e562c4a64736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106200023a5760003560e01c80638a58855e116200013a578063b55463a411620000c4578063d53e3971116200008f578063d53e39711462000547578063e89dd310146200056c578063ea976d151462000591578063f9af87ca146200059c578063f9f185f314620005c157600080fd5b8063b55463a41462000503578063b61bf1a5146200050e578063ba6825ef1462000519578063c9f1cdb8146200053057600080fd5b8063a1f0cb831162000105578063a1f0cb8314620004b1578063a87ef4c514620004d6578063addfb0d414620004ed578063b133028814620004f857600080fd5b80638a58855e1462000454578063980426e9146200046b5780639d22eed414620004755780639d55e0f6146200048c57600080fd5b806341675ad011620001c8578063672bbf951162000193578063672bbf9514620003e757806367601a2d14620003fe57806368d1ee23146200040857806376b05054146200042d57806377c1eaea146200043d57600080fd5b806341675ad0146200037a57806349937056146200039f578063527e479014620003ab5780636377f9a814620003d057600080fd5b80631aa2dfc411620002095780631aa2dfc414620002d05780631e12742014620002f5578063286ff578146200031a5780633aeaeb1f146200035557600080fd5b806306be4278146200023f57806306d8fb23146200026b57806312ed4277146200028457806317bc130c14620002ab575b600080fd5b620002566200025036600462004c9d565b620005e6565b60405190151581526020015b60405180910390f35b620002756200068e565b60405190815260200162000262565b8180156200029157600080fd5b50620002a9620002a336600462004e8e565b620006b1565b005b818015620002b857600080fd5b50620002a9620002ca36600462004dc6565b62000845565b818015620002dd57600080fd5b50620002a9620002ef36600462005044565b62000992565b8180156200030257600080fd5b50620002756200031436600462004f7b565b620012ce565b8180156200032757600080fd5b506200033f6200033936600462005110565b620016f8565b6040805192835260208301919091520162000262565b8180156200036257600080fd5b50620002a96200037436600462004df3565b6200196c565b8180156200038757600080fd5b50620002a96200039936600462004dc6565b62001ae0565b620002756303c2670081565b818015620003b857600080fd5b50620002a9620003ca36600462004ee4565b62001bef565b62000256620003e136600462004cc0565b62002134565b62000256620003f836600462004e3f565b62002263565b6200027562002277565b8180156200041557600080fd5b50620002a96200042736600462004d8a565b6200228b565b62000275670de0b6b3a764000081565b620002756200044e36600462004c9d565b62002398565b620002566200046536600462004dc6565b62002409565b620002756200244e565b620002566200048636600462004c9d565b62002462565b8180156200049957600080fd5b50620002a9620004ab36600462004dc6565b62002489565b818015620004be57600080fd5b50620002a9620004d036600462004cc0565b620025d3565b62000275620004e736600462004c9d565b620026fd565b62000275620f424181565b620002756276a70081565b620002756203f48081565b620002756201518081565b620002566200052a36600462004c9d565b6200274b565b620002756200054136600462004f48565b6200276d565b8180156200055457600080fd5b50620002566200056636600462004c9d565b6200294c565b8180156200057957600080fd5b50620002a96200058b36600462004cf8565b6200298c565b620002756212750081565b818015620005a957600080fd5b5062000256620005bb36600462004dc6565b62002c9a565b818015620005ce57600080fd5b50620002a9620005e036600462004cc0565b62002df4565b815460405163908d67ed60e01b81526004810183905260009182916001600160a01b039091169063908d67ed9060240160206040518083038186803b1580156200062f57600080fd5b505afa15801562000644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066a919062004c83565b9050426201518082011015801562000686575083600501548110155b949350505050565b6064620006a26402540be400600a62005577565b620006ae919062005560565b81565b600260ff1684600b018383604051620006cc9291906200527a565b908152604051908190036020019020546001600160401b031614620007385760405162461bcd60e51b815260206004820181905260248201527f534d4c3a76616c696461746f72206973206e657665722061637469766174656460448201526064015b60405180910390fd5b83600b0182826040516200074e9291906200527a565b908152604051908190036020018120546001600160401b03600160c01b9091041690600b8601906200078490859085906200527a565b90815260405190819003602001902054620007b191906001600160401b03600160801b9091041662005532565b6001600160401b031642116200080a5760405162461bcd60e51b815260206004820152601760248201527f534d4c3a76616c696461746f722069732061637469766500000000000000000060448201526064016200072f565b6200083f8385600b018484604051620008259291906200527a565b908152602001604051809103902060020154848462002e95565b50505050565b6040805180820190915260018082526000602083018190526200086e9286928692909162002f38565b6200088a83836b0e0cae4d2dec8a6eed2e8c6d60a31b620031ab565b4211620008d45760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016200072f565b62000911826a1c1c9a5bdc94195c9a5bd960aa1b6200090786836e1d985b1a59185d1bdc94195c9a5bd9608a1b620031ab565b86929190620031d7565b62000935826b0e0cae4d2dec8a6eed2e8c6d60a31b620009076203f4804262005517565b6200094283838362003201565b817f876113dea338eedc856851b937db5d25520a6013d424528e69b20a166879e35a82620009746203f4804262005517565b604080519283526020830191909152015b60405180910390a2505050565b604080518082019091526001808252600060208301819052620009ba928c928b929162002f38565b60408051808201909152600080825260016020830152620009e1918b918b91819062002f38565b62000a0d62000a078a8a711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b62003302565b1562000a675760405162461bcd60e51b815260206004820152602260248201527f534d4c3a7769746864726177616c436f6e74726163742069732069736f6c6174604482015261195960f21b60648201526084016200072f565b84801580159062000a79575060328111155b62000abf5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016200072f565b808414801562000ace57508082145b62000b1c5760405162461bcd60e51b815260206004820152601860248201527f534d4c3a696e76616c696420696e707574206c656e677468000000000000000060448201526064016200072f565b8062000b2b8c8c8c8c6200276d565b101562000b7b5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a696e73756666696369656e7420616c6c6f77616e636500000000000060448201526064016200072f565b62000b90816801bc16d674ec80000062005577565b62000ba78b8b66737572706c757360c81b620031ab565b101562000bf05760405162461bcd60e51b8152602060048201526016602482015275534d4c3a4e4f5420656e6f75676820737572706c757360501b60448201526064016200072f565b60005b8181101562000d7957603088888381811062000c135762000c136200577a565b905060200281019062000c2791906200549b565b90501462000c785760405162461bcd60e51b815260206004820152601760248201527f534d4c3a5055424b45595f4c454e475448204552524f5200000000000000000060448201526064016200072f565b606086868381811062000c8f5762000c8f6200577a565b905060200281019062000ca391906200549b565b90501462000cf45760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016200072f565b606084848381811062000d0b5762000d0b6200577a565b905060200281019062000d1f91906200549b565b90501462000d705760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a5349474e41545552455f4c454e475448204552524f5200000000000060448201526064016200072f565b60010162000bf3565b5060006040518060c001604052808d60020154600162000d9a919062005517565b6001600160401b0316815260200162000db48d8c62002398565b6001600160401b0316815260200162000dce8d8d620026fd565b815260200162000ddf8d8c620026fd565b815260088e0154602082015260400162000e128d8d731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b62003379565b9052905060005b828110156200116e576000600b8e018a8a8481811062000e3d5762000e3d6200577a565b905060200281019062000e5191906200549b565b60405162000e619291906200527a565b908152604051908190036020019020546001600160401b03161462000ec95760405162461bcd60e51b815260206004820152601960248201527f534d4c3a2075736564206f7220616c69656e6174656420706b0000000000000060448201526064016200072f565b604080516101408101909152600181528251602082019062000eed90849062005532565b6001600160401b03168152602001426001600160401b0316815260200183602001516001600160401b031681526020018c81526020018b815260200183604001518152602001836060015181526020018360800151815260200186868481811062000f5c5762000f5c6200577a565b905060200281019062000f7091906200549b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250600b8e018a8a8481811062000fbf5762000fbf6200577a565b905060200281019062000fd391906200549b565b60405162000fe39291906200527a565b9081526040805191829003602090810190922083518154858501519386015160608701516001600160401b03908116600160c01b026001600160c01b03928216600160801b02929092166fffffffffffffffffffffffffffffffff968216600160401b026fffffffffffffffffffffffffffffffff1990941691909416179190911793909316179190911781556080830151600182015560a0830151600282015560c0830151600382015560e08301516004820155610100830151600582015561012083015180519192620010c19260068501929091019062004ae5565b5090505062001165898983818110620010de57620010de6200577a565b9050602002810190620010f291906200549b565b8460a001518a8a868181106200110c576200110c6200577a565b90506020028101906200112091906200549b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250670de0b6b3a7640000925062003435915050565b60010162000e19565b506200118f8b8a62001189670de0b6b3a76400008662005577565b62003500565b620011be8a66737572706c757360c81b620011b46801bc16d674ec8000008662005577565b8e92919062003579565b620011ed8a661cd958dd5c995960ca1b620011e36801bc16d674ec8000008662005577565b8e929190620035b6565b6200121d8a620012138b7170726f706f73656456616c696461746f727360701b620035e8565b8d919085620035b6565b620012468a6976616c696461746f727360b01b6200123c8a8c620055b3565b8e92919062003614565b62001265896976616c696461746f727360b01b6200123c8a8c620055b3565b818c60020160008282546200127b919062005517565b90915550506040517f4fa0073e48dccfe9a97fe60b530f2f680ffb8b7621e547381f187e12306fb2b790620012b8908c908c908c908c906200546f565b60405180910390a1505050505050505050505050565b60006801bc16d674ec8000003414620013365760405162461bcd60e51b815260206004820152602360248201527f534d4c3a6e65656420312076616c696461746f7220776f727468206f662066756044820152626e647360e81b60648201526084016200072f565b6200137a86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060059250620036c6915050565b9050620013958a82681a5b9a5d1a585d195960ba1b620031ab565b15620013dc5760405162461bcd60e51b815260206004820152601560248201527414d3530e985b1c9958591e481a5b9a5d1a585d1959605a1b60448201526064016200072f565b633b9aca008111620014285760405162461bcd60e51b815260206004820152601460248201527314d3530e95dbddc848131bddc81c1bdbdb081a5960621b60448201526064016200072f565b620014428a82681a5b9a5d1a585d195960ba1b42620031d7565b620014588a82635459504560e01b6005620031d7565b620014738a826921a7a72a2927a62622a960b11b33620036fc565b620014d781634e414d4560e01b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d62003747909392919063ffffffff16565b6005600090815260208b8152604082208054600181018255908352912001819055620015058a82896200377d565b620015128a828b6200382c565b6200151f8b8b83620038b1565b6200152e602083018362004c43565b156200154257620015428a8260016200228b565b62001554604083016020840162004c43565b156200159f576200159f8b8b838b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620039c892505050565b620015b1606083016040840162004c43565b15620015c457620015c48b8b8362002489565b8a546040516322af599760e01b8152670de0b6b3a76400006004820152602481018390526001600160a01b03909116906322af599790604401600060405180830381600087803b1580156200161857600080fd5b505af11580156200162d573d6000803e3d6000fd5b505050506000620016418c8c843462003b2b565b8c54604051637921219560e11b81529192506001600160a01b03169063f242432a9062001679903090339087908790600401620052cc565b600060405180830381600087803b1580156200169457600080fd5b505af1158015620016a9573d6000803e3d6000fd5b5050505060057f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb83604051620016e191815260200190565b60405180910390a2509a9950505050505050505050565b604080518082019091526000808252600160208301529081906200172490889088908490819062002f38565b4284116200176c5760405162461bcd60e51b815260206004820152601460248201527314d3530e991958591b1a5b99481b9bdd081b595d60621b60448201526064016200072f565b6001600160a01b038316620017c45760405162461bcd60e51b815260206004820152601c60248201527f534d4c3a7265636569766572206973207a65726f20616464726573730000000060448201526064016200072f565b620017d0878762002462565b156200183157620017e387873362002134565b620018315760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a73656e646572204e4f542077686974656c697374656400000000000060448201526064016200072f565b34620018408888838862003d87565b9350905080156200185c57620018598989898462003b2b565b91505b8562001869838562005517565b1015620018b15760405162461bcd60e51b8152602060048201526015602482015274534d4c3a6c657373207468616e206d696e696d756d60581b60448201526064016200072f565b88546001600160a01b031663f242432a30868a620018d0878962005517565b6040518563ffffffff1660e01b8152600401620018f19493929190620052cc565b600060405180830381600087803b1580156200190c57600080fd5b505af115801562001921573d6000803e3d6000fd5b505060408051868152602081018690528a93507f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec977092500160405180910390a250965096945050505050565b620019858585681a5b9a5d1a585d195960ba1b620031ab565b15620019cc5760405162461bcd60e51b815260206004820152601560248201527414d3530e985b1c9958591e481a5b9a5d1a585d1959605a1b60448201526064016200072f565b6004620019e28686635459504560e01b620031ab565b1462001a025760405162461bcd60e51b81526004016200072f9062005393565b62001a1c85856921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b03161462001a4f5760405162461bcd60e51b81526004016200072f90620053c1565b62001a698585681a5b9a5d1a585d195960ba1b42620031d7565b62001a768585856200382c565b62001a8385858462003201565b62001a908585836200377d565b62001a9d85853462003f11565b60047f7b7905d4bbb05d33c55d852740a9c6ad7023620601ab2abb79f1839fc8e0a5fb8560405162001ad191815260200190565b60405180910390a25050505050565b6040805180820190915260018082526020820181905262001b08918591859160009062002f38565b62001b218383680cccacaa6eed2e8c6d60bb1b620031ab565b421162001b6b5760405162461bcd60e51b8152602060048201526017602482015276534d4c3a63757272656e746c7920737769746368696e6760481b60448201526064016200072f565b62001b8f82677072696f7246656560c01b6200090786836266656560e81b620031ab565b62001bb082680cccacaa6eed2e8c6d60bb1b620009076203f4804262005517565b62001bbd8383836200382c565b817f331610f5071297e919aff9d24ba73d5c09c631f7c63a47096d051b7ab429c8bf82620009746203f4804262005517565b60408051808201909152600180825260006020830181905262001c1792879287929162002f38565b801580159062001c28575060328111155b62001c6e5760405162461bcd60e51b8152602060048201526015602482015274534d4c3a31202d2035302076616c696461746f727360581b60448201526064016200072f565b600385015460005b8281101562001d155762001cb48785858481811062001c995762001c996200577a565b905060200281019062001cad91906200549b565b8562003f28565b62001d0c5760405162461bcd60e51b815260206004820152602160248201527f534d4c3a4e4f5420616c6c207075626b65797320617265207374616b6561626c6044820152606560f81b60648201526084016200072f565b60010162001c76565b5050600062001d38846f61637469766556616c696461746f727360801b620035e8565b9050600062001d5d857170726f706f73656456616c696461746f727360701b620035e8565b9050600087600b018585600081811062001d7b5762001d7b6200577a565b905060200281019062001d8f91906200549b565b60405162001d9f9291906200527a565b908152604051908190036020019020600101549050600062001dda8883731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b62003379565b90506000805b86811015620020755760008b600b0189898481811062001e045762001e046200577a565b905060200281019062001e1891906200549b565b60405162001e289291906200527a565b908152602001604051809103902060010154905080851462001eca5782820362001e7686661cd958dd5c995960ca1b62001e6c846801bc16d674ec80000062005577565b8f92919062003579565b62001e848c87898462003579565b62001e928c878a84620035b6565b82935081955062001ec686731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b8e620033799092919063ffffffff16565b9450505b62001ffc89898481811062001ee35762001ee36200577a565b905060200281019062001ef791906200549b565b868f600b018d8d8881811062001f115762001f116200577a565b905060200281019062001f2591906200549b565b60405162001f359291906200527a565b9081526020016040518091039020600601805462001f5390620056cc565b80601f016020809104026020016040519081016040528092919081815260200182805462001f8190620056cc565b801562001fd25780601f1062001fa65761010080835404028352916020019162001fd2565b820191906000526020600020905b81548152906001019060200180831162001fb457829003601f168201915b5050505050670de0b6b3a76400006801bc16d674ec80000062001ff6919062005599565b62003435565b6002600b8d018a8a858181106200201757620020176200577a565b90506020028101906200202b91906200549b565b6040516200203b9291906200527a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790555060010162001de0565b50808603868214620020cc57620020b084661cd958dd5c995960ca1b620020a6846801bc16d674ec80000062005577565b8d92919062003579565b620020be8a85878462003579565b620020cc8a858884620035b6565b50620020ed8989620020e789670de0b6b3a764000062005577565b62003f11565b7ff3bc9a49558b2409ef29bf09ea870b1478948cf4a349dfaa48d23cd15fb200a187876040516200212092919062005304565b60405180910390a150505050505050505050565b60006001600160a01b0382166200215a85856921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316141562002173575060016200225c565b60006200218e8585681dda1a5d195b1a5cdd60ba1b620032cc565b90506001600160a01b038116620021db5760405162461bcd60e51b815260206004820152601060248201526f14d3530e9b9bc81dda1a5d195b1a5cdd60821b60448201526064016200072f565b60405163babcc53960e01b81526001600160a01b03848116600483015282169063babcc5399060240160206040518083038186803b1580156200221d57600080fd5b505afa15801562002232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002258919062004c63565b9150505b9392505050565b600062000686848484876003015462003f28565b6064620006a26402540be400605062005577565b604080518082019091526000808252600160208301819052620022b392869286929162002f38565b620022bf838362002462565b15158115151415620023065760405162461bcd60e51b815260206004820152600f60248201526e14d3530e985b1c9958591e481cd95d608a1b60448201526064016200072f565b62002338826a1c1c9a5d985d19541bdbdb60aa1b83620023285760006200232b565b60015b8692919060ff16620031d7565b806200235957620023598383681dda1a5d195b1a5cdd60ba1b6000620036fc565b6040805183815282151560208201527f86ba6fb9ba1b2952b69896940c9d8a35e8daefe421f499e41e43ee0e72330e1a910160405180910390a1505050565b600042620023b784846b0e0cae4d2dec8a6eed2e8c6d60a31b620031ab565b1115620023e157620023d983836a1c1c9a5bdc94195c9a5bd960aa1b620031ab565b905062002403565b6200240083836e1d985b1a59185d1bdc94195c9a5bd9608a1b620031ab565b90505b92915050565b6000620024178483620005e6565b80156200068657506200244562000a078484711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b15949350505050565b6064620006a26402540be400600562005577565b60006200247f83836a1c1c9a5d985d19541bdbdb60aa1b620031ab565b6001149392505050565b604080518082019091526000808252600160208301819052620024b192859285929162002f38565b6000620024d083836c1b1a5c5d5a591a5d1e541bdbdb609a1b620032cc565b6001600160a01b0316146200251f5760405162461bcd60e51b815260206004820152601460248201527314d3530e985b1c9958591e4819195c1b1bde595960621b60448201526064016200072f565b6000620025458484846127256200253f8383634e414d4560e01b62003379565b62003fab565b90506200256583836c1b1a5c5d5a591a5d1e541bdbdb609a1b84620036fc565b835460405163a22cb46560e01b81526001600160a01b038381166004830152600160248301529091169063a22cb465906044015b600060405180830381600087803b158015620025b457600080fd5b505af1158015620025c9573d6000803e3d6000fd5b5050505050505050565b620025ec8383681a5b9a5d1a585d195960ba1b620031ab565b6200263a5760405162461bcd60e51b815260206004820152601760248201527f534d4c3a4944206973206e6f7420696e6974696174656400000000000000000060448201526064016200072f565b6200265483836921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b031614620026875760405162461bcd60e51b81526004016200072f90620053c1565b60006200269d8484635459504560e01b620031ab565b90506004811480620026af5750600581145b620026f05760405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016200072f565b6200083f8484846200377d565b600042620027198484680cccacaa6eed2e8c6d60bb1b620031ab565b11156200273857620023d98383677072696f7246656560c01b620031ab565b6200240083836266656560e81b620031ab565b60006200276483836672656c6561736560c81b620031ab565b42109392505050565b6000806200278a85846976616c696461746f727360b01b620031ab565b6004870154909150808210620027a65760009250505062000686565b620027b2828262005599565b925050620027d7905084846f3330b6363130b1b5a7b832b930ba37b960811b620031ab565b8214156200287a576000620027fb85856976616c696461746f727360b01b620031ab565b905060006200281d86866d746f74616c416c6c6f77616e636560901b620031ab565b905080158062002869575060646200283c6402540be400605062005577565b62002848919062005560565b816200285a6402540be4008562005577565b62002866919062005560565b10155b156200287757505062000686565b50505b6000620028a284620028998568616c6c6f77616e636560b81b620035e8565b879190620031ab565b90506000620028d385620028ca866f61637469766556616c696461746f727360801b620035e8565b889190620031ab565b6200290286620028f9877170726f706f73656456616c696461746f727360701b620035e8565b899190620031ab565b6200290e919062005517565b9050818110620029245760009250505062000686565b600062002932828462005599565b90508084111562002941578093505b505050949350505050565b60408051808201909152600180825260208201526000906200297690849084908490819062002f38565b6200298383833462003f11565b50600192915050565b604080518082019091526000808252600160208301819052620029b5928a928a92909162002f38565b83821462002a065760405162461bcd60e51b815260206004820152601b60248201527f534d4c3a616c6c6f77616e6365732073686f756c64206d61746368000000000060448201526064016200072f565b60005b8481101562002b0d57600462002a4687878481811062002a2d5762002a2d6200577a565b8c92602090910201359050635459504560e01b620031ab565b1462002a8b5760405162461bcd60e51b815260206004820152601360248201527229a6a61d34b2103737ba1037b832b930ba37b960691b60448201526064016200072f565b620f424184848381811062002aa45762002aa46200577a565b905060200201351062002b045760405162461bcd60e51b815260206004820152602160248201527f534d4c3a3e204d41585f414c4c4f57414e43452c207365742066616c6c6261636044820152606b60f81b60648201526084016200072f565b60010162002a09565b50801562002b7a57600462002b2b8883635459504560e01b620031ab565b1462002b7a5760405162461bcd60e51b815260206004820152601960248201527f534d4c3a66616c6c6261636b206e6f74206f70657261746f720000000000000060448201526064016200072f565b60008060005b8681101562002c0f5785858281811062002b9e5762002b9e6200577a565b905060200201358362002bb2919062005517565b925062002bf88a8a8a8a8581811062002bcf5762002bcf6200577a565b9050602002013589898681811062002beb5762002beb6200577a565b90506020020135620040cc565b62002c04908362005517565b915060010162002b80565b508082111562002c4c5762002c46886d746f74616c416c6c6f77616e636560901b62002c3c848662005599565b8c929190620035b6565b62002c82565b8082101562002c825762002c82886d746f74616c416c6c6f77616e636560901b62002c78858562005599565b8c92919062003579565b62002c8f8989856200414a565b505050505050505050565b6040805180820190915260018082526020820181905260009162002cc5918691869190859062002f38565b8147101562002d215760405162461bcd60e51b815260206004820152602160248201527f534d4c3a696e73756666696369656e7420636f6e74726163742062616c616e636044820152606560f81b60648201526084016200072f565b62002d2e84848462003500565b600062002d4a85856921a7a72a2927a62622a960b11b620032cc565b9050806001600160a01b03168360405160006040518083038185875af1925050503d806000811462002d99576040519150601f19603f3d011682016040523d82523d6000602084013e62002d9e565b606091505b5050809250508162002dec5760405162461bcd60e51b81526020600482015260166024820152750a69a98748cc2d2d8cac840e8de40e6cadcc8408aa8960531b60448201526064016200072f565b509392505050565b60408051808201909152600080825260016020830181905262002e1c92869286929162002f38565b62002e28838362002462565b62002e765760405162461bcd60e51b815260206004820152601860248201527f534d4c3a6d757374206265207072697661746520706f6f6c000000000000000060448201526064016200072f565b62002e908383681dda1a5d195b1a5cdd60ba1b84620036fc565b505050565b604080518082019091526001815260006020820181905262002ebd9186918691819062002f38565b62002ee6836672656c6561736560c81b62002edc621275004262005517565b87929190620031d7565b827f6cc873968ba5c560db266aea333bf3b836de0031c3be1d57c3ab7618880a0452838362002f19621275004262005517565b60405162002f2a939291906200536d565b60405180910390a250505050565b62002f518585681a5b9a5d1a585d195960ba1b620031ab565b62002f935760405162461bcd60e51b815260206004820152601160248201527014d3530e9b9bdd081a5b9a5d1a585d1959607a1b60448201526064016200072f565b600062002fa98686635459504560e01b620031ab565b905060048114156200305a57815162002fd65760405162461bcd60e51b81526004016200072f9062005393565b838062002fe05750825b15620030545762002ff286866200274b565b15620030545760405162461bcd60e51b815260206004820152602a60248201527f534d4c3a707269736f6e65642c2067657420696e20746f756368207769746820604482015269676f7665726e616e636560b01b60648201526084016200072f565b620030c4565b600581141562003088576020820151620030545760405162461bcd60e51b81526004016200072f9062005393565b60405162461bcd60e51b815260206004820152601060248201526f534d4c3a696e76616c6964205459504560801b60448201526064016200072f565b82156200314e57620030e586866936b0b4b73a30b4b732b960b11b620032cc565b6001600160a01b0316336001600160a01b031614620031475760405162461bcd60e51b815260206004820152601960248201527f534d4c3a73656e646572204e4f54206d61696e7461696e65720000000000000060448201526064016200072f565b50620031a4565b8315620031a2576200316f86866921a7a72a2927a62622a960b11b620032cc565b6001600160a01b0316336001600160a01b031614620031475760405162461bcd60e51b81526004016200072f90620053c1565b505b5050505050565b6000836001016000620031bf8585620035e8565b81526020019081526020016000205490509392505050565b80846001016000620031ea8686620035e8565b815260208101919091526040016000205550505050565b6276a700811015620032565760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3c204d494e5f56414c494441544f525f504552494f4400000000000060448201526064016200072f565b6303c26700811115620032ac5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3e204d41585f56414c494441544f525f504552494f4400000000000060448201526064016200072f565b62002e9083836e1d985b1a59185d1bdc94195c9a5bd9608a1b84620031d7565b6000836003016000620032e08585620035e8565b81526020810191909152604001600020546001600160a01b0316949350505050565b6000816001600160a01b0316638650c0726040518163ffffffff1660e01b815260040160206040518083038186803b1580156200333e57600080fd5b505afa15801562003353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002403919062004c63565b60608360020160006200338d8585620035e8565b81526020019081526020016000208054620033a890620056cc565b80601f0160208091040260200160405190810160405280929190818152602001828054620033d690620056cc565b8015620034275780601f10620033fb5761010080835404028352916020019162003427565b820191906000526020600020905b8154815290600101906020018083116200340957829003601f168201915b505050505090509392505050565b73ff50ed3d0ec03ac01d4c79aad74928bff48a7b2b6001600160a01b031663228951188287878787620034a38c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508c90506200419e565b6040518763ffffffff1660e01b8152600401620034c59594939291906200531a565b6000604051808303818588803b158015620034df57600080fd5b505af1158015620034f4573d6000803e3d6000fd5b50505050505050505050565b80620035178484651dd85b1b195d60d21b620031ab565b1015620035675760405162461bcd60e51b815260206004820152601f60248201527f534d4c3a696e73756666696369656e742077616c6c65742062616c616e63650060448201526064016200072f565b62002e908383651dd85b1b195d60d21b845b808460010160006200358c8686620035e8565b81526020019081526020016000206000828254620035ab919062005599565b909155505050505050565b80846001016000620035c98686620035e8565b81526020019081526020016000206000828254620035ab919062005517565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000620036228484620035e8565b60008181526001870160205260408120549192505b8351811015620036ab578381815181106200365657620036566200577a565b60200260200101518760020160006200367e8580620036759062005703565b965087620035e8565b81526020019081526020016000209080519060200190620036a192919062004ae5565b5060010162003637565b50600091825260019095016020526040902093909355505050565b60008282604051602001620036dd929190620052a8565b60408051601f1981840301815291905280516020909101209392505050565b808460030160006200370f8686620035e8565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b808460020160006200375a8686620035e8565b81526020019081526020016000209080519060200190620031a492919062004ae5565b6001600160a01b038116620037d55760405162461bcd60e51b815260206004820152601e60248201527f534d4c3a6d61696e7461696e65722063616e204e4f54206265207a65726f000060448201526064016200072f565b620037f083836936b0b4b73a30b4b732b960b11b84620036fc565b6040516001600160a01b038216815282907f72774bc96991002276ea2f17557bc24e67733a3dcf2e8b390d38921daab1ab319060200162000985565b6064620038406402540be400600a62005577565b6200384c919062005560565b8111156200389d5760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a3e204d41585f4d41494e54454e414e43455f4645452000000000000060448201526064016200072f565b62002e9083836266656560e81b84620031d7565b6000620038d58383711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b620032cc565b6001600160a01b031614620039245760405162461bcd60e51b815260206004820152601460248201527314d3530e985b1c9958591e4819195c1b1bde595960621b60448201526064016200072f565b60006200394684848461271b6040518060200160405280600081525062003fab565b90506200396b8383711dda5d1a191c985dd85b10dbdb9d1c9858dd60721b84620036fc565b6200083f82731dda5d1a191c985dd85b10dc9959195b9d1a585b60621b620039be84604080516001600160a01b0392909216600160f81b1760208084019190915281518084039091018152918101905290565b8692919062003747565b60008211620039d657600080fd5b614e2b6000908152600d86016020908152604080832085845290915290205460ff1662003a3d5760405162461bcd60e51b8152602060048201526014602482015273534d4c3a6e6f742061206d6964646c657761726560601b60448201526064016200072f565b600062003a6362003a5d86856921a7a72a2927a62622a960b11b620032cc565b620045c3565b8654604051637104db2360e11b81529192506001600160a01b038084169263e209b6469262003a9c9289929116908790600401620053f8565b600060405180830381600087803b15801562003ab757600080fd5b505af115801562003acc573d6000803e3d6000fd5b5050505062003ade868686846200465f565b8554604051630492f6e160e01b815260048101869052600160248201526001600160a01b0390911690630492f6e190604401600060405180830381600087803b158015620034df57600080fd5b600062003b3a85858562002409565b62003b885760405162461bcd60e51b815260206004820152601a60248201527f534d4c3a6d696e74696e67206973206e6f7420616c6c6f77656400000000000060448201526064016200072f565b845460405163f759cc3b60e01b8152600481018590526000916001600160a01b03169063f759cc3b9060240160206040518083038186803b15801562003bcd57600080fd5b505afa15801562003be2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003c08919062004c83565b90506000811162003c515760405162461bcd60e51b8152602060048201526012602482015271534d4c3a7072696365206973207a65726f3f60701b60448201526064016200072f565b8554604080516396ce079560e01b8152905183926001600160a01b0316916396ce0795916004808301926020929190829003018186803b15801562003c9557600080fd5b505afa15801562003caa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cd0919062004c83565b62003cdc908562005577565b62003ce8919062005560565b865460405163731133e960e01b8152306004820152602481018790526044810183905260806064820152600060848201529193506001600160a01b03169063731133e99060a401600060405180830381600087803b15801562003d4a57600080fd5b505af115801562003d5f573d6000803e3d6000fd5b5062003d7e925087915086905066737572706c757360c81b86620035b6565b50949350505050565b600080600062003d9887876200478a565b90506001600160a01b0381161562003f03576000816001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562003de657600080fd5b505afa15801562003dfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e21919062004c83565b9050670de0b6b3a764000081111562003ef8578086111562003e515762003e49818762005599565b935062003e54565b50845b6040516348b4aac360e11b815260006004820181905260016024830152604482018390526064820152608481018690526001600160a01b03831690639169558690839060a4016020604051808303818588803b15801562003eb457600080fd5b505af115801562003ec9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062003ef0919062004c83565b925062003efc565b8593505b5062003f07565b8492505b5094509492505050565b62002e908383651dd85b1b195d60d21b84620035b6565b6000600160ff1685600b01858560405162003f459291906200527a565b908152604051908190036020019020546001600160401b031614801562003fa257508185600b01858560405162003f7e9291906200527a565b908152604051908190036020019020546001600160401b03600160401b9091041611155b95945050505050565b6000828152600c860160205260408120548062003fc757600080fd5b62003fe186826921a7a72a2927a62622a960b11b620032cc565b60405162003fef9062004b74565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200402b573d6000803e3d6000fd5b5091506001600160a01b038216639934b281866200405889826921a7a72a2927a62622a960b11b620032cc565b6200406c8a86634e414d4560e01b62003379565b876040518563ffffffff1660e01b81526004016200408e949392919062005424565b600060405180830381600087803b158015620040a957600080fd5b505af1158015620040be573d6000803e3d6000fd5b505050505095945050505050565b600080620040e78468616c6c6f77616e636560b81b620035e8565b9050620040f6868683620031ab565b91506200410686868386620031d7565b604080518681526020810185905285917f22d413fb5bc865837d8577bccf9aa8b2de36e0481c69792daac701c2edadebe3910160405180910390a250949350505050565b6200416b83836f3330b6363130b1b5a7b832b930ba37b960811b84620031d7565b807fde64ceff4e356721296ea0a08a5432c5e3f243f08dd88098a025edfeea0eecb8836040516200098591815260200190565b6000670de0b6b3a7640000821015620042095760405162461bcd60e51b815260206004820152602660248201527f4465706f736974436f6e74726163743a206465706f7369742076616c756520746044820152656f6f206c6f7760d01b60648201526084016200072f565b62004219633b9aca008362005721565b15620042845760405162461bcd60e51b815260206004820152603360248201527f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e6044820152726f74206d756c7469706c65206f66206777656960681b60648201526084016200072f565b600062004296633b9aca008462005560565b905060006002620042a788620047e2565b604051620042b691906200528a565b602060405180830381855afa158015620042d4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620042f9919062004c83565b905060006002806200430f88600060406200487e565b6040516200431e91906200528a565b602060405180830381855afa1580156200433c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062004361919062004c83565b600262004387620043818a60406200437b81606062005599565b6200487e565b620047e2565b6040516200439691906200528a565b602060405180830381855afa158015620043b4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620043d9919062004c83565b60408051602081019390935282015260600160408051601f198184030181529082905262004407916200528a565b602060405180830381855afa15801562004425573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200444a919062004c83565b90506000600280848a6040516020016200446692919062005252565b60408051601f198184030181529082905262004482916200528a565b602060405180830381855afa158015620044a0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620044c5919062004c83565b6002620044d28762004996565b604080516020810192909252810186905260600160408051601f198184030181529082905262004502916200528a565b602060405180830381855afa15801562004520573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062004545919062004c83565b60408051602081019390935282015260600160408051601f198184030181529082905262004573916200528a565b602060405180830381855afa15801562004591573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620045b6919062004c83565b9998505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166200465a5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016200072f565b919050565b8354604051634d280a5560e01b81526001600160a01b0383811660048301526024820185905290911690634d280a559060440160206040518083038186803b158015620046ab57600080fd5b505afa158015620046c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620046e6919062004c63565b156200472e5760405162461bcd60e51b8152602060048201526016602482015275534d4c3a616c7265616479206d6964646c657761726560501b60448201526064016200072f565b6200474a83836a6d6964646c65776172657360a81b84620049e3565b8354604051632895f3cb60e11b81526001600160a01b03838116600483015260248201859052600160448301529091169063512be7969060640162002599565b600080620047aa84846c1b1a5c5d5a591a5d1e541bdbdb609a1b620032cc565b90506001600160a01b038116620047c657600091505062002403565b620047d18162003302565b15620023d957600091505062002403565b60606020825110158015620047f957506040825111155b62004808576200480862005738565b81516040141562004817575090565b6040805160208082528183019092526000916020820181803683370190505090506000602082015282516020141562004856576200225c838262004a64565b6200225c8362004872836000875160406200437b919062005599565b62004a64565b50919050565b6060816200488e81601f62005517565b1015620048cf5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200072f565b620048db828462005517565b84511015620049215760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200072f565b60608215801562004942576040519150600082526020820160405262003d7e565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200497d57805183526020928301920162004963565b5050858452601f01601f19166040525050949350505050565b600081815b6008811015620049c857600892831b60ff831617929190911c90620049c08162005703565b90506200499b565b508015620049da57620049da62005738565b5060c01b919050565b6000620049f18484620035e8565b600081815260018701602052604081208054929350849260038901929162004a2b91908362004a208362005703565b9190505585620035e8565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b6060806040519050835180825260208201818101602087015b8183101562004a9757805183526020928301920162004a7d565b50855184518101855292509050808201602086015b8183101562004ac657805183526020928301920162004aac565b508651929092011591909101601f01601f191660405250905092915050565b82805462004af390620056cc565b90600052602060002090601f01602090048101928262004b17576000855562004b62565b82601f1062004b3257805160ff191683800117855562004b62565b8280016001018555821562004b62579182015b8281111562004b6257825182559160200191906001019062004b45565b5062004b7092915062004b82565b5090565b61073580620057b983390190565b5b8082111562004b70576000815560010162004b83565b80356001600160a01b03811681146200465a57600080fd5b60008083601f84011262004bc457600080fd5b5081356001600160401b0381111562004bdc57600080fd5b6020830191508360208260051b850101111562004bf857600080fd5b9250929050565b60008083601f84011262004c1257600080fd5b5081356001600160401b0381111562004c2a57600080fd5b60208301915083602082850101111562004bf857600080fd5b60006020828403121562004c5657600080fd5b81356200225c81620057a6565b60006020828403121562004c7657600080fd5b81516200225c81620057a6565b60006020828403121562004c9657600080fd5b5051919050565b6000806040838503121562004cb157600080fd5b50508035926020909101359150565b60008060006060848603121562004cd657600080fd5b833592506020840135915062004cef6040850162004b99565b90509250925092565b600080600080600080600060a0888a03121562004d1457600080fd5b873596506020880135955060408801356001600160401b038082111562004d3a57600080fd5b62004d488b838c0162004bb1565b909750955060608a013591508082111562004d6257600080fd5b5062004d718a828b0162004bb1565b989b979a50959894979596608090950135949350505050565b60008060006060848603121562004da057600080fd5b8335925060208401359150604084013562004dbb81620057a6565b809150509250925092565b60008060006060848603121562004ddc57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121562004e0c57600080fd5b8535945060208601359350604086013592506060860135915062004e336080870162004b99565b90509295509295909350565b60008060006040848603121562004e5557600080fd5b8335925060208401356001600160401b0381111562004e7357600080fd5b62004e818682870162004bff565b9497909650939450505050565b6000806000806060858703121562004ea557600080fd5b843593506020850135925060408501356001600160401b0381111562004eca57600080fd5b62004ed88782880162004bff565b95989497509550505050565b60008060008060006080868803121562004efd57600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111562004f2957600080fd5b62004f378882890162004bb1565b969995985093965092949392505050565b6000806000806080858703121562004f5f57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000806000806000806101408b8d03121562004f9c57600080fd5b8a35995060208b0135985060408b0135975060608b0135965062004fc360808c0162004b99565b955060a08b01356001600160401b038082111562004fe057600080fd5b62004fee8e838f0162004bff565b909750955060c08d01359150808211156200500857600080fd5b50620050178d828e0162004bff565b9094509250506101408b018c10156200502f57600080fd5b60e08b0190509295989b9194979a5092959850565b60008060008060008060008060008060e08b8d0312156200506457600080fd5b8a35995060208b0135985060408b0135975060608b0135965060808b01356001600160401b03808211156200509857600080fd5b620050a68e838f0162004bb1565b909850965060a08d0135915080821115620050c057600080fd5b620050ce8e838f0162004bb1565b909650945060c08d0135915080821115620050e857600080fd5b50620050f78d828e0162004bb1565b915080935050809150509295989b9194979a5092959850565b60008060008060008060c087890312156200512a57600080fd5b86359550602087013594506040870135935060608701359250608087013591506200515860a0880162004b99565b90509295509295509295565b81835260006020808501808196508560051b810191508460005b87811015620051ee5782840389528135601e19883603018112620051a157600080fd5b870180356001600160401b03811115620051ba57600080fd5b803603891315620051ca57600080fd5b620051d98682898501620051fb565b9a87019a95505050908401906001016200517e565b5091979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526200523e8160208601602086016200569d565b601f01601f19169290920160200192915050565b828152600082516200526c8160208501602087016200569d565b919091016020019392505050565b8183823760009101908152919050565b600082516200529e8184602087016200569d565b9190910192915050565b60008351620052bc8184602088016200569d565b9190910191825250602001919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6020815260006200068660208301848662005164565b60808152600062005330608083018789620051fb565b828103602084015262005344818762005224565b905082810360408401526200535a818662005224565b9150508260608301529695505050505050565b60408152600062005383604083018587620051fb565b9050826020830152949350505050565b60208082526014908201527314d3530e95165411481393d508185b1b1bddd95960621b604082015260600190565b60208082526019908201527f534d4c3a73656e646572204e4f5420434f4e54524f4c4c455200000000000000604082015260600190565b8381526001600160a01b038316602082015260606040820181905260009062003fa29083018462005224565b8481526001600160a01b0384166020820152608060408201819052600090620054509083018562005224565b828103606084015262005464818562005224565b979650505050505050565b8481528360208201526060604082015260006200549160608301848662005164565b9695505050505050565b6000808335601e19843603018112620054b357600080fd5b8301803591506001600160401b03821115620054ce57600080fd5b60200191503681900382131562004bf857600080fd5b604051601f8201601f191681016001600160401b03811182821017156200550f576200550f62005790565b604052919050565b600082198211156200552d576200552d6200574e565b500190565b60006001600160401b038083168185168083038211156200555757620055576200574e565b01949350505050565b60008262005572576200557262005764565b500490565b60008160001904831182151516156200559457620055946200574e565b500290565b600082821015620055ae57620055ae6200574e565b500390565b60006001600160401b0380841115620055d057620055d062005790565b8360051b6020620055e3818301620054e4565b8681528181019086368582011115620055fb57600080fd5b600094505b8885101562005691578035868111156200561957600080fd5b8801601f36818301126200562c57600080fd5b81358881111562005641576200564162005790565b62005654818301601f19168801620054e4565b915080825236878285010111156200566b57600080fd5b808784018884013760009082018701528452506001949094019391830191830162005600565b50979650505050505050565b60005b83811015620056ba578181015183820152602001620056a0565b838111156200083f5750506000910152565b600181811c90821680620056e157607f821691505b602082108114156200487857634e487b7160e01b600052602260045260246000fd5b60006000198214156200571a576200571a6200574e565b5060010190565b60008262005733576200573362005764565b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114620057b557600080fd5b5056fe6080604052604051610735380380610735833981016040819052610022916102dc565b61002e82826000610035565b505061043b565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161070e602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103aa565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a0578251610299576001600160a01b0385163b6102995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102aa565b6102aa83836102b2565b949350505050565b8151156102c25781518083602001fd5b8060405162461bcd60e51b815260040161014891906103c6565b600080604083850312156102ef57600080fd5b82516001600160a01b038116811461030657600080fd5b60208401519092506001600160401b038082111561032357600080fd5b818501915085601f83011261033757600080fd5b81518181111561034957610349610425565b604051601f8201601f19908116603f0116810190838211818310171561037157610371610425565b8160405282815288602084870101111561038a57600080fd5b61039b8360208301602088016103f9565b80955050505050509250929050565b600082516103bc8184602087016103f9565b9190910192915050565b60208152600082518060208401526103e58160408501602087016103f9565b601f01601f19169190910160400192915050565b60005b838110156104145781810151838201526020016103fc565b838111156100645750506000910152565b634e487b7160e01b600052604160045260246000fd5b6102c48061044a6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e8383604051806060016040528060278152602001610268602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516100e091906101e8565b600060405180830381855af49150503d806000811461011b576040519150601f19603f3d011682016040523d82523d6000602084013e610120565b606091505b50915091506101318683838761013b565b9695505050505050565b606083156101ac5782516101a5576001600160a01b0385163b6101a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b50816101b6565b6101b683836101be565b949350505050565b8151156101ce5781518083602001fd5b8060405162461bcd60e51b815260040161019c9190610204565b600082516101fa818460208701610237565b9190910192915050565b6020815260008251806020840152610223816040850160208701610237565b601f01601f19169190910160400192915050565b60005b8381101561025257818101518382015260200161023a565b83811115610261576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122051cce14dd9337037379bd43ee81331c1b371dbeb3f61c2ba0ccdb3ad0e551a9664736f6c63430008070033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f5f8d71b620306a9d6c3bd744dfa7b1cac59cd0eb0a04bfd52749d9d3e562c4a64736f6c63430008070033",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "review: DataStoreModule for the IsolatedStorage logic.review: OracleExtensionLib for oracle logic.Every pool is isolated and every validator is unique. Segregate all the risk.CONTROLLER and Maintainer: CONTROLLER is the owner of an ID, it manages the pool/operator. Its security is exteremely important. maintainer is the worker, can be used to automate some daily tasks: * distributing validators for Staking Pools or creating validators for Operators. * not so crucial in terms of security.Users: Type 4 : Permissioned Operators * Needs to be onboarded by the Dual Governance (Senate + Governance). * Maintains Beacon Chain Validators on behalf of the Staking Pools. * Can participate in the Operator Marketplace after initiation. * Can utilize maintainers for staking operations. Type 5 : Permissionless Configurable Staking Pools * Permissionless to create. * Can utilize powers of packages and middlewares such as Bound Liquidity Pools, gETHMiddlewares etc. * Can be public or private, can use a whitelist if private. * Can utilize maintainers for validator distribution on Operator Marketplace. * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * accruing rewards and keeping Staked Ether safe and isolated.Packages: An ID can only point to 1(one) Package version at a time. Built by utilizing the Modules! Can be upgraded by a dual governance, via pullUpgrade. * A Package's dual governance consists of Portal(governance) and the pool owner(senate). Type 10011 : Withdrawal Contract * Mandatory. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Staking Pools are in \"Isolation Mode\" until their Withdrawal Contract is upgraded. * * Meaning, no more Depositing or Validator Proposal can happen. * Custodian of the validator funds after creation, including any type of rewards and fees. Type 10021 : Liquidity Pool implementation * Optional. * CONTROLLER is the implementation contract position (always) * Version Release Requires the approval of Senate * Upgrading to a new version is optional for pool owners. * * Liquidity Pools are in \"Isolation Mode\" until upgraded.Middlewares: Can support many different versions that can be utilized by the Pool Owners. No particular way to build one. Can not be upgraded. Currently only gETHMiddlewares. Type 20011 : gETHMiddleware * Optional. * CONTROLLER is the implementation contract position (always) * Requires the approval of Senate * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeUtils.PooledStakingFunctions are protected with authentication function",
    "events": {
      "IdInitiated(uint256,uint256)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "blameOperator(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,bytes)": {
        "details": "anyone can call this function while the state is ACTIVEif operator has given enough allowance, they SHOULD rotate the validators to avoid being prisonedthis function lacks 2 other punishable acts: 1. while state is PROPOSED: validator proposed, it is passed, but haven't been created even tho it has been a MAX_BEACON_DELAY 2. while state is EXIT_REQUESTED:  validator requested exit, but it haven't been executed even tho it has been MAX_BEACON_DELAY"
      },
      "changeMaintainer(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "details": "there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migrationwe don't use _authenticate here because malicious maintainers can imprison operators * and prevent them entering here, smh."
      },
      "decreaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "details": "only CONTROLLER can decrease the balance externally,",
        "returns": {
          "success": "if the amount was sent and deducted"
        }
      },
      "delegate(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256[],uint256[],uint256)": {
        "details": "When decreased the approved validator count below current active+proposed validators, operator can NOT create new validators.",
        "params": {
          "allowances": "the MAX number of validators that can be created by the Operator, for given Pool",
          "operatorIds": "array of Operator IDs to allow them create validators",
          "poolId": "the gETH id of the Pool"
        }
      },
      "deployLiquidityPool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "details": "gives full allowance to the pool (should not be a problem as Portal only temporarily holds gETH)unlike withdrawal Contract, a controller can deploy a liquidity pool after initiation as well_package_data of a liquidity pool is only the staking pool's name."
      },
      "deposit(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "details": "an example for minting + buybacks Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- * debt  msgValue * 100   10  => buyback * 100   100 => buyback * 10    100 => buyback + mint * 1     x   => mint * 0.5   x   => mint * 0     x   => mint",
        "params": {
          "deadline": "liquidity pool parameter",
          "mingETH": "liquidity pool parameter",
          "poolId": "id of the staking pool, liquidity pool and gETH to be used."
        }
      },
      "getMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "details": "respecs to the switching delay.",
        "returns": {
          "fee": "= percentage * PERCENTAGE_DENOMINATOR / 100"
        }
      },
      "getValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "custom:visibility": "-> view-public"
      },
      "increaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "details": "anyone can increase the balance directly, useful for withdrawalContracts and fees etc."
      },
      "initiateOperator(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "details": "operators can fund their internal wallet on initiation by simply sending some ether.",
        "params": {
          "fee": "as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR represents 100%",
          "maintainer": "an address that automates daily operations, a script, a contract...",
          "validatorPeriod": "the expected maximum staking interval. This value should between * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above. Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()"
        }
      },
      "initiatePool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,address,bytes,bytes,bool[3])": {
        "details": "checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.requires exactly 1 validator worth of funds to be deposited on initiation, prevent sybil attacks.",
        "params": {
          "config": "array(3)= [private(true) or public(false), deploy a middleware(if true), deploy liquidity pool(if true)]",
          "fee": "as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%",
          "maintainer": "an address that automates daily operations, a script, a contract... not so critical.",
          "middlewareVersion": "Pool creators can choose any allowed version as their gETHMiddleware",
          "middleware_data": "middlewares might require additional data on initialization; like name, symbol, etc.",
          "name": "is utilized while generating an ID for the Pool, similar to any other ID generation."
        }
      },
      "isPriceValid(StakeModuleLib.PooledStaking storage,uint256)": {
        "details": "known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false"
      },
      "isPrisoned(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "details": "rks.release key refers to the end of the last imprisonment, when the limitations of operator is lifted"
      },
      "isWhitelisted(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "details": "Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set"
      },
      "operatorAllowance(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "details": "an operator can not create new validators if: * 1. if operator is a monopoly * 2. allowance is filled * * But if operator is set as a fallback, it can if FALLBACK_THRESHOLD (80%) is reached on all allowances.If operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked."
      },
      "proposeStake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "details": "DCL.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCL.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 50)",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "poolId": "the id of the staking pool",
          "pubkeys": "Array of BLS12-381 public keys of the validators that will be proposed",
          "signatures1": "Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance",
          "signatures31": "Array of BLS12-381 signatures that will be used to send 31 ETH from pool on stake() function call"
        }
      },
      "setPoolVisibility(DataStoreModuleLib.IsolatedStorage storage,uint256,bool)": {
        "details": "whitelist is cleared when pool is set to public, to prevent legacy bugs if ever made private again. Note private pools can whitelist addresses with the help of a third party contract.",
        "params": {
          "makePrivate": "true if pool should be private, false for public pools"
        }
      },
      "setWhitelist(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "details": "Whitelisting contracts should implement IWhitelist interface."
      },
      "stake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,bytes[])": {
        "details": "To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 50)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "pubkeys": "Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake."
        }
      },
      "switchMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "details": "Can NOT be called again while its currently switching.advise that 100% == PERCENTAGE_DENOMINATOR"
      },
      "switchValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "details": "limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD"
      }
    },
    "title": "SML: The Staking Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FALLBACK_THRESHOLD()": {
        "notice": "if a pool has 80% of its allowances filled, fallback operator is active."
      },
      "IGNORABLE_DEBT()": {
        "notice": "ignoring any buybacks if the Liquidity Pool has a low debt"
      },
      "MAX_ALLOWANCE()": {
        "notice": "effective on allowance per operator, prevents overflow. Exclusive, save gas with +1."
      },
      "MAX_GOVERNANCE_FEE()": {
        "notice": "limiting the GOVERNANCE_FEE to 5%"
      },
      "MAX_MAINTENANCE_FEE()": {
        "notice": "limiting the pool and operator maintenance fee, 10%"
      },
      "MIN_VALIDATOR_PERIOD()": {
        "notice": "limiting the operator.validatorPeriod, between 3 months to 2 years"
      },
      "PRICE_EXPIRY()": {
        "notice": "price of gETH is only valid for 24H, minting is not allowed afterwards."
      },
      "PRISON_SENTENCE()": {
        "notice": "limiting the access for Operators in case of bad/malicious/faulty behaviour"
      },
      "SWITCH_LATENCY()": {
        "notice": "some parameter changes are effective after a delay"
      },
      "blameOperator(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,bytes)": {
        "notice": "allows imprisoning an Operator if the validator have not been exited until expected exit"
      },
      "canStake(StakeModuleLib.PooledStaking storage,bytes)": {
        "notice": "external function to check if a validator can use the pool funds"
      },
      "changeMaintainer(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "notice": "CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS"
      },
      "decreaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "notice": "external function to decrease the internal wallet balance"
      },
      "delegate(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256[],uint256[],uint256)": {
        "notice": "To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future."
      },
      "deployLiquidityPool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "deploys a bound liquidity pool for a staking pool, if it does not have one."
      },
      "deposit(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "notice": "Allowing users to deposit into a staking pool.If a pool is not public only the maintainer can deposit."
      },
      "getMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%"
      },
      "increaseWalletBalance(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "external function to increase the internal wallet balance"
      },
      "initiateOperator(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "notice": "initiates ID as a Permissionned Node Operatorrequires ID to be approved as a node operator with a specific CONTROLLER"
      },
      "initiatePool(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,address,bytes,bytes,bool[3])": {
        "notice": "Creates a Configurable Trustless Staking Pool!"
      },
      "isMintingAllowed(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Isolation Mode, can have many reasons"
      },
      "isPriceValid(StakeModuleLib.PooledStaking storage,uint256)": {
        "notice": "returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update"
      },
      "isPrisoned(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "Checks if the given operator is Prisoned"
      },
      "isPrivatePool(DataStoreModuleLib.IsolatedStorage storage,uint256)": {
        "notice": "returns true if the pool is private"
      },
      "isWhitelisted(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "notice": "checks if the Whitelist allows staker to use given private pool"
      },
      "operatorAllowance(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "notice": "maximum number of remaining operator allowance that the given Operator is allowed to create for given Pool"
      },
      "proposeStake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "notice": "Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools."
      },
      "setPoolVisibility(DataStoreModuleLib.IsolatedStorage storage,uint256,bool)": {
        "notice": "changes the visibility of the pool"
      },
      "setWhitelist(DataStoreModuleLib.IsolatedStorage storage,uint256,address)": {
        "notice": "private pools can whitelist addresses with the help of a third party contract."
      },
      "stake(StakeModuleLib.PooledStaking storage,DataStoreModuleLib.IsolatedStorage storage,uint256,bytes[])": {
        "notice": "Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet."
      },
      "switchMaintenanceFee(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "notice": "Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY."
      },
      "switchValidatorPeriod(DataStoreModuleLib.IsolatedStorage storage,uint256,uint256)": {
        "notice": "updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY."
      }
    },
    "notice": "Creating a global standard for Staking, allowing anyone to OWN a trustless staking pool, improving the user experience for stakers and removing the \"need\" for centralized or decentralized intermediaries. * Exclusively contains functions related to: * 1. Initiators and Configurable Staking Pools. * 2. Pool and Operator management. * 3. Validator Delegation. * 4. Depositing. * 5. Staking Operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}