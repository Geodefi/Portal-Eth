{
  "address": "0x1Cf3c27A6d0c5DF640c2017d0Fe4AAAB31d77653",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "soldId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "boughtId",
          "type": "uint128"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce980ed29683b704d66752db4a30ac3d03c11f635c9f5c56ba933c6d9ea13af5",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0x1Cf3c27A6d0c5DF640c2017d0Fe4AAAB31d77653",
    "transactionIndex": 1,
    "gasUsed": "3501975",
    "logsBloom": "0x
    "blockHash": "0x98931eff59b31dddf5cbc2ec7d6540e8e26cda5527e020c8894ddfa7cda5cb2c",
    "transactionHash": "0xce980ed29683b704d66752db4a30ac3d03c11f635c9f5c56ba933c6d9ea13af5",
    "logs": [],
    "blockNumber": 9149154,
    "cumulativeGasUsed": "3549919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d9b4f013ad8b24d94c0978b4d3f3ea8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"focus point (1-1) of the pricing algorithm is manipulated with PriceIn and PriceOut functions. Because the underlying price of the staked assets are expected to raise in time. One can see this similar to accomplishing a \\\"rebasing\\\" logic, with the help of a trusted price source. Whenever \\\"Effective Balance\\\" is mentioned it refers to the balance projected with the underlying price.Contracts relying on this library must initialize LiquidityModuleLib.Swap struct * Note that this library contains both functions called by users and admins. * Admin functions should be protected within contracts using this library.\",\"events\":{\"TokenSwap(address,uint256,uint256,uint128,uint128)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(LiquidityModuleLib.Swap storage,uint256[2],uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"amount of LP token user received\"}},\"calculateSwap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the number of tokens to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"self\":\"Swap struct to read from\",\"tokenIndexFrom\":\"the token to sell\",\"tokenIndexTo\":\"the token to buy\"},\"returns\":{\"dy\":\"the number of tokens the user will get\"}},\"calculateTokenAmount(LiquidityModuleLib.Swap storage,uint256[2],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\",\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned\"}},\"calculateWithdrawOneToken(LiquidityModuleLib.Swap storage,uint256,uint8)\":{\"params\":{\"self\":\"Swap struct to read from\",\"tokenAmount\":\"the amount to withdraw in the pool's precision\",\"tokenIndex\":\"which token will be withdrawn\"},\"returns\":{\"_0\":\"the amount of token user will receive\"}},\"getAdminBalance(LiquidityModuleLib.Swap storage,uint256)\":{\"params\":{\"index\":\"Index of the pooled token\",\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"admin balance in the token's precision\"}},\"getDebt(LiquidityModuleLib.Swap storage)\":{\"details\":\"might change when price is in.\",\"returns\":{\"_0\":\"debt the half of the D StableSwap invariant when debt is needed to be payed.\"}},\"getVirtualPrice(LiquidityModuleLib.Swap storage)\":{\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"the virtual price\"}},\"removeLiquidity(LiquidityModuleLib.Swap storage,uint256,uint256[2])\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"minAmounts\":\"the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"amounts of tokens the user received\"}},\"removeLiquidityImbalance(LiquidityModuleLib.Swap storage,uint256[2],uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\",\"self\":\"Swap struct to read from and write to\"},\"returns\":{\"_0\":\"actual amount of LP tokens burned in the withdrawal\"}},\"removeLiquidityOneToken(LiquidityModuleLib.Swap storage,uint256,uint8,uint256)\":{\"params\":{\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"self\":\"Swap struct to read from and write to\",\"tokenAmount\":\"the amount of the lp tokens to burn\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount chosen token that user received\"}},\"setAdminFee(LiquidityModuleLib.Swap storage,uint256)\":{\"details\":\"adminFee cannot be higher than 100% of the swap fee\",\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"setSwapFee(LiquidityModuleLib.Swap storage,uint256)\":{\"details\":\"fee cannot be higher than 1% of each swap\",\"params\":{\"newSwapFee\":\"new swap fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"swap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"self\":\"Swap struct to read from and write to\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of token user received on swap\"}},\"withdrawAdminFees(LiquidityModuleLib.Swap storage,address)\":{\"params\":{\"receiver\":\"Address to send the fees to\",\"self\":\"Swap struct to withdraw fees from\"}}},\"title\":\"LiquidityModule Library - LML\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_ADMIN_FEE()\":{\"notice\":\"Max adminFee is 50% of the swapFee adminFee does not add additional fee on top of swapFee instead it takes a certain percentage of the swapFee. Therefore it has no impact on users but only on the earnings of LPs\"},\"MAX_SWAP_FEE()\":{\"notice\":\"Max swap fee is 1% or 100bps of each swap\"},\"addLiquidity(LiquidityModuleLib.Swap storage,uint256[2],uint256)\":{\"notice\":\"Add liquidity to the pool\"},\"calculateRemoveLiquidity(LiquidityModuleLib.Swap storage,uint256)\":{\"notice\":\"Uses _calculateRemoveLiquidity with Effective Balances, then projects the prices to the token amounts to get Real Balances, before removing them from pool.\"},\"calculateSwap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256)\":{\"notice\":\"Externally calculates a swap between two tokens.\"},\"calculateTokenAmount(LiquidityModuleLib.Swap storage,uint256[2],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"calculateWithdrawOneToken(LiquidityModuleLib.Swap storage,uint256,uint8)\":{\"notice\":\"Calculate the dy, the amount of selected token that user receives and the fee of withdrawing in one token\"},\"getAdminBalance(LiquidityModuleLib.Swap storage,uint256)\":{\"notice\":\"return accumulated amount of admin fees of the token with given index\"},\"getVirtualPrice(LiquidityModuleLib.Swap storage)\":{\"notice\":\"Get the virtual price, to help calculate profit\"},\"removeLiquidity(LiquidityModuleLib.Swap storage,uint256,uint256[2])\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(LiquidityModuleLib.Swap storage,uint256[2],uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(LiquidityModuleLib.Swap storage,uint256,uint8,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"setAdminFee(LiquidityModuleLib.Swap storage,uint256)\":{\"notice\":\"Sets the admin fee\"},\"setSwapFee(LiquidityModuleLib.Swap storage,uint256)\":{\"notice\":\"update the swap fee\"},\"swap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256,uint256)\":{\"notice\":\"swap two tokens in the pool\"},\"withdrawAdminFees(LiquidityModuleLib.Swap storage,address)\":{\"notice\":\"withdraw all admin fees to a given address\"}},\"notice\":\"A library to be used within LiquidityModule * Contains functions responsible for custody and AMM functionalities with some changes. * The main functionality of Liquidity Pools is allowing the depositors to have instant access to liquidity * relying on the Oracle Price, with the help of Liquidity Providers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/modules/LiquidityModule/libs/LiquidityModuleLib.sol\":\"LiquidityModuleLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Portal/globals/macros.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// no floats in solidity. If needed, PERCENTAGE_DENOMINATOR always represents \\\"1\\\" (100%)\\nuint256 constant PERCENTAGE_DENOMINATOR = 10 ** 10;\\n\",\"keccak256\":\"0xf3a2ec72fdfc804f088c4f7245f1dbb881b23fae868ce7d8efa3f66c6008f60d\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0x5f8a92104d98c387d41e038463b666ccc095e8c38272e9f45aef9f74d352f903\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IERC1155Burnable is IERC165, IERC1155, IERC1155MetadataURI {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC165, IERC1155, IERC1155MetadataURI {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x815e777c097747b9d7e2ba44129420204b2d446736fb8e04733ebf2d482d81ad\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/ILPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\ninterface ILPToken {\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n\\n  function decimals() external view returns (uint8);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function initialize(string memory name, string memory symbol) external;\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n\\n  function symbol() external view returns (string memory);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xdfa7bbcfadd58c68455848020d47b32d125ea9b99c1c1a576f85b837b93c41b3\",\"license\":\"MIT\"},\"contracts/Portal/modules/LiquidityModule/libs/AmplificationLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// libraries\\nimport {LiquidityModuleLib as LML} from \\\"./LiquidityModuleLib.sol\\\";\\n\\n/**\\n * @title AL: Amplification Library\\n *\\n * @notice A helper library for Liquidity Module Library (LML) to calculate and ramp the A parameter of a given `LiquidityModuleLib.Swap` struct.\\n *\\n * @dev review: Liquidity Module for the StableSwap logic.\\n * @dev This library assumes the LML.Swap struct is fully validated.\\n *\\n * @dev This is an internal library, requires NO deployment.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary AmplificationLib {\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n  uint256 public constant A_PRECISION = 100;\\n  uint256 public constant MAX_A = 10 ** 6;\\n  uint256 public constant MAX_A_CHANGE = 2;\\n  uint256 public constant MIN_RAMP_TIME = 14 days;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  /**\\n   * @custom:section                           ** GETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n * (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter\\n   */\\n  function getA(LML.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self) / (A_PRECISION);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise(LML.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function _getAPrecise(LML.Swap storage self) internal view returns (uint256) {\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\n    uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n    if (block.timestamp < t1) {\\n      uint256 t0 = self.initialATime; // time when ramp is started\\n      uint256 a0 = self.initialA; // initial A value when ramp is started\\n      if (a1 > a0) {\\n        // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\n      } else {\\n        // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\n      }\\n    } else {\\n      return a1;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** SETTER FUNCTIONS **\\n   *\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param self Swap struct to update\\n   * @param futureA_ the new A to ramp towards\\n   * @param futureTime_ timestamp when the new A should be reached\\n   */\\n  function rampA(LML.Swap storage self, uint256 futureA_, uint256 futureTime_) internal {\\n    require(block.timestamp >= self.initialATime + 1 days, \\\"AL:Wait 1 day before starting ramp\\\");\\n    require(futureTime_ >= block.timestamp + MIN_RAMP_TIME, \\\"AL:Insufficient ramp time\\\");\\n    require(futureA_ > 0 && futureA_ < MAX_A, \\\"AL:futureA_ must be > 0 and < MAX_A\\\");\\n\\n    uint256 initialAPrecise = _getAPrecise(self);\\n    uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n    if (futureAPrecise < initialAPrecise) {\\n      require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"AL:futureA_ is too small\\\");\\n    } else {\\n      require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"AL:futureA_ is too large\\\");\\n    }\\n\\n    self.initialA = initialAPrecise;\\n    self.futureA = futureAPrecise;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = futureTime_;\\n\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n  }\\n\\n  /**\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\n   * cannot be called for another 24 hours\\n   * @param self Swap struct to update\\n   */\\n  function stopRampA(LML.Swap storage self) internal {\\n    require(self.futureATime > block.timestamp, \\\"AL:Ramp is already stopped\\\");\\n\\n    uint256 currentA = _getAPrecise(self);\\n    self.initialA = currentA;\\n    self.futureA = currentA;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = block.timestamp;\\n\\n    emit StopRampA(currentA, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x470bd27091127e5dbe75857dc62cf32f38309e3404a173a28403b5aa87a9ae4d\",\"license\":\"MIT\"},\"contracts/Portal/modules/LiquidityModule/libs/LiquidityModuleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// globals\\nimport {PERCENTAGE_DENOMINATOR} from \\\"../../../globals/macros.sol\\\";\\n// interfaces\\nimport {IgETH} from \\\"../../../interfaces/IgETH.sol\\\";\\n// libraries\\nimport {AmplificationLib as AL} from \\\"./AmplificationLib.sol\\\";\\n// contracts\\nimport {ILPToken} from \\\"../../../interfaces/helpers/ILPToken.sol\\\";\\n\\n/**\\n * @title LiquidityModule Library - LML\\n *\\n * @notice A library to be used within LiquidityModule\\n * * Contains functions responsible for custody and AMM functionalities with some changes.\\n * * The main functionality of Liquidity Pools is allowing the depositors to have instant access to liquidity\\n * * relying on the Oracle Price, with the help of Liquidity Providers.\\n *\\n * @dev focus point (1-1) of the pricing algorithm is manipulated with PriceIn and PriceOut functions.\\n * Because the underlying price of the staked assets are expected to raise in time.\\n * One can see this similar to accomplishing a \\\"rebasing\\\" logic, with the help of a trusted price source.\\n * Whenever \\\"Effective Balance\\\" is mentioned it refers to the balance projected with the underlying price.\\n *\\n * @dev Contracts relying on this library must initialize LiquidityModuleLib.Swap struct\\n * * Note that this library contains both functions called by users and admins.\\n * * Admin functions should be protected within contracts using this library.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\nlibrary LiquidityModuleLib {\\n  /**\\n   * @custom:section                           ** STRUCTS **\\n   */\\n\\n  /**\\n   * @notice Storage struct for the liquidity pool logic, should be correctly initialized.\\n   *\\n   * @param gETH ERC1155 contract\\n   * @param lpToken address of the LP Token\\n   * @param pooledTokenId gETH ID of the pooled staking derivative\\n   * @param initialA the amplification coefficient * n * (n - 1)\\n   * @param futureA the amplification coef that will be effective after futureATime\\n   * @param initialATime variable around the ramp management of A\\n   * @param futureATime variable around the ramp management of A\\n   * @param swapFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from resulting tokens of a swap\\n   * @param adminFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from swapFee\\n   * @param balances the pool balance as [ETH, gETH]; the contract's actual token balance might differ\\n   * @param __gap keep the contract size at 16\\n   */\\n  struct Swap {\\n    IgETH gETH;\\n    ILPToken lpToken;\\n    uint256 pooledTokenId;\\n    uint256 initialA;\\n    uint256 futureA;\\n    uint256 initialATime;\\n    uint256 futureATime;\\n    uint256 swapFee;\\n    uint256 adminFee;\\n    uint256[2] balances;\\n    uint256[5] __gap;\\n  }\\n\\n  /**\\n   * @notice Struct storing variables used in calculations in the\\n   * calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n   */\\n  struct CalculateWithdrawOneTokenDYInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 newY;\\n    uint256 feePerToken;\\n    uint256 preciseA;\\n  }\\n\\n  /**\\n   * @notice  Struct storing variables used in calculations in the\\n   * {add,remove} Liquidity functions to avoid stack too deep errors\\n   */\\n  struct ManageLiquidityInfo {\\n    ILPToken lpToken;\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 d2;\\n    uint256 preciseA;\\n    uint256 totalSupply;\\n    uint256[2] balances;\\n  }\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  /// @notice Max swap fee is 1% or 100bps of each swap\\n  uint256 public constant MAX_SWAP_FEE = PERCENTAGE_DENOMINATOR / 100;\\n\\n  /// @notice Max adminFee is 50% of the swapFee\\n  /// adminFee does not add additional fee on top of swapFee\\n  /// instead it takes a certain percentage of the swapFee.\\n  /// Therefore it has no impact on users but only on the earnings of LPs\\n  uint256 public constant MAX_ADMIN_FEE = (50 * PERCENTAGE_DENOMINATOR) / 100;\\n\\n  /// @notice Constant value used as max loop limit\\n  uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n\\n  event TokenSwap(\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[2] tokenAmounts,\\n    uint256[2] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n\\n  /**\\n   * @custom:section                           ** HELPERS **\\n   *\\n   * @custom:visibility -> pure-internal\\n   */\\n\\n  /**\\n   * @custom:subsection Math helpers\\n   */\\n\\n  /**\\n   * @notice Compares a and b and returns true if the difference between a and b is 1 or 0.\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return True if the difference between a and b is less than 1 or equal.\\n   */\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return (difference(a, b) <= 1);\\n  }\\n\\n  /**\\n   * @notice Calculates absolute difference between a and b\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return Difference between a and b\\n   */\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a > b) {\\n      return a - b;\\n    }\\n    return b - a;\\n  }\\n\\n  /**\\n   * @custom:subsection StableSwap invariants: D,Y,YD\\n   */\\n\\n  /**\\n   * @notice Calculate the price of a token in the pool with given\\n   *  balances and a particular D.\\n   *\\n   * @dev This is accomplished via solving the invariant iteratively.\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\n   *\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n   * x_1**2 + b*x_1 = c\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n   *\\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n   * @param tokenIndex Index of token we are calculating for.\\n   * @param xp a  set of pool balances. Array should be\\n   * the same cardinality as the pool.\\n   * @param d the stableswap invariant\\n   * @return the price of the token, in the same precision as in xp\\n   */\\n  function getYD(\\n    uint256 a,\\n    uint8 tokenIndex,\\n    uint256[2] memory xp,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    require(tokenIndex < numTokens, \\\"LML:Token not found\\\");\\n\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i = 0; i < numTokens; ++i) {\\n      if (i != tokenIndex) {\\n        s = s + xp[i];\\n        c = (c * d) / (xp[i] * (numTokens));\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // c = c * D * D * D * ... overflow!\\n      }\\n    }\\n    c = (c * d * AL.A_PRECISION) / (nA * numTokens);\\n\\n    uint256 b = s + ((d * AL.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\\n      yPrev = y;\\n      y = ((y * y) + c) / (2 * y + b - d);\\n      if (within1(y, yPrev)) {\\n        return y;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return the invariant, at the precision of the pool\\n   */\\n  function getD(uint256[2] memory xp, uint256 a) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    uint256 s = xp[0] + xp[1];\\n    if (s == 0) {\\n      return 0;\\n    }\\n\\n    uint256 prevD;\\n    uint256 d = s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\\n      uint256 dP = (d ** (numTokens + 1)) / (numTokens ** numTokens * xp[0] * xp[1]);\\n      prevD = d;\\n      d =\\n        ((((nA * s) / AL.A_PRECISION) + dP * numTokens) * (d)) /\\n        (((nA - AL.A_PRECISION) * (d)) / (AL.A_PRECISION) + ((numTokens + 1) * dP));\\n\\n      if (within1(d, prevD)) {\\n        return d;\\n      }\\n    }\\n\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n    // function which does not rely on D.\\n    revert(\\\"D does not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\n   * This function is used as a helper function to calculate how much TO token\\n   * the user should receive on swap.\\n   *\\n   * @param preciseA precise form of amplification coefficient\\n   * @param tokenIndexFrom index of FROM token\\n   * @param tokenIndexTo index of TO token\\n   * @param x the new total amount of FROM token\\n   * @param xp balances of the tokens in the pool\\n   * @return the amount of TO token that should remain in the pool\\n   */\\n  function getY(\\n    uint256 preciseA,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 x,\\n    uint256[2] memory xp\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = 2;\\n    require(tokenIndexFrom != tokenIndexTo, \\\"LML:Cannot compare token to itself\\\");\\n    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"LML:Tokens must be in pool\\\");\\n\\n    uint256 d = getD(xp, preciseA);\\n    uint256 c = d;\\n    uint256 s = x;\\n    uint256 nA = numTokens * (preciseA);\\n\\n    c = (c * d) / (x * numTokens);\\n    c = (c * d * (AL.A_PRECISION)) / (nA * numTokens);\\n    uint256 b = s + ((d * AL.A_PRECISION) / nA);\\n\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\\n      yPrev = y;\\n      y = ((y * y) + c) / (2 * y + b - d);\\n      if (within1(y, yPrev)) {\\n        return y;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** REBASING FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  /**\\n   * @notice This function MULTIPLIES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balance balance that will be taken into calculation\\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\\n   */\\n  function _pricedIn(\\n    Swap storage self,\\n    uint256 balance,\\n    uint256 i\\n  ) internal view returns (uint256) {\\n    return\\n      i == 1\\n        ? (balance * self.gETH.pricePerShare(self.pooledTokenId)) / self.gETH.denominator()\\n        : balance;\\n  }\\n\\n  /**\\n   * @notice This function DIVIDES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balance balance that will be taken into calculation\\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\\n   */\\n  function _pricedOut(\\n    Swap storage self,\\n    uint256 balance,\\n    uint256 i\\n  ) internal view returns (uint256) {\\n    return\\n      i == 1\\n        ? (balance * self.gETH.denominator()) / self.gETH.pricePerShare(self.pooledTokenId)\\n        : balance;\\n  }\\n\\n  /**\\n   * @notice This function MULTIPLIES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balances ARRAY of balances that will be taken into calculation\\n   */\\n  function _pricedInBatch(\\n    Swap storage self,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256[2] memory _p) {\\n    _p[0] = balances[0];\\n    _p[1] = (balances[1] * self.gETH.pricePerShare(self.pooledTokenId)) / self.gETH.denominator();\\n    return _p;\\n  }\\n\\n  /**\\n   * @notice This function DIVIDES the Staking Derivative (gETH) balance with underlying relative price (pricePerShare),\\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\\n   * @param balances ARRAY of balances that will be taken into calculation\\n   */\\n  function _pricedOutBatch(\\n    Swap storage self,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256[2] memory _p) {\\n    _p[0] = balances[0];\\n    _p[1] = (balances[1] * self.gETH.denominator()) / self.gETH.pricePerShare(self.pooledTokenId);\\n    return _p;\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** DEBT FUNCTIONS **\\n   *\\n   * @custom:visibility -> view\\n   *\\n   * @dev debt refers to the amount of ETH needed to stabilize the pool\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @notice Get Debt, The amount of buyback for stable pricing.\\n   * @param xp a  set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\n   */\\n  function _getDebt(\\n    Swap storage self,\\n    uint256[2] memory xp,\\n    uint256 a\\n  ) internal view returns (uint256 debt) {\\n    uint256 halfD = getD(xp, a) / 2;\\n    if (xp[0] >= halfD) {\\n      debt = 0;\\n    } else {\\n      uint256 dy = xp[1] - halfD;\\n      uint256 feeHalf = (dy * self.swapFee) / PERCENTAGE_DENOMINATOR / 2;\\n      debt = halfD - xp[0] + feeHalf;\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\\n   * @dev might change when price is in.\\n   */\\n  function getDebt(Swap storage self) external view returns (uint256) {\\n    return _getDebt(self, _pricedInBatch(self, self.balances), AL._getAPrecise(self));\\n  }\\n\\n  /**\\n   * @custom:section                           ** SWAP HELPER FUNCTIONS **\\n   */\\n\\n  /**\\n   * @custom:visibility -> pure-internal\\n   */\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of\\n   * LP tokens\\n   *\\n   * @param amount the amount of LP tokens that would to be burned on\\n   * withdrawal\\n   * @return amounts of tokens user will receive as an array [ETH, gETH]\\n   */\\n  function _calculateRemoveLiquidity(\\n    uint256[2] memory balances,\\n    uint256 amount,\\n    uint256 totalSupply\\n  ) internal pure returns (uint256[2] memory amounts) {\\n    require(amount <= totalSupply, \\\"LML:Cannot exceed total supply\\\");\\n\\n    amounts[0] = (balances[0] * amount) / totalSupply;\\n    amounts[1] = (balances[1] * amount) / totalSupply;\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-internal\\n   */\\n\\n  function _calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 totalSupply\\n  ) internal view returns (uint256, uint256) {\\n    uint256 dy;\\n    uint256 newY;\\n    uint256 currentY;\\n\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount, totalSupply);\\n\\n    uint256 dySwapFee = currentY - newY - dy;\\n\\n    return (dy, dySwapFee);\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   * @return dyFee the associated fee\\n   */\\n  function _calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256[2] memory balances\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\n    require(tokenIndexFrom < 2 && tokenIndexTo < 2, \\\"LML:Token index out of range\\\");\\n\\n    uint256 x = _pricedIn(self, dx + balances[tokenIndexFrom], tokenIndexFrom);\\n    uint256[2] memory pricedBalances = _pricedInBatch(self, balances);\\n    uint256 y = _pricedOut(\\n      self,\\n      getY(AL._getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, pricedBalances),\\n      tokenIndexTo // => not id, index !!!\\n    );\\n    dy = balances[tokenIndexTo] - y - 1;\\n    dyFee = (dy * self.swapFee) / (PERCENTAGE_DENOMINATOR);\\n    dy = dy - dyFee;\\n  }\\n\\n  /**\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\n   * the fee of withdrawing in one token\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\n   * @param tokenIndex which token will be withdrawn\\n   * @param self Swap struct to read from\\n   * @return the amount of token user will receive\\n   */\\n  function calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256) {\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      self.lpToken.totalSupply()\\n    );\\n    return availableTokenAmount;\\n  }\\n\\n  /**\\n   * @notice Calculate the dy of withdrawing in one token\\n   * @param self Swap struct to read from\\n   * @param tokenIndex which token will be withdrawn\\n   * @param tokenAmount the amount to withdraw in the pools precision\\n   * @return the d and the new y after withdrawing one token\\n   */\\n  function calculateWithdrawOneTokenDY(\\n    Swap storage self,\\n    uint8 tokenIndex,\\n    uint256 tokenAmount,\\n    uint256 totalSupply\\n  ) internal view returns (uint256, uint256, uint256) {\\n    // Get the current D, then solve the stableswap invariant\\n    // y_i for D - tokenAmount\\n\\n    require(tokenIndex < 2, \\\"LML:Token index out of range\\\");\\n\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n    v.preciseA = AL._getAPrecise(self);\\n    v.d0 = getD(_pricedInBatch(self, self.balances), v.preciseA);\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n    require(tokenAmount <= self.balances[tokenIndex], \\\"LML:Withdraw exceeds available\\\");\\n\\n    v.newY = _pricedOut(\\n      self,\\n      getYD(v.preciseA, tokenIndex, _pricedInBatch(self, self.balances), v.d1),\\n      tokenIndex\\n    );\\n\\n    uint256[2] memory xpReduced;\\n\\n    v.feePerToken = self.swapFee / 2;\\n    for (uint256 i = 0; i < 2; ++i) {\\n      uint256 xpi = self.balances[i];\\n      xpReduced[i] =\\n        xpi -\\n        ((((i == tokenIndex) ? (xpi * v.d1) / v.d0 - v.newY : xpi - ((xpi * v.d1) / (v.d0))) *\\n          (v.feePerToken)) / (PERCENTAGE_DENOMINATOR));\\n    }\\n\\n    uint256 dy = xpReduced[tokenIndex] -\\n      _pricedOut(\\n        self,\\n        (getYD(v.preciseA, tokenIndex, _pricedInBatch(self, xpReduced), v.d1)),\\n        tokenIndex\\n      );\\n    dy = dy - 1;\\n\\n    return (dy, v.newY, self.balances[tokenIndex]);\\n  }\\n\\n  /**\\n   * @notice Get the virtual price, to help calculate profit\\n   * @param self Swap struct to read from\\n   * @return the virtual price\\n   */\\n  function getVirtualPrice(Swap storage self) external view returns (uint256) {\\n    uint256 d = getD(_pricedInBatch(self, self.balances), AL._getAPrecise(self));\\n    ILPToken lpToken = self.lpToken;\\n    uint256 supply = lpToken.totalSupply();\\n    if (supply > 0) {\\n      return (d * 10 ** 18) / supply;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   */\\n  function calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256 dy) {\\n    (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, self.balances);\\n  }\\n\\n  /**\\n   * @notice Uses _calculateRemoveLiquidity with Effective Balances,\\n   * then projects the prices to the token amounts\\n   * to get Real Balances, before removing them from pool.\\n   */\\n  function calculateRemoveLiquidity(\\n    Swap storage self,\\n    uint256 amount\\n  ) external view returns (uint256[2] memory) {\\n    return\\n      _pricedOutBatch(\\n        self,\\n        _calculateRemoveLiquidity(\\n          _pricedInBatch(self, self.balances),\\n          amount,\\n          self.lpToken.totalSupply()\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param self Swap struct to read from\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\n   * deposit was false, total amount of lp token that will be burned\\n   */\\n  function calculateTokenAmount(\\n    Swap storage self,\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256) {\\n    uint256 a = AL._getAPrecise(self);\\n    uint256[2] memory balances = self.balances;\\n\\n    uint256 d0 = getD(_pricedInBatch(self, balances), a);\\n    for (uint256 i = 0; i < 2; ++i) {\\n      if (deposit) {\\n        balances[i] = balances[i] + amounts[i];\\n      } else {\\n        require(amounts[i] <= balances[i], \\\"LML:Cannot withdraw > available\\\");\\n        balances[i] = balances[i] - amounts[i];\\n      }\\n    }\\n    uint256 d1 = getD(_pricedInBatch(self, balances), a);\\n    uint256 totalSupply = self.lpToken.totalSupply();\\n\\n    if (deposit) {\\n      return ((d1 - d0) * totalSupply) / d0;\\n    } else {\\n      return ((d0 - d1) * totalSupply) / d0;\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** ADMIN HELPER FUNCTIONS **\\n   *\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @notice return accumulated amount of admin fees of the token with given index\\n   * @param self Swap struct to read from\\n   * @param index Index of the pooled token\\n   * @return admin balance in the token's precision\\n   */\\n  function getAdminBalance(Swap storage self, uint256 index) external view returns (uint256) {\\n    require(index < 2, \\\"LML:Token index out of range\\\");\\n    if (index == 0) {\\n      return address(this).balance - (self.balances[index]);\\n    } else if (index == 1) {\\n      return self.gETH.balanceOf(address(this), self.pooledTokenId) - (self.balances[index]);\\n    } else {\\n      revert();\\n    }\\n  }\\n\\n  /**\\n   * @custom:section                           ** STATE MODIFYING FUNCTIONS **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) external returns (uint256) {\\n    IgETH gETHRef = self.gETH;\\n    if (tokenIndexFrom == 0) {\\n      // Means user is selling some ETH to the pool to get some gETH.\\n      // In which case, we need to send exactly that amount of ETH.\\n      require(dx == msg.value, \\\"LML:Cannot swap != eth sent\\\");\\n    }\\n    if (tokenIndexFrom == 1) {\\n      // Means user is selling some gETH to the pool to get some ETH.\\n\\n      require(dx <= gETHRef.balanceOf(msg.sender, self.pooledTokenId), \\\"LML:Cannot swap > you own\\\");\\n\\n      // Transfer tokens first\\n      uint256 beforeBalance = gETHRef.balanceOf(address(this), self.pooledTokenId);\\n      gETHRef.safeTransferFrom(msg.sender, address(this), self.pooledTokenId, dx, \\\"\\\");\\n\\n      // Use the actual transferred amount for AMM math\\n      dx = gETHRef.balanceOf(address(this), self.pooledTokenId) - beforeBalance;\\n    }\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    // Meaning the real balances *without* any effect of underlying price\\n    // However, when we call _calculateSwap, it uses pricedIn function before calculation,\\n    // and pricedOut function after the calculation. So, we don't need to use priceOut here.\\n    uint256[2] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n\\n    require(dy >= minDy, \\\"LML:Swap didnot result in min tokens\\\");\\n    uint256 dyAdminFee = (dyFee * self.adminFee) / PERCENTAGE_DENOMINATOR;\\n\\n    // To prevent any Reentrancy, balances are updated before transfering the tokens.\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n    if (tokenIndexTo == 0) {\\n      // Means contract is going to send Idle Ether (ETH)\\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n    if (tokenIndexTo == 1) {\\n      // Means contract is going to send staked ETH (gETH)\\n      gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, dy, \\\"\\\");\\n    }\\n\\n    emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param self Swap struct to read from and write to\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(\\n    Swap storage self,\\n    uint256[2] memory amounts,\\n    uint256 minToMint\\n  ) external returns (uint256) {\\n    require(amounts[0] == msg.value, \\\"LML:received less or more ETH than expected\\\");\\n    IgETH gETHRef = self.gETH;\\n    // current state\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      self.lpToken,\\n      0,\\n      0,\\n      0,\\n      AL._getAPrecise(self),\\n      0,\\n      self.balances\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n    if (v.totalSupply != 0) {\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\n    }\\n\\n    uint256[2] memory newBalances;\\n    newBalances[0] = v.balances[0] + msg.value;\\n\\n    for (uint256 i = 0; i < 2; ++i) {\\n      require(v.totalSupply != 0 || amounts[i] > 0, \\\"LML:Must supply all tokens in pool\\\");\\n    }\\n\\n    {\\n      // Transfer tokens first\\n      uint256 beforeBalance = gETHRef.balanceOf(address(this), self.pooledTokenId);\\n      gETHRef.safeTransferFrom(msg.sender, address(this), self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n      // Update the amounts[] with actual transfer amount\\n      amounts[1] = gETHRef.balanceOf(address(this), self.pooledTokenId) - beforeBalance;\\n\\n      newBalances[1] = v.balances[1] + amounts[1];\\n    }\\n\\n    // invariant after change\\n    v.d1 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\n    require(v.d1 > v.d0, \\\"LML:D should increase\\\");\\n\\n    // updated to reflect fees and calculate the user's LP tokens\\n    v.d2 = v.d1;\\n    uint256[2] memory fees;\\n\\n    if (v.totalSupply != 0) {\\n      uint256 feePerToken = self.swapFee / 2;\\n      for (uint256 i = 0; i < 2; ++i) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        fees[i] =\\n          (feePerToken * (difference(idealBalance, newBalances[i]))) /\\n          (PERCENTAGE_DENOMINATOR);\\n        self.balances[i] =\\n          newBalances[i] -\\n          ((fees[i] * (self.adminFee)) / (PERCENTAGE_DENOMINATOR));\\n        newBalances[i] = newBalances[i] - (fees[i]);\\n      }\\n      v.d2 = getD(_pricedInBatch(self, newBalances), v.preciseA);\\n    } else {\\n      // the initial depositor doesn't pay fees\\n      self.balances = newBalances;\\n    }\\n\\n    uint256 toMint;\\n    if (v.totalSupply == 0) {\\n      toMint = v.d1;\\n    } else {\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n    }\\n\\n    require(toMint >= minToMint, \\\"LML:Could not mint min requested\\\");\\n    // mint the user's LP tokens\\n    v.lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param self Swap struct to read from and write to\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   * acceptable for this burn. Useful as a front-running mitigation\\n   * @return amounts of tokens the user received\\n   */\\n  function removeLiquidity(\\n    Swap storage self,\\n    uint256 amount,\\n    uint256[2] calldata minAmounts\\n  ) external returns (uint256[2] memory) {\\n    ILPToken lpToken = self.lpToken;\\n    IgETH gETHRef = self.gETH;\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\"LML:>LP.balanceOf\\\");\\n\\n    uint256[2] memory balances = self.balances;\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    uint256[2] memory amounts = _pricedOutBatch(\\n      self,\\n      _calculateRemoveLiquidity(_pricedInBatch(self, balances), amount, totalSupply)\\n    );\\n\\n    for (uint256 i = 0; i < amounts.length; ++i) {\\n      require(amounts[i] >= minAmounts[i], \\\"LML:amounts[i] < minAmounts[i]\\\");\\n      self.balances[i] = balances[i] - amounts[i];\\n    }\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    lpToken.burnFrom(msg.sender, amount);\\n\\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\\\"\\\");\\n    require(sent, \\\"LML:Failed to send Ether\\\");\\n\\n    gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n    emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param self Swap struct to read from and write to\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount\\n  ) external returns (uint256) {\\n    ILPToken lpToken = self.lpToken;\\n    IgETH gETHRef = self.gETH;\\n\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\"LML:>LP.balanceOf\\\");\\n    require(tokenIndex < 2, \\\"LML:Token not found\\\");\\n\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      totalSupply\\n    );\\n\\n    require(dy >= minAmount, \\\"LML:dy < minAmount\\\");\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    self.balances[tokenIndex] =\\n      self.balances[tokenIndex] -\\n      (dy + ((dyFee * (self.adminFee)) / (PERCENTAGE_DENOMINATOR)));\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    if (tokenIndex == 0) {\\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n    if (tokenIndex == 1) {\\n      gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, dy, \\\"\\\");\\n    }\\n\\n    emit RemoveLiquidityOne(msg.sender, tokenAmount, totalSupply, tokenIndex, dy);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   *\\n   * @param self Swap struct to read from and write to\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @return actual amount of LP tokens burned in the withdrawal\\n   */\\n  function removeLiquidityImbalance(\\n    Swap storage self,\\n    uint256[2] memory amounts,\\n    uint256 maxBurnAmount\\n  ) public returns (uint256) {\\n    IgETH gETHRef = self.gETH;\\n\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      self.lpToken,\\n      0,\\n      0,\\n      0,\\n      AL._getAPrecise(self),\\n      0,\\n      self.balances\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n\\n    require(\\n      maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0,\\n      \\\"LML:>LP.balanceOf\\\"\\n    );\\n\\n    uint256 feePerToken = self.swapFee / 2;\\n    uint256[2] memory fees;\\n\\n    {\\n      uint256[2] memory balances1;\\n\\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\\n      for (uint256 i = 0; i < 2; ++i) {\\n        require(amounts[i] <= v.balances[i], \\\"LML:Cannot withdraw > available\\\");\\n        balances1[i] = v.balances[i] - amounts[i];\\n      }\\n      v.d1 = getD(_pricedInBatch(self, balances1), v.preciseA);\\n\\n      for (uint256 i = 0; i < 2; ++i) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        uint256 _diff = difference(idealBalance, balances1[i]);\\n        fees[i] = (feePerToken * _diff) / PERCENTAGE_DENOMINATOR;\\n        uint256 adminFee = self.adminFee;\\n        {\\n          self.balances[i] = balances1[i] - ((fees[i] * adminFee) / PERCENTAGE_DENOMINATOR);\\n        }\\n        balances1[i] = balances1[i] - fees[i];\\n      }\\n\\n      v.d2 = getD(_pricedInBatch(self, balances1), v.preciseA);\\n    }\\n\\n    uint256 tokenAmount = ((v.d0 - v.d2) * (v.totalSupply)) / v.d0;\\n    require(tokenAmount != 0, \\\"LML:Burnt amount cannot be zero\\\");\\n    tokenAmount = tokenAmount + 1;\\n\\n    require(tokenAmount <= maxBurnAmount, \\\"LML:tokenAmount > maxBurnAmount\\\");\\n\\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\\\"\\\");\\n    require(sent, \\\"LML:Failed to send Ether\\\");\\n\\n    gETHRef.safeTransferFrom(address(this), msg.sender, self.pooledTokenId, amounts[1], \\\"\\\");\\n\\n    emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n    return tokenAmount;\\n  }\\n\\n  /**\\n   * @custom:subsection                           ** ADMIN FUNCTIONS **\\n   */\\n\\n  /**\\n   * @notice withdraw all admin fees to a given address\\n   * @param self Swap struct to withdraw fees from\\n   * @param receiver Address to send the fees to\\n   */\\n  function withdrawAdminFees(Swap storage self, address receiver) external {\\n    IgETH gETHRef = self.gETH;\\n    uint256 tokenBalance = gETHRef.balanceOf(address(this), self.pooledTokenId) - self.balances[1];\\n    if (tokenBalance != 0) {\\n      gETHRef.safeTransferFrom(address(this), receiver, self.pooledTokenId, tokenBalance, \\\"\\\");\\n    }\\n\\n    uint256 etherBalance = address(this).balance - self.balances[0];\\n    if (etherBalance != 0) {\\n      (bool sent, ) = payable(receiver).call{value: etherBalance}(\\\"\\\");\\n      require(sent, \\\"LML:Failed to send Ether\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the admin fee\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\n   * @param self Swap struct to update\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(Swap storage self, uint256 newAdminFee) external {\\n    require(newAdminFee <= MAX_ADMIN_FEE, \\\"LML:Fee is too high\\\");\\n    self.adminFee = newAdminFee;\\n\\n    emit NewAdminFee(newAdminFee);\\n  }\\n\\n  /**\\n   * @notice update the swap fee\\n   * @dev fee cannot be higher than 1% of each swap\\n   * @param self Swap struct to update\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(Swap storage self, uint256 newSwapFee) external {\\n    require(newSwapFee <= MAX_SWAP_FEE, \\\"LML:Fee is too high\\\");\\n    self.swapFee = newSwapFee;\\n\\n    emit NewSwapFee(newSwapFee);\\n  }\\n}\\n\",\"keccak256\":\"0x6bc30df7906c49316bc08bf3eedd266a8374b742ddee95c322a852935ea2f496\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613e5d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063ab3d8544116100ac578063c4765c651161007b578063c4765c6514610256578063ec77902d14610276578063f3de036214610289578063faa4649914610291578063fbe27cf7146102b157600080fd5b8063ab3d8544146101fb578063b115bcb214610203578063b8217da314610216578063c3c4e0d71461023657600080fd5b8063343b1734116100e8578063343b1734146101a2578063408e6d7d146101b557806342179550146101d557806378d67d72146101e857600080fd5b806306de8d5b1461011a5780630705bc7e14610140578063145f73dc14610162578063289657a214610182575b600080fd5b61012d6101283660046138aa565b6102d1565b6040519081526020015b60405180910390f35b81801561014c57600080fd5b5061016061015b366004613987565b61055b565b005b610175610170366004613987565b6105ef565b6040516101379190613b5d565b81801561018e57600080fd5b5061017561019d3660046139a9565b6106cb565b61012d6101b0366004613855565b610abd565b8180156101c157600080fd5b5061012d6101d03660046138f0565b610b0b565b61012d6101e3366004613a48565b61129a565b61012d6101f63660046139df565b6112e7565b61012d61137d565b61012d610211366004613987565b611390565b81801561022257600080fd5b5061012d610231366004613a0b565b61148c565b81801561024257600080fd5b5061012d6102513660046138f0565b611851565b81801561026257600080fd5b5061012d610271366004613a7c565b611f2a565b61012d610284366004613855565b61247c565b61012d61258b565b81801561029d57600080fd5b506101606102ac36600461386e565b6125a7565b8180156102bd57600080fd5b506101606102cc366004613987565b61274c565b6000806102dd856127e4565b604080518082019182905291925060009190600988019060029082845b8154815260200190600101908083116102fa57505050505090506000610329610323888461288e565b846129c0565b905060005b60028110156104725785156103915786816002811061034f5761034f613dfb565b602002013583826002811061036657610366613dfb565b60200201516103759190613c6f565b83826002811061038757610387613dfb565b6020020152610462565b8281600281106103a3576103a3613dfb565b60200201518782600281106103ba576103ba613dfb565b602002013511156104125760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a43616e6e6f74207769746864726177203e20617661696c61626c650060448201526064015b60405180910390fd5b86816002811061042457610424613dfb565b602002013583826002811061043b5761043b613dfb565b602002015161044a9190613db3565b83826002811061045c5761045c613dfb565b60200201525b61046b81613dca565b905061032e565b506000610488610482898561288e565b856129c0565b905060008860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190613aca565b905086156105485782816105288285613db3565b6105329190613d94565b61053c9190613c87565b95505050505050610554565b82816105288483613db3565b9392505050565b61056b60646402540be400613c87565b8111156105b05760405162461bcd60e51b81526020600482015260136024820152720989a98748ccaca40d2e640e8dede40d0d2ced606b1b6044820152606401610409565b600782018190556040518181527fd88ea5155021c6f8dafa1a741e173f595cdf77ce7c17d43342131d7f06afdfe5906020015b60405180910390a15050565b6105f76137bd565b60408051808201918290526106c29185916106bd9161063a918491600983019060029082845b81548152602001906001019080831161061d57505050505061288e565b6001870154604080516318160ddd60e01b8152905188926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613aca565b612b46565b612be1565b90505b92915050565b6106d36137bd565b600184015484546040516370a0823160e01b81523360048201526001600160a01b03928316929091169082906370a082319060240160206040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190613aca565b8511156107775760405162461bcd60e51b815260040161040990613c0d565b6040805180820191829052600091600989019060029082845b81548152602001906001019080831161079057505050505090506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190613aca565b90506000610839896106bd6108328c8761288e565b8b86612b46565b905060005b60028110156109225787816002811061085957610859613dfb565b602002013582826002811061087057610870613dfb565b602002015110156108c35760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a616d6f756e74735b695d203c206d696e416d6f756e74735b695d00006044820152606401610409565b8181600281106108d5576108d5613dfb565b60200201518482600281106108ec576108ec613dfb565b60200201516108fb9190613db3565b8a600901826002811061091057610910613dfb565b015561091b81613dca565b905061083e565b5060405163079cc67960e41b81526001600160a01b038616906379cc6790906109519033908c90600401613b44565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50508251604051600093503392508381818185875af1925050503d80600081146109c5576040519150601f19603f3d011682016040523d82523d6000602084013e6109ca565b606091505b50509050806109eb5760405162461bcd60e51b815260040161040990613bd6565b846001600160a01b031663f242432a30338d6002015486600160028110610a1457610a14613dfb565b60200201516040518563ffffffff1660e01b8152600401610a389493929190613b0c565b600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b503392507fdd3c0336a16f1b64f172b7bb0dad5b2b3c7c76f91e8c4aafd6aae60dce8001539150849050610a9a8c87613db3565b604051610aa8929190613bbb565b60405180910390a25098975050505050505050565b604080518082019182905260098301805482526000926106c5928592610afd9284929190600290600a85016020850180831161061d57505050505061288e565b610b06856127e4565b612cb2565b81516000903414610b725760405162461bcd60e51b815260206004820152602b60248201527f4c4d4c3a7265636569766564206c657373206f72206d6f72652045544820746860448201526a185b88195e1c1958dd195960aa1b6064820152608401610409565b83546040805160e08101825260018701546001600160a01b039081168252600060208301819052928201839052606082018390529092169160808101610bb7886127e4565b8152600060208201526040805180820182529101906009890160028282826020028201915b815481526020019060010190808311610bdc575050505050815250905080600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3657600080fd5b505afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190613aca565b60a0820181905215610c9b57610c95610c8b878360c0015161288e565b82608001516129c0565b60208201525b610ca36137bd565b60c082015151610cb4903490613c6f565b815260005b6002811015610d515760a0830151151580610cea57506000878260028110610ce357610ce3613dfb565b6020020151115b610d415760405162461bcd60e51b815260206004820152602260248201527f4c4d4c3a4d75737420737570706c7920616c6c20746f6b656e7320696e20706f6044820152611bdb60f21b6064820152608401610409565b610d4a81613dca565b9050610cb9565b506002870154604051627eeac760e11b81526000916001600160a01b0386169162fdd58e91610d8591309190600401613b44565b60206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190613aca565b9050836001600160a01b031663f242432a33308b600201548b600160028110610e0057610e00613dfb565b60200201516040518563ffffffff1660e01b8152600401610e249493929190613b0c565b600060405180830381600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b5050506002890154604051627eeac760e11b81528392506001600160a01b0387169162fdd58e91610e87913091600401613b44565b60206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190613aca565b610ee19190613db3565b602080890182905260c08501510151610efa9190613c6f565b602083015250610f17610f0d888361288e565b83608001516129c0565b60408301819052602083015110610f685760405162461bcd60e51b81526020600482015260156024820152744c4d4c3a442073686f756c6420696e63726561736560581b6044820152606401610409565b60408201516060830152610f7a6137bd565b60a08301511561112557600060028960070154610f979190613c87565b905060005b600281101561110257600085602001518660c001518360028110610fc257610fc2613dfb565b60200201518760400151610fd69190613d94565b610fe09190613c87565b90506402540be40061100882878560028110610ffe57610ffe613dfb565b6020020151612d4a565b6110129085613d94565b61101c9190613c87565b84836002811061102e5761102e613dfb565b602002015260088b01546402540be4009085846002811061105157611051613dfb565b60200201516110609190613d94565b61106a9190613c87565b85836002811061107c5761107c613dfb565b602002015161108b9190613db3565b8b60090183600281106110a0576110a0613dfb565b01558382600281106110b4576110b4613dfb565b60200201518583600281106110cb576110cb613dfb565b60200201516110da9190613db3565b8583600281106110ec576110ec613dfb565b6020020152506110fb81613dca565b9050610f9c565b5061111a6111108a8561288e565b85608001516129c0565b606085015250611136565b611134600989018360026137db565b505b60008360a001516000141561115057506040830151611181565b602084015160a0850151606086015161116a908390613db3565b6111749190613d94565b61117e9190613c87565b90505b868110156111d15760405162461bcd60e51b815260206004820181905260248201527f4c4d4c3a436f756c64206e6f74206d696e74206d696e207265717565737465646044820152606401610409565b83516040516340c10f1960e01b81526001600160a01b03909116906340c10f19906112029033908590600401613b44565b600060405180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b50505050336001600160a01b03167f26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a76889848760400151858960a001516112769190613c6f565b6040516112869493929190613b8e565b60405180910390a298975050505050505050565b60408051808201918290526000916112dd91879187918791879190600986019060029082845b8154815260200190600101908083116112c0575050505050612d68565b5095945050505050565b6000806112dd8585858860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190613aca565b612e74565b61138d60646402540be400613c87565b81565b6000600282106113b25760405162461bcd60e51b815260040161040990613c38565b816113df578260090182600281106113cc576113cc613dfb565b01546113d89047613db3565b90506106c5565b8160011415610115578260090182600281106113fd576113fd613dfb565b015483546002850154604051627eeac760e11b81526001600160a01b039092169162fdd58e9161143291309190600401613b44565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190613aca565b6113d89190613db3565b600184015484546040516370a0823160e01b81523360048201526000926001600160a01b0390811692169082906370a082319060240160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190613aca565b8611156115315760405162461bcd60e51b815260040161040990613c0d565b60028560ff161061157a5760405162461bcd60e51b81526020600482015260136024820152721313530e951bdad95b881b9bdd08199bdd5b99606a1b6044820152606401610409565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b557600080fd5b505afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190613aca565b90506000806115fe8a8a8a86612e74565b91509150868210156116475760405162461bcd60e51b81526020600482015260126024820152711313530e991e480f081b5a5b905b5bdd5b9d60721b6044820152606401610409565b6402540be4008a600801548261165d9190613d94565b6116679190613c87565b6116719083613c6f565b8a6009018960ff166002811061168957611689613dfb565b01546116959190613db3565b8a6009018960ff16600281106116ad576116ad613dfb565b015560405163079cc67960e41b81526001600160a01b038616906379cc6790906116dd9033908d90600401613b44565b600060405180830381600087803b1580156116f757600080fd5b505af115801561170b573d6000803e3d6000fd5b5050505060ff881661178157604051600090339084908381818185875af1925050503d8060008114611759576040519150601f19603f3d011682016040523d82523d6000602084013e61175e565b606091505b505090508061177f5760405162461bcd60e51b815260040161040990613bd6565b505b8760ff16600114156117f65760028a0154604051637921219560e11b81526001600160a01b0386169163f242432a916117c39130913391908890600401613b0c565b600060405180830381600087803b1580156117dd57600080fd5b505af11580156117f1573d6000803e3d6000fd5b505050505b604080518a81526020810185905260ff8a168183015260608101849052905133917f43fb02998f4e03da2e0e6fff53fdbf0c40a9f45f145dc377fc30615d7d7a8a64919081900360800190a25093505050505b949350505050565b82546040805160e08101825260018601546001600160a01b039081168252600060208301819052928201839052606082018390529192919091169082906080810161189b886127e4565b8152600060208201526040805180820182529101906009890160028282826020028201915b8154815260200190600101908083116118c0575050505050815250905080600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561191a57600080fd5b505afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613aca565b60a082015280516040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561199957600080fd5b505afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d19190613aca565b84111580156119df57508315155b6119fb5760405162461bcd60e51b815260040161040990613c0d565b600060028760070154611a0e9190613c87565b9050611a186137bd565b611a206137bd565b611a316111108a8660c0015161288e565b602085015260005b6002811015611b25578460c001518160028110611a5857611a58613dfb565b6020020151898260028110611a6f57611a6f613dfb565b60200201511115611ac25760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a43616e6e6f74207769746864726177203e20617661696c61626c65006044820152606401610409565b888160028110611ad457611ad4613dfb565b60200201518560c001518260028110611aef57611aef613dfb565b6020020151611afe9190613db3565b828260028110611b1057611b10613dfb565b6020020152611b1e81613dca565b9050611a39565b50611b336111108a8361288e565b604085015260005b6002811015611c9f57600085602001518660c001518360028110611b6157611b61613dfb565b60200201518760400151611b759190613d94565b611b7f9190613c87565b90506000611b9982858560028110610ffe57610ffe613dfb565b90506402540be400611bab8288613d94565b611bb59190613c87565b858460028110611bc757611bc7613dfb565b602002015260088c01546402540be40081878660028110611bea57611bea613dfb565b6020020151611bf99190613d94565b611c039190613c87565b858560028110611c1557611c15613dfb565b6020020151611c249190613db3565b8d6009018560028110611c3957611c39613dfb565b0155858460028110611c4d57611c4d613dfb565b6020020151858560028110611c6457611c64613dfb565b6020020151611c739190613db3565b858560028110611c8557611c85613dfb565b602002015250611c989150829050613dca565b9050611b3b565b50611cad6111108a8361288e565b60608501819052602085015160a0860151600093509091611cce9083613db3565b611cd89190613d94565b611ce29190613c87565b905080611d315760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a4275726e7420616d6f756e742063616e6e6f74206265207a65726f006044820152606401610409565b611d3c816001613c6f565b905086811115611d8e5760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a746f6b656e416d6f756e74203e206d61784275726e416d6f756e74006044820152606401610409565b835160405163079cc67960e41b81526001600160a01b03909116906379cc679090611dbf9033908590600401613b44565b600060405180830381600087803b158015611dd957600080fd5b505af1158015611ded573d6000803e3d6000fd5b50508951604051600093503392508381818185875af1925050503d8060008114611e33576040519150601f19603f3d011682016040523d82523d6000602084013e611e38565b606091505b5050905080611e595760405162461bcd60e51b815260040161040990613bd6565b856001600160a01b031663f242432a30338d600201548d600160028110611e8257611e82613dfb565b60200201516040518563ffffffff1660e01b8152600401611ea69493929190613b0c565b600060405180830381600087803b158015611ec057600080fd5b505af1158015611ed4573d6000803e3d6000fd5b50505050336001600160a01b03167f2b5508378d7e19e0d5fa338419034731416c4f5b219a10379956f764317fd47e8a858860400151868a60a00151611f1a9190613db3565b604051610aa89493929190613b8e565b84546000906001600160a01b031660ff8616611f8f57348414611f8f5760405162461bcd60e51b815260206004820152601b60248201527f4c4d4c3a43616e6e6f74207377617020213d206574682073656e7400000000006044820152606401610409565b8560ff16600114156121e5576002870154604051627eeac760e11b81526001600160a01b0383169162fdd58e91611fca913391600401613b44565b60206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190613aca565b8411156120695760405162461bcd60e51b815260206004820152601960248201527f4c4d4c3a43616e6e6f742073776170203e20796f75206f776e000000000000006044820152606401610409565b6002870154604051627eeac760e11b81526000916001600160a01b0384169162fdd58e9161209c91309190600401613b44565b60206040518083038186803b1580156120b457600080fd5b505afa1580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec9190613aca565b6002890154604051637921219560e11b81529192506001600160a01b0384169163f242432a9161212491339130918b90600401613b0c565b600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b5050506002890154604051627eeac760e11b81528392506001600160a01b0385169162fdd58e91612187913091600401613b44565b60206040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613aca565b6121e19190613db3565b9450505b60408051808201918290526000918291829160098c019060029082845b81548152602001906001019080831161220257505050505090506122298a8a8a8a85612d68565b90935091508583101561228a5760405162461bcd60e51b8152602060048201526024808201527f4c4d4c3a53776170206469646e6f7420726573756c7420696e206d696e20746f6044820152636b656e7360e01b6064820152608401610409565b60006402540be4008b60080154846122a29190613d94565b6122ac9190613c87565b905087828b60ff16600281106122c4576122c4613dfb565b60200201516122d39190613c6f565b8b6009018b60ff16600281106122eb576122eb613dfb565b015580848360ff8c166002811061230457612304613dfb565b60200201516123139190613db3565b61231d9190613db3565b8b6009018a60ff166002811061233557612335613dfb565b015560ff89166123a957604051600090339086908381818185875af1925050503d8060008114612381576040519150601f19603f3d011682016040523d82523d6000602084013e612386565b606091505b50509050806123a75760405162461bcd60e51b815260040161040990613bd6565b505b8860ff166001141561241e5760028b0154604051637921219560e11b81526001600160a01b0387169163f242432a916123eb9130913391908a90600401613b0c565b600060405180830381600087803b15801561240557600080fd5b505af1158015612419573d6000803e3d6000fd5b505050505b604080518981526020810186905260ff8c8116828401528b166060820152905133917fc6c1e0630dbe9130cc068028486c0d118ddcea348550819defd5cb8c257f8a38919081900360800190a2509193505050505b95945050505050565b6040805180820191829052600983018054825260009283926124ca926124bc9287929190600290600a85016020850180831161061d57505050505061288e565b6124c5856127e4565b6129c0565b905060008360010160009054906101000a90046001600160a01b031690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252357600080fd5b505afa158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190613aca565b90508015612580578061257684670de0b6b3a7640000613d94565b6124739190613c87565b506000949350505050565b606461259d6402540be4006032613d94565b61138d9190613c87565b81546001600160a01b0316600060098401600101546002850154604051627eeac760e11b81526001600160a01b0385169162fdd58e916125eb913091600401613b44565b60206040518083038186803b15801561260357600080fd5b505afa158015612617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263b9190613aca565b6126459190613db3565b905080156126b6576002840154604051637921219560e11b81526001600160a01b0384169163f242432a916126839130918891908790600401613b0c565b600060405180830381600087803b15801561269d57600080fd5b505af11580156126b1573d6000803e3d6000fd5b505050505b60098401546000906126c89047613db3565b90508015612745576000846001600160a01b03168260405160006040518083038185875af1925050503d806000811461271d576040519150601f19603f3d011682016040523d82523d6000602084013e612722565b606091505b50509050806127435760405162461bcd60e51b815260040161040990613bd6565b505b5050505050565b606461275e6402540be4006032613d94565b6127689190613c87565b8111156127ad5760405162461bcd60e51b81526020600482015260136024820152720989a98748ccaca40d2e640e8dede40d0d2ced606b1b6044820152606401610409565b600882018190556040518181527fab599d640ca80cde2b09b128a4154a8dfe608cb80f4c9399c8b954b01fd35f38906020016105e3565b600681015460048201546000919042821115610554576005840154600385015480831115612852576128168285613db3565b6128208342613db3565b61282a8386613db3565b6128349190613d94565b61283e9190613c87565b6128489082613c6f565b9695505050505050565b61285c8285613db3565b6128668342613db3565b6128708584613db3565b61287a9190613d94565b6128849190613c87565b6128489082613db3565b6128966137bd565b815181528254604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b1580156128de57600080fd5b505afa1580156128f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129169190613aca565b8354600285015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b9161294c9160040190815260200190565b60206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190613aca565b60208401516129ab9190613d94565b6129b59190613c87565b602082015292915050565b6020820151825160009160029183916129d891613c6f565b9050806129ea576000925050506106c5565b600081816129f88588613d94565b905060005b610100811015612b07576020890151895160009190612a1c8980613cec565b612a269190613d94565b612a309190613d94565b612a3b886001613c6f565b612a459086613cec565b612a4f9190613c87565b905083945080876001612a629190613c6f565b612a6c9190613d94565b606485612a798287613db3565b612a839190613d94565b612a8d9190613c87565b612a979190613c6f565b84612aa28984613d94565b6064612aae8a88613d94565b612ab89190613c87565b612ac29190613c6f565b612acc9190613d94565b612ad69190613c87565b9350612ae28486612eb7565b15612af657839750505050505050506106c5565b50612b0081613dca565b90506129fd565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b6044820152606401610409565b612b4e6137bd565b81831115612b9e5760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a43616e6e6f742065786365656420746f74616c20737570706c7900006044820152606401610409565b83518290612bad908590613d94565b612bb79190613c87565b815260208401518290612bcb908590613d94565b612bd59190613c87565b60208201529392505050565b612be96137bd565b815181528254600284015460405163f759cc3b60e01b815260048101919091526001600160a01b039091169063f759cc3b9060240160206040518083038186803b158015612c3657600080fd5b505afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613aca565b8354604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b15801561296457600080fd5b6000806002612cc185856129c0565b612ccb9190613c87565b84519091508111612cdf5760009150612d42565b6020840151600090612cf2908390613db3565b9050600060026402540be400886007015484612d0e9190613d94565b612d189190613c87565b612d229190613c87565b86519091508190612d339085613db3565b612d3d9190613c6f565b935050505b509392505050565b600081831115612d5e576113d88284613db3565b6106c28383613db3565b60008060028660ff16108015612d81575060028560ff16105b612d9d5760405162461bcd60e51b815260040161040990613c38565b6000612dd088858960ff1660028110612db857612db8613dfb565b6020020151612dc79088613c6f565b8960ff16612ece565b90506000612dde898661288e565b90506000612e048a612dfb612df28d6127e4565b8c8c8888612ff4565b8a60ff16613215565b9050600181878a60ff1660028110612e1e57612e1e613dfb565b6020020151612e2d9190613db3565b612e379190613db3565b94506402540be4008a6007015486612e4f9190613d94565b612e599190613c87565b9350612e658486613db3565b94505050509550959350505050565b6000806000806000612e8889888a896132ef565b91945092509050600083612e9c8484613db3565b612ea69190613db3565b939a93995092975050505050505050565b60006001612ec58484612d4a565b11159392505050565b600081600114612ede5782611849565b8354604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015612f2257600080fd5b505afa158015612f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5a9190613aca565b8454600286015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b91612f909160040190815260200190565b60206040518083038186803b158015612fa857600080fd5b505afa158015612fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe09190613aca565b612fea9085613d94565b6118499190613c87565b6000600260ff86811690861614156130595760405162461bcd60e51b815260206004820152602260248201527f4c4d4c3a43616e6e6f7420636f6d7061726520746f6b656e20746f2069747365604482015261363360f11b6064820152608401610409565b808660ff1610801561306d5750808560ff16105b6130b95760405162461bcd60e51b815260206004820152601a60248201527f4c4d4c3a546f6b656e73206d75737420626520696e20706f6f6c0000000000006044820152606401610409565b60006130c584896129c0565b9050808560006130d58b86613d94565b90506130e18589613d94565b6130eb8585613d94565b6130f59190613c87565b92506131018582613d94565b606461310d8686613d94565b6131179190613d94565b6131219190613c87565b9250600081613131606487613d94565b61313b9190613c87565b6131459084613c6f565b9050600085815b6101008110156131cc5781925087848360026131689190613d94565b6131729190613c6f565b61317c9190613db3565b876131878480613d94565b6131919190613c6f565b61319b9190613c87565b91506131a78284612eb7565b156131bc575097506124739650505050505050565b6131c581613dca565b905061314c565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e766572676500006044820152606401610409565b6000816001146132255782611849565b8354600285015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b9161325b9160040190815260200190565b60206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ab9190613aca565b8454604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015612fa857600080fd5b600080600060028660ff16106133175760405162461bcd60e51b815260040161040990613c38565b60006040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509050613350886127e4565b6080820152604080518082019182905260098a018054825261339092610c8b928c929091600290600a85016020850180831161061d57505050505061288e565b808252859061339f9088613d94565b6133a99190613c87565b81516133b59190613db3565b60208201526009880160ff8816600281106133d2576133d2613dfb565b01548611156134235760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a5769746864726177206578636565647320617661696c61626c6500006044820152606401610409565b6080810151604080518082019182905260098b018054825261347f938c936134769391928d9261346c92879290600290600a85016020850180831161061d57505050505061288e565b866020015161360b565b8960ff16613215565b604082015261348c6137bd565b6002896007015461349d9190613c87565b606083015260005b60028110156135785760008a60090182600281106134c5576134c5613dfb565b015490506402540be40084606001518b60ff16841461350857855160208701516134ef9085613d94565b6134f99190613c87565b6135039084613db3565b613532565b60408601518651602088015161351e9086613d94565b6135289190613c87565b6135329190613db3565b61353c9190613d94565b6135469190613c87565b6135509082613db3565b83836002811061356257613562613dfb565b60200201525061357181613dca565b90506134a5565b5060006135a58a61359c85608001518c6135928f8861288e565b886020015161360b565b8b60ff16613215565b828a60ff16600281106135ba576135ba613dfb565b60200201516135c99190613db3565b90506135d6600182613db3565b90508083604001518b6009018b60ff16600281106135f6576135f6613dfb565b01549550955095505050509450945094915050565b6000600260ff851681116136575760405162461bcd60e51b81526020600482015260136024820152721313530e951bdad95b881b9bdd08199bdd5b99606a1b6044820152606401610409565b82600080613665848a613d94565b905060005b848110156136e8578860ff1681146136d85787816002811061368e5761368e613dfb565b602002015161369d9084613c6f565b9250848882600281106136b2576136b2613dfb565b60200201516136c19190613d94565b6136cb8886613d94565b6136d59190613c87565b93505b6136e181613dca565b905061366a565b506136f38482613d94565b60646136ff8886613d94565b6137099190613d94565b6137139190613c87565b9250600081613723606489613d94565b61372d9190613c87565b6137379084613c6f565b9050600087815b6101008110156131cc57819250898483600261375a9190613d94565b6137649190613c6f565b61376e9190613db3565b876137798480613d94565b6137839190613c6f565b61378d9190613c87565b91506137998284612eb7565b156137ad5750965061184995505050505050565b6137b681613dca565b905061373e565b60405180604001604052806002906020820280368337509192915050565b8260028101928215613809579160200282015b828111156138095782518255916020019190600101906137ee565b50613815929150613819565b5090565b5b80821115613815576000815560010161381a565b80604081018310156106c557600080fd5b803560ff8116811461385057600080fd5b919050565b60006020828403121561386757600080fd5b5035919050565b6000806040838503121561388157600080fd5b8235915060208301356001600160a01b038116811461389f57600080fd5b809150509250929050565b6000806000608084860312156138bf57600080fd5b833592506138d0856020860161382e565b9150606084013580151581146138e557600080fd5b809150509250925092565b60008060006080848603121561390557600080fd5b83359250602085603f86011261391a57600080fd5b6040516040810181811067ffffffffffffffff8211171561393d5761393d613e11565b60405280868301606088018981111561395557600080fd5b60005b600281101561397557823584529285019291850191600101613958565b50969992985050943595509350505050565b6000806040838503121561399a57600080fd5b50508035926020909101359150565b6000806000608084860312156139be57600080fd5b83359250602084013591506139d6856040860161382e565b90509250925092565b6000806000606084860312156139f457600080fd5b83359250602084013591506139d66040850161383f565b60008060008060808587031215613a2157600080fd5b8435935060208501359250613a386040860161383f565b9396929550929360600135925050565b60008060008060808587031215613a5e57600080fd5b84359350613a6e6020860161383f565b9250613a386040860161383f565b600080600080600060a08688031215613a9457600080fd5b85359450613aa46020870161383f565b9350613ab26040870161383f565b94979396509394606081013594506080013592915050565b600060208284031215613adc57600080fd5b5051919050565b8060005b6002811015613b06578151845260209384019390910190600101613ae7565b50505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b60408101818360005b6002811015613b85578151835260209283019290910190600101613b66565b50505092915050565b60c08101613b9c8287613ae3565b613ba96040830186613ae3565b608082019390935260a0015292915050565b60608101613bc98285613ae3565b8260408301529392505050565b60208082526018908201527f4c4d4c3a4661696c656420746f2073656e642045746865720000000000000000604082015260600190565b6020808252601190820152702626a61d1f2628173130b630b731b2a7b360791b604082015260600190565b6020808252601c908201527f4c4d4c3a546f6b656e20696e646578206f7574206f662072616e676500000000604082015260600190565b60008219821115613c8257613c82613de5565b500190565b600082613ca457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613ce4578160001904821115613cca57613cca613de5565b80851615613cd757918102915b93841c9390800290613cae565b509250929050565b60006106c28383600082613d02575060016106c5565b81613d0f575060006106c5565b8160018114613d255760028114613d2f57613d4b565b60019150506106c5565b60ff841115613d4057613d40613de5565b50506001821b6106c5565b5060208310610133831016604e8410600b8410161715613d6e575081810a6106c5565b613d788383613ca9565b8060001904821115613d8c57613d8c613de5565b029392505050565b6000816000190483118215151615613dae57613dae613de5565b500290565b600082821015613dc557613dc5613de5565b500390565b6000600019821415613dde57613dde613de5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220da8ac07af4b1c19a40f99ff6f5611089cced76a663de7e685a198fad164d08bb64736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c8063ab3d8544116100ac578063c4765c651161007b578063c4765c6514610256578063ec77902d14610276578063f3de036214610289578063faa4649914610291578063fbe27cf7146102b157600080fd5b8063ab3d8544146101fb578063b115bcb214610203578063b8217da314610216578063c3c4e0d71461023657600080fd5b8063343b1734116100e8578063343b1734146101a2578063408e6d7d146101b557806342179550146101d557806378d67d72146101e857600080fd5b806306de8d5b1461011a5780630705bc7e14610140578063145f73dc14610162578063289657a214610182575b600080fd5b61012d6101283660046138aa565b6102d1565b6040519081526020015b60405180910390f35b81801561014c57600080fd5b5061016061015b366004613987565b61055b565b005b610175610170366004613987565b6105ef565b6040516101379190613b5d565b81801561018e57600080fd5b5061017561019d3660046139a9565b6106cb565b61012d6101b0366004613855565b610abd565b8180156101c157600080fd5b5061012d6101d03660046138f0565b610b0b565b61012d6101e3366004613a48565b61129a565b61012d6101f63660046139df565b6112e7565b61012d61137d565b61012d610211366004613987565b611390565b81801561022257600080fd5b5061012d610231366004613a0b565b61148c565b81801561024257600080fd5b5061012d6102513660046138f0565b611851565b81801561026257600080fd5b5061012d610271366004613a7c565b611f2a565b61012d610284366004613855565b61247c565b61012d61258b565b81801561029d57600080fd5b506101606102ac36600461386e565b6125a7565b8180156102bd57600080fd5b506101606102cc366004613987565b61274c565b6000806102dd856127e4565b604080518082019182905291925060009190600988019060029082845b8154815260200190600101908083116102fa57505050505090506000610329610323888461288e565b846129c0565b905060005b60028110156104725785156103915786816002811061034f5761034f613dfb565b602002013583826002811061036657610366613dfb565b60200201516103759190613c6f565b83826002811061038757610387613dfb565b6020020152610462565b8281600281106103a3576103a3613dfb565b60200201518782600281106103ba576103ba613dfb565b602002013511156104125760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a43616e6e6f74207769746864726177203e20617661696c61626c650060448201526064015b60405180910390fd5b86816002811061042457610424613dfb565b602002013583826002811061043b5761043b613dfb565b602002015161044a9190613db3565b83826002811061045c5761045c613dfb565b60200201525b61046b81613dca565b905061032e565b506000610488610482898561288e565b856129c0565b905060008860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190613aca565b905086156105485782816105288285613db3565b6105329190613d94565b61053c9190613c87565b95505050505050610554565b82816105288483613db3565b9392505050565b61056b60646402540be400613c87565b8111156105b05760405162461bcd60e51b81526020600482015260136024820152720989a98748ccaca40d2e640e8dede40d0d2ced606b1b6044820152606401610409565b600782018190556040518181527fd88ea5155021c6f8dafa1a741e173f595cdf77ce7c17d43342131d7f06afdfe5906020015b60405180910390a15050565b6105f76137bd565b60408051808201918290526106c29185916106bd9161063a918491600983019060029082845b81548152602001906001019080831161061d57505050505061288e565b6001870154604080516318160ddd60e01b8152905188926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613aca565b612b46565b612be1565b90505b92915050565b6106d36137bd565b600184015484546040516370a0823160e01b81523360048201526001600160a01b03928316929091169082906370a082319060240160206040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190613aca565b8511156107775760405162461bcd60e51b815260040161040990613c0d565b6040805180820191829052600091600989019060029082845b81548152602001906001019080831161079057505050505090506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190613aca565b90506000610839896106bd6108328c8761288e565b8b86612b46565b905060005b60028110156109225787816002811061085957610859613dfb565b602002013582826002811061087057610870613dfb565b602002015110156108c35760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a616d6f756e74735b695d203c206d696e416d6f756e74735b695d00006044820152606401610409565b8181600281106108d5576108d5613dfb565b60200201518482600281106108ec576108ec613dfb565b60200201516108fb9190613db3565b8a600901826002811061091057610910613dfb565b015561091b81613dca565b905061083e565b5060405163079cc67960e41b81526001600160a01b038616906379cc6790906109519033908c90600401613b44565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50508251604051600093503392508381818185875af1925050503d80600081146109c5576040519150601f19603f3d011682016040523d82523d6000602084013e6109ca565b606091505b50509050806109eb5760405162461bcd60e51b815260040161040990613bd6565b846001600160a01b031663f242432a30338d6002015486600160028110610a1457610a14613dfb565b60200201516040518563ffffffff1660e01b8152600401610a389493929190613b0c565b600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b503392507fdd3c0336a16f1b64f172b7bb0dad5b2b3c7c76f91e8c4aafd6aae60dce8001539150849050610a9a8c87613db3565b604051610aa8929190613bbb565b60405180910390a25098975050505050505050565b604080518082019182905260098301805482526000926106c5928592610afd9284929190600290600a85016020850180831161061d57505050505061288e565b610b06856127e4565b612cb2565b81516000903414610b725760405162461bcd60e51b815260206004820152602b60248201527f4c4d4c3a7265636569766564206c657373206f72206d6f72652045544820746860448201526a185b88195e1c1958dd195960aa1b6064820152608401610409565b83546040805160e08101825260018701546001600160a01b039081168252600060208301819052928201839052606082018390529092169160808101610bb7886127e4565b8152600060208201526040805180820182529101906009890160028282826020028201915b815481526020019060010190808311610bdc575050505050815250905080600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3657600080fd5b505afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190613aca565b60a0820181905215610c9b57610c95610c8b878360c0015161288e565b82608001516129c0565b60208201525b610ca36137bd565b60c082015151610cb4903490613c6f565b815260005b6002811015610d515760a0830151151580610cea57506000878260028110610ce357610ce3613dfb565b6020020151115b610d415760405162461bcd60e51b815260206004820152602260248201527f4c4d4c3a4d75737420737570706c7920616c6c20746f6b656e7320696e20706f6044820152611bdb60f21b6064820152608401610409565b610d4a81613dca565b9050610cb9565b506002870154604051627eeac760e11b81526000916001600160a01b0386169162fdd58e91610d8591309190600401613b44565b60206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190613aca565b9050836001600160a01b031663f242432a33308b600201548b600160028110610e0057610e00613dfb565b60200201516040518563ffffffff1660e01b8152600401610e249493929190613b0c565b600060405180830381600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b5050506002890154604051627eeac760e11b81528392506001600160a01b0387169162fdd58e91610e87913091600401613b44565b60206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190613aca565b610ee19190613db3565b602080890182905260c08501510151610efa9190613c6f565b602083015250610f17610f0d888361288e565b83608001516129c0565b60408301819052602083015110610f685760405162461bcd60e51b81526020600482015260156024820152744c4d4c3a442073686f756c6420696e63726561736560581b6044820152606401610409565b60408201516060830152610f7a6137bd565b60a08301511561112557600060028960070154610f979190613c87565b905060005b600281101561110257600085602001518660c001518360028110610fc257610fc2613dfb565b60200201518760400151610fd69190613d94565b610fe09190613c87565b90506402540be40061100882878560028110610ffe57610ffe613dfb565b6020020151612d4a565b6110129085613d94565b61101c9190613c87565b84836002811061102e5761102e613dfb565b602002015260088b01546402540be4009085846002811061105157611051613dfb565b60200201516110609190613d94565b61106a9190613c87565b85836002811061107c5761107c613dfb565b602002015161108b9190613db3565b8b60090183600281106110a0576110a0613dfb565b01558382600281106110b4576110b4613dfb565b60200201518583600281106110cb576110cb613dfb565b60200201516110da9190613db3565b8583600281106110ec576110ec613dfb565b6020020152506110fb81613dca565b9050610f9c565b5061111a6111108a8561288e565b85608001516129c0565b606085015250611136565b611134600989018360026137db565b505b60008360a001516000141561115057506040830151611181565b602084015160a0850151606086015161116a908390613db3565b6111749190613d94565b61117e9190613c87565b90505b868110156111d15760405162461bcd60e51b815260206004820181905260248201527f4c4d4c3a436f756c64206e6f74206d696e74206d696e207265717565737465646044820152606401610409565b83516040516340c10f1960e01b81526001600160a01b03909116906340c10f19906112029033908590600401613b44565b600060405180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b50505050336001600160a01b03167f26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a76889848760400151858960a001516112769190613c6f565b6040516112869493929190613b8e565b60405180910390a298975050505050505050565b60408051808201918290526000916112dd91879187918791879190600986019060029082845b8154815260200190600101908083116112c0575050505050612d68565b5095945050505050565b6000806112dd8585858860010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190613aca565b612e74565b61138d60646402540be400613c87565b81565b6000600282106113b25760405162461bcd60e51b815260040161040990613c38565b816113df578260090182600281106113cc576113cc613dfb565b01546113d89047613db3565b90506106c5565b8160011415610115578260090182600281106113fd576113fd613dfb565b015483546002850154604051627eeac760e11b81526001600160a01b039092169162fdd58e9161143291309190600401613b44565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190613aca565b6113d89190613db3565b600184015484546040516370a0823160e01b81523360048201526000926001600160a01b0390811692169082906370a082319060240160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190613aca565b8611156115315760405162461bcd60e51b815260040161040990613c0d565b60028560ff161061157a5760405162461bcd60e51b81526020600482015260136024820152721313530e951bdad95b881b9bdd08199bdd5b99606a1b6044820152606401610409565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b557600080fd5b505afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190613aca565b90506000806115fe8a8a8a86612e74565b91509150868210156116475760405162461bcd60e51b81526020600482015260126024820152711313530e991e480f081b5a5b905b5bdd5b9d60721b6044820152606401610409565b6402540be4008a600801548261165d9190613d94565b6116679190613c87565b6116719083613c6f565b8a6009018960ff166002811061168957611689613dfb565b01546116959190613db3565b8a6009018960ff16600281106116ad576116ad613dfb565b015560405163079cc67960e41b81526001600160a01b038616906379cc6790906116dd9033908d90600401613b44565b600060405180830381600087803b1580156116f757600080fd5b505af115801561170b573d6000803e3d6000fd5b5050505060ff881661178157604051600090339084908381818185875af1925050503d8060008114611759576040519150601f19603f3d011682016040523d82523d6000602084013e61175e565b606091505b505090508061177f5760405162461bcd60e51b815260040161040990613bd6565b505b8760ff16600114156117f65760028a0154604051637921219560e11b81526001600160a01b0386169163f242432a916117c39130913391908890600401613b0c565b600060405180830381600087803b1580156117dd57600080fd5b505af11580156117f1573d6000803e3d6000fd5b505050505b604080518a81526020810185905260ff8a168183015260608101849052905133917f43fb02998f4e03da2e0e6fff53fdbf0c40a9f45f145dc377fc30615d7d7a8a64919081900360800190a25093505050505b949350505050565b82546040805160e08101825260018601546001600160a01b039081168252600060208301819052928201839052606082018390529192919091169082906080810161189b886127e4565b8152600060208201526040805180820182529101906009890160028282826020028201915b8154815260200190600101908083116118c0575050505050815250905080600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561191a57600080fd5b505afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613aca565b60a082015280516040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561199957600080fd5b505afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d19190613aca565b84111580156119df57508315155b6119fb5760405162461bcd60e51b815260040161040990613c0d565b600060028760070154611a0e9190613c87565b9050611a186137bd565b611a206137bd565b611a316111108a8660c0015161288e565b602085015260005b6002811015611b25578460c001518160028110611a5857611a58613dfb565b6020020151898260028110611a6f57611a6f613dfb565b60200201511115611ac25760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a43616e6e6f74207769746864726177203e20617661696c61626c65006044820152606401610409565b888160028110611ad457611ad4613dfb565b60200201518560c001518260028110611aef57611aef613dfb565b6020020151611afe9190613db3565b828260028110611b1057611b10613dfb565b6020020152611b1e81613dca565b9050611a39565b50611b336111108a8361288e565b604085015260005b6002811015611c9f57600085602001518660c001518360028110611b6157611b61613dfb565b60200201518760400151611b759190613d94565b611b7f9190613c87565b90506000611b9982858560028110610ffe57610ffe613dfb565b90506402540be400611bab8288613d94565b611bb59190613c87565b858460028110611bc757611bc7613dfb565b602002015260088c01546402540be40081878660028110611bea57611bea613dfb565b6020020151611bf99190613d94565b611c039190613c87565b858560028110611c1557611c15613dfb565b6020020151611c249190613db3565b8d6009018560028110611c3957611c39613dfb565b0155858460028110611c4d57611c4d613dfb565b6020020151858560028110611c6457611c64613dfb565b6020020151611c739190613db3565b858560028110611c8557611c85613dfb565b602002015250611c989150829050613dca565b9050611b3b565b50611cad6111108a8361288e565b60608501819052602085015160a0860151600093509091611cce9083613db3565b611cd89190613d94565b611ce29190613c87565b905080611d315760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a4275726e7420616d6f756e742063616e6e6f74206265207a65726f006044820152606401610409565b611d3c816001613c6f565b905086811115611d8e5760405162461bcd60e51b815260206004820152601f60248201527f4c4d4c3a746f6b656e416d6f756e74203e206d61784275726e416d6f756e74006044820152606401610409565b835160405163079cc67960e41b81526001600160a01b03909116906379cc679090611dbf9033908590600401613b44565b600060405180830381600087803b158015611dd957600080fd5b505af1158015611ded573d6000803e3d6000fd5b50508951604051600093503392508381818185875af1925050503d8060008114611e33576040519150601f19603f3d011682016040523d82523d6000602084013e611e38565b606091505b5050905080611e595760405162461bcd60e51b815260040161040990613bd6565b856001600160a01b031663f242432a30338d600201548d600160028110611e8257611e82613dfb565b60200201516040518563ffffffff1660e01b8152600401611ea69493929190613b0c565b600060405180830381600087803b158015611ec057600080fd5b505af1158015611ed4573d6000803e3d6000fd5b50505050336001600160a01b03167f2b5508378d7e19e0d5fa338419034731416c4f5b219a10379956f764317fd47e8a858860400151868a60a00151611f1a9190613db3565b604051610aa89493929190613b8e565b84546000906001600160a01b031660ff8616611f8f57348414611f8f5760405162461bcd60e51b815260206004820152601b60248201527f4c4d4c3a43616e6e6f74207377617020213d206574682073656e7400000000006044820152606401610409565b8560ff16600114156121e5576002870154604051627eeac760e11b81526001600160a01b0383169162fdd58e91611fca913391600401613b44565b60206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190613aca565b8411156120695760405162461bcd60e51b815260206004820152601960248201527f4c4d4c3a43616e6e6f742073776170203e20796f75206f776e000000000000006044820152606401610409565b6002870154604051627eeac760e11b81526000916001600160a01b0384169162fdd58e9161209c91309190600401613b44565b60206040518083038186803b1580156120b457600080fd5b505afa1580156120c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ec9190613aca565b6002890154604051637921219560e11b81529192506001600160a01b0384169163f242432a9161212491339130918b90600401613b0c565b600060405180830381600087803b15801561213e57600080fd5b505af1158015612152573d6000803e3d6000fd5b5050506002890154604051627eeac760e11b81528392506001600160a01b0385169162fdd58e91612187913091600401613b44565b60206040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613aca565b6121e19190613db3565b9450505b60408051808201918290526000918291829160098c019060029082845b81548152602001906001019080831161220257505050505090506122298a8a8a8a85612d68565b90935091508583101561228a5760405162461bcd60e51b8152602060048201526024808201527f4c4d4c3a53776170206469646e6f7420726573756c7420696e206d696e20746f6044820152636b656e7360e01b6064820152608401610409565b60006402540be4008b60080154846122a29190613d94565b6122ac9190613c87565b905087828b60ff16600281106122c4576122c4613dfb565b60200201516122d39190613c6f565b8b6009018b60ff16600281106122eb576122eb613dfb565b015580848360ff8c166002811061230457612304613dfb565b60200201516123139190613db3565b61231d9190613db3565b8b6009018a60ff166002811061233557612335613dfb565b015560ff89166123a957604051600090339086908381818185875af1925050503d8060008114612381576040519150601f19603f3d011682016040523d82523d6000602084013e612386565b606091505b50509050806123a75760405162461bcd60e51b815260040161040990613bd6565b505b8860ff166001141561241e5760028b0154604051637921219560e11b81526001600160a01b0387169163f242432a916123eb9130913391908a90600401613b0c565b600060405180830381600087803b15801561240557600080fd5b505af1158015612419573d6000803e3d6000fd5b505050505b604080518981526020810186905260ff8c8116828401528b166060820152905133917fc6c1e0630dbe9130cc068028486c0d118ddcea348550819defd5cb8c257f8a38919081900360800190a2509193505050505b95945050505050565b6040805180820191829052600983018054825260009283926124ca926124bc9287929190600290600a85016020850180831161061d57505050505061288e565b6124c5856127e4565b6129c0565b905060008360010160009054906101000a90046001600160a01b031690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252357600080fd5b505afa158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190613aca565b90508015612580578061257684670de0b6b3a7640000613d94565b6124739190613c87565b506000949350505050565b606461259d6402540be4006032613d94565b61138d9190613c87565b81546001600160a01b0316600060098401600101546002850154604051627eeac760e11b81526001600160a01b0385169162fdd58e916125eb913091600401613b44565b60206040518083038186803b15801561260357600080fd5b505afa158015612617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263b9190613aca565b6126459190613db3565b905080156126b6576002840154604051637921219560e11b81526001600160a01b0384169163f242432a916126839130918891908790600401613b0c565b600060405180830381600087803b15801561269d57600080fd5b505af11580156126b1573d6000803e3d6000fd5b505050505b60098401546000906126c89047613db3565b90508015612745576000846001600160a01b03168260405160006040518083038185875af1925050503d806000811461271d576040519150601f19603f3d011682016040523d82523d6000602084013e612722565b606091505b50509050806127435760405162461bcd60e51b815260040161040990613bd6565b505b5050505050565b606461275e6402540be4006032613d94565b6127689190613c87565b8111156127ad5760405162461bcd60e51b81526020600482015260136024820152720989a98748ccaca40d2e640e8dede40d0d2ced606b1b6044820152606401610409565b600882018190556040518181527fab599d640ca80cde2b09b128a4154a8dfe608cb80f4c9399c8b954b01fd35f38906020016105e3565b600681015460048201546000919042821115610554576005840154600385015480831115612852576128168285613db3565b6128208342613db3565b61282a8386613db3565b6128349190613d94565b61283e9190613c87565b6128489082613c6f565b9695505050505050565b61285c8285613db3565b6128668342613db3565b6128708584613db3565b61287a9190613d94565b6128849190613c87565b6128489082613db3565b6128966137bd565b815181528254604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b1580156128de57600080fd5b505afa1580156128f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129169190613aca565b8354600285015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b9161294c9160040190815260200190565b60206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190613aca565b60208401516129ab9190613d94565b6129b59190613c87565b602082015292915050565b6020820151825160009160029183916129d891613c6f565b9050806129ea576000925050506106c5565b600081816129f88588613d94565b905060005b610100811015612b07576020890151895160009190612a1c8980613cec565b612a269190613d94565b612a309190613d94565b612a3b886001613c6f565b612a459086613cec565b612a4f9190613c87565b905083945080876001612a629190613c6f565b612a6c9190613d94565b606485612a798287613db3565b612a839190613d94565b612a8d9190613c87565b612a979190613c6f565b84612aa28984613d94565b6064612aae8a88613d94565b612ab89190613c87565b612ac29190613c6f565b612acc9190613d94565b612ad69190613c87565b9350612ae28486612eb7565b15612af657839750505050505050506106c5565b50612b0081613dca565b90506129fd565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b6044820152606401610409565b612b4e6137bd565b81831115612b9e5760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a43616e6e6f742065786365656420746f74616c20737570706c7900006044820152606401610409565b83518290612bad908590613d94565b612bb79190613c87565b815260208401518290612bcb908590613d94565b612bd59190613c87565b60208201529392505050565b612be96137bd565b815181528254600284015460405163f759cc3b60e01b815260048101919091526001600160a01b039091169063f759cc3b9060240160206040518083038186803b158015612c3657600080fd5b505afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613aca565b8354604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b15801561296457600080fd5b6000806002612cc185856129c0565b612ccb9190613c87565b84519091508111612cdf5760009150612d42565b6020840151600090612cf2908390613db3565b9050600060026402540be400886007015484612d0e9190613d94565b612d189190613c87565b612d229190613c87565b86519091508190612d339085613db3565b612d3d9190613c6f565b935050505b509392505050565b600081831115612d5e576113d88284613db3565b6106c28383613db3565b60008060028660ff16108015612d81575060028560ff16105b612d9d5760405162461bcd60e51b815260040161040990613c38565b6000612dd088858960ff1660028110612db857612db8613dfb565b6020020151612dc79088613c6f565b8960ff16612ece565b90506000612dde898661288e565b90506000612e048a612dfb612df28d6127e4565b8c8c8888612ff4565b8a60ff16613215565b9050600181878a60ff1660028110612e1e57612e1e613dfb565b6020020151612e2d9190613db3565b612e379190613db3565b94506402540be4008a6007015486612e4f9190613d94565b612e599190613c87565b9350612e658486613db3565b94505050509550959350505050565b6000806000806000612e8889888a896132ef565b91945092509050600083612e9c8484613db3565b612ea69190613db3565b939a93995092975050505050505050565b60006001612ec58484612d4a565b11159392505050565b600081600114612ede5782611849565b8354604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015612f2257600080fd5b505afa158015612f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5a9190613aca565b8454600286015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b91612f909160040190815260200190565b60206040518083038186803b158015612fa857600080fd5b505afa158015612fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe09190613aca565b612fea9085613d94565b6118499190613c87565b6000600260ff86811690861614156130595760405162461bcd60e51b815260206004820152602260248201527f4c4d4c3a43616e6e6f7420636f6d7061726520746f6b656e20746f2069747365604482015261363360f11b6064820152608401610409565b808660ff1610801561306d5750808560ff16105b6130b95760405162461bcd60e51b815260206004820152601a60248201527f4c4d4c3a546f6b656e73206d75737420626520696e20706f6f6c0000000000006044820152606401610409565b60006130c584896129c0565b9050808560006130d58b86613d94565b90506130e18589613d94565b6130eb8585613d94565b6130f59190613c87565b92506131018582613d94565b606461310d8686613d94565b6131179190613d94565b6131219190613c87565b9250600081613131606487613d94565b61313b9190613c87565b6131459084613c6f565b9050600085815b6101008110156131cc5781925087848360026131689190613d94565b6131729190613c6f565b61317c9190613db3565b876131878480613d94565b6131919190613c6f565b61319b9190613c87565b91506131a78284612eb7565b156131bc575097506124739650505050505050565b6131c581613dca565b905061314c565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e766572676500006044820152606401610409565b6000816001146132255782611849565b8354600285015460405163f759cc3b60e01b81526001600160a01b039092169163f759cc3b9161325b9160040190815260200190565b60206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ab9190613aca565b8454604080516396ce079560e01b815290516001600160a01b03909216916396ce079591600480820192602092909190829003018186803b158015612fa857600080fd5b600080600060028660ff16106133175760405162461bcd60e51b815260040161040990613c38565b60006040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509050613350886127e4565b6080820152604080518082019182905260098a018054825261339092610c8b928c929091600290600a85016020850180831161061d57505050505061288e565b808252859061339f9088613d94565b6133a99190613c87565b81516133b59190613db3565b60208201526009880160ff8816600281106133d2576133d2613dfb565b01548611156134235760405162461bcd60e51b815260206004820152601e60248201527f4c4d4c3a5769746864726177206578636565647320617661696c61626c6500006044820152606401610409565b6080810151604080518082019182905260098b018054825261347f938c936134769391928d9261346c92879290600290600a85016020850180831161061d57505050505061288e565b866020015161360b565b8960ff16613215565b604082015261348c6137bd565b6002896007015461349d9190613c87565b606083015260005b60028110156135785760008a60090182600281106134c5576134c5613dfb565b015490506402540be40084606001518b60ff16841461350857855160208701516134ef9085613d94565b6134f99190613c87565b6135039084613db3565b613532565b60408601518651602088015161351e9086613d94565b6135289190613c87565b6135329190613db3565b61353c9190613d94565b6135469190613c87565b6135509082613db3565b83836002811061356257613562613dfb565b60200201525061357181613dca565b90506134a5565b5060006135a58a61359c85608001518c6135928f8861288e565b886020015161360b565b8b60ff16613215565b828a60ff16600281106135ba576135ba613dfb565b60200201516135c99190613db3565b90506135d6600182613db3565b90508083604001518b6009018b60ff16600281106135f6576135f6613dfb565b01549550955095505050509450945094915050565b6000600260ff851681116136575760405162461bcd60e51b81526020600482015260136024820152721313530e951bdad95b881b9bdd08199bdd5b99606a1b6044820152606401610409565b82600080613665848a613d94565b905060005b848110156136e8578860ff1681146136d85787816002811061368e5761368e613dfb565b602002015161369d9084613c6f565b9250848882600281106136b2576136b2613dfb565b60200201516136c19190613d94565b6136cb8886613d94565b6136d59190613c87565b93505b6136e181613dca565b905061366a565b506136f38482613d94565b60646136ff8886613d94565b6137099190613d94565b6137139190613c87565b9250600081613723606489613d94565b61372d9190613c87565b6137379084613c6f565b9050600087815b6101008110156131cc57819250898483600261375a9190613d94565b6137649190613c6f565b61376e9190613db3565b876137798480613d94565b6137839190613c6f565b61378d9190613c87565b91506137998284612eb7565b156137ad5750965061184995505050505050565b6137b681613dca565b905061373e565b60405180604001604052806002906020820280368337509192915050565b8260028101928215613809579160200282015b828111156138095782518255916020019190600101906137ee565b50613815929150613819565b5090565b5b80821115613815576000815560010161381a565b80604081018310156106c557600080fd5b803560ff8116811461385057600080fd5b919050565b60006020828403121561386757600080fd5b5035919050565b6000806040838503121561388157600080fd5b8235915060208301356001600160a01b038116811461389f57600080fd5b809150509250929050565b6000806000608084860312156138bf57600080fd5b833592506138d0856020860161382e565b9150606084013580151581146138e557600080fd5b809150509250925092565b60008060006080848603121561390557600080fd5b83359250602085603f86011261391a57600080fd5b6040516040810181811067ffffffffffffffff8211171561393d5761393d613e11565b60405280868301606088018981111561395557600080fd5b60005b600281101561397557823584529285019291850191600101613958565b50969992985050943595509350505050565b6000806040838503121561399a57600080fd5b50508035926020909101359150565b6000806000608084860312156139be57600080fd5b83359250602084013591506139d6856040860161382e565b90509250925092565b6000806000606084860312156139f457600080fd5b83359250602084013591506139d66040850161383f565b60008060008060808587031215613a2157600080fd5b8435935060208501359250613a386040860161383f565b9396929550929360600135925050565b60008060008060808587031215613a5e57600080fd5b84359350613a6e6020860161383f565b9250613a386040860161383f565b600080600080600060a08688031215613a9457600080fd5b85359450613aa46020870161383f565b9350613ab26040870161383f565b94979396509394606081013594506080013592915050565b600060208284031215613adc57600080fd5b5051919050565b8060005b6002811015613b06578151845260209384019390910190600101613ae7565b50505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b60408101818360005b6002811015613b85578151835260209283019290910190600101613b66565b50505092915050565b60c08101613b9c8287613ae3565b613ba96040830186613ae3565b608082019390935260a0015292915050565b60608101613bc98285613ae3565b8260408301529392505050565b60208082526018908201527f4c4d4c3a4661696c656420746f2073656e642045746865720000000000000000604082015260600190565b6020808252601190820152702626a61d1f2628173130b630b731b2a7b360791b604082015260600190565b6020808252601c908201527f4c4d4c3a546f6b656e20696e646578206f7574206f662072616e676500000000604082015260600190565b60008219821115613c8257613c82613de5565b500190565b600082613ca457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613ce4578160001904821115613cca57613cca613de5565b80851615613cd757918102915b93841c9390800290613cae565b509250929050565b60006106c28383600082613d02575060016106c5565b81613d0f575060006106c5565b8160018114613d255760028114613d2f57613d4b565b60019150506106c5565b60ff841115613d4057613d40613de5565b50506001821b6106c5565b5060208310610133831016604e8410600b8410161715613d6e575081810a6106c5565b613d788383613ca9565b8060001904821115613d8c57613d8c613de5565b029392505050565b6000816000190483118215151615613dae57613dae613de5565b500290565b600082821015613dc557613dc5613de5565b500390565b6000600019821415613dde57613dde613de5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220da8ac07af4b1c19a40f99ff6f5611089cced76a663de7e685a198fad164d08bb64736f6c63430008070033",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "focus point (1-1) of the pricing algorithm is manipulated with PriceIn and PriceOut functions. Because the underlying price of the staked assets are expected to raise in time. One can see this similar to accomplishing a \"rebasing\" logic, with the help of a trusted price source. Whenever \"Effective Balance\" is mentioned it refers to the balance projected with the underlying price.Contracts relying on this library must initialize LiquidityModuleLib.Swap struct * Note that this library contains both functions called by users and admins. * Admin functions should be protected within contracts using this library.",
    "events": {
      "TokenSwap(address,uint256,uint256,uint128,uint128)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(LiquidityModuleLib.Swap storage,uint256[2],uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "amount of LP token user received"
        }
      },
      "calculateSwap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256)": {
        "params": {
          "dx": "the number of tokens to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "self": "Swap struct to read from",
          "tokenIndexFrom": "the token to sell",
          "tokenIndexTo": "the token to buy"
        },
        "returns": {
          "dy": "the number of tokens the user will get"
        }
      },
      "calculateTokenAmount(LiquidityModuleLib.Swap storage,uint256[2],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal",
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned"
        }
      },
      "calculateWithdrawOneToken(LiquidityModuleLib.Swap storage,uint256,uint8)": {
        "params": {
          "self": "Swap struct to read from",
          "tokenAmount": "the amount to withdraw in the pool's precision",
          "tokenIndex": "which token will be withdrawn"
        },
        "returns": {
          "_0": "the amount of token user will receive"
        }
      },
      "getAdminBalance(LiquidityModuleLib.Swap storage,uint256)": {
        "params": {
          "index": "Index of the pooled token",
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "admin balance in the token's precision"
        }
      },
      "getDebt(LiquidityModuleLib.Swap storage)": {
        "details": "might change when price is in.",
        "returns": {
          "_0": "debt the half of the D StableSwap invariant when debt is needed to be payed."
        }
      },
      "getVirtualPrice(LiquidityModuleLib.Swap storage)": {
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "the virtual price"
        }
      },
      "removeLiquidity(LiquidityModuleLib.Swap storage,uint256,uint256[2])": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "minAmounts": "the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "amounts of tokens the user received"
        }
      },
      "removeLiquidityImbalance(LiquidityModuleLib.Swap storage,uint256[2],uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.",
          "self": "Swap struct to read from and write to"
        },
        "returns": {
          "_0": "actual amount of LP tokens burned in the withdrawal"
        }
      },
      "removeLiquidityOneToken(LiquidityModuleLib.Swap storage,uint256,uint8,uint256)": {
        "params": {
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "self": "Swap struct to read from and write to",
          "tokenAmount": "the amount of the lp tokens to burn",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount chosen token that user received"
        }
      },
      "setAdminFee(LiquidityModuleLib.Swap storage,uint256)": {
        "details": "adminFee cannot be higher than 100% of the swap fee",
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "setSwapFee(LiquidityModuleLib.Swap storage,uint256)": {
        "details": "fee cannot be higher than 1% of each swap",
        "params": {
          "newSwapFee": "new swap fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "swap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell",
          "minDy": "the min amount the user would like to receive, or revert.",
          "self": "Swap struct to read from and write to",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of token user received on swap"
        }
      },
      "withdrawAdminFees(LiquidityModuleLib.Swap storage,address)": {
        "params": {
          "receiver": "Address to send the fees to",
          "self": "Swap struct to withdraw fees from"
        }
      }
    },
    "title": "LiquidityModule Library - LML",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_ADMIN_FEE()": {
        "notice": "Max adminFee is 50% of the swapFee adminFee does not add additional fee on top of swapFee instead it takes a certain percentage of the swapFee. Therefore it has no impact on users but only on the earnings of LPs"
      },
      "MAX_SWAP_FEE()": {
        "notice": "Max swap fee is 1% or 100bps of each swap"
      },
      "addLiquidity(LiquidityModuleLib.Swap storage,uint256[2],uint256)": {
        "notice": "Add liquidity to the pool"
      },
      "calculateRemoveLiquidity(LiquidityModuleLib.Swap storage,uint256)": {
        "notice": "Uses _calculateRemoveLiquidity with Effective Balances, then projects the prices to the token amounts to get Real Balances, before removing them from pool."
      },
      "calculateSwap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256)": {
        "notice": "Externally calculates a swap between two tokens."
      },
      "calculateTokenAmount(LiquidityModuleLib.Swap storage,uint256[2],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "calculateWithdrawOneToken(LiquidityModuleLib.Swap storage,uint256,uint8)": {
        "notice": "Calculate the dy, the amount of selected token that user receives and the fee of withdrawing in one token"
      },
      "getAdminBalance(LiquidityModuleLib.Swap storage,uint256)": {
        "notice": "return accumulated amount of admin fees of the token with given index"
      },
      "getVirtualPrice(LiquidityModuleLib.Swap storage)": {
        "notice": "Get the virtual price, to help calculate profit"
      },
      "removeLiquidity(LiquidityModuleLib.Swap storage,uint256,uint256[2])": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityImbalance(LiquidityModuleLib.Swap storage,uint256[2],uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
      },
      "removeLiquidityOneToken(LiquidityModuleLib.Swap storage,uint256,uint8,uint256)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "setAdminFee(LiquidityModuleLib.Swap storage,uint256)": {
        "notice": "Sets the admin fee"
      },
      "setSwapFee(LiquidityModuleLib.Swap storage,uint256)": {
        "notice": "update the swap fee"
      },
      "swap(LiquidityModuleLib.Swap storage,uint8,uint8,uint256,uint256)": {
        "notice": "swap two tokens in the pool"
      },
      "withdrawAdminFees(LiquidityModuleLib.Swap storage,address)": {
        "notice": "withdraw all admin fees to a given address"
      }
    },
    "notice": "A library to be used within LiquidityModule * Contains functions responsible for custody and AMM functionalities with some changes. * The main functionality of Liquidity Pools is allowing the depositors to have instant access to liquidity * relying on the Oracle Price, with the help of Liquidity Providers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}