{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\n\nimport \"./EIP712Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IDepositContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\n// This interface is designed to be compatible with the Vyper version.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ninterface IDepositContract {\n    /// @notice A processed deposit event.\n    event DepositEvent(\n        bytes pubkey,\n        bytes withdrawal_credentials,\n        bytes amount,\n        bytes signature,\n        bytes index\n    );\n\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IgETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\ninterface IgETH {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    function uri(uint256) external view returns (string memory);\n\n    function balanceOf(\n        address account,\n        uint256 id\n    ) external view returns (uint256);\n\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) external view returns (uint256[] memory);\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function isApprovedForAll(\n        address account,\n        address operator\n    ) external view returns (bool);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external;\n\n    function burn(address account, uint256 id, uint256 value) external;\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) external;\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    // gETH Specials\n\n    function denominator() external view returns (uint256);\n\n    function pricePerShare(uint256 id) external view returns (uint256);\n\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\n\n    function setPricePerShare(uint256 price, uint256 id) external;\n\n    function isInterface(\n        address _interface,\n        uint256 id\n    ) external view returns (bool);\n\n    function isAvoider(\n        address account,\n        uint256 id\n    ) external view returns (bool);\n\n    function avoidInterfaces(uint256 id, bool isAvoid) external;\n\n    function setInterface(address _interface, uint256 id, bool isSet) external;\n\n    function updateMinterRole(address Minter) external;\n\n    function updatePauserRole(address Pauser) external;\n\n    function updateOracleRole(address Oracle) external;\n}\n"
    },
    "contracts/interfaces/IgETHInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\ninterface IgETHInterface {\n  function initialize(\n    uint256 id_,\n    address erc1155_,\n    bytes memory data\n  ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\ninterface ILPToken {\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function decimals() external view returns (uint8);\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        external\n        returns (bool);\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        external\n        returns (bool);\n\n    function initialize(string memory name, string memory symbol)\n        external\n        returns (bool);\n\n    function mint(address recipient, uint256 amount) external;\n\n    function name() external view returns (string memory);\n\n    function owner() external view returns (address);\n\n    function renounceOwnership() external;\n\n    function symbol() external view returns (string memory);\n\n    function totalSupply() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/interfaces/IPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"../Portal/utils/DataStoreUtilsLib.sol\";\nimport \"../Portal/utils/GeodeUtilsLib.sol\";\nimport \"../Portal/utils/OracleUtilsLib.sol\";\nimport \"../Portal/utils/StakeUtilsLib.sol\";\n\ninterface IPortal {\n  function initialize(\n    address _GOVERNANCE,\n    address _SENATE,\n    address _gETH,\n    address _ORACLE_POSITION,\n    address _DEFAULT_WITHDRAWAL_CONTRACT_MODULE,\n    address _DEFAULT_LP_MODULE,\n    address _DEFAULT_LP_TOKEN_MODULE,\n    address[] calldata _ALLOWED_GETH_INTERFACE_MODULES,\n    bytes[] calldata _ALLOWED_GETH_INTERFACE_MODULE_NAMES,\n    uint256 _GOVERNANCE_FEE\n  ) external;\n\n  function getContractVersion() external view returns (uint256);\n\n  function pause() external;\n\n  function unpause() external;\n\n  function pausegETH() external;\n\n  function unpausegETH() external;\n\n  function fetchWithdrawalContractUpgradeProposal(\n    uint256 id\n  ) external returns (uint256 withdrawalContractVersion);\n\n  function gETH() external view returns (address);\n\n  function gETHInterfaces(\n    uint256 id,\n    uint256 index\n  ) external view returns (address);\n\n  function allIdsByType(\n    uint256 _type,\n    uint256 _index\n  ) external view returns (uint256);\n\n  function generateId(\n    string calldata _name,\n    uint256 _type\n  ) external pure returns (uint256 id);\n\n  function getKey(\n    uint256 _id,\n    bytes32 _param\n  ) external pure returns (bytes32 key);\n\n  function readAddress(\n    uint256 id,\n    bytes32 key\n  ) external view returns (address data);\n\n  function readUint(\n    uint256 id,\n    bytes32 key\n  ) external view returns (uint256 data);\n\n  function readBytes(\n    uint256 id,\n    bytes32 key\n  ) external view returns (bytes memory data);\n\n  function readUintArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view returns (uint256 data);\n\n  function readBytesArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view returns (bytes memory data);\n\n  function readAddressArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view returns (address data);\n\n  function GeodeParams()\n    external\n    view\n    returns (\n      address SENATE,\n      address GOVERNANCE,\n      uint256 SENATE_EXPIRY,\n      uint256 GOVERNANCE_FEE\n    );\n\n  function getProposal(\n    uint256 id\n  ) external view returns (GeodeUtils.Proposal memory proposal);\n\n  function isElector(uint256 _TYPE) external view returns (bool);\n\n  function isUpgradeAllowed(\n    address proposedImplementation\n  ) external view returns (bool);\n\n  function setGovernanceFee(uint256 newFee) external;\n\n  function setElectorType(uint256 _TYPE, bool isElector) external;\n\n  function newProposal(\n    address _CONTROLLER,\n    uint256 _TYPE,\n    bytes calldata _NAME,\n    uint256 duration\n  ) external;\n\n  function approveProposal(uint256 id) external;\n\n  function changeSenate(address _newSenate) external;\n\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\n\n  function approveSenate(uint256 proposalId, uint256 electorId) external;\n\n  function StakingParams()\n    external\n    view\n    returns (\n      uint256 VALIDATORS_INDEX,\n      uint256 VERIFICATION_INDEX,\n      uint256 MONOPOLY_THRESHOLD,\n      uint256 EARLY_EXIT_FEE,\n      uint256 ORACLE_UPDATE_TIMESTAMP,\n      uint256 DAILY_PRICE_INCREASE_LIMIT,\n      uint256 DAILY_PRICE_DECREASE_LIMIT,\n      bytes32 PRICE_MERKLE_ROOT,\n      address ORACLE_POSITION\n    );\n\n  function getDefaultModule(\n    uint256 _type\n  ) external view returns (uint256 _version);\n\n  function isAllowedModule(\n    uint256 _type,\n    uint256 _version\n  ) external view returns (bool);\n\n  function getValidator(\n    bytes calldata pubkey\n  ) external view returns (StakeUtils.Validator memory);\n\n  function getValidatorByPool(\n    uint256 poolId,\n    uint256 index\n  ) external view returns (bytes memory);\n\n  function getMaintenanceFee(uint256 id) external view returns (uint256 fee);\n\n  // function operatorAllowance(\n  //   uint256 poolId,\n  //   uint256 operatorId\n  // ) external view returns (uint256 allowance);\n\n  function isPrisoned(uint256 operatorId) external view returns (bool);\n\n  function isPrivatePool(uint256 poolId) external view returns (bool);\n\n  function isPriceValid(uint256 poolId) external view returns (bool);\n\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\n\n  function canStake(bytes calldata pubkey) external view returns (bool);\n\n  function initiateOperator(\n    uint256 id,\n    uint256 fee,\n    uint256 validatorPeriod,\n    address maintainer\n  ) external payable;\n\n  function initiatePool(\n    uint256 fee,\n    uint256 interfaceVersion,\n    address maintainer,\n    bytes calldata NAME,\n    bytes calldata interface_data,\n    bool[3] calldata config\n  ) external payable;\n\n  function setPoolVisibility(uint256 poolId, bool isPrivate) external;\n\n  function deployLiquidityPool(uint256 poolId) external;\n\n  function changeMaintainer(uint256 id, address newMaintainer) external;\n\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\n\n  function increaseWalletBalance(\n    uint256 id\n  ) external payable returns (bool success);\n\n  function decreaseWalletBalance(\n    uint256 id,\n    uint256 value\n  ) external returns (bool success);\n\n  function switchValidatorPeriod(uint256 id, uint256 newPeriod) external;\n\n  function blameOperator(bytes calldata pk) external;\n\n  function setEarlyExitFee(uint256 fee) external;\n\n  function releasePrisoned(uint256 operatorId) external;\n\n  function approveOperators(\n    uint256 poolId,\n    uint256[] calldata operatorIds,\n    uint256[] calldata allowances\n  ) external;\n\n  function setWhitelist(uint256 poolId, address whitelist) external;\n\n  function deposit(\n    uint256 poolId,\n    uint256 mingETH,\n    uint256 deadline,\n    uint256 price,\n    bytes32[] calldata priceProofs,\n    address receiver\n  ) external payable;\n\n  function proposeStake(\n    uint256 poolId,\n    uint256 operatorId,\n    bytes[] calldata pubkeys,\n    bytes[] calldata signatures1,\n    bytes[] calldata signatures31\n  ) external;\n\n  function beaconStake(uint256 operatorId, bytes[] calldata pubkeys) external;\n\n  function updateVerificationIndex(\n    uint256 validatorVerificationIndex,\n    bytes[] calldata alienatedPubkeys\n  ) external;\n\n  function regulateOperators(\n    uint256[] calldata feeThefts,\n    bytes[] calldata stolenBlocks\n  ) external;\n\n  function reportOracle(\n    bytes32 priceMerkleRoot,\n    uint256 allValidatorsCount\n  ) external;\n\n  function priceSync(\n    uint256 poolId,\n    uint256 price,\n    bytes32[] calldata priceProofs\n  ) external;\n\n  function priceSyncBatch(\n    uint256[] calldata poolIds,\n    uint256[] calldata prices,\n    bytes32[][] calldata priceProofs\n  ) external;\n}\n"
    },
    "contracts/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\nimport \"./IgETH.sol\";\n\ninterface ISwap {\n  // pool data view functions\n  function getERC1155() external view returns (address);\n\n  function getA() external view returns (uint256);\n\n  function getAPrecise() external view returns (uint256);\n\n  function getSwapFee() external view returns (uint256);\n\n  function getToken() external view returns (uint256);\n\n  function getTokenBalance(uint8 index) external view returns (uint256);\n\n  function getVirtualPrice() external view returns (uint256);\n\n  function getDebt() external view returns (uint256);\n\n  function getAdminBalance(uint256 index) external view returns (uint256);\n\n  // min return calculation functions\n  function calculateSwap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function calculateTokenAmount(\n    uint256[2] calldata amounts,\n    bool deposit\n  ) external view returns (uint256);\n\n  function calculateRemoveLiquidity(\n    uint256 amount\n  ) external view returns (uint256[2] memory);\n\n  function calculateRemoveLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex\n  ) external view returns (uint256 availableTokenAmount);\n\n  // state modifying functions\n  function initialize(\n    IgETH _gEth,\n    uint256 _pooledTokenId,\n    string memory lpTokenName,\n    string memory lpTokenSymbol,\n    address lpTokenTargetAddress,\n    address owner\n  ) external returns (address lpToken);\n\n  function swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy,\n    uint256 deadline\n  ) external payable returns (uint256);\n\n  function addLiquidity(\n    uint256[2] calldata amounts,\n    uint256 minToMint,\n    uint256 deadline\n  ) external payable returns (uint256);\n\n  function removeLiquidity(\n    uint256 amount,\n    uint256[2] calldata minAmounts,\n    uint256 deadline\n  ) external returns (uint256[2] memory);\n\n  function removeLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 minAmount,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function removeLiquidityImbalance(\n    uint256[2] calldata amounts,\n    uint256 maxBurnAmount,\n    uint256 deadline\n  ) external returns (uint256);\n\n  function withdrawAdminFees() external;\n\n  function setAdminFee(uint256 newAdminFee) external;\n\n  function setSwapFee(uint256 newSwapFee) external;\n\n  function rampA(uint256 futureA, uint256 futureTime) external;\n\n  function stopRampA() external;\n}\n"
    },
    "contracts/interfaces/IWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\ninterface IWhitelist {\n  function isAllowed(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IWithdrawalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./IgETH.sol\";\nimport \"./IPortal.sol\";\n\ninterface IWithdrawalContract {\n  function initialize(\n    uint256 _VERSION,\n    uint256 _ID,\n    address _gETH,\n    address _PORTAL,\n    address _CONTROLLER\n  ) external returns (bool);\n\n  function pause() external;\n\n  function unpause() external;\n\n  function getgETH() external view returns (IgETH);\n\n  function getPortal() external view returns (IPortal);\n\n  function getPoolId() external view returns (uint256);\n\n  function getContractVersion() external view returns (uint256);\n\n  function getProposedVersion() external view returns (uint256);\n\n  function recoveryMode() external view returns (bool);\n\n  function newProposal(\n    address _CONTROLLER,\n    uint256 _TYPE,\n    bytes calldata _NAME,\n    uint256 duration\n  ) external;\n\n  function approveProposal(\n    uint256 id\n  ) external returns (uint256 _type, address _controller);\n\n  function fetchUpgradeProposal() external;\n\n  function changeController(address _newSenate) external;\n}\n"
    },
    "contracts/Portal/gETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\nimport \"./helpers/ERC1155SupplyMinterPauser.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title gETH : Geode Finance Liquid Staking Derivatives\n * gETH is a special ERC1155 contract with additional functionalities:\n *\n * Denominator\n * * ERC1155 does not have decimals and it is not wise to use the name convention\n * * but we need to provide some information on how to denominate the balances, price, etc.\n\n * PricePerShare\n * * Keeping track of the ratio between the derivative \n * * and the underlaying staked asset, Ether.\n *\n * gETHInterfaces\n * * Most important functionality gETH provides:\n * * Allowing any other contract to provide additional functionality \n * * around the balance and price data, such as using an ID like ERC20.\n * * \n * * This addition effectively result in changes in \n * * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck()\n * * functions, reasoning is in the comments.\n * \n * Avoiders\n * * If one wants to remain unbound from gETHInterfaces, \n * * it can be done so by calling \"avoidInterfaces\" function.\n *\n * @dev review first helpers/ERC1155SupplyMinterPauser.sol \n */\n\ncontract gETH is ERC1155SupplyMinterPauser {\n    using Address for address;\n\n    event PriceUpdated(\n        uint256 id,\n        uint256 pricePerShare,\n        uint256 updateTimestamp\n    );\n\n    event InterfaceChanged(\n        address indexed newInterface,\n        uint256 id,\n        bool isSet\n    );\n    event InterfacesAvoided(address indexed avoider, uint256 id, bool isAvoid);\n\n    bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n    string public constant name = \"Geode Staked Ether\";\n    string public constant symbol = \"gETH\";\n    uint256 private constant _denominator = 1 ether;\n\n    /**\n     * @notice Mapping from pool IDs to gETHınterface implementation addresses\n     * @dev There can be multiple Interfaces for 1 staking pool.\n     * @dev ADDED for gETH\n     **/\n    mapping(uint256 => mapping(address => bool)) private _interfaces;\n\n    /**\n     * @notice Mapping of user addresses who chose to restrict the access of interfaces\n     * @dev ADDED for gETH\n     **/\n    mapping(address => mapping(uint256 => bool)) private _avoiders;\n\n    /**\n     * @notice shows the underlying ETH for 1 staked gETH for a given asset ID\n     * @dev Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETH\n     * @dev ADDED for gETH\n     **/\n    mapping(uint256 => uint256) private _pricePerShare;\n\n    /**\n     * @notice ID to timestamp, pointing the second that the latest price update happened\n     * @dev ADDED for gETH\n     **/\n    mapping(uint256 => uint256) private _priceUpdateTimestamp;\n\n    constructor(string memory uri) ERC1155SupplyMinterPauser(uri) {\n        _setupRole(ORACLE_ROLE, _msgSender());\n    }\n\n    /**\n    *                                       ** DENOMINATOR **\n    */\n\n    /**\n     * @notice a centralized denominator for all contract using gETH\n     * @dev ERC1155 does not have a decimals, and it is not wise to use the same name\n     * @dev ADDED for gETH\n     */\n    function denominator() external view virtual returns (uint256) {\n        return _denominator;\n    }\n\n    /**\n    *                                       ** INTERFACES **\n    */\n\n    /**\n     * @notice Check if an address is approved as an interface for an ID\n     * @dev ADDED for gETH\n     */\n    function isInterface(\n        address _interface,\n        uint256 id\n    ) public view virtual returns (bool) {\n        require(\n            _interface != address(0),\n            \"gETH: interface query for the zero address\"\n        );\n\n        return _interfaces[id][_interface];\n    }\n\n    /**\n     * @dev Only authorized parties should set the interface\n     * @dev ADDED for gETH\n     */\n    function _setInterface(\n        address _interface,\n        uint256 _id,\n        bool _isSet\n    ) internal virtual {\n        require(\n            _interface != address(0),\n            \"gETH: interface query for the zero address\"\n        );\n\n        _interfaces[_id][_interface] = _isSet;\n    }\n\n    /**\n     * @notice Set an address of a contract that will\n     * act as an interface on gETH contract for a spesific ID\n     * @param _interface Address of the contract that will act as an interface\n     * @param isSet true: sets as an interface, false: unsets\n     * @dev ADDED for gETH\n     */\n    function setInterface(\n        address _interface,\n        uint256 id,\n        bool isSet\n    ) external virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"gETH: must have MINTER_ROLE\"\n        );\n        require(_interface.isContract(), \"gETH: _interface must be a contract\");\n\n        _setInterface(_interface, id, isSet);\n\n        emit InterfaceChanged(_interface, id, isSet);\n    }\n\n    /**\n     * @notice Checks if the given address restricts the affect of the interfaces on their gETH\n     * @param account the potential avoider\n     * @dev ADDED for gETH\n     **/\n    function isAvoider(\n        address account,\n        uint256 id\n    ) public view virtual returns (bool) {\n        return _avoiders[account][id];\n    }\n\n    /**\n     * @notice Restrict any affect of interfaces on the tokens of caller\n     * @param isAvoid true: restrict interfaces, false: allow interfaces\n     * @dev ADDED for gETH\n     **/\n    function avoidInterfaces(uint256 id, bool isAvoid) external virtual {\n        _avoiders[_msgSender()][id] = isAvoid;\n\n        emit InterfacesAvoided(_msgSender(), id, isAvoid);\n    }\n\n    /**\n     * @dev ADDED for gETH\n     * @return price of the derivative in terms of underlying token, Ether\n     */\n    function pricePerShare(uint256 id) external virtual view returns (uint256) {\n        return _pricePerShare[id];\n    }\n\n    /**\n     * @dev ADDED for gETH\n     * @return timestamp of the latest price update for given ID\n     */\n    function priceUpdateTimestamp(uint256 id) external virtual view returns (uint256) {\n        return _priceUpdateTimestamp[id];\n    }\n\n    /**\n     * @dev ADDED for gETH\n     */\n    function _setPricePerShare(uint256 _price, uint256 _id) internal virtual {\n        _pricePerShare[_id] = _price;\n        _priceUpdateTimestamp[_id] = block.timestamp;\n    }\n\n    /**\n     * @notice Only ORACLE can call this function and set price\n     * @dev ADDED for gETH\n     */\n    function setPricePerShare(uint256 price, uint256 id) external virtual {\n        require(\n            hasRole(ORACLE_ROLE, _msgSender()),\n            \"gETH: must have ORACLE to set\"\n        );\n        require(id != 0, \"gETH: price query for the zero address\");\n\n        _setPricePerShare(price, id);\n\n        emit PriceUpdated(id, price, block.timestamp);\n    }\n\n    /**\n     * @notice updates the authorized party for Minter operations related to minting\n     * @dev Minter is basically a superUser, there can be only 1 at a given time,\n     * @dev intended as \"Portal\"\n     */\n    function updateMinterRole(address Minter) external virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"gETH: must have MINTER_ROLE\"\n        );\n\n        renounceRole(MINTER_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, Minter);\n    }\n\n    /**\n     * @notice updates the authorized party for Pausing operations.\n     * @dev Pauser is basically a superUser, there can be only 1 at a given time,\n     * @dev intended as \"Portal\"\n     */\n    function updatePauserRole(address Pauser) external virtual {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"gETH: must have PAUSER_ROLE\"\n        );\n\n        renounceRole(PAUSER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, Pauser);\n    }\n\n    /**\n     * @notice updates the authorized party for Oracle operations related to pricing.\n     * @dev Oracle is basically a superUser, there can be only 1 at a given time,\n     * @dev intended as \"Portal\"\n     */\n    function updateOracleRole(address Oracle) external virtual {\n        require(\n            hasRole(ORACLE_ROLE, _msgSender()),\n            \"gETH: must have ORACLE_ROLE\"\n        );\n\n        renounceRole(ORACLE_ROLE, _msgSender());\n        _setupRole(ORACLE_ROLE, Oracle);\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     * @dev interfaces can move your tokens without asking you\n     * @dev CHANGED for gETH\n     * @dev ADDED \"|| (isInterface(_msgSender(), id) && !isAvoider(from))\"\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() ||\n                isApprovedForAll(from, _msgSender()) ||\n                (isInterface(_msgSender(), id) && !isAvoider(from, id)),\n            \"ERC1155: caller is not owner nor approved nor an allowed interface\"\n        );\n\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     * @dev CHANGED for gETH\n     * @dev ADDED \"|| (isInterface(_msgSender(), id) && !isAvoider(account))\"\n     */\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual override {\n        require(\n            account == _msgSender() ||\n                isApprovedForAll(account, _msgSender()) ||\n                (isInterface(_msgSender(), id) && !isAvoider(account, id)),\n            \"ERC1155: caller is not owner nor approved nor an allowed interface\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    /**\n     * @notice interfaces should handle these checks internally\n     * @dev See {IERC1155-safeTransferFrom}.\n     * @dev CHANGED for gETH\n     * @dev ADDED \"&& !isInterface(operator,id))\"\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual override {\n        if (to.isContract() && !isInterface(operator, id)) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/Portal/gETHInterfaces/ERC20InterfacePermitUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./ERC20InterfaceUpgradable.sol\";\n\n/**\n * @dev differences between ERC20InterfacePermitUpgradable and Openzeppelin's implementation of ERC20PermitUpgradable is:\n * -> pragma set to =0.8.7;\n * -> using ERC20InterfaceUpgradable instead of ERC20Upgradeable\n * -> added initialize\n *\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/54803be62207c2412e27d09325243f2f1452f7b9/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\n * diffchecker: https://www.diffchecker.com/Hwmvi5HF\n */\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\ncontract ERC20InterfacePermitUpgradable is\n  Initializable,\n  ERC20InterfaceUpgradable,\n  IERC20PermitUpgradeable,\n  EIP712Upgradeable\n{\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n\n  mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n  // solhint-disable-next-line var-name-mixedcase\n  bytes32 private constant _PERMIT_TYPEHASH =\n    keccak256(\n      \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n  /**\n   * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n   * However, to ensure consistency with the upgradeable transpiler, we will continue\n   * to reserve a slot.\n   * @custom:oz-renamed-from _PERMIT_TYPEHASH\n   */\n  // solhint-disable-next-line var-name-mixedcase\n  bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   */\n  function initialize(\n    uint256 id_,\n    address gETH_,\n    bytes calldata data\n  ) public virtual override initializer returns (bool) {\n    uint256 nameLen = uint256(bytes32(BytesLib.slice(data, 0, 32)));\n    __ERC20interfacePermit_init(\n      id_,\n      gETH_,\n      string(BytesLib.slice(data, 32, nameLen)),\n      string(BytesLib.slice(data, 32 + nameLen, data.length - (32 + nameLen)))\n    );\n    return true;\n  }\n\n  /**\n   * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n   *\n   * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n   */\n  function __ERC20interfacePermit_init(\n    uint256 id_,\n    address gETH_,\n    string memory name_,\n    string memory symbol_\n  ) internal onlyInitializing {\n    __ERC20interface_init_unchained(id_, gETH_, name_, symbol_);\n    __EIP712_init_unchained(name_, \"1\");\n  }\n\n  /**\n   * @dev See {IERC20Permit-permit}.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public virtual override {\n    require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n    bytes32 structHash = keccak256(\n      abi.encode(\n        _PERMIT_TYPEHASH,\n        owner,\n        spender,\n        value,\n        _useNonce(owner),\n        deadline\n      )\n    );\n\n    bytes32 hash = _hashTypedDataV4(structHash);\n\n    address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n    require(signer == owner, \"ERC20Permit: invalid signature\");\n\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev See {IERC20Permit-nonces}.\n   */\n  function nonces(\n    address owner\n  ) public view virtual override returns (uint256) {\n    return _nonces[owner].current();\n  }\n\n  /**\n   * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n\n  /**\n   * @dev \"Consume a nonce\": return the current value and increment.\n   *\n   * _Available since v4.1._\n   */\n  function _useNonce(address owner) internal virtual returns (uint256 current) {\n    CountersUpgradeable.Counter storage nonce = _nonces[owner];\n    current = nonce.current();\n    nonce.increment();\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/Portal/gETHInterfaces/ERC20InterfaceUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/IgETH.sol\";\nimport \"../../interfaces/IgETHInterface.sol\";\nimport \"../helpers/BytesLib.sol\";\n\n/**\n * @dev differences between ERC20InterfaceUpgradable and Openzeppelin's implementation of ERC20Upgradeable is:\n * -> pragma set to =0.8.7;\n * -> ERC20InterfaceUpgradable uses gETH contract for balances and totalsupply info.\n * -> unique id of ERC1155 is used\n * -> there is no mint or burn functionality implemented here.\n *\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/2cb8996b777060e658e2b8c9b1630313aedb04c0/contracts/token/ERC20/ERC20Upgradeable.sol\n * diffchecker link: https://www.diffchecker.com/0PlrxJT9\n */\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n\ncontract ERC20InterfaceUpgradable is\n  Initializable,\n  ContextUpgradeable,\n  IERC20Upgradeable,\n  IERC20MetadataUpgradeable\n{\n  /**\n   * @dev gETH ERC20 interface doesn't use balance info, catches it from ERC1155.\n   * mapping(address => uint256) private _balances;\n   **/\n\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  /**\n   * @dev gETH ERC20 interface doesn't use totalSupply info, catches it from ERC1155.\n   * uint256 private _totalSupply;\n   **/\n\n  string private _name;\n  string private _symbol;\n\n  uint256 private _id;\n  IgETH private _ERC1155;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   */\n  function initialize(\n    uint256 id_,\n    address gETH_,\n    bytes calldata data\n  ) public virtual initializer returns (bool) {\n    uint256 nameLen = uint256(bytes32(BytesLib.slice(data, 0, 32)));\n    __ERC20interface_init(\n      id_,\n      gETH_,\n      string(BytesLib.slice(data, 32, nameLen)),\n      string(BytesLib.slice(data, 32 + nameLen, data.length - (32 + nameLen)))\n    );\n    return true;\n  }\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   * All two of these values are immutable: they can only be set once during\n   * construction.\n   */\n\n  function __ERC20interface_init(\n    uint256 id_,\n    address gETH_,\n    string memory name_,\n    string memory symbol_\n  ) internal onlyInitializing {\n    __ERC20interface_init_unchained(id_, gETH_, name_, symbol_);\n  }\n\n  function __ERC20interface_init_unchained(\n    uint256 id_,\n    address gETH_,\n    string memory name_,\n    string memory symbol_\n  ) internal onlyInitializing {\n    _id = id_;\n    _name = name_;\n    _symbol = symbol_;\n    _ERC1155 = IgETH(gETH_);\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\n   * overridden;\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   * @dev CHANGED for gETH.\n   * @dev See {gETH-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _ERC1155.totalSupply(_id);\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   * @dev CHANGED for gETH.\n   * @dev See {gETH-balanceOf}.\n   */\n  function balanceOf(\n    address account\n  ) public view virtual override returns (uint256) {\n    return _ERC1155.balanceOf(account, _id);\n  }\n\n  /**\n   * @dev shows the underlying ETH for 1 staked ether for a given id\n   * @dev CHANGED for gETH.\n   * @dev See {gETH-pricePerShare}.\n   */\n  function pricePerShare() public view returns (uint256) {\n    return _ERC1155.pricePerShare(_id);\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _transfer(owner, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(\n    address spender,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   *\n   * NOTE: Does not update the allowance if the current allowance\n   * is the maximum `uint256`.\n   *\n   * Requirements:\n   *\n   * - `from` and `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``from``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    uint256 currentAllowance = allowance(owner, spender);\n    require(\n      currentAllowance >= subtractedValue,\n      \"ERC20: decreased allowance below zero\"\n    );\n    unchecked {\n      _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * @dev CHANGED for gETH.\n   * @dev See {gETH-safeTransferFrom}.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), \"ERC20: transfer from the zero address\");\n    require(to != address(0), \"ERC20: transfer to the zero address\");\n\n    _beforeTokenTransfer(from, to, amount);\n\n    uint256 fromBalance = balanceOf(from);\n    require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    _ERC1155.safeTransferFrom(from, to, _id, amount, \"\");\n\n    emit Transfer(from, to, amount);\n\n    _afterTokenTransfer(from, to, amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   *\n   * This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n   *\n   * Does not update the allowance amount in case of infinite allowance.\n   * Revert if not enough allowance is available.\n   *\n   * Might emit an {Approval} event.\n   */\n  function _spendAllowance(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance != type(uint256).max) {\n      require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n      unchecked {\n        _approve(owner, spender, currentAllowance - amount);\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * has been transferred to `to`.\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n\n  uint256[45] private __gap;\n}\n"
    },
    "contracts/Portal/helpers/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity =0.8.7;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n    {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (address)\n    {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint8)\n    {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint16)\n    {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint64)\n    {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint96)\n    {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint128)\n    {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (bytes32)\n    {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/Portal/helpers/ERC1155SupplyMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MITs\n\npragma solidity =0.8.7;\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\n\n/**\n * ERC1155SupplyMinterPauser is an ERC1155 implementation that inherites 2 openzeppelin contracts: ERC1155Supply and ERC1155PresetMinterPauser\n *\n * @dev only difference between ERC1155SupplyMinterPauser and Openzeppelin's implementation is\n * _doSafeTransferAcceptanceCheck is being virtual.\n *\n * TO REPRODUCE the ERC1155SupplyMinterPauser on diffchecker link::\n * Formatter: Prettier: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\n * 0. Open a new file on vscode: ERC1155SupplyMinterPauser.sol (or name it whatever you want with .sol extension)\n *\n * 1. put ERC1155: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/ERC1155.sol\n * 1.2 delete imports and comments on top of the contract.\n *\n * 2. put this under the file ERC1155Burnable: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\n * 2.2 delete imports and comments on top of the contract.\n *\n * 3. put this under the file ERC1155Pausable: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\n * 3.2 delete imports and comments on top of the contract.\n *\n * 4. put this under the file ERC1155Supply: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/extensions/ERC1155Supply.sol\n * 4.2 delete imports and comments on top of the contract.\n *\n * 5. put this under the file ERC1155PresetMinterPauser: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cb3f2ab900e39c5ab6e0de6663edf06f573b834f/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\n * 5.2 delete imports and comments on top of the contract.\n *\n * 6. refactor the file with prettier\n * 7. compare it with our local ERC1155SupplyMinterPauser.sol\n * 8. only changes we did are the same with the https://www.diffchecker.com/UOAdD16A\n */\n\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            account != address(0),\n            \"ERC1155: address zero is not a valid owner\"\n        );\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(\n            accounts.length == ids.length,\n            \"ERC1155: accounts and ids length mismatch\"\n        );\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(\n            fromBalance >= amount,\n            \"ERC1155: insufficient balance for transfer\"\n        );\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(\n                fromBalance >= amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(\n            operator,\n            from,\n            to,\n            ids,\n            amounts,\n            data\n        );\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(\n            operator,\n            address(0),\n            to,\n            id,\n            amount,\n            data\n        );\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(\n            operator,\n            address(0),\n            to,\n            ids,\n            amounts,\n            data\n        );\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(\n                fromBalance >= amount,\n                \"ERC1155: burn amount exceeds balance\"\n            );\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155BatchReceived(\n                    operator,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element)\n        private\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n}\n\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(\n                    supply >= amount,\n                    \"ERC1155: burn amount exceeds totalSupply\"\n                );\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n\ncontract ERC1155SupplyMinterPauser is\n    Context,\n    AccessControlEnumerable,\n    ERC1155Burnable,\n    ERC1155Pausable,\n    ERC1155Supply\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n     * deploys the contract.\n     */\n    constructor(string memory uri) ERC1155(uri) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have minter role to mint\"\n        );\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual {\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have minter role to mint\"\n        );\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have pauser role to pause\"\n        );\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have pauser role to unpause\"\n        );\n        _unpause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC1155)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Pausable, ERC1155Supply) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "contracts/Portal/helpers/test/ERC1155ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\ncontract ERC1155ReceiverMock is ERC165, IERC1155Receiver {\n    bytes4 private _recRetval;\n    bool private _recReverts;\n    bytes4 private _batRetval;\n    bool private _batReverts;\n\n    event Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes data,\n        uint256 gas\n    );\n    event BatchReceived(\n        address operator,\n        address from,\n        uint256[] ids,\n        uint256[] values,\n        bytes data,\n        uint256 gas\n    );\n\n    constructor(\n        bytes4 recRetval,\n        bool recReverts,\n        bytes4 batRetval,\n        bool batReverts\n    ) {\n        _recRetval = recRetval;\n        _recReverts = recReverts;\n        _batRetval = batRetval;\n        _batReverts = batReverts;\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\n        emit Received(operator, from, id, value, data, gasleft());\n        return _recRetval;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        require(\n            !_batReverts,\n            \"ERC1155ReceiverMock: reverting on batch receive\"\n        );\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\n        return _batRetval;\n    }\n}\n"
    },
    "contracts/Portal/helpers/test/nonERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../../../interfaces/IgETH.sol\";\n\ncontract nonERC1155Receiver is Context {\n  uint256 private immutable _id;\n  IgETH private immutable _ERC1155;\n\n  constructor(uint256 id_, address gETH_1155) {\n    _id = id_;\n    _ERC1155 = IgETH(gETH_1155);\n  }\n\n  function transfer(address recipient, uint256 amount) public virtual {\n    _transfer(_msgSender(), recipient, amount);\n  }\n\n  function burn(uint256 amount) public virtual {\n    _burn(_msgSender(), amount);\n  }\n\n  function _burn(address account, uint256 amount) internal virtual {\n    unchecked {\n      _ERC1155.burn(account, _id, amount);\n    }\n  }\n\n  function _transfer(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) internal virtual {\n    unchecked {\n      _ERC1155.safeTransferFrom(sender, recipient, _id, amount, \"\");\n    }\n  }\n}\n"
    },
    "contracts/Portal/helpers/test/TestDataStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\nimport \"../../utils/DataStoreUtilsLib.sol\";\n\ncontract TestDataStoreUtils {\n  using DataStoreUtils for DataStoreUtils.IsolatedStorage;\n  DataStoreUtils.IsolatedStorage private DATASTORE;\n\n  /// @notice helpers\n\n  function generateId(\n    bytes calldata NAME,\n    uint256 TYPE\n  ) external pure returns (uint256) {\n    return DataStoreUtils.generateId(NAME, TYPE);\n  }\n\n  function getKey(uint256 _id, bytes32 _param) external pure returns (bytes32) {\n    return DataStoreUtils.getKey(_id, _param);\n  }\n\n  /// @notice READ\n\n  function readUint(\n    uint256 _id,\n    bytes32 _key\n  ) external view returns (uint256) {\n    return DATASTORE.readUint(_id, _key);\n  }\n\n  function readBytes(\n    uint256 _id,\n    bytes32 _key\n  ) external view returns (bytes memory) {\n    return DATASTORE.readBytes(_id, _key);\n  }\n\n  function readAddress(\n    uint256 _id,\n    bytes32 _key\n  ) external view returns (address) {\n    return DATASTORE.readAddress(_id, _key);\n  }\n\n  function readUintArray(\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) external view returns (uint256) {\n    return DATASTORE.readUintArray(_id, _key, _index);\n  }\n\n  function readBytesArray(\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) external view returns (bytes memory) {\n    return DATASTORE.readBytesArray(_id, _key, _index);\n  }\n\n  function readAddressArray(\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) external view returns (address) {\n    return DATASTORE.readAddressArray(_id, _key, _index);\n  }\n\n  /// @notice WRITE\n\n  function writeUint(uint256 _id, bytes32 _key, uint256 _data) external {\n    DATASTORE.writeUint(_id, _key, _data);\n  }\n\n  function addUint(uint256 _id, bytes32 _key, uint256 addend) external {\n    DATASTORE.addUint(_id, _key, addend);\n  }\n\n  function subUint(uint256 _id, bytes32 _key, uint256 minuend) external {\n    DATASTORE.subUint(_id, _key, minuend);\n  }\n\n  function writeBytes(\n    uint256 _id,\n    bytes32 _key,\n    bytes memory _data\n  ) external {\n    DATASTORE.writeBytes(_id, _key, _data);\n  }\n\n  function writeAddress(\n    uint256 _id,\n    bytes32 _key,\n    address _data\n  ) external {\n    DATASTORE.writeAddress(_id, _key, _data);\n  }\n\n  function appendUintArray(\n    uint256 _id,\n    bytes32 _key,\n    uint256 _data\n  ) external {\n    DATASTORE.appendUintArray(_id, _key, _data);\n  }\n\n  function appendBytesArray(\n    uint256 _id,\n    bytes32 _key,\n    bytes memory _data\n  ) external {\n    DATASTORE.appendBytesArray(_id, _key, _data);\n  }\n\n  function appendAddressArray(\n    uint256 _id,\n    bytes32 _key,\n    address _data\n  ) external {\n    DATASTORE.appendAddressArray(_id, _key, _data);\n  }\n\n  function appendUintArrayBatch(\n    uint256 _id,\n    bytes32 _key,\n    uint256[] memory _data\n  ) external {\n    DATASTORE.appendUintArrayBatch(_id, _key, _data);\n  }\n\n  function appendBytesArrayBatch(\n    uint256 _id,\n    bytes32 _key,\n    bytes[] memory _data\n  ) external {\n    DATASTORE.appendBytesArrayBatch(_id, _key, _data);\n  }\n\n  function appendAddressArrayBatch(\n    uint256 _id,\n    bytes32 _key,\n    address[] memory _data\n  ) external {\n    DATASTORE.appendAddressArrayBatch(_id, _key, _data);\n  }\n}\n"
    },
    "contracts/Portal/helpers/test/TestDepositContractUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"../../../interfaces/IDepositContract.sol\";\nimport \"../../utils/DepositContractUtilsLib.sol\";\n\ncontract TestDepositContractUtils {\n  function getDepositContract()\n    external\n    view\n    virtual\n    returns (IDepositContract)\n  {\n    return DepositContractUtils.DEPOSIT_CONTRACT;\n  }\n\n  function getDepositDataRoot(\n    bytes memory _pubkey,\n    bytes memory _withdrawal_credentials,\n    bytes memory _signature,\n    uint256 _stakeAmount\n  ) external view virtual returns (bytes32) {\n    return\n      DepositContractUtils._getDepositDataRoot(\n        _pubkey,\n        _withdrawal_credentials,\n        _signature,\n        _stakeAmount\n      );\n  }\n\n  function addressToWC(\n    address _wc_address\n  ) external view virtual returns (bytes memory) {\n    return DepositContractUtils.addressToWC(_wc_address);\n  }\n\n  function getPubkeyLength() external view virtual returns (uint256) {\n    return DepositContractUtils.PUBKEY_LENGTH;\n  }\n}\n"
    },
    "contracts/Portal/helpers/test/TestGlobals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"../../utils/globals.sol\";\n\ncontract TestGlobals {\n  function getPERCENTAGE_DENOMINATOR() public pure returns (uint256) {\n    return PERCENTAGE_DENOMINATOR;\n  }\n\n  // geode types\n  function getTypeNONE() public pure returns (uint256) {\n    return ID_TYPE.NONE;\n  }\n\n  function getTypeSENATE() public pure returns (uint256) {\n    return ID_TYPE.SENATE;\n  }\n\n  function getTypeCONTRACT_UPGRADE() public pure returns (uint256) {\n    return ID_TYPE.CONTRACT_UPGRADE;\n  }\n\n  function getTypeGAP() public pure returns (uint256) {\n    return ID_TYPE.__GAP__;\n  }\n\n  function getTypeOPERATOR() public pure returns (uint256) {\n    return ID_TYPE.OPERATOR;\n  }\n\n  function getTypePOOL() public pure returns (uint256) {\n    return ID_TYPE.POOL;\n  }\n\n  function getTypeMODULE_WITHDRAWAL_CONTRACT() public pure returns (uint256) {\n    return ID_TYPE.MODULE_WITHDRAWAL_CONTRACT;\n  }\n\n  function getTypeMODULE_GETH_INTERFACE() public pure returns (uint256) {\n    return ID_TYPE.MODULE_GETH_INTERFACE;\n  }\n\n  function getTypeMODULE_LIQUDITY_POOL() public pure returns (uint256) {\n    return ID_TYPE.MODULE_LIQUDITY_POOL;\n  }\n\n  function getTypeMODULE_LIQUDITY_POOL_TOKEN() public pure returns (uint256) {\n    return ID_TYPE.MODULE_LIQUDITY_POOL_TOKEN;\n  }\n\n  // validator states\n\n  function getStateNONE() public pure returns (uint8) {\n    return VALIDATOR_STATE.NONE;\n  }\n\n  function getStatePROPOSED() public pure returns (uint8) {\n    return VALIDATOR_STATE.PROPOSED;\n  }\n\n  function getStateACTIVE() public pure returns (uint8) {\n    return VALIDATOR_STATE.ACTIVE;\n  }\n\n  function getStateEXITED() public pure returns (uint8) {\n    return VALIDATOR_STATE.EXITED;\n  }\n\n  function getStateALIENATED() public pure returns (uint8) {\n    return VALIDATOR_STATE.ALIENATED;\n  }\n}\n"
    },
    "contracts/Portal/helpers/test/WhiteList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../../interfaces/IWhitelist.sol\";\n\ncontract Whitelist is IWhitelist, Ownable {\n  event Listed(address indexed account, bool isWhitelisted);\n\n  mapping(address => bool) private whitelist;\n\n  function isAllowed(\n    address _address\n  ) external view virtual override returns (bool) {\n    return whitelist[_address];\n  }\n\n  function setAddress(address _address, bool allow) external virtual onlyOwner {\n    require(whitelist[_address] != allow);\n    whitelist[_address] = allow;\n    emit Listed(_address, allow);\n  }\n}\n"
    },
    "contracts/Portal/liquidityPool/helpers/OwnerPausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\n/**\n * @title OwnerPausable\n * @notice An ownable contract allows the owner to pause and unpause the\n * contract without a delay.\n * @dev Only methods using the provided modifiers will be paused.\n */\nabstract contract OwnerPausableUpgradeable is\n    OwnableUpgradeable,\n    PausableUpgradeable\n{\n    function __OwnerPausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    /**\n     * @notice Pause the contract. Revert if already paused.\n     */\n    function pause() external onlyOwner {\n        PausableUpgradeable._pause();\n    }\n\n    /**\n     * @notice Unpause the contract. Revert if already unpaused.\n     */\n    function unpause() external onlyOwner {\n        PausableUpgradeable._unpause();\n    }\n}\n"
    },
    "contracts/Portal/liquidityPool/helpers/test/TestMathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"../../utils/MathUtils.sol\";\n\ncontract TestMathUtils {\n    using MathUtils for uint256;\n\n    function within1(uint256 a, uint256 b) public pure returns (bool) {\n        return a.within1(b);\n    }\n\n    function difference(uint256 a, uint256 b) public pure returns (uint256) {\n        return a.difference(b);\n    }\n}\n"
    },
    "contracts/Portal/liquidityPool/helpers/test/TestSwapReturnValues.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"../../../../interfaces/ISwap.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract TestSwapReturnValues is ERC1155Holder {\n  using SafeMath for uint256;\n\n  ISwap public swap;\n  IERC1155 public gETH;\n  IERC20 public lpToken;\n  uint8 public n;\n\n  uint256 public constant MAX_INT = 2 ** 256 - 1;\n\n  constructor(\n    ISwap swapContract,\n    IERC1155 gETHReference,\n    IERC20 lpTokenContract,\n    uint8 numOfTokens\n  ) {\n    swap = swapContract;\n    gETH = gETHReference;\n    lpToken = lpTokenContract;\n    n = numOfTokens;\n\n    // Pre-approve tokens\n    gETH.setApprovalForAll(address(swap), true);\n    lpToken.approve(address(swap), MAX_INT);\n  }\n\n  function test_swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy\n  ) public payable {\n    uint256 etherbalanceBefore = address(this).balance;\n    uint256 getherbalanceBefore = gETH.balanceOf(\n      address(this),\n      swap.getToken()\n    );\n\n    if (tokenIndexFrom == 0) {\n      // If ether to gether\n      uint256 returnValue = swap.swap{value: msg.value}(\n        tokenIndexFrom,\n        tokenIndexTo,\n        dx,\n        minDy,\n        block.timestamp\n      );\n\n      uint256 getherbalanceAfter = gETH.balanceOf(\n        address(this),\n        swap.getToken()\n      );\n\n      require(\n        returnValue == getherbalanceAfter.sub(getherbalanceBefore),\n        \"swap()'s return value does not match received gether amount\"\n      );\n    } else {\n      uint256 returnValue = swap.swap(\n        tokenIndexFrom,\n        tokenIndexTo,\n        dx,\n        minDy,\n        block.timestamp\n      );\n\n      uint256 etherbalanceAfter = address(this).balance;\n\n      require(\n        returnValue == etherbalanceAfter.sub(etherbalanceBefore),\n        \"swap()'s return value does not match received ether amount\"\n      );\n    }\n  }\n\n  function test_addLiquidity(\n    uint256[2] calldata amounts,\n    uint256 minToMint\n  ) public payable {\n    require(\n      msg.value == amounts[0],\n      \"The update of about ETH amount -0xCypher\"\n    );\n    uint256 balanceBefore = lpToken.balanceOf(address(this));\n    uint256 returnValue = swap.addLiquidity{value: msg.value}(\n      amounts,\n      minToMint,\n      MAX_INT\n    );\n    uint256 balanceAfter = lpToken.balanceOf(address(this));\n\n    console.log(\n      \"addLiquidity: Expected %s, got %s\",\n      balanceAfter.sub(balanceBefore),\n      returnValue\n    );\n\n    require(\n      returnValue == balanceAfter.sub(balanceBefore),\n      \"addLiquidity()'s return value does not match minted amount\"\n    );\n  }\n\n  function test_removeLiquidity(\n    uint256 amount,\n    uint256[2] memory minAmounts\n  ) public {\n    uint256[] memory balanceBefore = new uint256[](n);\n    uint256[] memory balanceAfter = new uint256[](n);\n\n    balanceBefore[0] = address(this).balance;\n    balanceBefore[1] = gETH.balanceOf(address(this), swap.getToken());\n\n    uint256[2] memory returnValue = swap.removeLiquidity(\n      amount,\n      minAmounts,\n      MAX_INT\n    );\n    balanceAfter[0] = address(this).balance;\n    balanceAfter[1] = gETH.balanceOf(address(this), swap.getToken());\n\n    for (uint8 i = 0; i < n; ++i) {\n      console.log(\n        \"removeLiquidity: Expected %s, got %s\",\n        balanceAfter[i].sub(balanceBefore[i]),\n        returnValue[i]\n      );\n      require(\n        balanceAfter[i].sub(balanceBefore[i]) == returnValue[i],\n        \"removeLiquidity()'s return value does not match received amounts of tokens\"\n      );\n    }\n  }\n\n  function test_removeLiquidityImbalance(\n    uint256[2] calldata amounts,\n    uint256 maxBurnAmount\n  ) public {\n    uint256 balanceBefore = lpToken.balanceOf(address(this));\n    uint256 returnValue = swap.removeLiquidityImbalance(\n      amounts,\n      maxBurnAmount,\n      MAX_INT\n    );\n    uint256 balanceAfter = lpToken.balanceOf(address(this));\n\n    console.log(\n      \"removeLiquidityImbalance: Expected %s, got %s\",\n      balanceBefore.sub(balanceAfter),\n      returnValue\n    );\n\n    require(\n      returnValue == balanceBefore.sub(balanceAfter),\n      \"removeLiquidityImbalance()'s return value does not match burned lpToken amount\"\n    );\n  }\n\n  function test_removeLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 minAmount\n  ) public {\n    uint256 balanceBefore;\n    if (tokenIndex == 0) {\n      balanceBefore = address(this).balance;\n    } else {\n      balanceBefore = gETH.balanceOf(address(this), swap.getToken());\n    }\n    uint256 returnValue = swap.removeLiquidityOneToken(\n      tokenAmount,\n      tokenIndex,\n      minAmount,\n      MAX_INT\n    );\n\n    uint256 balanceAfter;\n    if (tokenIndex == 0) {\n      balanceAfter = address(this).balance;\n    } else {\n      balanceAfter = gETH.balanceOf(address(this), swap.getToken());\n    }\n    console.log(\n      \"removeLiquidityOneToken: Expected %s, got %s\",\n      balanceAfter.sub(balanceBefore),\n      returnValue\n    );\n\n    require(\n      returnValue == balanceAfter.sub(balanceBefore),\n      \"removeLiquidityOneToken()'s return value does not match received token amount\"\n    );\n  }\n\n  receive() external payable {}\n}\n"
    },
    "contracts/Portal/liquidityPool/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title Liquidity Provider Token\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\n * It is used to represent user's shares when providing liquidity to swap contracts.\n * @dev Only Swap contracts should initialize and own LPToken contracts.\n */\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\n    /**\n     * @notice Initializes this LPToken contract with the given name and symbol\n     * @dev The caller of this function will become the owner. A Swap contract should call this\n     * in its initializer function.\n     * @param name name of this token\n     * @param symbol symbol of this token\n     */\n    function initialize(string memory name, string memory symbol)\n        external\n        initializer\n        returns (bool)\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __Ownable_init_unchained();\n        return true;\n    }\n\n    /**\n     * @notice Mints the given amount of LPToken to the recipient.\n     * @dev only owner can call this mint function\n     * @param recipient address of account to receive the tokens\n     * @param amount amount of tokens to mint\n     */\n    function mint(address recipient, uint256 amount) external onlyOwner {\n        require(amount != 0, \"LPToken: cannot mint 0\");\n        _mint(recipient, amount);\n    }\n\n    /**\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n     * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\n     * This assumes the owner is set to a Swap contract's address.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20Upgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n        require(to != address(this), \"LPToken: cannot send to itself\");\n    }\n}\n"
    },
    "contracts/Portal/liquidityPool/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../../interfaces/IgETH.sol\";\nimport \"./helpers/OwnerPausableUpgradeable.sol\";\nimport \"./utils/SwapUtils.sol\";\nimport \"./utils/AmplificationUtils.sol\";\nimport \"../../interfaces/ISwap.sol\";\n\n/**\n * @title Swap - A StableSwap implementation in solidity.\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\n * Users can burn pool tokens and withdraw their share of token(s).\n *\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\n * distributed to the LPs.\n *\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\n * stops the ratio of the tokens in the pool from changing.\n * Users can always withdraw their tokens via multi-asset withdraws.\n *\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\n * deployment size.\n * @dev The main functionality of Withdrawal Pools is allowing the depositors to have instant withdrawals\n * relying on the Oracle Price, with the help of Liquidity Providers.\n * It is important to change the focus point (1-1) of the pricing algorithm with PriceIn and PriceOut functions.\n * Because the underlying price of the staked assets are expected to raise in time.\n * One can see this similar to accomplishing a \"rebasing\" logic, with the help of a trusted price source.\n */\ncontract Swap is\n  ISwap,\n  OwnerPausableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  ERC1155HolderUpgradeable\n{\n  using SwapUtils for SwapUtils.Swap;\n  using AmplificationUtils for SwapUtils.Swap;\n\n  // Struct storing data responsible for automatic market maker functionalities. In order to\n  // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol\n  SwapUtils.Swap public swapStorage;\n\n  /*** EVENTS ***/\n\n  // events replicated from SwapUtils to make the ABI easier\n  event TokenSwap(\n    address indexed buyer,\n    uint256 tokensSold,\n    uint256 tokensBought,\n    uint128 soldId,\n    uint128 boughtId\n  );\n  event AddLiquidity(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256[2] fees,\n    uint256 invariant,\n    uint256 lpTokenSupply\n  );\n  event RemoveLiquidity(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256 lpTokenSupply\n  );\n  event RemoveLiquidityOne(\n    address indexed provider,\n    uint256 lpTokenAmount,\n    uint256 lpTokenSupply,\n    uint256 boughtId,\n    uint256 tokensBought\n  );\n  event RemoveLiquidityImbalance(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256[2] fees,\n    uint256 invariant,\n    uint256 lpTokenSupply\n  );\n  event NewAdminFee(uint256 newAdminFee);\n  event NewSwapFee(uint256 newSwapFee);\n  event NewWithdrawFee(uint256 newWithdrawFee);\n  event RampA(\n    uint256 oldA,\n    uint256 newA,\n    uint256 initialTime,\n    uint256 futureTime\n  );\n  event StopRampA(uint256 currentA, uint256 time);\n\n  /**\n   * @notice Initializes this Swap contract with the given parameters.\n   * This will also clone a LPToken contract that represents users'\n   * LP positions. The owner of LPToken will be this contract - which means\n   * only this contract is allowed to mint/burn tokens.\n   *\n   * @param _gETH reference of the ERC1155 contract\n   * @param _pooledTokenId gEther ID that the Pool is operating with\n   * @param lpTokenName the long-form name of the token to be deployed\n   * @param lpTokenSymbol the short symbol for the token to be deployed\n   * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target\n   */\n  function initialize(\n    IgETH _gETH,\n    uint256 _pooledTokenId,\n    string memory lpTokenName,\n    string memory lpTokenSymbol,\n    address lpTokenTargetAddress,\n    address owner\n  ) public virtual override initializer returns (address) {\n    __OwnerPausable_init();\n    __ReentrancyGuard_init();\n    __ERC1155Holder_init();\n\n    require(\n      lpTokenTargetAddress != address(0),\n      \"Swap: lpTokenTargetAddress can not be zero\"\n    );\n    require(owner != address(0), \"Swap: owner can not be zero\");\n    require(address(_gETH) != address(0), \"Swap: _gETH can not be zero\");\n    require(_pooledTokenId != 0, \"Swap: _pooledTokenId can not be zero\");\n\n    // Clone and initialize a LPToken contract\n    ILPToken lpToken = ILPToken(Clones.clone(lpTokenTargetAddress));\n\n    require(\n      lpToken.initialize(lpTokenName, lpTokenSymbol),\n      \"Swap: could not init lpToken clone\"\n    );\n\n    // Initialize swapStorage struct\n    swapStorage.gETH = _gETH;\n    swapStorage.lpToken = lpToken;\n    swapStorage.pooledTokenId = _pooledTokenId;\n    swapStorage.initialA = 60 * AmplificationUtils.A_PRECISION;\n    swapStorage.futureA = 60 * AmplificationUtils.A_PRECISION;\n    swapStorage.swapFee = (4 * PERCENTAGE_DENOMINATOR) / 10000;\n    swapStorage.adminFee = 0;\n\n    super.transferOwnership(owner);\n    return address(lpToken);\n  }\n\n  /*** MODIFIERS ***/\n\n  /**\n   * @notice Modifier to check deadline against current timestamp\n   * @param deadline latest timestamp to accept this transaction\n   */\n  modifier deadlineCheck(uint256 deadline) {\n    require(block.timestamp <= deadline, \"Swap: Deadline not met\");\n    _;\n  }\n\n  /*** VIEW FUNCTIONS ***/\n  function getERC1155() external view virtual override returns (address) {\n    return address(swapStorage.gETH);\n  }\n\n  /**\n   * @notice Return A, the amplification coefficient * n * (n - 1)\n   * @dev See the StableSwap paper for details\n   * @return A parameter\n   */\n  function getA() external view virtual override returns (uint256) {\n    return swapStorage.getA();\n  }\n\n  /**\n   * @notice Return A in its raw precision form\n   * @dev See the StableSwap paper for details\n   * @return A parameter in its raw precision form\n   */\n  function getAPrecise() external view virtual override returns (uint256) {\n    return swapStorage.getAPrecise();\n  }\n\n  /**\n   * @notice Return id of the pooled token\n   * @return id of the pooled gEther token\n   */\n  function getSwapFee() external view virtual override returns (uint256) {\n    return swapStorage.swapFee;\n  }\n\n  function getToken() external view virtual override returns (uint256) {\n    return swapStorage.pooledTokenId;\n  }\n\n  /**\n   * @notice Return current balance of the pooled token at given index\n   * @param index the index of the token\n   * @return current balance of the pooled token at given index with token's native precision\n   */\n  function getTokenBalance(\n    uint8 index\n  ) external view virtual override returns (uint256) {\n    require(index < 2, \"Swap: Index out of range\");\n    return swapStorage.balances[index];\n  }\n\n  /**\n   * @notice Get the virtual price, to help calculate profit\n   * @return the virtual price\n   */\n  function getVirtualPrice() external view virtual override returns (uint256) {\n    return swapStorage.getVirtualPrice();\n  }\n\n  /**\n   * @notice Debt, The amount of buyback for stable pricing (1=1).\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\n   */\n  function getDebt() external view virtual override returns (uint256) {\n    // might change when price is in.\n    return swapStorage.getDebt();\n  }\n\n  /**\n   * @notice Calculate amount of tokens you receive on swap\n   * @param tokenIndexFrom the token the user wants to sell\n   * @param tokenIndexTo the token the user wants to buy\n   * @param dx the amount of tokens the user wants to sell. If the token charges\n   * a fee on transfers, use the amount that gets transferred after the fee.\n   * @return amount of tokens the user will receive\n   */\n  function calculateSwap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view virtual override returns (uint256) {\n    return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n  }\n\n  /**\n   * @notice A simple method to calculate prices from deposits or\n   * withdrawals, excluding fees but including slippage. This is\n   * helpful as an input into the various \"min\" parameters on calls\n   * to fight front-running\n   *\n   * @dev This shouldn't be used outside frontends for user estimates.\n   *\n   * @param amounts an array of token amounts to deposit or withdrawal,\n   * corresponding to pooledTokens. The amount should be in each\n   * pooled token's native precision. If a token charges a fee on transfers,\n   * use the amount that gets transferred after the fee.\n   * @param deposit whether this is a deposit or a withdrawal\n   * @return token amount the user will receive\n   */\n  function calculateTokenAmount(\n    uint256[2] calldata amounts,\n    bool deposit\n  ) external view virtual override returns (uint256) {\n    return swapStorage.calculateTokenAmount(amounts, deposit);\n  }\n\n  /**\n   * @notice A simple method to calculate amount of each underlying\n   * tokens that is returned upon burning given amount of LP tokens\n   * @param amount the amount of LP tokens that would be burned on withdrawal\n   * @return array of token balances that the user will receive\n   */\n  function calculateRemoveLiquidity(\n    uint256 amount\n  ) external view virtual override returns (uint256[2] memory) {\n    return swapStorage.calculateRemoveLiquidity(amount);\n  }\n\n  /**\n   * @notice Calculate the amount of underlying token available to withdraw\n   * when withdrawing via only single token\n   * @param tokenAmount the amount of LP token to burn\n   * @param tokenIndex index of which token will be withdrawn\n   * @return availableTokenAmount calculated amount of underlying token\n   * available to withdraw\n   */\n  function calculateRemoveLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex\n  ) external view virtual override returns (uint256 availableTokenAmount) {\n    return swapStorage.calculateWithdrawOneToken(tokenAmount, tokenIndex);\n  }\n\n  /**\n   * @notice This function reads the accumulated amount of admin fees of the token with given index\n   * @param index Index of the pooled token\n   * @return admin's token balance in the token's precision\n   */\n  function getAdminBalance(\n    uint256 index\n  ) external view virtual override returns (uint256) {\n    return swapStorage.getAdminBalance(index);\n  }\n\n  /*** STATE MODIFYING FUNCTIONS ***/\n\n  /**\n   * @notice Swap two tokens using this pool\n   * @param tokenIndexFrom the token the user wants to swap from\n   * @param tokenIndexTo the token the user wants to swap to\n   * @param dx the amount of tokens the user wants to swap from\n   * @param minDy the min amount the user would like to receive, or revert.\n   * @param deadline latest timestamp to accept this transaction\n   */\n  function swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy,\n    uint256 deadline\n  )\n    external\n    payable\n    virtual\n    override\n    nonReentrant\n    whenNotPaused\n    deadlineCheck(deadline)\n    returns (uint256)\n  {\n    return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\n  }\n\n  /**\n   * @notice Add liquidity to the pool with the given amounts of tokens\n   * @param amounts the amounts of each token to add, in their native precision\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\n   * should mint, otherwise revert. Handy for front-running mitigation\n   * @param deadline latest timestamp to accept this transaction\n   * @return amount of LP token user minted and received\n   */\n  function addLiquidity(\n    uint256[2] calldata amounts,\n    uint256 minToMint,\n    uint256 deadline\n  )\n    external\n    payable\n    virtual\n    override\n    nonReentrant\n    whenNotPaused\n    deadlineCheck(deadline)\n    returns (uint256)\n  {\n    return swapStorage.addLiquidity(amounts, minToMint);\n  }\n\n  /**\n   * @notice Burn LP tokens to remove liquidity from the pool.\n   * @dev Liquidity can always be removed, even when the pool is paused.\n   * @param amount the amount of LP tokens to burn\n   * @param minAmounts the minimum amounts of each token in the pool\n   *        acceptable for this burn. Useful as a front-running mitigation\n   * @param deadline latest timestamp to accept this transaction\n   * @return amounts of tokens user received\n   */\n  function removeLiquidity(\n    uint256 amount,\n    uint256[2] calldata minAmounts,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    deadlineCheck(deadline)\n    returns (uint256[2] memory)\n  {\n    return swapStorage.removeLiquidity(amount, minAmounts);\n  }\n\n  /**\n   * @notice Remove liquidity from the pool all in one token.\n   * @param tokenAmount the amount of the token you want to receive\n   * @param tokenIndex the index of the token you want to receive\n   * @param minAmount the minimum amount to withdraw, otherwise revert\n   * @param deadline latest timestamp to accept this transaction\n   * @return amount of chosen token user received\n   */\n  function removeLiquidityOneToken(\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 minAmount,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    whenNotPaused\n    deadlineCheck(deadline)\n    returns (uint256)\n  {\n    return\n      swapStorage.removeLiquidityOneToken(tokenAmount, tokenIndex, minAmount);\n  }\n\n  /**\n   * @notice Remove liquidity from the pool, weighted differently than the\n   * pool's current balances.\n   * @param amounts how much of each token to withdraw\n   * @param maxBurnAmount the max LP token provider is willing to pay to\n   * remove liquidity. Useful as a front-running mitigation.\n   * @param deadline latest timestamp to accept this transaction\n   * @return amount of LP tokens burned\n   */\n  function removeLiquidityImbalance(\n    uint256[2] calldata amounts,\n    uint256 maxBurnAmount,\n    uint256 deadline\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    whenNotPaused\n    deadlineCheck(deadline)\n    returns (uint256)\n  {\n    return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\n  }\n\n  /*** ADMIN FUNCTIONS ***/\n\n  /**\n   * @notice Withdraw all admin fees to the contract owner\n   */\n  function withdrawAdminFees()\n    external\n    virtual\n    override\n    onlyOwner\n    nonReentrant\n  {\n    swapStorage.withdrawAdminFees(owner());\n  }\n\n  /**\n   * @notice Update the admin fee. Admin fee takes portion of the swap fee.\n   * @param newAdminFee new admin fee to be applied on future transactions\n   */\n  function setAdminFee(\n    uint256 newAdminFee\n  ) external virtual override onlyOwner {\n    swapStorage.setAdminFee(newAdminFee);\n  }\n\n  /**\n   * @notice Update the swap fee to be applied on swaps\n   * @param newSwapFee new swap fee to be applied on future transactions\n   */\n  function setSwapFee(uint256 newSwapFee) external virtual override onlyOwner {\n    swapStorage.setSwapFee(newSwapFee);\n  }\n\n  /**\n   * @notice Start ramping up or down A parameter towards given futureA and futureTime\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\n   * the limit range.\n   * @param futureA the new A to ramp towards\n   * @param futureTime timestamp when the new A should be reached\n   */\n  function rampA(\n    uint256 futureA,\n    uint256 futureTime\n  ) external virtual override onlyOwner {\n    swapStorage.rampA(futureA, futureTime);\n  }\n\n  /**\n   * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\n   */\n  function stopRampA() external virtual override onlyOwner {\n    swapStorage.stopRampA();\n  }\n}\n"
    },
    "contracts/Portal/liquidityPool/utils/AmplificationUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\nimport \"./SwapUtils.sol\";\n\n/**\n * @title AmplificationUtils library\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\n * This library assumes the struct is fully validated.\n */\nlibrary AmplificationUtils {\n    event RampA(\n        uint256 oldA,\n        uint256 newA,\n        uint256 initialTime,\n        uint256 futureTime\n    );\n    event StopRampA(uint256 currentA, uint256 time);\n\n    // Constant values used in ramping A calculations\n    uint256 public constant A_PRECISION = 100;\n    uint256 public constant MAX_A = 10**6;\n    uint256 private constant MAX_A_CHANGE = 2;\n    uint256 private constant MIN_RAMP_TIME = 14 days;\n\n    /**\n     * @notice Return A, the amplification coefficient * n * (n - 1)\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter\n     */\n    function getA(SwapUtils.Swap storage self) internal view returns (uint256) {\n        return _getAPrecise(self) / (A_PRECISION);\n    }\n\n    /**\n     * @notice Return A in its raw precision\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter in its raw precision form\n     */\n    function getAPrecise(SwapUtils.Swap storage self)\n        internal\n        view\n        returns (uint256)\n    {\n        return _getAPrecise(self);\n    }\n\n    /**\n     * @notice Return A in its raw precision\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter in its raw precision form\n     */\n    function _getAPrecise(SwapUtils.Swap storage self)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 t1 = self.futureATime; // time when ramp is finished\n        uint256 a1 = self.futureA; // final A value when ramp is finished\n\n        if (block.timestamp < t1) {\n            uint256 t0 = self.initialATime; // time when ramp is started\n            uint256 a0 = self.initialA; // initial A value when ramp is started\n            if (a1 > a0) {\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\n                return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\n            } else {\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\n                return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\n            }\n        } else {\n            return a1;\n        }\n    }\n\n    /**\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\n     * the limit range.\n     * @param self Swap struct to update\n     * @param futureA_ the new A to ramp towards\n     * @param futureTime_ timestamp when the new A should be reached\n     */\n    function rampA(\n        SwapUtils.Swap storage self,\n        uint256 futureA_,\n        uint256 futureTime_\n    ) internal {\n        require(\n            block.timestamp >= self.initialATime + 1 days,\n            \"Wait 1 day before starting ramp\"\n        );\n        require(\n            futureTime_ >= block.timestamp + MIN_RAMP_TIME,\n            \"Insufficient ramp time\"\n        );\n        require(\n            futureA_ > 0 && futureA_ < MAX_A,\n            \"futureA_ must be > 0 and < MAX_A\"\n        );\n\n        uint256 initialAPrecise = _getAPrecise(self);\n        uint256 futureAPrecise = futureA_ * A_PRECISION;\n\n        if (futureAPrecise < initialAPrecise) {\n            require(\n                futureAPrecise * MAX_A_CHANGE >= initialAPrecise,\n                \"futureA_ is too small\"\n            );\n        } else {\n            require(\n                futureAPrecise <= initialAPrecise * MAX_A_CHANGE,\n                \"futureA_ is too large\"\n            );\n        }\n\n        self.initialA = initialAPrecise;\n        self.futureA = futureAPrecise;\n        self.initialATime = block.timestamp;\n        self.futureATime = futureTime_;\n\n        emit RampA(\n            initialAPrecise,\n            futureAPrecise,\n            block.timestamp,\n            futureTime_\n        );\n    }\n\n    /**\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\n     * cannot be called for another 24 hours\n     * @param self Swap struct to update\n     */\n    function stopRampA(SwapUtils.Swap storage self) internal {\n        require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\n\n        uint256 currentA = _getAPrecise(self);\n        self.initialA = currentA;\n        self.futureA = currentA;\n        self.initialATime = block.timestamp;\n        self.futureATime = block.timestamp;\n\n        emit StopRampA(currentA, block.timestamp);\n    }\n}\n"
    },
    "contracts/Portal/liquidityPool/utils/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\n/**\n * @title MathUtils library\n * @notice  Contains functions for calculating differences between two uint256.\n */\nlibrary MathUtils {\n    /**\n     * @notice Compares a and b and returns true if the difference between a and b\n     *         is less than 1 or equal to each other.\n     * @param a uint256 to compare with\n     * @param b uint256 to compare with\n     * @return True if the difference between a and b is less than 1 or equal,\n     *         otherwise return false\n     */\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\n        return (difference(a, b) <= 1);\n    }\n\n    /**\n     * @notice Calculates absolute difference between a and b\n     * @param a uint256 to compare with\n     * @param b uint256 to compare with\n     * @return Difference between a and b\n     */\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return a - b;\n        }\n        return b - a;\n    }\n}\n"
    },
    "contracts/Portal/liquidityPool/utils/SwapUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./MathUtils.sol\";\nimport \"./AmplificationUtils.sol\";\nimport {PERCENTAGE_DENOMINATOR} from \"../../utils/globals.sol\";\nimport \"../../../interfaces/ILPToken.sol\";\nimport \"../../../interfaces/IgETH.sol\";\n\n/**\n * @title SwapUtils library\n *\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\n * Admin functions should be protected within contracts using this library.\n *\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities with some changes.\n * The main functionality of Withdrawal Pools is allowing the depositors to have instant withdrawals\n * relying on the Oracle Price, with the help of Liquidity Providers.\n * It is important to change the focus point (1-1) of the pricing algorithm with PriceIn and PriceOut functions.\n * Because the underlying price of the staked assets are expected to raise in time.\n * One can see this similar to accomplishing a \"rebasing\" logic, with the help of a trusted price source.\n *\n * @dev Whenever \"Effective Balance\" is mentioned it refers to the balance projected with the underlying price.\n */\nlibrary SwapUtils {\n  using MathUtils for uint256;\n\n  /*** EVENTS ***/\n\n  event TokenSwap(\n    address indexed buyer,\n    uint256 tokensSold,\n    uint256 tokensBought,\n    uint128 soldId,\n    uint128 boughtId\n  );\n  event AddLiquidity(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256[2] fees,\n    uint256 invariant,\n    uint256 lpTokenSupply\n  );\n  event RemoveLiquidity(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256 lpTokenSupply\n  );\n  event RemoveLiquidityOne(\n    address indexed provider,\n    uint256 lpTokenAmount,\n    uint256 lpTokenSupply,\n    uint256 boughtId,\n    uint256 tokensBought\n  );\n  event RemoveLiquidityImbalance(\n    address indexed provider,\n    uint256[2] tokenAmounts,\n    uint256[2] fees,\n    uint256 invariant,\n    uint256 lpTokenSupply\n  );\n  event NewAdminFee(uint256 newAdminFee);\n  event NewSwapFee(uint256 newSwapFee);\n\n  /**\n   * @param gETH ERC1155 contract reference\n   * @param lpToken address of the LP Token\n   * @param pooledTokenId gETH ID of the pooled derivative\n   * @param initialA the amplification coefficient * n * (n - 1)\n   * @param futureA the amplification coef that will be effective after futureATime\n   * @param initialATime variable around the ramp management of A\n   * @param futureATime variable around the ramp management of A\n   * @param swapFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from resulting tokens of a swap\n   * @param adminFee fee as a percentage/PERCENTAGE_DENOMINATOR, will be deducted from swapFee\n   * @param balances the pool balance as [ETH, gETH]; the contract's actual token balance might differ\n   * @param __gap keep the contract size at 16\n   */\n  struct Swap {\n    IgETH gETH;\n    ILPToken lpToken;\n    uint256 pooledTokenId;\n    uint256 initialA;\n    uint256 futureA;\n    uint256 initialATime;\n    uint256 futureATime;\n    uint256 swapFee;\n    uint256 adminFee;\n    uint256[2] balances;\n    uint256[8] __gap;\n  }\n\n  // Struct storing variables used in calculations in the\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\n  struct CalculateWithdrawOneTokenDYInfo {\n    uint256 d0;\n    uint256 d1;\n    uint256 newY;\n    uint256 feePerToken;\n    uint256 preciseA;\n  }\n\n  // Struct storing variables used in calculations in the\n  // {add,remove} Liquidity functions to avoid stack too deep errors\n  struct ManageLiquidityInfo {\n    ILPToken lpToken;\n    uint256 d0;\n    uint256 d1;\n    uint256 d2;\n    uint256 preciseA;\n    uint256 totalSupply;\n    uint256[2] balances;\n  }\n\n  // Max swap fee is 1% or 100bps of each swap\n  uint256 public constant MAX_SWAP_FEE = 10 ** 8;\n\n  // Max adminFee is 100% of the swapFee\n  // adminFee does not add additional fee on top of swapFee\n  // instead it takes a certain percentage of the swapFee.\n  // Therefore it has no impact on users but only on the earnings of LPs\n  uint256 public constant MAX_ADMIN_FEE = 10 ** 10;\n\n  // Constant value used as max loop limit\n  uint256 private constant MAX_LOOP_LIMIT = 256;\n\n  /*** VIEW & PURE FUNCTIONS ***/\n\n  function _getAPrecise(Swap storage self) internal view returns (uint256) {\n    return AmplificationUtils._getAPrecise(self);\n  }\n\n  /**\n   * @notice This function MULTIPLIES the Staked Ether token (gETH) balance with underlying relative price (pricePerShare),\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\n   * @param balance balance that will be taken into calculation\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\n   */\n  function _pricedIn(\n    Swap storage self,\n    uint256 balance,\n    uint256 i\n  ) internal view returns (uint256) {\n    return\n      i == 1\n        ? (balance * self.gETH.pricePerShare(self.pooledTokenId)) /\n          self.gETH.denominator()\n        : balance;\n  }\n\n  /**\n   * @notice This function DIVIDES the Staked Ether token (gETH) balance with underlying relative price (pricePerShare),\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\n   * @param balance balance that will be taken into calculation\n   * @param i if i is 0 it means we are dealing with ETH, if i is 1 it is gETH\n   */\n  function _pricedOut(\n    Swap storage self,\n    uint256 balance,\n    uint256 i\n  ) internal view returns (uint256) {\n    return\n      i == 1\n        ? (balance * self.gETH.denominator()) /\n          self.gETH.pricePerShare(self.pooledTokenId)\n        : balance;\n  }\n\n  /**\n   * @notice This function MULTIPLIES the Staked Ether token (gETH) balance with underlying relative price (pricePerShare),\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\n   * @param balances ARRAY of balances that will be taken into calculation\n   */\n  function _pricedInBatch(\n    Swap storage self,\n    uint256[2] memory balances\n  ) internal view returns (uint256[2] memory _p) {\n    _p[0] = balances[0];\n    _p[1] =\n      (balances[1] * self.gETH.pricePerShare(self.pooledTokenId)) /\n      self.gETH.denominator();\n    return _p;\n  }\n\n  /**\n   * @notice This function DIVIDES the Staked Ether token (gETH) balance with underlying relative price (pricePerShare),\n   * to keep pricing around 1-OraclePrice instead of 1-1 like stableSwap pool.\n   * @dev this function assumes prices are sent with the indexes that [ETH, gETH]\n   * @param balances ARRAY of balances that will be taken into calculation\n   */\n  function _pricedOutBatch(\n    Swap storage self,\n    uint256[2] memory balances\n  ) internal view returns (uint256[2] memory _p) {\n    _p[0] = balances[0];\n    _p[1] =\n      (balances[1] * self.gETH.denominator()) /\n      self.gETH.pricePerShare(self.pooledTokenId);\n    return _p;\n  }\n\n  /**\n   * @notice Calculate the dy, the amount of selected token that user receives and\n   * the fee of withdrawing in one token\n   * @param tokenAmount the amount to withdraw in the pool's precision\n   * @param tokenIndex which token will be withdrawn\n   * @param self Swap struct to read from\n   * @return the amount of token user will receive\n   */\n  function calculateWithdrawOneToken(\n    Swap storage self,\n    uint256 tokenAmount,\n    uint8 tokenIndex\n  ) external view returns (uint256) {\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\n      self,\n      tokenAmount,\n      tokenIndex,\n      self.lpToken.totalSupply()\n    );\n    return availableTokenAmount;\n  }\n\n  function _calculateWithdrawOneToken(\n    Swap storage self,\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 totalSupply\n  ) internal view returns (uint256, uint256) {\n    uint256 dy;\n    uint256 newY;\n    uint256 currentY;\n\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(\n      self,\n      tokenIndex,\n      tokenAmount,\n      totalSupply\n    );\n\n    uint256 dySwapFee = currentY - newY - dy;\n\n    return (dy, dySwapFee);\n  }\n\n  /**\n   * @notice Calculate the dy of withdrawing in one token\n   * @param self Swap struct to read from\n   * @param tokenIndex which token will be withdrawn\n   * @param tokenAmount the amount to withdraw in the pools precision\n   * @return the d and the new y after withdrawing one token\n   */\n  function calculateWithdrawOneTokenDY(\n    Swap storage self,\n    uint8 tokenIndex,\n    uint256 tokenAmount,\n    uint256 totalSupply\n  ) internal view returns (uint256, uint256, uint256) {\n    // Get the current D, then solve the stableswap invariant\n    // y_i for D - tokenAmount\n\n    require(tokenIndex < 2, \"Token index out of range\");\n\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(\n      0,\n      0,\n      0,\n      0,\n      0\n    );\n    v.preciseA = _getAPrecise(self);\n    v.d0 = getD(_pricedInBatch(self, self.balances), v.preciseA);\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\n\n    require(\n      tokenAmount <= self.balances[tokenIndex],\n      \"Withdraw exceeds available\"\n    );\n\n    v.newY = _pricedOut(\n      self,\n      getYD(v.preciseA, tokenIndex, _pricedInBatch(self, self.balances), v.d1),\n      tokenIndex\n    );\n\n    uint256[2] memory xpReduced;\n\n    v.feePerToken = self.swapFee / 2;\n    for (uint256 i = 0; i < 2; ++i) {\n      uint256 xpi = self.balances[i];\n      xpReduced[i] =\n        xpi -\n        (((\n          (i == tokenIndex)\n            ? (xpi * v.d1) / v.d0 - v.newY\n            : xpi - ((xpi * v.d1) / (v.d0))\n        ) * (v.feePerToken)) / (PERCENTAGE_DENOMINATOR));\n    }\n\n    uint256 dy = xpReduced[tokenIndex] -\n      _pricedOut(\n        self,\n        (getYD(v.preciseA, tokenIndex, _pricedInBatch(self, xpReduced), v.d1)),\n        tokenIndex\n      );\n    dy = dy - 1;\n\n    return (dy, v.newY, self.balances[tokenIndex]);\n  }\n\n  /**\n   * @notice Get Debt, The amount of buyback for stable pricing.\n   * @param xp a  set of pool balances. Array should be the same cardinality\n   * as the pool.\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\n   * See the StableSwap paper for details\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\n   */\n  function _getDebt(\n    Swap storage self,\n    uint256[2] memory xp,\n    uint256 a\n  ) internal view returns (uint256) {\n    uint256 halfD = getD(xp, a) / 2;\n    if (xp[0] >= halfD) {\n      return 0;\n    } else {\n      uint256 dy = xp[1] - halfD;\n      uint256 feeHalf = (dy * self.swapFee) / PERCENTAGE_DENOMINATOR / 2;\n      uint256 debt = halfD - xp[0] + feeHalf;\n      return debt;\n    }\n  }\n\n  /**\n   * @return debt the half of the D StableSwap invariant when debt is needed to be payed.\n   */\n  function getDebt(Swap storage self) external view returns (uint256) {\n    // might change when price is in.\n    return\n      _getDebt(self, _pricedInBatch(self, self.balances), _getAPrecise(self));\n  }\n\n  /**\n   * @notice Calculate the price of a token in the pool with given\n   *  balances and a particular D.\n   *\n   * @dev This is accomplished via solving the invariant iteratively.\n   * See the StableSwap paper and Curve.fi implementation for further details.\n   *\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n   * x_1**2 + b*x_1 = c\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\n   *\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\n   * @param tokenIndex Index of token we are calculating for.\n   * @param xp a  set of pool balances. Array should be\n   * the same cardinality as the pool.\n   * @param d the stableswap invariant\n   * @return the price of the token, in the same precision as in xp\n   */\n  function getYD(\n    uint256 a,\n    uint8 tokenIndex,\n    uint256[2] memory xp,\n    uint256 d\n  ) internal pure returns (uint256) {\n    uint256 numTokens = 2;\n    require(tokenIndex < numTokens, \"Token not found\");\n\n    uint256 c = d;\n    uint256 s;\n    uint256 nA = a * numTokens;\n\n    for (uint256 i = 0; i < numTokens; ++i) {\n      if (i != tokenIndex) {\n        s = s + xp[i];\n        c = (c * d) / (xp[i] * (numTokens));\n        // If we were to protect the division loss we would have to keep the denominator separate\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\n        // c = c * D * D * D * ... overflow!\n      }\n    }\n    c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\n\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\n    uint256 yPrev;\n    uint256 y = d;\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\n      yPrev = y;\n      y = ((y * y) + c) / (2 * y + b - d);\n      if (y.within1(yPrev)) {\n        return y;\n      }\n    }\n    revert(\"Approximation did not converge\");\n  }\n\n  /**\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\n   * @param xp a  set of pool balances. Array should be the same cardinality\n   * as the pool.\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\n   * See the StableSwap paper for details\n   * @return the invariant, at the precision of the pool\n   */\n  function getD(\n    uint256[2] memory xp,\n    uint256 a\n  ) internal pure returns (uint256) {\n    uint256 numTokens = 2;\n    uint256 s = xp[0] + xp[1];\n    if (s == 0) {\n      return 0;\n    }\n\n    uint256 prevD;\n    uint256 d = s;\n    uint256 nA = a * numTokens;\n\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\n      uint256 dP = (d ** (numTokens + 1)) /\n        (numTokens ** numTokens * xp[0] * xp[1]);\n      prevD = d;\n      d =\n        ((((nA * s) / AmplificationUtils.A_PRECISION) + dP * numTokens) * (d)) /\n        (((nA - AmplificationUtils.A_PRECISION) * (d)) /\n          (AmplificationUtils.A_PRECISION) +\n          ((numTokens + 1) * dP));\n\n      if (d.within1(prevD)) {\n        return d;\n      }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    revert(\"D does not converge\");\n  }\n\n  /**\n   * @notice Get the virtual price, to help calculate profit\n   * @param self Swap struct to read from\n   * @return the virtual price\n   */\n  function getVirtualPrice(Swap storage self) external view returns (uint256) {\n    uint256 d = getD(_pricedInBatch(self, self.balances), _getAPrecise(self));\n    ILPToken lpToken = self.lpToken;\n    uint256 supply = lpToken.totalSupply();\n    if (supply > 0) {\n      return (d * 10 ** 18) / supply;\n    }\n    return 0;\n  }\n\n  /**\n   * @notice Calculate the new balances of the tokens given the indexes of the token\n   * that is swapped from (FROM) and the token that is swapped to (TO).\n   * This function is used as a helper function to calculate how much TO token\n   * the user should receive on swap.\n   *\n   * @param preciseA precise form of amplification coefficient\n   * @param tokenIndexFrom index of FROM token\n   * @param tokenIndexTo index of TO token\n   * @param x the new total amount of FROM token\n   * @param xp balances of the tokens in the pool\n   * @return the amount of TO token that should remain in the pool\n   */\n  function getY(\n    uint256 preciseA,\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 x,\n    uint256[2] memory xp\n  ) internal pure returns (uint256) {\n    uint256 numTokens = 2;\n    require(tokenIndexFrom != tokenIndexTo, \"Can't compare token to itself\");\n    require(\n      tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\n      \"Tokens must be in pool\"\n    );\n\n    uint256 d = getD(xp, preciseA);\n    uint256 c = d;\n    uint256 s = x;\n    uint256 nA = numTokens * (preciseA);\n\n    c = (c * d) / (x * numTokens);\n    c = (c * d * (AmplificationUtils.A_PRECISION)) / (nA * numTokens);\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\n\n    uint256 yPrev;\n    uint256 y = d;\n    for (uint256 i = 0; i < MAX_LOOP_LIMIT; ++i) {\n      yPrev = y;\n      y = ((y * y) + c) / (2 * y + b - d);\n      if (y.within1(yPrev)) {\n        return y;\n      }\n    }\n    revert(\"Approximation did not converge\");\n  }\n\n  /**\n   * @notice Externally calculates a swap between two tokens.\n   * @param self Swap struct to read from\n   * @param tokenIndexFrom the token to sell\n   * @param tokenIndexTo the token to buy\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\n   * use the amount that gets transferred after the fee.\n   * @return dy the number of tokens the user will get\n   */\n  function calculateSwap(\n    Swap storage self,\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view returns (uint256 dy) {\n    (dy, ) = _calculateSwap(\n      self,\n      tokenIndexFrom,\n      tokenIndexTo,\n      dx,\n      self.balances\n    );\n  }\n\n  /**\n   * @notice Internally calculates a swap between two tokens.\n   *\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\n   * using the token contracts.\n   *\n   * @param self Swap struct to read from\n   * @param tokenIndexFrom the token to sell\n   * @param tokenIndexTo the token to buy\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\n   * use the amount that gets transferred after the fee.\n   * @return dy the number of tokens the user will get\n   * @return dyFee the associated fee\n   */\n  function _calculateSwap(\n    Swap storage self,\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256[2] memory balances\n  ) internal view returns (uint256 dy, uint256 dyFee) {\n    require(\n      tokenIndexFrom < balances.length && tokenIndexTo < balances.length,\n      \"Token index out of range\"\n    );\n    uint256 x = _pricedIn(self, dx + balances[tokenIndexFrom], tokenIndexFrom);\n\n    uint256[2] memory pricedBalances = _pricedInBatch(self, balances);\n\n    uint256 y = _pricedOut(\n      self,\n      getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, pricedBalances),\n      tokenIndexTo // => not id, index !!!\n    );\n    dy = balances[tokenIndexTo] - y - 1;\n    dyFee = (dy * self.swapFee) / (PERCENTAGE_DENOMINATOR);\n    dy = dy - dyFee;\n  }\n\n  /**\n   * @notice Uses _calculateRemoveLiquidity with Effective Balances,\n   * then projects the prices to the token amounts\n   * to get Real Balances, before removing them from pool.\n   */\n  function calculateRemoveLiquidity(\n    Swap storage self,\n    uint256 amount\n  ) external view returns (uint256[2] memory) {\n    return\n      _pricedOutBatch(\n        self,\n        _calculateRemoveLiquidity(\n          _pricedInBatch(self, self.balances),\n          amount,\n          self.lpToken.totalSupply()\n        )\n      );\n  }\n\n  /**\n   * @notice A simple method to calculate amount of each underlying\n   * tokens that is returned upon burning given amount of\n   * LP tokens\n   *\n   * @param amount the amount of LP tokens that would to be burned on\n   * withdrawal\n   * @return amounts of tokens user will receive as an array [ETH, gETH]\n   */\n  function _calculateRemoveLiquidity(\n    uint256[2] memory balances,\n    uint256 amount,\n    uint256 totalSupply\n  ) internal pure returns (uint256[2] memory amounts) {\n    require(amount <= totalSupply, \"Cannot exceed total supply\");\n\n    amounts[0] = (balances[0] * amount) / totalSupply;\n    amounts[1] = (balances[1] * amount) / totalSupply;\n\n    return amounts;\n  }\n\n  /**\n   * @notice A simple method to calculate prices from deposits or\n   * withdrawals, excluding fees but including slippage. This is\n   * helpful as an input into the various \"min\" parameters on calls\n   * to fight front-running\n   *\n   * @dev This shouldn't be used outside frontends for user estimates.\n   *\n   * @param self Swap struct to read from\n   * @param amounts an array of token amounts to deposit or withdrawal,\n   * corresponding to pooledTokens. The amount should be in each\n   * pooled token's native precision. If a token charges a fee on transfers,\n   * use the amount that gets transferred after the fee.\n   * @param deposit whether this is a deposit or a withdrawal\n   * @return if deposit was true, total amount of lp token that will be minted and if\n   * deposit was false, total amount of lp token that will be burned\n   */\n  function calculateTokenAmount(\n    Swap storage self,\n    uint256[2] calldata amounts,\n    bool deposit\n  ) external view returns (uint256) {\n    uint256 a = _getAPrecise(self);\n    uint256[2] memory balances = self.balances;\n\n    uint256 d0 = getD(_pricedInBatch(self, balances), a);\n    for (uint256 i = 0; i < balances.length; ++i) {\n      if (deposit) {\n        balances[i] = balances[i] + amounts[i];\n      } else {\n        require(\n          amounts[i] <= balances[i],\n          \"Cannot withdraw more than available\"\n        );\n        balances[i] = balances[i] - amounts[i];\n      }\n    }\n    uint256 d1 = getD(_pricedInBatch(self, balances), a);\n    uint256 totalSupply = self.lpToken.totalSupply();\n\n    if (deposit) {\n      return ((d1 - d0) * totalSupply) / d0;\n    } else {\n      return ((d0 - d1) * totalSupply) / d0;\n    }\n  }\n\n  /**\n   * @notice return accumulated amount of admin fees of the token with given index\n   * @param self Swap struct to read from\n   * @param index Index of the pooled token\n   * @return admin balance in the token's precision\n   */\n  function getAdminBalance(\n    Swap storage self,\n    uint256 index\n  ) external view returns (uint256) {\n    require(index < 2, \"Token index out of range\");\n    if (index == 0) return address(this).balance - (self.balances[index]);\n\n    if (index == 1)\n      return\n        self.gETH.balanceOf(address(this), self.pooledTokenId) -\n        (self.balances[index]);\n    return 0;\n  }\n\n  /*** STATE MODIFYING FUNCTIONS ***/\n\n  /**\n   * @notice swap two tokens in the pool\n   * @param self Swap struct to read from and write to\n   * @param tokenIndexFrom the token the user wants to sell\n   * @param tokenIndexTo the token the user wants to buy\n   * @param dx the amount of tokens the user wants to sell\n   * @param minDy the min amount the user would like to receive, or revert.\n   * @return amount of token user received on swap\n   */\n  function swap(\n    Swap storage self,\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy\n  ) external returns (uint256) {\n    IgETH gETHReference = self.gETH;\n    if (tokenIndexFrom == 0) {\n      // Means user is selling some ETH to the pool to get some gETH.\n      // In which case, we need to send exactly that amount of ETH.\n      require(dx == msg.value, \"Cannot swap more/less than you sent\");\n    }\n    if (tokenIndexFrom == 1) {\n      // Means user is selling some gETH to the pool to get some ETH.\n\n      require(\n        dx <= gETHReference.balanceOf(msg.sender, self.pooledTokenId),\n        \"Cannot swap more than you own\"\n      );\n\n      // Transfer tokens first\n      uint256 beforeBalance = gETHReference.balanceOf(\n        address(this),\n        self.pooledTokenId\n      );\n      gETHReference.safeTransferFrom(\n        msg.sender,\n        address(this),\n        self.pooledTokenId,\n        dx,\n        \"\"\n      );\n\n      // Use the actual transferred amount for AMM math\n      dx =\n        gETHReference.balanceOf(address(this), self.pooledTokenId) -\n        beforeBalance;\n    }\n\n    uint256 dy;\n    uint256 dyFee;\n    // Meaning the real balances *without* any effect of underlying price\n    // However, when we call _calculateSwap, it uses pricedIn function before calculation,\n    // and pricedOut function after the calculation. So, we don't need to use priceOut here.\n    uint256[2] memory balances = self.balances;\n    (dy, dyFee) = _calculateSwap(\n      self,\n      tokenIndexFrom,\n      tokenIndexTo,\n      dx,\n      balances\n    );\n\n    require(dy >= minDy, \"Swap didn't result in min tokens\");\n    uint256 dyAdminFee = (dyFee * self.adminFee) / PERCENTAGE_DENOMINATOR;\n\n    // To prevent any Reentrancy, balances are updated before transfering the tokens.\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\n\n    if (tokenIndexTo == 0) {\n      // Means contract is going to send Idle Ether (ETH)\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\"\");\n      require(sent, \"SwapUtils: Failed to send Ether\");\n    }\n    if (tokenIndexTo == 1) {\n      // Means contract is going to send staked ETH (gETH)\n      gETHReference.safeTransferFrom(\n        address(this),\n        msg.sender,\n        self.pooledTokenId,\n        dy,\n        \"\"\n      );\n    }\n\n    emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\n\n    return dy;\n  }\n\n  /**\n   * @notice Add liquidity to the pool\n   * @param self Swap struct to read from and write to\n   * @param amounts the amounts of each token to add, in their native precision\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\n   * should mint, otherwise revert. Handy for front-running mitigation\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\n   * @return amount of LP token user received\n   */\n  function addLiquidity(\n    Swap storage self,\n    uint256[2] memory amounts,\n    uint256 minToMint\n  ) external returns (uint256) {\n    require(\n      amounts[0] == msg.value,\n      \"SwapUtils: received less or more ETH than expected\"\n    );\n    IgETH gETHReference = self.gETH;\n    // current state\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\n      self.lpToken,\n      0,\n      0,\n      0,\n      _getAPrecise(self),\n      0,\n      self.balances\n    );\n    v.totalSupply = v.lpToken.totalSupply();\n    if (v.totalSupply != 0) {\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\n    }\n\n    uint256[2] memory newBalances;\n    newBalances[0] = v.balances[0] + msg.value;\n\n    for (uint256 i = 0; i < 2; ++i) {\n      require(\n        v.totalSupply != 0 || amounts[i] > 0,\n        \"Must supply all tokens in pool\"\n      );\n    }\n\n    {\n      // Transfer tokens first\n      uint256 beforeBalance = gETHReference.balanceOf(\n        address(this),\n        self.pooledTokenId\n      );\n      gETHReference.safeTransferFrom(\n        msg.sender,\n        address(this),\n        self.pooledTokenId,\n        amounts[1],\n        \"\"\n      );\n\n      // Update the amounts[] with actual transfer amount\n      amounts[1] =\n        gETHReference.balanceOf(address(this), self.pooledTokenId) -\n        beforeBalance;\n\n      newBalances[1] = v.balances[1] + amounts[1];\n    }\n\n    // invariant after change\n    v.d1 = getD(_pricedInBatch(self, newBalances), v.preciseA);\n    require(v.d1 > v.d0, \"D should increase\");\n\n    // updated to reflect fees and calculate the user's LP tokens\n    v.d2 = v.d1;\n    uint256[2] memory fees;\n\n    if (v.totalSupply != 0) {\n      uint256 feePerToken = self.swapFee / 2;\n      for (uint256 i = 0; i < 2; ++i) {\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\n        fees[i] =\n          (feePerToken * (idealBalance.difference(newBalances[i]))) /\n          (PERCENTAGE_DENOMINATOR);\n        self.balances[i] =\n          newBalances[i] -\n          ((fees[i] * (self.adminFee)) / (PERCENTAGE_DENOMINATOR));\n        newBalances[i] = newBalances[i] - (fees[i]);\n      }\n      v.d2 = getD(_pricedInBatch(self, newBalances), v.preciseA);\n    } else {\n      // the initial depositor doesn't pay fees\n      self.balances = newBalances;\n    }\n\n    uint256 toMint;\n    if (v.totalSupply == 0) {\n      toMint = v.d1;\n    } else {\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\n    }\n\n    require(toMint >= minToMint, \"Couldn't mint min requested\");\n\n    // mint the user's LP tokens\n    v.lpToken.mint(msg.sender, toMint);\n\n    emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\n    return toMint;\n  }\n\n  /**\n   * @notice Burn LP tokens to remove liquidity from the pool.\n   * @dev Liquidity can always be removed, even when the pool is paused.\n   * @param self Swap struct to read from and write to\n   * @param amount the amount of LP tokens to burn\n   * @param minAmounts the minimum amounts of each token in the pool\n   * acceptable for this burn. Useful as a front-running mitigation\n   * @return amounts of tokens the user received\n   */\n  function removeLiquidity(\n    Swap storage self,\n    uint256 amount,\n    uint256[2] calldata minAmounts\n  ) external returns (uint256[2] memory) {\n    ILPToken lpToken = self.lpToken;\n    IgETH gETHReference = self.gETH;\n    require(amount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\n\n    uint256[2] memory balances = self.balances;\n    uint256 totalSupply = lpToken.totalSupply();\n\n    uint256[2] memory amounts = _pricedOutBatch(\n      self,\n      _calculateRemoveLiquidity(\n        _pricedInBatch(self, balances),\n        amount,\n        totalSupply\n      )\n    );\n\n    for (uint256 i = 0; i < amounts.length; ++i) {\n      require(amounts[i] >= minAmounts[i], \"amounts[i] < minAmounts[i]\");\n      self.balances[i] = balances[i] - amounts[i];\n    }\n\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\n    lpToken.burnFrom(msg.sender, amount);\n\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\"\");\n    require(sent, \"SwapUtils: Failed to send Ether\");\n\n    gETHReference.safeTransferFrom(\n      address(this),\n      msg.sender,\n      self.pooledTokenId,\n      amounts[1],\n      \"\"\n    );\n\n    emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\n    return amounts;\n  }\n\n  /**\n   * @notice Remove liquidity from the pool all in one token.\n   * @param self Swap struct to read from and write to\n   * @param tokenAmount the amount of the lp tokens to burn\n   * @param tokenIndex the index of the token you want to receive\n   * @param minAmount the minimum amount to withdraw, otherwise revert\n   * @return amount chosen token that user received\n   */\n  function removeLiquidityOneToken(\n    Swap storage self,\n    uint256 tokenAmount,\n    uint8 tokenIndex,\n    uint256 minAmount\n  ) external returns (uint256) {\n    ILPToken lpToken = self.lpToken;\n    IgETH gETHReference = self.gETH;\n\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\n    require(tokenIndex < 2, \"Token not found\");\n\n    uint256 totalSupply = lpToken.totalSupply();\n\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\n      self,\n      tokenAmount,\n      tokenIndex,\n      totalSupply\n    );\n\n    require(dy >= minAmount, \"dy < minAmount\");\n\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\n    self.balances[tokenIndex] =\n      self.balances[tokenIndex] -\n      (dy + ((dyFee * (self.adminFee)) / (PERCENTAGE_DENOMINATOR)));\n    lpToken.burnFrom(msg.sender, tokenAmount);\n\n    if (tokenIndex == 0) {\n      (bool sent, ) = payable(msg.sender).call{value: dy}(\"\");\n      require(sent, \"SwapUtils: Failed to send Ether\");\n    }\n    if (tokenIndex == 1) {\n      gETHReference.safeTransferFrom(\n        address(this),\n        msg.sender,\n        self.pooledTokenId,\n        dy,\n        \"\"\n      );\n    }\n\n    emit RemoveLiquidityOne(\n      msg.sender,\n      tokenAmount,\n      totalSupply,\n      tokenIndex,\n      dy\n    );\n\n    return dy;\n  }\n\n  /**\n   * @notice Remove liquidity from the pool, weighted differently than the\n   * pool's current balances.\n   *\n   * @param self Swap struct to read from and write to\n   * @param amounts how much of each token to withdraw\n   * @param maxBurnAmount the max LP token provider is willing to pay to\n   * remove liquidity. Useful as a front-running mitigation.\n   * @return actual amount of LP tokens burned in the withdrawal\n   */\n  function removeLiquidityImbalance(\n    Swap storage self,\n    uint256[2] memory amounts,\n    uint256 maxBurnAmount\n  ) public returns (uint256) {\n    IgETH gETHReference = self.gETH;\n\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\n      self.lpToken,\n      0,\n      0,\n      0,\n      _getAPrecise(self),\n      0,\n      self.balances\n    );\n    v.totalSupply = v.lpToken.totalSupply();\n\n    require(\n      maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0,\n      \">LP.balanceOf\"\n    );\n\n    uint256 feePerToken = self.swapFee / 2;\n    uint256[2] memory fees;\n\n    {\n      uint256[2] memory balances1;\n\n      v.d0 = getD(_pricedInBatch(self, v.balances), v.preciseA);\n      for (uint256 i = 0; i < 2; ++i) {\n        require(\n          amounts[i] <= v.balances[i],\n          \"Cannot withdraw more than available\"\n        );\n        balances1[i] = v.balances[i] - amounts[i];\n      }\n      v.d1 = getD(_pricedInBatch(self, balances1), v.preciseA);\n\n      for (uint256 i = 0; i < 2; ++i) {\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\n        uint256 difference = idealBalance.difference(balances1[i]);\n        fees[i] = (feePerToken * difference) / PERCENTAGE_DENOMINATOR;\n        uint256 adminFee = self.adminFee;\n        {\n          self.balances[i] =\n            balances1[i] -\n            ((fees[i] * adminFee) / PERCENTAGE_DENOMINATOR);\n        }\n        balances1[i] = balances1[i] - fees[i];\n      }\n\n      v.d2 = getD(_pricedInBatch(self, balances1), v.preciseA);\n    }\n\n    uint256 tokenAmount = ((v.d0 - v.d2) * (v.totalSupply)) / v.d0;\n    require(tokenAmount != 0, \"Burnt amount cannot be zero\");\n    tokenAmount = tokenAmount + 1;\n\n    require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\n\n    // To prevent any Reentrancy, LP tokens are burned before transfering the tokens.\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\n\n    (bool sent, ) = payable(msg.sender).call{value: amounts[0]}(\"\");\n    require(sent, \"SwapUtils: Failed to send Ether\");\n\n    gETHReference.safeTransferFrom(\n      address(this),\n      msg.sender,\n      self.pooledTokenId,\n      amounts[1],\n      \"\"\n    );\n\n    emit RemoveLiquidityImbalance(\n      msg.sender,\n      amounts,\n      fees,\n      v.d1,\n      v.totalSupply - tokenAmount\n    );\n\n    return tokenAmount;\n  }\n\n  /**\n   * @notice withdraw all admin fees to a given address\n   * @param self Swap struct to withdraw fees from\n   * @param to Address to send the fees to\n   */\n  function withdrawAdminFees(Swap storage self, address to) external {\n    IgETH gETHReference = self.gETH;\n    uint256 tokenBalance = gETHReference.balanceOf(\n      address(this),\n      self.pooledTokenId\n    ) - self.balances[1];\n    if (tokenBalance != 0) {\n      gETHReference.safeTransferFrom(\n        address(this),\n        to,\n        self.pooledTokenId,\n        tokenBalance,\n        \"\"\n      );\n    }\n\n    uint256 etherBalance = address(this).balance - self.balances[0];\n    if (etherBalance != 0) {\n      (bool sent, ) = payable(msg.sender).call{value: etherBalance}(\"\");\n      require(sent, \"SwapUtils: Failed to send Ether\");\n    }\n  }\n\n  /**\n   * @notice Sets the admin fee\n   * @dev adminFee cannot be higher than 100% of the swap fee\n   * @param self Swap struct to update\n   * @param newAdminFee new admin fee to be applied on future transactions\n   */\n  function setAdminFee(Swap storage self, uint256 newAdminFee) external {\n    require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\n    self.adminFee = newAdminFee;\n\n    emit NewAdminFee(newAdminFee);\n  }\n\n  /**\n   * @notice update the swap fee\n   * @dev fee cannot be higher than 1% of each swap\n   * @param self Swap struct to update\n   * @param newSwapFee new swap fee to be applied on future transactions\n   */\n  function setSwapFee(Swap storage self, uint256 newSwapFee) external {\n    require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\n    self.swapFee = newSwapFee;\n\n    emit NewSwapFee(newSwapFee);\n  }\n}\n"
    },
    "contracts/Portal/Portal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//   ██████╗ ███████╗ ██████╗ ██████╗ ███████╗    ██████╗  ██████╗ ██████╗ ████████╗ █████╗ ██╗\n//  ██╔════╝ ██╔════╝██╔═══██╗██╔══██╗██╔════╝    ██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔══██╗██║\n//  ██║  ███╗█████╗  ██║   ██║██║  ██║█████╗      ██████╔╝██║   ██║██████╔╝   ██║   ███████║██║\n//  ██║   ██║██╔══╝  ██║   ██║██║  ██║██╔══╝      ██╔═══╝ ██║   ██║██╔══██╗   ██║   ██╔══██║██║\n//  ╚██████╔╝███████╗╚██████╔╝██████╔╝███████╗    ██║     ╚██████╔╝██║  ██║   ██║   ██║  ██║███████╗\n//   ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝\n//\n\npragma solidity =0.8.7;\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IgETH.sol\";\nimport \"../interfaces/IPortal.sol\";\nimport \"../interfaces/IWithdrawalContract.sol\";\n\nimport {ID_TYPE, PERCENTAGE_DENOMINATOR} from \"./utils/globals.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title Geode Portal : Configurable Trustless Staking Pools\n * *\n * @dev Portal doesn't have any functionality other than hosting and combining the functionalities of some libraries:\n * Provides a first of its kind trustless implementation on Staking Derivatives: gETH\n * The Portal utilizes an isolated storage which allows storing infinitely many different\n * * types of dynamic structs, easily with ID and KEY pairs.\n * Portal is secured by The Dual Governance and Limited Upgradability.\n * Portal hosts The Staking Library allowing the creation and maintanence of configurable\n * * staking pools and validator creation process.\n * Underlying validator balances for each pool is secured with unique Withdrawal Contracts.\n *\n * @dev TYPE: seperates the proposals and related functionality between different ID types on the Isolated Storage.\n * * Currently RESERVED TYPES are written on globals.sol.\n *\n * @dev authentication:\n * * geodeUtils has OnlyGovernance, OnlySenate and OnlyController checks with modifiers.\n * * stakeUtils has \"authenticate()\" function which checks for Maintainer, Controllers, and TYPE.\n * * oracleutils has OnlyOracle checks with a modifier.\n * * Portal has an OnlyGovernance check on : pause, unpause, pausegETH, unpausegETH, setEarlyExitFee, releasePrisoned.\n *\n * @dev first review DataStoreUtils\n * @dev then review GeodeUtils\n * @dev then review StakeUtils\n * @dev then review OracleUtils\n *\n * note ctrl+k+2 and ctrl+k+1 then scroll while reading the function names and the comments.\n */\n\ncontract Portal is\n  IPortal,\n  ContextUpgradeable,\n  ReentrancyGuardUpgradeable,\n  PausableUpgradeable,\n  ERC1155HolderUpgradeable,\n  UUPSUpgradeable\n{\n  using DataStoreUtils for DataStoreUtils.IsolatedStorage;\n  using GeodeUtils for GeodeUtils.DualGovernance;\n  using StakeUtils for StakeUtils.PooledStaking;\n\n  /**\n   * @notice                                     ** EVENTS **\n   *\n   * @dev following events are added to help fellow devs with a better ABI\n   */\n\n  /**\n   * @dev GeodeUtils events\n   */\n  event GovernanceFeeUpdated(uint256 newFee);\n  event ControllerChanged(uint256 indexed id, address newCONTROLLER);\n  event Proposed(\n    uint256 id,\n    address CONTROLLER,\n    uint256 indexed TYPE,\n    uint256 deadline\n  );\n  event ProposalApproved(uint256 id);\n  event ElectorTypeSet(uint256 TYPE, bool isElector);\n  event Vote(uint256 indexed proposalId, uint256 indexed voterId);\n  event NewSenate(address senate, uint256 senateExpiry);\n\n  /**\n   * @dev StakeUtils events\n   */\n  event IdInitiated(uint256 indexed id, uint256 indexed TYPE);\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\n  event ValidatorPeriodSwitched(\n    uint256 indexed id,\n    uint256 period,\n    uint256 effectiveAfter\n  );\n  event OperatorApproval(\n    uint256 indexed poolId,\n    uint256 indexed operatorId,\n    uint256 allowance\n  );\n  event Prisoned(uint256 indexed id, bytes proof, uint256 releaseTimestamp);\n  event Released(uint256 indexed id);\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\n  event ProposalStaked(\n    uint256 indexed poolId,\n    uint256 operatorId,\n    bytes[] pubkeys\n  );\n  event BeaconStaked(bytes[] pubkeys);\n\n  /**\n   * @dev OracleUtils events\n   */\n  event Alienated(bytes indexed pubkey);\n  event VerificationIndexUpdated(uint256 validatorVerificationIndex);\n  event FeeTheft(uint256 indexed id, bytes proofs);\n  event OracleReported(bytes32 merkleRoot, uint256 monopolyThreshold);\n\n  /**\n   * @dev Portal Native events\n   */\n  event ContractVersionSet(uint256 version);\n\n  /**\n   * @notice                                     ** VARIABLES **\n   */\n  DataStoreUtils.IsolatedStorage private DATASTORE;\n  GeodeUtils.DualGovernance private GEODE;\n  StakeUtils.PooledStaking private STAKER;\n\n  /**\n   * @notice CONTRACT_VERSION always refers to the upgrade proposal' (TYPE2) ID.\n   * @dev Does NOT increase uniformly like one might expect.\n   */\n  uint256 public CONTRACT_VERSION;\n\n  /**\n   * @notice                                     ** PORTAL SPECIFIC **\n   */\n\n  /**\n   * @notice initializer function that sets initial parameters like,\n   * Oracle Address, Governance, fee etc.\n   * Then, creates proposals for the Withdrawal Contract, Liquidity Pools and gETHInterfaces.\n   * Finally, it creates an Upgrade Proposal for itself and approves it, setting its version.\n   */\n  function initialize(\n    address _GOVERNANCE,\n    address _SENATE,\n    address _gETH,\n    address _ORACLE_POSITION,\n    address _DEFAULT_WITHDRAWAL_CONTRACT_MODULE,\n    address _DEFAULT_LP_MODULE,\n    address _DEFAULT_LP_TOKEN_MODULE,\n    address[] calldata _ALLOWED_GETH_INTERFACE_MODULES,\n    bytes[] calldata _ALLOWED_GETH_INTERFACE_MODULE_NAMES,\n    uint256 _GOVERNANCE_FEE\n  ) public virtual override initializer {\n    __ReentrancyGuard_init();\n    __Pausable_init();\n    __ERC1155Holder_init();\n    __UUPSUpgradeable_init();\n\n    require(_GOVERNANCE != address(0), \"PORTAL: GOVERNANCE can NOT be ZERO\");\n    require(_SENATE != address(0), \"PORTAL: SENATE can NOT be ZERO\");\n    require(_gETH != address(0), \"PORTAL: gETH can NOT be ZERO\");\n    require(\n      _ORACLE_POSITION != address(0),\n      \"PORTAL: ORACLE_POSITION can NOT be ZERO\"\n    );\n    require(\n      _DEFAULT_LP_MODULE != address(0),\n      \"PORTAL: DEFAULT_LP can NOT be ZERO\"\n    );\n    require(\n      _DEFAULT_LP_TOKEN_MODULE != address(0),\n      \"PORTAL: DEFAULT_LP_TOKEN can NOT be ZERO\"\n    );\n    require(\n      _DEFAULT_WITHDRAWAL_CONTRACT_MODULE != address(0),\n      \"PORTAL: WITHDRAWAL_CONTRACT_POSITION can NOT be ZERO\"\n    );\n    require(\n      _ALLOWED_GETH_INTERFACE_MODULES.length ==\n        _ALLOWED_GETH_INTERFACE_MODULE_NAMES.length,\n      \"PORTAL: wrong _ALLOWED_GETH_INTERFACE_MODULES\"\n    );\n    GEODE.GOVERNANCE = msg.sender;\n    GEODE.SENATE = msg.sender;\n    GEODE.SENATE_EXPIRY = type(uint256).max;\n\n    GEODE.setGovernanceFee(_GOVERNANCE_FEE);\n    GEODE.setElectorType(DATASTORE, ID_TYPE.POOL, true);\n\n    STAKER.gETH = IgETH(_gETH);\n    STAKER.MONOPOLY_THRESHOLD = type(uint256).max;\n\n    STAKER.ORACLE_POSITION = _ORACLE_POSITION;\n    STAKER.DAILY_PRICE_INCREASE_LIMIT = (5 * PERCENTAGE_DENOMINATOR) / 100;\n    STAKER.DAILY_PRICE_DECREASE_LIMIT = (5 * PERCENTAGE_DENOMINATOR) / 100;\n\n    {\n      uint256 liqPoolVersion = GEODE.newProposal(\n        DATASTORE,\n        _DEFAULT_LP_MODULE,\n        ID_TYPE.MODULE_LIQUDITY_POOL,\n        \"v1\",\n        1 days\n      );\n      approveProposal(liqPoolVersion);\n    }\n\n    {\n      uint256 lpTokenVersion = GEODE.newProposal(\n        DATASTORE,\n        _DEFAULT_LP_TOKEN_MODULE,\n        ID_TYPE.MODULE_LIQUDITY_POOL_TOKEN,\n        \"v1\",\n        1 days\n      );\n      approveProposal(lpTokenVersion);\n    }\n\n    {\n      uint256 withdrawalContractVersion = GEODE.newProposal(\n        DATASTORE,\n        _DEFAULT_WITHDRAWAL_CONTRACT_MODULE,\n        ID_TYPE.MODULE_WITHDRAWAL_CONTRACT,\n        \"v1\",\n        1 days\n      );\n      approveProposal(withdrawalContractVersion);\n    }\n\n    {\n      uint256 gETHInterfaceVersion;\n      for (uint256 i = 0; i < _ALLOWED_GETH_INTERFACE_MODULES.length; ) {\n        require(\n          _ALLOWED_GETH_INTERFACE_MODULES[i] != address(0),\n          \"PORTAL: GETH_INTERFACE_MODULE can NOT be ZERO\"\n        );\n\n        gETHInterfaceVersion = GEODE.newProposal(\n          DATASTORE,\n          _ALLOWED_GETH_INTERFACE_MODULES[i],\n          ID_TYPE.MODULE_GETH_INTERFACE,\n          _ALLOWED_GETH_INTERFACE_MODULE_NAMES[i],\n          1 days\n        );\n\n        approveProposal(gETHInterfaceVersion);\n        unchecked {\n          i += 1;\n        }\n      }\n    }\n\n    {\n      uint256 portalVersion = GEODE.newProposal(\n        DATASTORE,\n        address(this),\n        ID_TYPE.CONTRACT_UPGRADE,\n        \"v1\",\n        1 days\n      );\n      approveProposal(portalVersion);\n      _setContractVersion(portalVersion);\n    }\n\n    GEODE.GOVERNANCE = _GOVERNANCE;\n    GEODE.SENATE = _SENATE;\n  }\n\n  /**\n   * @dev  ->  modifier\n   */\n\n  modifier onlyGovernance() {\n    require(msg.sender == GEODE.getGovernance(), \"Portal: ONLY GOVERNANCE\");\n    _;\n  }\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @dev required by the OZ UUPS module\n   * note that there is no Governance check, as upgrades are effective\n   * * right after the Senate approval\n   */\n  function _authorizeUpgrade(\n    address proposed_implementation\n  ) internal virtual override {\n    require(proposed_implementation != address(0));\n    require(\n      GEODE.isUpgradeAllowed(proposed_implementation),\n      \"Portal: is not allowed to upgrade\"\n    );\n  }\n\n  function _setContractVersion(uint256 versionId) internal virtual {\n    CONTRACT_VERSION = versionId;\n    GEODE.approvedVersion = address(0);\n    emit ContractVersionSet(getContractVersion());\n  }\n\n  /**\n   * @dev  ->  view\n   */\n\n  function getContractVersion() public view virtual override returns (uint256) {\n    return CONTRACT_VERSION;\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  function pause() external virtual override onlyGovernance {\n    _pause();\n  }\n\n  function unpause() external virtual override onlyGovernance {\n    _unpause();\n  }\n\n  /**\n   * @notice                                     ** gETH  **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice get the position of ERC1155\n   */\n  function gETH() external view virtual override returns (address) {\n    return address(STAKER.gETH);\n  }\n\n  /**\n   * @notice read the list of interfaces for a gETH ID\n   */\n  function gETHInterfaces(\n    uint256 id,\n    uint256 index\n  ) external view virtual override returns (address) {\n    return StakeUtils.gETHInterfaces(DATASTORE, id, index);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  function pausegETH() external virtual override onlyGovernance {\n    STAKER.gETH.pause();\n  }\n\n  function unpausegETH() external virtual override onlyGovernance {\n    STAKER.gETH.unpause();\n  }\n\n  /**\n   * @notice                                     ** DATASTORE **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @dev useful for outside reach, shouldn't be used within contracts as a referance\n   * @return allIdsByType is an array of IDs of the given TYPE from Datastore,\n   * returns a specific index\n   */\n  function allIdsByType(\n    uint256 _type,\n    uint256 _index\n  ) external view virtual override returns (uint256) {\n    return DATASTORE.allIdsByType[_type][_index];\n  }\n\n  /**\n   * @notice useful view function for string inputs - returns same with the DATASTOREUTILS.generateId\n   * @dev id is keccak(name, type)\n   */\n  function generateId(\n    string calldata _name,\n    uint256 _type\n  ) external pure virtual override returns (uint256 id) {\n    id = uint256(keccak256(abi.encodePacked(_name, _type)));\n  }\n\n  /**\n   * @notice useful view function for string inputs - returns same with the DATASTOREUTILS.generateId\n   */\n  function getKey(\n    uint256 _id,\n    bytes32 _param\n  ) external pure virtual override returns (bytes32 key) {\n    return DataStoreUtils.getKey(_id, _param);\n  }\n\n  function readUint(\n    uint256 id,\n    bytes32 key\n  ) external view virtual override returns (uint256 data) {\n    data = DATASTORE.readUint(id, key);\n  }\n\n  function readAddress(\n    uint256 id,\n    bytes32 key\n  ) external view virtual override returns (address data) {\n    data = DATASTORE.readAddress(id, key);\n  }\n\n  function readBytes(\n    uint256 id,\n    bytes32 key\n  ) external view virtual override returns (bytes memory data) {\n    data = DATASTORE.readBytes(id, key);\n  }\n\n  function readUintArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view virtual override returns (uint256 data) {\n    data = DATASTORE.readUintArray(id, key, index);\n  }\n\n  function readBytesArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view virtual override returns (bytes memory data) {\n    data = DATASTORE.readBytesArray(id, key, index);\n  }\n\n  function readAddressArray(\n    uint256 id,\n    bytes32 key,\n    uint256 index\n  ) external view virtual override returns (address data) {\n    data = DATASTORE.readAddressArray(id, key, index);\n  }\n\n  /**\n   * @notice                                     ** GEODE **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  function GeodeParams()\n    external\n    view\n    virtual\n    override\n    returns (\n      address SENATE,\n      address GOVERNANCE,\n      uint256 SENATE_EXPIRY,\n      uint256 GOVERNANCE_FEE\n    )\n  {\n    SENATE = GEODE.getSenate();\n    GOVERNANCE = GEODE.getGovernance();\n    SENATE_EXPIRY = GEODE.getSenateExpiry();\n    GOVERNANCE_FEE = GEODE.getGovernanceFee();\n  }\n\n  function getProposal(\n    uint256 id\n  )\n    external\n    view\n    virtual\n    override\n    returns (GeodeUtils.Proposal memory proposal)\n  {\n    proposal = GEODE.getProposal(id);\n  }\n\n  function isElector(\n    uint256 _TYPE\n  ) external view virtual override returns (bool) {\n    return GEODE._electorTypes[_TYPE];\n  }\n\n  function isUpgradeAllowed(\n    address proposedImplementation\n  ) external view virtual override returns (bool) {\n    return GEODE.isUpgradeAllowed(proposedImplementation);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @dev Governance Functions\n   */\n\n  /**\n   * @notice only parameter of GeodeUtils that can be mutated is the fee\n   */\n  function setGovernanceFee(uint256 newFee) external virtual override {\n    GEODE.setGovernanceFee(newFee);\n  }\n\n  function setElectorType(\n    uint256 _TYPE,\n    bool _isElector\n  ) external virtual override {\n    GEODE.setElectorType(DATASTORE, _TYPE, _isElector);\n  }\n\n  function newProposal(\n    address _CONTROLLER,\n    uint256 _TYPE,\n    bytes calldata _NAME,\n    uint256 duration\n  ) external virtual override {\n    GEODE.newProposal(DATASTORE, _CONTROLLER, _TYPE, _NAME, duration);\n  }\n\n  /**\n   * @dev Senate Functions\n   */\n\n  /**\n   * @notice approves a specific proposal\n   * @dev OnlySenate is checked inside the GeodeUtils\n   */\n  function approveProposal(uint256 id) public virtual override {\n    (uint256 _type, ) = GEODE.approveProposal(DATASTORE, id);\n    if (\n      _type == ID_TYPE.MODULE_WITHDRAWAL_CONTRACT ||\n      _type == ID_TYPE.MODULE_LIQUDITY_POOL ||\n      _type == ID_TYPE.MODULE_LIQUDITY_POOL_TOKEN\n    ) {\n      STAKER._defaultModules[_type] = id;\n    } else if (_type == ID_TYPE.MODULE_GETH_INTERFACE) {\n      STAKER._allowedModules[_type][id] = true;\n    }\n  }\n\n  /**\n   * @notice changes the Senate's address without extending the expiry\n   * @dev OnlySenate is checked inside the GeodeUtils\n   */\n  function changeSenate(address _newSenate) external virtual override {\n    GEODE.changeSenate(_newSenate);\n  }\n\n  /**\n   * @dev CONTROLLER Functions\n   */\n\n  function changeIdCONTROLLER(\n    uint256 id,\n    address newCONTROLLER\n  ) external virtual override whenNotPaused {\n    GeodeUtils.changeIdCONTROLLER(DATASTORE, id, newCONTROLLER);\n  }\n\n  function approveSenate(\n    uint256 proposalId,\n    uint256 electorId\n  ) external virtual override {\n    GEODE.approveSenate(DATASTORE, proposalId, electorId);\n  }\n\n  /**\n   * @notice                                     ** THE STAKING LIBRARY **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  function StakingParams()\n    external\n    view\n    virtual\n    override\n    returns (\n      uint256 VALIDATORS_INDEX,\n      uint256 VERIFICATION_INDEX,\n      uint256 MONOPOLY_THRESHOLD,\n      uint256 EARLY_EXIT_FEE,\n      uint256 ORACLE_UPDATE_TIMESTAMP,\n      uint256 DAILY_PRICE_INCREASE_LIMIT,\n      uint256 DAILY_PRICE_DECREASE_LIMIT,\n      bytes32 PRICE_MERKLE_ROOT,\n      address ORACLE_POSITION\n    )\n  {\n    VALIDATORS_INDEX = STAKER.VALIDATORS_INDEX;\n    VERIFICATION_INDEX = STAKER.VERIFICATION_INDEX;\n    MONOPOLY_THRESHOLD = STAKER.MONOPOLY_THRESHOLD;\n    EARLY_EXIT_FEE = STAKER.EARLY_EXIT_FEE;\n    ORACLE_UPDATE_TIMESTAMP = STAKER.ORACLE_UPDATE_TIMESTAMP;\n    DAILY_PRICE_INCREASE_LIMIT = STAKER.DAILY_PRICE_INCREASE_LIMIT;\n    DAILY_PRICE_DECREASE_LIMIT = STAKER.DAILY_PRICE_DECREASE_LIMIT;\n    PRICE_MERKLE_ROOT = STAKER.PRICE_MERKLE_ROOT;\n    ORACLE_POSITION = STAKER.ORACLE_POSITION;\n  }\n\n  function getValidator(\n    bytes calldata pubkey\n  ) external view virtual override returns (StakeUtils.Validator memory) {\n    return STAKER._validators[pubkey];\n  }\n\n  function getValidatorByPool(\n    uint256 poolId,\n    uint256 index\n  ) external view virtual override returns (bytes memory) {\n    return DATASTORE.readBytesArray(poolId, \"validators\", index);\n  }\n\n  function getMaintenanceFee(\n    uint256 id\n  ) external view virtual override returns (uint256 fee) {\n    fee = StakeUtils.getMaintenanceFee(DATASTORE, id);\n  }\n\n  function isPrisoned(\n    uint256 operatorId\n  ) external view virtual override returns (bool) {\n    return StakeUtils.isPrisoned(DATASTORE, operatorId);\n  }\n\n  function isPrivatePool(\n    uint256 poolId\n  ) external view virtual override returns (bool) {\n    return StakeUtils.isPrivatePool(DATASTORE, poolId);\n  }\n\n  function isPriceValid(\n    uint256 poolId\n  ) external view virtual override returns (bool) {\n    return STAKER.isPriceValid(poolId);\n  }\n\n  function isMintingAllowed(\n    uint256 poolId\n  ) external view virtual override returns (bool) {\n    return STAKER.isMintingAllowed(DATASTORE, poolId);\n  }\n\n  function canStake(\n    bytes calldata pubkey\n  ) external view virtual override returns (bool) {\n    return STAKER.canStake(DATASTORE, pubkey);\n  }\n\n  function getDefaultModule(\n    uint256 _type\n  ) external view virtual override returns (uint256 _version) {\n    _version = STAKER._defaultModules[_type];\n  }\n\n  function isAllowedModule(\n    uint256 _type,\n    uint256 _id\n  ) external view virtual override returns (bool) {\n    return STAKER._allowedModules[_type][_id];\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @dev MODULES\n   */\n\n  function fetchWithdrawalContractUpgradeProposal(\n    uint256 id\n  ) external virtual override returns (uint256 withdrawalContractVersion) {\n    withdrawalContractVersion = STAKER._defaultModules[\n      ID_TYPE.MODULE_WITHDRAWAL_CONTRACT\n    ];\n\n    StakeUtils.withdrawalContractById(DATASTORE, id).newProposal(\n      DATASTORE.readAddress(withdrawalContractVersion, \"CONTROLLER\"),\n      ID_TYPE.CONTRACT_UPGRADE,\n      DATASTORE.readBytes(withdrawalContractVersion, \"NAME\"),\n      4 weeks\n    );\n  }\n\n  function deployLiquidityPool(\n    uint256 poolId\n  ) external virtual override whenNotPaused {\n    STAKER.deployLiquidityPool(DATASTORE, poolId, GEODE.getGovernance());\n  }\n\n  function setPoolVisibility(\n    uint256 poolId,\n    bool isPrivate\n  ) external virtual override whenNotPaused {\n    StakeUtils.setPoolVisibility(DATASTORE, poolId, isPrivate);\n  }\n\n  function setWhitelist(\n    uint256 poolId,\n    address whitelist\n  ) external virtual override whenNotPaused {\n    StakeUtils.setWhitelist(DATASTORE, poolId, whitelist);\n  }\n\n  /**\n   * @dev INITIATORS\n   */\n\n  function initiateOperator(\n    uint256 id,\n    uint256 fee,\n    uint256 validatorPeriod,\n    address maintainer\n  ) external payable virtual override whenNotPaused {\n    StakeUtils.initiateOperator(\n      DATASTORE,\n      id,\n      fee,\n      validatorPeriod,\n      maintainer\n    );\n  }\n\n  function initiatePool(\n    uint256 fee,\n    uint256 interfaceVersion,\n    address maintainer,\n    bytes calldata NAME,\n    bytes calldata interface_data,\n    bool[3] calldata config\n  ) external payable virtual override whenNotPaused {\n    STAKER.initiatePool(\n      DATASTORE,\n      fee,\n      interfaceVersion,\n      maintainer,\n      GEODE.getGovernance(),\n      NAME,\n      interface_data,\n      config\n    );\n  }\n\n  /**\n   * @dev MAINTAINERS\n   */\n\n  function changeMaintainer(\n    uint256 id,\n    address newMaintainer\n  ) external virtual override whenNotPaused {\n    StakeUtils.changeMaintainer(DATASTORE, id, newMaintainer);\n  }\n\n  /**\n   * @dev MAINTENANCE FEE\n   */\n  function switchMaintenanceFee(\n    uint256 id,\n    uint256 newFee\n  ) external virtual override whenNotPaused {\n    StakeUtils.switchMaintenanceFee(DATASTORE, id, newFee);\n  }\n\n  /**\n   * @dev INTERNAL WALLET\n   */\n\n  function increaseWalletBalance(\n    uint256 id\n  ) external payable virtual override returns (bool success) {\n    success = StakeUtils.increaseWalletBalance(DATASTORE, id);\n  }\n\n  function decreaseWalletBalance(\n    uint256 id,\n    uint256 value\n  )\n    external\n    virtual\n    override\n    whenNotPaused\n    nonReentrant\n    returns (bool success)\n  {\n    success = StakeUtils.decreaseWalletBalance(DATASTORE, id, value);\n  }\n\n  /**\n   * @dev OPERATORS\n   */\n\n  function switchValidatorPeriod(\n    uint256 id,\n    uint256 newPeriod\n  ) external virtual override whenNotPaused {\n    StakeUtils.switchValidatorPeriod(DATASTORE, id, newPeriod);\n  }\n\n  function blameOperator(\n    bytes calldata pk\n  ) external virtual override whenNotPaused {\n    STAKER.blameOperator(DATASTORE, pk);\n  }\n\n  function setEarlyExitFee(\n    uint256 fee\n  ) external virtual override whenNotPaused onlyGovernance {\n    require(fee < StakeUtils.MAX_EARLY_EXIT_FEE);\n    STAKER.EARLY_EXIT_FEE = fee;\n  }\n\n  /**\n   * @dev PRISON\n   */\n\n  /**\n   * @notice releases an imprisoned operator immidately\n   * @dev in different situations such as a faulty imprisonment or coordinated testing periods\n   * * Governance can release the prisoners\n   * @dev onlyGovernance SHOULD be checked in Portal\n   */\n  function releasePrisoned(\n    uint256 operatorId\n  ) external virtual override whenNotPaused onlyGovernance {\n    DATASTORE.writeUint(operatorId, \"released\", block.timestamp);\n\n    emit Released(operatorId);\n  }\n\n  /**\n   * @dev OPERATOR APPROVALS\n   */\n\n  function approveOperators(\n    uint256 poolId,\n    uint256[] calldata operatorIds,\n    uint256[] calldata allowances\n  ) external virtual override whenNotPaused {\n    StakeUtils.batchApproveOperators(\n      DATASTORE,\n      poolId,\n      operatorIds,\n      allowances\n    );\n  }\n\n  /**\n   * @dev STAKING\n   */\n\n  function deposit(\n    uint256 poolId,\n    uint256 mingETH,\n    uint256 deadline,\n    uint256 price,\n    bytes32[] calldata priceProof,\n    address receiver\n  ) external payable virtual override whenNotPaused nonReentrant {\n    if (!STAKER.isPriceValid(poolId)) {\n      OracleUtils.priceSync(DATASTORE, STAKER, poolId, price, priceProof);\n    }\n    STAKER.deposit(DATASTORE, poolId, mingETH, deadline, receiver);\n  }\n\n  function proposeStake(\n    uint256 poolId,\n    uint256 operatorId,\n    bytes[] calldata pubkeys,\n    bytes[] calldata signatures1,\n    bytes[] calldata signatures31\n  ) external virtual override whenNotPaused nonReentrant {\n    STAKER.proposeStake(\n      DATASTORE,\n      poolId,\n      operatorId,\n      pubkeys,\n      signatures1,\n      signatures31\n    );\n  }\n\n  function beaconStake(\n    uint256 operatorId,\n    bytes[] calldata pubkeys\n  ) external virtual override whenNotPaused nonReentrant {\n    STAKER.beaconStake(DATASTORE, operatorId, pubkeys);\n  }\n\n  /**\n   * @notice                                     ** ORACLE **\n   */\n\n  /**\n   * @dev  ->  external\n   */\n\n  function updateVerificationIndex(\n    uint256 validatorVerificationIndex,\n    bytes[] calldata alienatedPubkeys\n  ) external virtual override whenNotPaused {\n    OracleUtils.updateVerificationIndex(\n      DATASTORE,\n      STAKER,\n      validatorVerificationIndex,\n      alienatedPubkeys\n    );\n  }\n\n  function regulateOperators(\n    uint256[] calldata feeThefts,\n    bytes[] calldata stolenBlocks\n  ) external virtual override whenNotPaused {\n    OracleUtils.regulateOperators(DATASTORE, STAKER, feeThefts, stolenBlocks);\n  }\n\n  function reportOracle(\n    bytes32 priceMerkleRoot,\n    uint256 allValidatorsCount\n  ) external virtual override whenNotPaused {\n    OracleUtils.reportOracle(STAKER, priceMerkleRoot, allValidatorsCount);\n  }\n\n  function priceSync(\n    uint256 poolId,\n    uint256 price,\n    bytes32[] calldata priceProofs\n  ) external virtual override whenNotPaused {\n    OracleUtils.priceSync(DATASTORE, STAKER, poolId, price, priceProofs);\n  }\n\n  function priceSyncBatch(\n    uint256[] calldata poolIds,\n    uint256[] calldata prices,\n    bytes32[][] calldata priceProofs\n  ) external virtual override whenNotPaused {\n    OracleUtils.priceSyncBatch(DATASTORE, STAKER, poolIds, prices, priceProofs);\n  }\n\n  /**\n   * @notice fallback functions\n   */\n  function Do_we_care() external pure returns (bool) {\n    return true;\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  /**\n   * @notice keep the contract size at 50\n   */\n  uint256[46] private __gap;\n}\n"
    },
    "contracts/Portal/utils/DataStoreUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.7;\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title Isolated Storage Layout\n * A Storage Management Library for Dynamic Structs\n *\n * * DataStoreUtils is a storage management tool designed to create a safe and scalable\n * * storage layout with the help of data types, IDs and keys.\n *\n * * Focusing on upgradable contracts with multiple user types to create a\n * * sustainable development environment.\n * * In summary, extra gas cost that would be saved with Storage packing are\n * * ignored to create upgradable structs.\n *\n * @dev Distinct id and key pairs SHOULD return different storage slots\n * @dev TYPEs are defined in globals.sol\n *\n * @dev IDs are the representation of an entity with any given key as properties.\n * @dev While it is good practice to keep record,\n * * TYPE for ID is NOT mandatory, an ID might not have an explicit type.\n * * Thus there is no checks of types or keys.\n */\n\nlibrary DataStoreUtils {\n  /**\n   * @notice Main Struct for reading and writing operations for given (id, key) pairs\n   * @param allIdsByType type => id[], optional categorization for IDs, requires direct access\n   * @param uintData keccak(id, key) =>  returns uint256\n   * @param bytesData keccak(id, key) => returns bytes\n   * @param addressData keccak(id, key) =>  returns address\n   * @param __gap keep the struct size at 16\n   * @dev any other storage type can be expressed as uint or bytes\n   */\n  struct IsolatedStorage {\n    mapping(uint256 => uint256[]) allIdsByType;\n    mapping(bytes32 => uint256) uintData;\n    mapping(bytes32 => bytes) bytesData;\n    mapping(bytes32 => address) addressData;\n    uint256[12] __gap;\n  }\n\n  /**\n   *                              ** HELPERS **\n   **/\n\n  /**\n   * @notice generaliazed method of generating an ID\n   * @dev Some TYPEs may require permissionless creation. Allowing anyone to claim any ID,\n   * meaning malicious actors can claim names to mislead people. To prevent this\n   * TYPEs will be considered during ID generation.\n   */\n  function generateId(\n    bytes memory _name,\n    uint256 _type\n  ) internal pure returns (uint256 id) {\n    id = uint256(keccak256(abi.encodePacked(_name, _type)));\n  }\n\n  /**\n   * @notice hashes given id and a parameter to be used as key in getters and setters\n   * @return key bytes32 hash of id and parameter to be stored\n   **/\n  function getKey(\n    uint256 id,\n    bytes32 param\n  ) internal pure returns (bytes32 key) {\n    key = keccak256(abi.encodePacked(id, param));\n  }\n\n  /**\n   *                              ** DATA GETTERS **\n   **/\n\n  function readUint(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key\n  ) internal view returns (uint256 data) {\n    data = self.uintData[getKey(_id, _key)];\n  }\n\n  function readBytes(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key\n  ) internal view returns (bytes memory data) {\n    data = self.bytesData[getKey(_id, _key)];\n  }\n\n  function readAddress(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key\n  ) internal view returns (address data) {\n    data = self.addressData[getKey(_id, _key)];\n  }\n\n  /**\n   *                              ** ARRAY GETTERS **\n   **/\n\n  function readUintArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) internal view returns (uint256 data) {\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\n  }\n\n  function readBytesArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) internal view returns (bytes memory data) {\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\n  }\n\n  function readAddressArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _index\n  ) internal view returns (address data) {\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\n  }\n\n  /**\n   *                              ** DATA SETTERS **\n   **/\n\n  function writeUint(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _data\n  ) internal {\n    self.uintData[getKey(_id, _key)] = _data;\n  }\n\n  function addUint(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _addend\n  ) internal {\n    self.uintData[getKey(_id, _key)] += _addend;\n  }\n\n  function subUint(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _minuend\n  ) internal {\n    self.uintData[getKey(_id, _key)] -= _minuend;\n  }\n\n  function writeBytes(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    bytes memory _data\n  ) internal {\n    self.bytesData[getKey(_id, _key)] = _data;\n  }\n\n  function writeAddress(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    address _data\n  ) internal {\n    self.addressData[getKey(_id, _key)] = _data;\n  }\n\n  /**\n   *                              ** ARRAY SETTERS **\n   **/\n\n  function appendUintArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256 _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\n  }\n\n  function appendBytesArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    bytes memory _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\n  }\n\n  function appendAddressArray(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    address _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\n  }\n\n  /**\n   *                              ** BATCH ARRAY SETTERS **\n   **/\n\n  function appendUintArrayBatch(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    uint256[] memory _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    uint256 arrayLen = self.uintData[arrayKey];\n    for (uint256 i; i < _data.length; ) {\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\n      unchecked {\n        i += 1;\n      }\n    }\n    self.uintData[arrayKey] = arrayLen;\n  }\n\n  function appendBytesArrayBatch(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    bytes[] memory _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    uint256 arrayLen = self.uintData[arrayKey];\n    for (uint256 i; i < _data.length; ) {\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\n      unchecked {\n        i += 1;\n      }\n    }\n    self.uintData[arrayKey] = arrayLen;\n  }\n\n  function appendAddressArrayBatch(\n    IsolatedStorage storage self,\n    uint256 _id,\n    bytes32 _key,\n    address[] memory _data\n  ) internal {\n    bytes32 arrayKey = getKey(_id, _key);\n    uint256 arrayLen = self.uintData[arrayKey];\n    for (uint256 i; i < _data.length; ) {\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\n      unchecked {\n        i += 1;\n      }\n    }\n    self.uintData[arrayKey] = arrayLen;\n  }\n}\n"
    },
    "contracts/Portal/utils/DepositContractUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"../../interfaces/IDepositContract.sol\";\nimport \"../helpers/BytesLib.sol\";\n\nlibrary DepositContractUtils {\n  IDepositContract internal constant DEPOSIT_CONTRACT =\n    IDepositContract(0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b);\n  uint256 internal constant PUBKEY_LENGTH = 48;\n  uint256 internal constant SIGNATURE_LENGTH = 96;\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\n\n  /**\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\n   * @param _b Memory array of size 32 .. 64\n   */\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\n    assert(_b.length >= 32 && _b.length <= 64);\n    if (64 == _b.length) return _b;\n\n    bytes memory zero32 = new bytes(32);\n    assembly {\n      mstore(add(zero32, 0x20), 0)\n    }\n\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\n    else\n      return\n        BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\n  }\n\n  /**\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\n   * @param _value Number less than `2**64` for compatibility reasons\n   */\n  function _toLittleEndian64(\n    uint256 _value\n  ) internal pure returns (uint256 result) {\n    result = 0;\n    uint256 temp_value = _value;\n    for (uint256 i = 0; i < 8; ++i) {\n      result = (result << 8) | (temp_value & 0xFF);\n      temp_value >>= 8;\n    }\n\n    assert(0 == temp_value); // fully converted\n    result <<= (24 * 8);\n  }\n\n  function _getDepositDataRoot(\n    bytes memory _pubkey,\n    bytes memory _withdrawalCredentials,\n    bytes memory _signature,\n    uint256 _stakeAmount\n  ) internal pure returns (bytes32) {\n    require(_stakeAmount >= 1 ether, \"DepositContract: deposit value too low\");\n    require(\n      _stakeAmount % 1 gwei == 0,\n      \"DepositContract: deposit value not multiple of gwei\"\n    );\n\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\n    bytes32 signatureRoot = sha256(\n      abi.encodePacked(\n        sha256(BytesLib.slice(_signature, 0, 64)),\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\n      )\n    );\n\n    bytes32 depositDataRoot = sha256(\n      abi.encodePacked(\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\n        sha256(\n          abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot)\n        )\n      )\n    );\n\n    return depositDataRoot;\n  }\n\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\n    uint256 w = 1 << 248;\n\n    return\n      abi.encodePacked(\n        bytes32(w) | bytes32(uint256(uint160(address(wcAddress))))\n      );\n  }\n\n  function depositValidator(\n    bytes calldata pubkey,\n    bytes memory withdrawalCredential,\n    bytes memory signature,\n    uint256 amount\n  ) internal {\n    DEPOSIT_CONTRACT.deposit{value: amount}(\n      pubkey,\n      withdrawalCredential,\n      signature,\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\n    );\n  }\n}\n"
    },
    "contracts/Portal/utils/GeodeUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport {ID_TYPE, PERCENTAGE_DENOMINATOR} from \"./globals.sol\";\nimport {DataStoreUtils as DSU} from \"./DataStoreUtilsLib.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title Geode Dual Governance\n * @notice Exclusively contains functions for the administration of the Isolated Storage,\n * and Limited Upgradability with Dual Governance of Governance and Senate\n * Note This library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\n *\n * @dev Reserved ID_TYPEs:\n *\n * * Type 0 : NULL\n *\n * * Type 1 : SENATE ELECTIONS\n * * * Every SENATE has an expiration date, a new one should be elected before it ends.\n * * * Only the controllers of IDs with TYPEs that are set true on _electorTypes can vote.\n * * * 2/3 is the expected concensus, however this logic seems to be improved in the future.\n *\n * * Type 2 : CONTRACT UPGRADES\n * * * Provides Limited Upgradability on Portal and Withdrawal Contract\n * * * Contract can be upgradable once Senate approves it.\n *\n * * Type 3 : __GAP__\n * * * ormally represented the admin contract, but we use UUPS. Reserved to be never used.\n *\n * @dev Contracts relying on this library must initialize GeodeUtils.DualGovernance\n * @dev Functions are already protected accordingly\n *\n * @dev review DataStoreUtils\n */\nlibrary GeodeUtils {\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\n  using DSU for DSU.IsolatedStorage;\n\n  /// @notice EVENTS\n  event GovernanceFeeUpdated(uint256 newFee);\n  event ControllerChanged(uint256 indexed id, address newCONTROLLER);\n  event Proposed(\n    uint256 id,\n    address CONTROLLER,\n    uint256 indexed TYPE,\n    uint256 deadline\n  );\n  event ProposalApproved(uint256 id);\n  event ElectorTypeSet(uint256 TYPE, bool isElector);\n  event Vote(uint256 indexed proposalId, uint256 indexed voterId);\n  event NewSenate(address senate, uint256 senateExpiry);\n\n  /**\n   * @notice Proposals give the control of a specific ID to a CONTROLLER\n   *\n   * @notice A Proposal has 4 specs:\n   * @param TYPE: refer to globals.sol\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\n   * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\n   * @param NAME: DataStore generates ID by keccak(name, type)\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\n   * * Expired proposals can not be approved by Senate\n   * * Expired proposals can not be overriden by new proposals\n   **/\n  struct Proposal {\n    address CONTROLLER;\n    uint256 TYPE;\n    bytes NAME;\n    uint256 deadline;\n  }\n\n  /**\n   * @notice DualGovernance allows 2 parties to manage a contract with proposals and approvals\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\n   * Suggests updates, such as new operators, contract upgrades, a new Senate -without any permission to force them-\n   * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\n   * Note SENATE is proposed by Governance and voted by all elector TYPEs, approved if ⌊2/3⌋ votes.\n   * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\n   * @param GOVERNANCE_FEE operation fee on the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_FEE\n   * @param approvedVersion only 1 implementation contract SHOULD be \"approved\" at any given time.\n   * * @dev safe to set to address(0) after every upgrade as isUpgradeAllowed returns false for address(0)\n   * @param _electorCount increased when a new id is added with _electorTypes[id] == true\n   * @param _electorTypes only given TYPEs can vote\n   * @param _proposals till approved, proposals are kept separated from the Isolated Storage\n   * @param __gap keep the struct size at 16\n   **/\n  struct DualGovernance {\n    address GOVERNANCE;\n    address SENATE;\n    uint256 SENATE_EXPIRY;\n    uint256 GOVERNANCE_FEE;\n    address approvedVersion;\n    uint256 _electorCount;\n    mapping(uint256 => bool) _electorTypes;\n    mapping(uint256 => Proposal) _proposals;\n    uint256[8] __gap;\n  }\n\n  /**\n   * @notice limiting the GOVERNANCE_FEE, 5%\n   */\n  uint256 public constant MAX_GOVERNANCE_FEE =\n    (PERCENTAGE_DENOMINATOR * 5) / 100;\n\n  /**\n   * @notice prevents Governance from collecting any fees till given timestamp:\n   * @notice April 2025\n   * @dev fee switch will be automatically switched on after given timestamp\n   * @dev fee switch can be switched on with the approval of Senate (a contract upgrade)\n   */\n  uint256 public constant FEE_COOLDOWN = 1743454800;\n\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\n  uint32 public constant MAX_PROPOSAL_DURATION = 4 weeks;\n  uint32 public constant MAX_SENATE_PERIOD = 365 days;\n\n  modifier onlySenate(DualGovernance storage self) {\n    require(msg.sender == self.SENATE, \"GU: SENATE role needed\");\n    require(block.timestamp < self.SENATE_EXPIRY, \"GU: SENATE expired\");\n    _;\n  }\n\n  modifier onlyGovernance(DualGovernance storage self) {\n    require(msg.sender == self.GOVERNANCE, \"GU: GOVERNANCE role needed\");\n    _;\n  }\n\n  modifier onlyController(DSU.IsolatedStorage storage DATASTORE, uint256 id) {\n    require(\n      msg.sender == DATASTORE.readAddress(id, \"CONTROLLER\"),\n      \"GU: CONTROLLER role needed\"\n    );\n    _;\n  }\n\n  /**\n   * @notice                                     ** DualGovernance **\n   **/\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @return address of SENATE\n   **/\n  function getSenate(\n    DualGovernance storage self\n  ) external view returns (address) {\n    return self.SENATE;\n  }\n\n  /**\n   * @return address of GOVERNANCE\n   **/\n  function getGovernance(\n    DualGovernance storage self\n  ) external view returns (address) {\n    return self.GOVERNANCE;\n  }\n\n  /**\n   * @return the expiration date of current SENATE as a timestamp\n   */\n  function getSenateExpiry(\n    DualGovernance storage self\n  ) external view returns (uint256) {\n    return self.SENATE_EXPIRY;\n  }\n\n  /**\n   * @notice active GOVERNANCE_FEE limited by FEE_COOLDOWN and MAX_GOVERNANCE_FEE\n   * @dev MAX_GOVERNANCE_FEE MUST limit GOVERNANCE_FEE even if MAX is changed later\n   * @dev MUST return 0 until cooldown period is active\n   */\n  function getGovernanceFee(\n    DualGovernance storage self\n  ) external view returns (uint256) {\n    return\n      block.timestamp < FEE_COOLDOWN\n        ? 0\n        : MAX_GOVERNANCE_FEE > self.GOVERNANCE_FEE\n        ? self.GOVERNANCE_FEE\n        : MAX_GOVERNANCE_FEE;\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice onlyGovernance, sets the governance fee\n   * @dev Can not set the fee more than MAX_GOVERNANCE_FEE\n   */\n  function setGovernanceFee(\n    DualGovernance storage self,\n    uint256 newFee\n  ) external onlyGovernance(self) {\n    require(newFee <= MAX_GOVERNANCE_FEE, \"GU: > MAX_GOVERNANCE_FEE\");\n\n    self.GOVERNANCE_FEE = newFee;\n\n    emit GovernanceFeeUpdated(newFee);\n  }\n\n  /**\n   * @notice                                     ** ID **\n   */\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice onlyController, change the CONTROLLER of an ID\n   * @dev this operation can not be reverted by the old CONTROLLER !\n   * @dev can not provide address(0), try 0x000000000000000000000000000000000000dEaD\n   */\n  function changeIdCONTROLLER(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    address newCONTROLLER\n  ) external onlyController(DATASTORE, id) {\n    require(newCONTROLLER != address(0), \"GU: CONTROLLER can not be zero\");\n\n    DATASTORE.writeAddress(id, \"CONTROLLER\", newCONTROLLER);\n\n    emit ControllerChanged(id, newCONTROLLER);\n  }\n\n  /**\n   * @notice                                     ** PROPOSALS **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @dev refer to Proposal struct\n   */\n  function getProposal(\n    DualGovernance storage self,\n    uint256 id\n  ) external view returns (Proposal memory) {\n    return self._proposals[id];\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice onlyGovernance, creates a new Proposal\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\n   * @dev Proposals can NEVER be overriden\n   * @dev refer to Proposal struct\n   */\n  function newProposal(\n    DualGovernance storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    address _CONTROLLER,\n    uint256 _TYPE,\n    bytes calldata _NAME,\n    uint256 duration\n  ) external onlyGovernance(self) returns (uint256 id) {\n    id = DSU.generateId(_NAME, _TYPE);\n\n    require(self._proposals[id].deadline == 0, \"GU: NAME already proposed\");\n\n    require(\n      (DATASTORE.readBytes(id, \"NAME\")).length == 0,\n      \"GU: ID already exist\"\n    );\n\n    require(_CONTROLLER != address(0), \"GU: CONTROLLER can NOT be ZERO\");\n    require(\n      _TYPE != ID_TYPE.NONE && _TYPE != ID_TYPE.__GAP__,\n      \"GU: TYPE is NONE or GAP\"\n    );\n    require(\n      duration >= MIN_PROPOSAL_DURATION && duration <= MAX_PROPOSAL_DURATION,\n      \"GU: invalid proposal duration\"\n    );\n\n    uint256 _deadline = block.timestamp + duration;\n\n    self._proposals[id] = Proposal({\n      CONTROLLER: _CONTROLLER,\n      TYPE: _TYPE,\n      NAME: _NAME,\n      deadline: _deadline\n    });\n\n    emit Proposed(id, _CONTROLLER, _TYPE, _deadline);\n  }\n\n  /**\n   * @notice onlySenate, approves a proposal and records given data to\n   *  @notice specific changes for the reserved types (1,2,3) are implemented here,\n   *  any other addition should take place in Portal, as not related\n   *  @param id given ID proposal that has been approved by Senate\n   *  @dev Senate is not able to approve approved proposals\n   *  @dev Senate is not able to approve expired proposals\n   *  @dev Senate is not able to approve SENATE proposals\n   */\n  function approveProposal(\n    DualGovernance storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id\n  ) external onlySenate(self) returns (uint256 _type, address _controller) {\n    require(\n      self._proposals[id].deadline > block.timestamp,\n      \"GU: NOT an active proposal\"\n    );\n\n    _type = self._proposals[id].TYPE;\n    _controller = self._proposals[id].CONTROLLER;\n\n    require(_type != ID_TYPE.SENATE, \"GU: can NOT approve SENATE election\");\n\n    DATASTORE.writeUint(id, \"TYPE\", _type);\n    DATASTORE.writeAddress(id, \"CONTROLLER\", _controller);\n    DATASTORE.writeBytes(id, \"NAME\", self._proposals[id].NAME);\n    DATASTORE.allIdsByType[_type].push(id);\n\n    if (_type == ID_TYPE.CONTRACT_UPGRADE) {\n      self.approvedVersion = _controller;\n    }\n\n    if (isElector(self, _type)) {\n      self._electorCount += 1;\n    }\n\n    // important\n    self._proposals[id].deadline = block.timestamp;\n\n    emit ProposalApproved(id);\n  }\n\n  /**\n   * @notice                                       ** SENATE ELECTIONS **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  function isElector(\n    DualGovernance storage self,\n    uint256 _TYPE\n  ) public view returns (bool) {\n    return self._electorTypes[_TYPE];\n  }\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice internal function to set a new senate with a given period\n   */\n  function _setSenate(\n    DualGovernance storage self,\n    address _newSenate,\n    uint256 _expiry\n  ) internal {\n    self.SENATE = _newSenate;\n    self.SENATE_EXPIRY = _expiry;\n\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice onlySenate, Sometimes it is useful to be able to change the Senate's address.\n   * @dev does not change the expiry\n   */\n  function changeSenate(\n    DualGovernance storage self,\n    address _newSenate\n  ) external onlySenate(self) {\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\n  }\n\n  /**\n   * @notice onlyGovernance, only elector types can vote for senate\n   * @param _TYPE selected type\n   * @param _isElector true if selected _type can vote for senate from now on\n   * @dev can not set with the same value again, preventing double increment/decrements\n   */\n  function setElectorType(\n    DualGovernance storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _TYPE,\n    bool _isElector\n  ) external onlyGovernance(self) {\n    require(_isElector != isElector(self, _TYPE), \"GU: type already elector\");\n    require(\n      _TYPE > ID_TYPE.__GAP__,\n      \"GU: 0, Senate, Upgrade, GAP cannot be elector\"\n    );\n\n    self._electorTypes[_TYPE] = _isElector;\n\n    if (_isElector) {\n      self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\n    } else {\n      self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\n    }\n\n    emit ElectorTypeSet(_TYPE, _isElector);\n  }\n\n  /**\n   * @notice onlyController, Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\n   * NOTE mathematically, min 3 elector is needed for (c+1)*2/3 to work properly\n   * @notice id can not vote if:\n   * - approved already\n   * - proposal is expired\n   * - not its type is elector\n   * - not senate proposal\n   * @param voterId should have the voting rights, msg.sender should be the CONTROLLER of given ID\n   * @dev pins id as \"voted\" when approved\n   * @dev increases \"approvalCount\" of proposalId by 1 when approved\n   */\n  function approveSenate(\n    DualGovernance storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 proposalId,\n    uint256 voterId\n  ) external onlyController(DATASTORE, voterId) {\n    uint256 _type = self._proposals[proposalId].TYPE;\n    require(_type == ID_TYPE.SENATE, \"GU: NOT Senate Proposal\");\n    require(\n      self._proposals[proposalId].deadline >= block.timestamp,\n      \"GU: proposal expired\"\n    );\n    require(\n      isElector(self, DATASTORE.readUint(voterId, \"TYPE\")),\n      \"GU: NOT an elector\"\n    );\n    require(\n      DATASTORE.readUint(proposalId, DSU.getKey(voterId, \"voted\")) == 0,\n      \" GU: already approved\"\n    );\n\n    DATASTORE.writeUint(proposalId, DSU.getKey(voterId, \"voted\"), 1);\n    DATASTORE.addUint(proposalId, \"approvalCount\", 1);\n\n    if (\n      DATASTORE.readUint(proposalId, \"approvalCount\") >=\n      ((self._electorCount + 1) * 2) / 3\n    ) {\n      self._proposals[proposalId].deadline = block.timestamp;\n      _setSenate(\n        self,\n        self._proposals[proposalId].CONTROLLER,\n        block.timestamp + MAX_SENATE_PERIOD\n      );\n    }\n\n    emit Vote(proposalId, voterId);\n  }\n\n  /**\n   * @notice                                       ** LIMITED UPGRADABILITY **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice Get if it is allowed to change a specific contract with the current version.\n   * @return True if it is allowed by senate and false if not.\n   * @dev address(0) should return false\n   * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\n   **/\n  function isUpgradeAllowed(\n    DualGovernance storage self,\n    address proposedImplementation\n  ) external view returns (bool) {\n    return\n      self.approvedVersion != address(0) &&\n      self.approvedVersion == proposedImplementation;\n  }\n}\n"
    },
    "contracts/Portal/utils/globals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\n// PERCENTAGE_DENOMINATOR represents 100%\nuint256 constant PERCENTAGE_DENOMINATOR = 10 ** 10;\n\n/**\n * @notice ID_TYPE is like an ENUM, widely used within Portal and Modules like Withdrawal Contract\n * @dev Why not use enums, they basically do the same thing?\n * * We like using a explicit defined uints than linearly increasing ones.\n */\nlibrary ID_TYPE {\n  /// @notice TYPE 0: *invalid*\n  uint256 internal constant NONE = 0;\n\n  /// @notice TYPE 1: Senate and Senate Election Proposals\n  uint256 internal constant SENATE = 1;\n\n  /// @notice TYPE 2: Contract Upgrade\n  uint256 internal constant CONTRACT_UPGRADE = 2;\n\n  /// @notice TYPE 3: *gap*: formally represented the admin contract, now reserved to be never used\n  uint256 internal constant __GAP__ = 3;\n\n  /// @notice TYPE 4: Node Operators\n  uint256 internal constant OPERATOR = 4;\n\n  /// @notice TYPE 5: Staking Pools\n  uint256 internal constant POOL = 5;\n\n  /// @notice TYPE 21: Module: Withdrawal Contract\n  uint256 internal constant MODULE_WITHDRAWAL_CONTRACT = 21;\n\n  /// @notice TYPE 31: Module: A new gETH interface\n  uint256 internal constant MODULE_GETH_INTERFACE = 31;\n\n  /// @notice TYPE 41: Module: A new Liquidity Pool\n  uint256 internal constant MODULE_LIQUDITY_POOL = 41;\n\n  /// @notice TYPE 42: Module: A new Liquidity Pool token\n  uint256 internal constant MODULE_LIQUDITY_POOL_TOKEN = 42;\n}\n\n/**\n * @notice VALIDATOR_STATE keeping track of validators within The Staking Library\n */\nlibrary VALIDATOR_STATE {\n  /// @notice STATE 0: *invalid*\n  uint8 internal constant NONE = 0;\n\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract\n  uint8 internal constant PROPOSED = 1;\n\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator\n  uint8 internal constant ACTIVE = 2;\n\n  /// @notice STATE 3: validator is exited, not currently used much\n  uint8 internal constant EXITED = 3;\n\n  /// @notice STATE 69: proposal was malicious(alien), maybe faulty signatures or probably: (https://bit.ly/3Tkc6UC)\n  uint8 internal constant ALIENATED = 69;\n}\n"
    },
    "contracts/Portal/utils/OracleUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport {ID_TYPE, VALIDATOR_STATE, PERCENTAGE_DENOMINATOR} from \"./globals.sol\";\n\nimport {DataStoreUtils as DSU} from \"./DataStoreUtilsLib.sol\";\nimport {StakeUtils as SU} from \"./StakeUtilsLib.sol\";\nimport {DepositContractUtils as DCU} from \"./DepositContractUtilsLib.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title OracleUtils Library: An extension to StakeUtils Library\n * @notice Oracle, named Telescope, handles some operations for The Staking Library,\n * * using the following logic, which is very simple.\n *\n * @dev Telescope is responsible from 3 tasks:\n * * Updating the on-chain price of all pools with a MerkleRoot\n * * Confirming validator proposals\n * * Regulating the Node Operators\n *\n * 1. reportOracle: Continous Data Flow: Price Merkle Root and MONOPOLY_THRESHOLD\n * * 1. Oracle Nodes calculates the price of its derivative,\n * * * according to the validator data such as balance and fees.\n * * 2. If a pool doesn't have a validator, price is kept the same.\n * * 3. A merkle tree is constructed with the order of allIdsByType array.\n * * 4. A watcher collects all the signatures from Multiple Oracle Nodes, and submits the merkle root.\n * * 5. Anyone can update the price of the derivative\n * * * by calling priceSync() functions with correct merkle proofs\n * * 6. Minting is allowed within PRICE_EXPIRY (24H) after the last price update.\n * * 7. Updates the regulation around Monopolies\n *\n * 2. updateVerificationIndex :Confirming validator proposals\n * * Simply, all proposed validator has an index bound to them,\n * * n representing the latest proposal: (0,n]\n * * Telescope verifies the validator data provided in proposeStake:\n * * especially sig1, sig31 and withdrawal credentials.\n * * Telescope confirms the latest index it verified and states the faulty validator proposals (aliens)\n * * If a validator proposal is faulty then it's state is set to 69.\n * * * 2 step process is essential to prevent the frontrunning\n * * * with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC)\n *\n * 3. regulateOperators: Regulating the Operators\n * * Operators can act faulty in many different ways. To prevent such actions,\n * * Telescope regulates them with well defined limitations.\n * * * Currently only issue is the fee theft, meaning operator have not\n * * * used the withdrawal contract for miner fees or MEV boost.\n * * * * There can be other restrictions in the future.\n *\n * @dev All 3 functions have OracleOnly modifier, priceSync functions do not.\n *\n * @dev first review DataStoreUtils\n * @dev then review StakeUtils\n */\n\nlibrary OracleUtils {\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\n  using DSU for DSU.IsolatedStorage;\n\n  /// @notice Using StakeUtils for PooledStaking struct\n  using SU for SU.PooledStaking;\n\n  /// @notice EVENTS\n  event Alienated(bytes indexed pubkey);\n  event VerificationIndexUpdated(uint256 validatorVerificationIndex);\n  event FeeTheft(uint256 indexed id, bytes proofs);\n  event OracleReported(bytes32 merkleRoot, uint256 monopolyThreshold);\n\n  /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 1% at start.\n  uint256 public constant MONOPOLY_RATIO = (1 * PERCENTAGE_DENOMINATOR) / 100;\n\n  /// @notice sensible value for the total beacon chain validators, no reasoning.\n  uint256 public constant MIN_VALIDATOR_COUNT = 50000;\n\n  modifier onlyOracle(SU.PooledStaking storage STAKER) {\n    require(msg.sender == STAKER.ORACLE_POSITION, \"OU: sender NOT ORACLE\");\n    _;\n  }\n\n  /**\n   * @notice                                     ** VERIFICATION INDEX **\n   **/\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice \"Alien\" is a validator that is created with a faulty withdrawal\n   * credential or signatures, this is a malicious act.\n   * @notice Alienation results in imprisonment for the operator of the faulty validator proposal.\n   * @dev While alienating a validator we should adjust the 'surplus' and 'secured'\n   * balances of the pool accordingly\n   * @dev We should adjust the 'totalProposedValidators', 'proposedValidators' to fix allowances.\n   */\n  function _alienateValidator(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    bytes calldata _pk\n  ) internal {\n    require(\n      STAKER._validators[_pk].state == VALIDATOR_STATE.PROPOSED,\n      \"OU: NOT all pubkeys are pending\"\n    );\n    require(\n      STAKER._validators[_pk].index <= STAKER.VERIFICATION_INDEX,\n      \"OU: unexpected index\"\n    );\n    SU._imprison(DATASTORE, STAKER._validators[_pk].operatorId, _pk);\n\n    uint256 poolId = STAKER._validators[_pk].poolId;\n    DATASTORE.subUint(poolId, \"secured\", DCU.DEPOSIT_AMOUNT);\n    DATASTORE.addUint(poolId, \"surplus\", DCU.DEPOSIT_AMOUNT);\n\n    uint256 operatorId = STAKER._validators[_pk].operatorId;\n    DATASTORE.subUint(operatorId, \"totalProposedValidators\", 1);\n    DATASTORE.subUint(\n      poolId,\n      DSU.getKey(operatorId, \"proposedValidators\"),\n      1\n    );\n\n    STAKER._validators[_pk].state = VALIDATOR_STATE.ALIENATED;\n\n    emit Alienated(_pk);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice Updating VERIFICATION_INDEX, signaling that it is safe to activate\n   * the validator proposals with lower index than new VERIFICATION_INDEX\n   * @param validatorVerificationIndex (inclusive) index of the highest validator that is verified to be activated\n   * @param alienatedPubkeys faulty proposals within the range of new and old verification indexes.\n   */\n  function updateVerificationIndex(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256 validatorVerificationIndex,\n    bytes[] calldata alienatedPubkeys\n  ) external onlyOracle(STAKER) {\n    require(\n      STAKER.VALIDATORS_INDEX >= validatorVerificationIndex,\n      \"OU: high VERIFICATION_INDEX\"\n    );\n    require(\n      validatorVerificationIndex > STAKER.VERIFICATION_INDEX,\n      \"OU: low VERIFICATION_INDEX\"\n    );\n\n    STAKER.VERIFICATION_INDEX = validatorVerificationIndex;\n\n    for (uint256 i; i < alienatedPubkeys.length; ++i) {\n      _alienateValidator(DATASTORE, STAKER, alienatedPubkeys[i]);\n    }\n\n    emit VerificationIndexUpdated(validatorVerificationIndex);\n  }\n\n  /**\n   * @notice                                     ** REGULATING OPERATORS **\n   */\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice regulating operators, currently only regulation is towards fee theft, can add more stuff in the future.\n   * @param feeThefts Operator ids who have stolen MEV or block rewards detected\n   * @param proofs  BlockNumber, tx or any other referance as a proof\n   * @dev Stuff here result in imprisonment\n   */\n  function regulateOperators(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256[] calldata feeThefts,\n    bytes[] calldata proofs\n  ) external onlyOracle(STAKER) {\n    require(feeThefts.length == proofs.length, \"OU: invalid proofs\");\n    for (uint256 i; i < feeThefts.length; ++i) {\n      SU._imprison(DATASTORE, feeThefts[i], proofs[i]);\n\n      emit FeeTheft(feeThefts[i], proofs[i]);\n    }\n  }\n\n  /**\n   * @notice                                     ** CONTINUOUS UPDATES **\n   */\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT.\n   * Then, updates the ORACLE_UPDATE_TIMESTAMP and MONOPOLY_THRESHOLD\n   * @param allValidatorsCount Number of all validators within BeaconChain, all of them.\n   * Prevents monopolies.\n   */\n  function reportOracle(\n    SU.PooledStaking storage STAKER,\n    bytes32 priceMerkleRoot,\n    uint256 allValidatorsCount\n  ) external onlyOracle(STAKER) {\n    require(\n      allValidatorsCount > MIN_VALIDATOR_COUNT,\n      \"OU: low validator count\"\n    );\n\n    STAKER.PRICE_MERKLE_ROOT = priceMerkleRoot;\n    STAKER.ORACLE_UPDATE_TIMESTAMP = block.timestamp;\n\n    uint256 newThreshold = (allValidatorsCount * MONOPOLY_RATIO) /\n      PERCENTAGE_DENOMINATOR;\n    STAKER.MONOPOLY_THRESHOLD = newThreshold;\n\n    emit OracleReported(priceMerkleRoot, newThreshold);\n  }\n\n  /**\n   * @notice                                     ** Updating PricePerShare **\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @dev in order to prevent faulty updates to the derivative prices there are boundaries to price updates.\n   * 1. Price should not be increased more than DAILY_PRICE_INCREASE_LIMIT\n   *  with the factor of how many days since priceUpdateTimestamp has past.\n   * 2. Price should not be decreased more than DAILY_PRICE_DECREASE_LIMIT\n   *  with the factor of how many days since priceUpdateTimestamp has past.\n   */\n  function _sanityCheck(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256 _id,\n    uint256 _newPrice\n  ) internal view {\n    require(\n      DATASTORE.readUint(_id, \"TYPE\") == ID_TYPE.POOL,\n      \"OU: not a pool?\"\n    );\n\n    uint256 lastUpdate = STAKER.gETH.priceUpdateTimestamp(_id);\n    uint256 dayPercentSinceUpdate = ((block.timestamp - lastUpdate) *\n      PERCENTAGE_DENOMINATOR) / 1 days;\n\n    uint256 curPrice = STAKER.gETH.pricePerShare(_id);\n\n    uint256 maxPrice = curPrice +\n      ((curPrice * STAKER.DAILY_PRICE_INCREASE_LIMIT * dayPercentSinceUpdate) /\n        PERCENTAGE_DENOMINATOR) /\n      PERCENTAGE_DENOMINATOR;\n\n    uint256 minPrice = curPrice -\n      ((curPrice * STAKER.DAILY_PRICE_DECREASE_LIMIT * dayPercentSinceUpdate) /\n        PERCENTAGE_DENOMINATOR /\n        PERCENTAGE_DENOMINATOR);\n\n    require(\n      _newPrice >= minPrice && _newPrice <= maxPrice,\n      \"OU: price is insane\"\n    );\n  }\n\n  /**\n   * @notice syncing the price of g-derivatives after checking the merkle proofs and the sanity of the price.\n   * @param _price price of the derivative denominated in gETH.denominator()\n   * @param _priceProof merkle proofs\n   */\n  function _priceSync(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256 _poolId,\n    uint256 _price,\n    bytes32[] calldata _priceProof\n  ) internal {\n    bytes32 leaf = keccak256(\n      bytes.concat(keccak256(abi.encode(_poolId, _price)))\n    );\n    require(\n      MerkleProof.verify(_priceProof, STAKER.PRICE_MERKLE_ROOT, leaf),\n      \"OU: NOT all proofs are valid\"\n    );\n\n    _sanityCheck(DATASTORE, STAKER, _poolId, _price);\n\n    STAKER.gETH.setPricePerShare(_price, _poolId);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice external function to set a derivative price on Portal\n   * @param price price of the derivative denominated in gETH.denominator()\n   * @param priceProof merkle proofs\n   */\n  function priceSync(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256 poolId,\n    uint256 price,\n    bytes32[] calldata priceProof\n  ) external {\n    _priceSync(DATASTORE, STAKER, poolId, price, priceProof);\n  }\n\n  /**\n   * @notice external function to set a multiple derivatives price at once, saves gas.\n   * @param prices price of the derivative denominated in gETH.denominator()\n   * @param priceProofs merkle proofs\n   */\n  function priceSyncBatch(\n    DSU.IsolatedStorage storage DATASTORE,\n    SU.PooledStaking storage STAKER,\n    uint256[] calldata poolIds,\n    uint256[] calldata prices,\n    bytes32[][] calldata priceProofs\n  ) external {\n    require(poolIds.length == prices.length);\n    require(poolIds.length == priceProofs.length);\n    for (uint256 i = 0; i < poolIds.length; ++i) {\n      _priceSync(DATASTORE, STAKER, poolIds[i], prices[i], priceProofs[i]);\n    }\n  }\n}\n"
    },
    "contracts/Portal/utils/StakeUtilsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport {ID_TYPE, VALIDATOR_STATE, PERCENTAGE_DENOMINATOR} from \"./globals.sol\";\n\nimport {DataStoreUtils as DSU} from \"./DataStoreUtilsLib.sol\";\nimport {DepositContractUtils as DCU} from \"./DepositContractUtilsLib.sol\";\n\nimport {IgETH} from \"../../interfaces/IgETH.sol\";\nimport {IWithdrawalContract} from \"../../interfaces/IWithdrawalContract.sol\";\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\nimport {ILPToken} from \"../../interfaces/ILPToken.sol\";\nimport {IWhitelist} from \"../../interfaces/IWhitelist.sol\";\nimport {IgETHInterface} from \"../../interfaces/IgETHInterface.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title The Staking Library\n * @notice Creating a global standard for Staking, allowing anyone to create a trustless staking pool,\n * improving the user experience for stakers and removing the need for intermediaries.\n * * Exclusively contains functions related to:\n * * 1. Modular Architecture of Configurable Staking Pools\n * * 2. Operator Marketplace and Staking Operations.\n * @dev It is important to keep every pool isolated and remember that every validator is unique.\n *\n * @dev Controllers and Maintainers:\n * * CONTROLLER is the owner of an ID, it manages the pool or the operator and its security is exteremely important.\n * * maintainer is the worker, can be used to automate some daily tasks\n * * * like distributing validators for Staking Pools or creating validators for Operators,\n * * * not so crucial in terms of security.\n *\n * @dev Reserved ID_TYPE:\n *\n * USERS:\n *\n * * Type 4 : Permissioned Operators\n * * * Needs to be onboarded by the Dual Governance (Senate + Governance).\n * * * Maintains Beacon Chain Validators on behalf of the Staking Pools.\n * * * Can participate in the Operator Marketplace after initiation.\n * * * Can utilize maintainers for staking operations.\n *\n * * Type 5 : Configurable Staking Pools\n * * * Permissionless to create.\n * * * Can utilize powers of modules such as Bound Liquidity Pools, Interfaces etc.\n * * * Can be public or private, can use a whitelist if private.\n * * * Can utilize maintainers for validator distribution on Operator Marketplace.\n * * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation,\n * * * accruing rewards and keeping Staked Ether safe and isolated.\n *\n * DEFAULT MODULES:\n * * Some Modules has only 1 version that can be used by the Pool Owners.\n *\n * * Type 21 : Withdrawal Contract implementation version\n * * * Mandatory.\n * * * CONTROLLER is the implementation contract position (like always)\n * * * Requires the approval of Senate\n * * * Pools are in \"Recovery Mode\" until their Withdrawal Contract is upgraded.\n * * * * Meaning, no more Depositing or Staking can happen.\n *\n * * Type 41 : Liquidity Pool version\n * * * Optional.\n * * * CONTROLLER is the implementation contract position (like always)\n * * * Requires the approval of Senate.\n * * * Pools can simply deploy the new version of this Module and start using it, if ever changed.\n * * * Liquidity Providers however, need to migrate.\n *\n * * Type 42 : Liquidity Pool Token version\n * * * Optional, dependant to Liquidity Pool Module.\n * * * CONTROLLER is the implementation contract position (like always)\n * * * Requires the approval of Senate\n * * * Crucial to have the same name with the LP version\n *\n * ALLOWED MODULES:\n * * Some Modules can support many different versions that can be used by the Pool Owners.\n *\n * * Type 31 : gETH interface version\n * * * Optional.\n * * * CONTROLLER is the implementation contract position (like always)\n * * * Requires the approval of Senate\n * * * Currently should be utilized on initiation.\n *\n * @dev Contracts relying on this library must initialize StakeUtils.PooledStaking\n * @dev Functions are already protected with authentication\n *\n * @dev first review DataStoreUtils\n * @dev then review GeodeUtils\n */\n\nlibrary StakeUtils {\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\n  using DSU for DSU.IsolatedStorage;\n\n  /// @notice EVENTS\n  event IdInitiated(uint256 indexed id, uint256 indexed TYPE);\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\n  event ValidatorPeriodSwitched(\n    uint256 indexed id,\n    uint256 period,\n    uint256 effectiveAfter\n  );\n  event OperatorApproval(\n    uint256 indexed poolId,\n    uint256 indexed operatorId,\n    uint256 allowance\n  );\n  event Prisoned(uint256 indexed id, bytes proof, uint256 releaseTimestamp);\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\n  event ProposalStaked(\n    uint256 indexed poolId,\n    uint256 operatorId,\n    bytes[] pubkeys\n  );\n  event BeaconStaked(bytes[] pubkeys);\n\n  /**\n   * @param state state of the validator, refer to globals.sol\n   * @param index representing this validator's placement on the chronological order of the validators proposals\n   * @param poolId needed for withdrawal_credential\n   * @param operatorId needed for staking after allowance\n   * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\n   * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\n   * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\n   * @param expectedExit the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\n   * @param signature BLS12-381 signature for the validator, used when sending the remaining 31 ETH on validator activation.\n   **/\n  struct Validator {\n    uint8 state;\n    uint256 index;\n    uint256 poolId;\n    uint256 operatorId;\n    uint256 poolFee;\n    uint256 operatorFee;\n    uint256 earlyExitFee;\n    uint256 createdAt;\n    uint256 expectedExit;\n    bytes signature31;\n  }\n\n  /**\n   * @param gETH ERC1155, Staking Derivatives Token, should NOT be changed.\n   * @param VALIDATORS_INDEX total number of validators that are proposed at any given point.\n   * * Includes all validators: proposed, active, alienated, exited.\n   * @param VERIFICATION_INDEX the highest index of the validators that are verified (as not alien) by the Holy Oracle.\n   * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated by the Holy Oracle.\n   * @param EARLY_EXIT_FEE a parameter to be used while handling the validator exits, currently 0 and logic around it is ambigious.\n   * @param ORACLE_UPDATE_TIMESTAMP timestamp of the latest oracle update\n   * @param DAILY_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval.\n   * @param DAILY_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval.\n   * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool\n   * @param ORACLE_POSITION address of the Oracle multisig https://github.com/Geodefi/Telescope-Eth\n   * @param _defaultModules TYPE => version, pointing to the latest versions of the given TYPE.\n   * * Like default Withdrawal Contract version.\n   * @param _allowedModules TYPE => version => isAllowed, useful to check if any version of the module can be used.\n   * * Like all the whitelisted gETH interfaces.\n   * @param _validators pubkey => Validator, contains all the data about proposed or/and active validators\n   * @param __gap keep the struct size at 16\n   **/\n  struct PooledStaking {\n    IgETH gETH;\n    uint256 VALIDATORS_INDEX;\n    uint256 VERIFICATION_INDEX;\n    uint256 MONOPOLY_THRESHOLD;\n    uint256 EARLY_EXIT_FEE;\n    uint256 ORACLE_UPDATE_TIMESTAMP;\n    uint256 DAILY_PRICE_INCREASE_LIMIT;\n    uint256 DAILY_PRICE_DECREASE_LIMIT;\n    bytes32 PRICE_MERKLE_ROOT;\n    address ORACLE_POSITION;\n    mapping(uint256 => uint256) _defaultModules;\n    mapping(uint256 => mapping(uint256 => bool)) _allowedModules;\n    mapping(bytes => Validator) _validators;\n    uint256[3] __gap;\n  }\n  /**\n   * @notice                                     ** Constants **\n   */\n\n  /// @notice limiting the pool and operator maintenance fee, 10%\n  uint256 public constant MAX_MAINTENANCE_FEE =\n    (PERCENTAGE_DENOMINATOR * 10) / 100;\n\n  /// @notice limiting EARLY_EXIT_FEE, 5%\n  uint256 public constant MAX_EARLY_EXIT_FEE =\n    (PERCENTAGE_DENOMINATOR * 5) / 100;\n\n  /// @notice price of gETH is only valid for 24H, after that minting is not allowed.\n  uint256 public constant PRICE_EXPIRY = 24 hours;\n\n  /// @notice ignoring any buybacks if the Liquidity Pools has a low debt\n  uint256 public constant IGNORABLE_DEBT = 1 ether;\n\n  /// @notice limiting the operator.validatorPeriod, between 3 months to 5 years\n  uint256 public constant MIN_VALIDATOR_PERIOD = 90 days;\n  uint256 public constant MAX_VALIDATOR_PERIOD = 1825 days;\n\n  /// @notice some parameter changes are effective after a delay\n  uint256 public constant SWITCH_LATENCY = 3 days;\n\n  /// @notice limiting the access for Operators in case of bad/malicious/faulty behaviour\n  uint256 public constant PRISON_SENTENCE = 14 days;\n\n  /**\n   * @notice                                     ** AUTHENTICATION **\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice restricts the access to given function based on TYPE and msg.sender\n   * @param expectCONTROLLER restricts the access to only CONTROLLER.\n   * @param expectMaintainer restricts the access to only maintainer.\n   * @param restrictionMap Restricts which TYPEs can pass the authentication 0: Operator = TYPE(4), Pool = TYPE(5)\n   * @dev authenticate can only be used after an ID is initiated\n   * @dev CONTROLLERS and maintainers of the Prisoned Operators can not access.\n   * @dev In principal, CONTROLLER should be able to do anything a maintainer is authenticated to do.\n   */\n  function authenticate(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    bool expectCONTROLLER,\n    bool expectMaintainer,\n    bool[2] memory restrictionMap\n  ) internal view {\n    require(\n      DATASTORE.readUint(id, \"initiated\") != 0,\n      \"SU: ID is not initiated\"\n    );\n\n    uint256 typeOfId = DATASTORE.readUint(id, \"TYPE\");\n\n    if (typeOfId == ID_TYPE.OPERATOR) {\n      require(restrictionMap[0], \"SU: TYPE NOT allowed\");\n      if (expectCONTROLLER || expectMaintainer) {\n        require(\n          !isPrisoned(DATASTORE, id),\n          \"SU: operator is in prison, get in touch with governance\"\n        );\n      }\n    } else if (typeOfId == ID_TYPE.POOL) {\n      require(restrictionMap[1], \"SU: TYPE NOT allowed\");\n    } else revert(\"SU: invalid TYPE\");\n\n    if (expectMaintainer) {\n      require(\n        msg.sender == DATASTORE.readAddress(id, \"maintainer\"),\n        \"SU: sender NOT maintainer\"\n      );\n      return;\n    }\n\n    if (expectCONTROLLER) {\n      require(\n        msg.sender == DATASTORE.readAddress(id, \"CONTROLLER\"),\n        \"SU: sender NOT CONTROLLER\"\n      );\n      return;\n    }\n  }\n\n  /**\n   * @notice                                     ** CONFIGURABLE STAKING POOL MODULES **\n   *\n   * - WithdrawalContracts\n   * - gETHInterfaces\n   * - Bound Liquidity Pools\n   * - Pool visibility (public/private) and using whitelists\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice access all interfaces of a given ID.\n   * @dev for future referance: unsetted interfaces SHOULD return address(0)\n   */\n  function gETHInterfaces(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    uint256 index\n  ) external view returns (address _interface) {\n    _interface = DATASTORE.readAddressArray(id, \"interfaces\", index);\n  }\n\n  /**\n   * @notice returns true if the pool is private\n   */\n  function isPrivatePool(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId\n  ) public view returns (bool) {\n    return (DATASTORE.readUint(poolId, \"private\") == 1);\n  }\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice internal function to set a gETHInterface\n   * @param _interface address of the new gETHInterface for given ID\n   * @dev every interface has a unique index within the \"interfaces\" dynamic array.\n   * @dev on unset, SHOULD replace the implementation with address(0) for obvious security reasons.\n   */\n  function _setInterface(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    address _interface\n  ) internal {\n    require(!self.gETH.isInterface(_interface, id), \"SU: already interface\");\n    DATASTORE.appendAddressArray(id, \"interfaces\", _interface);\n    self.gETH.setInterface(_interface, id, true);\n  }\n\n  /**\n   * @notice deploys a new gETHInterface by cloning the DEFAULT_gETH_INTERFACE\n   * @param _version id, can use any version as an interface that is allowed for TYPE = MODULE_GETH_INTERFACE\n   * @param interface_data interfaces might require additional data on initialization; like name, symbol, etc.\n   * @dev currrently, can NOT deploy an interface after initiation, thus only used by the initiator.\n   * @dev currrently, can NOT unset an interface.\n   */\n  function _deployInterface(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _id,\n    uint256 _version,\n    bytes memory interface_data\n  ) internal {\n    require(\n      self._allowedModules[ID_TYPE.MODULE_GETH_INTERFACE][_version],\n      \"SU: not an interface\"\n    );\n\n    address gInterface = Clones.clone(\n      DATASTORE.readAddress(_version, \"CONTROLLER\")\n    );\n\n    require(\n      IgETHInterface(gInterface).initialize(\n        _id,\n        address(self.gETH),\n        interface_data\n      ),\n      \"SU: could not init interface\"\n    );\n\n    _setInterface(self, DATASTORE, _id, gInterface);\n  }\n\n  /**\n   * @notice Deploys a Withdrawal Contract that will be used as a withdrawal credential on validator creation\n   * @dev using the latest version of the MODULE_WITHDRAWAL_CONTRACT\n   * @dev every pool requires a withdrawal Contract, thus this function is only used by the initiator\n   */\n  function _deployWithdrawalContract(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _id\n  ) internal {\n    require(\n      DATASTORE.readAddress(_id, \"withdrawalContract\") == address(0),\n      \"SU: already has a withdrawal contract\"\n    );\n\n    uint256 version = self._defaultModules[ID_TYPE.MODULE_WITHDRAWAL_CONTRACT];\n\n    address withdrawalContract = address(\n      new ERC1967Proxy(\n        DATASTORE.readAddress(version, \"CONTROLLER\"),\n        abi.encodeWithSelector(\n          IWithdrawalContract(address(0)).initialize.selector,\n          version,\n          _id,\n          self.gETH,\n          address(this),\n          DATASTORE.readAddress(_id, \"CONTROLLER\")\n        )\n      )\n    );\n\n    DATASTORE.writeAddress(_id, \"withdrawalContract\", withdrawalContract);\n\n    DATASTORE.writeBytes(\n      _id,\n      \"withdrawalCredential\",\n      DCU.addressToWC(withdrawalContract)\n    );\n  }\n\n  /**\n   * @dev  ->  public\n   */\n\n  /**\n   * @notice deploys a new liquidity pool using the latest version of MODULE_LIQUDITY_POOL\n   * @dev sets the liquidity pool, LP token and liquidityPoolVersion\n   * @dev gives full allowance to the pool, should not be a problem as portal does not hold any tokens\n   * @param _GOVERNANCE governance address will be the owner of the created pool.\n   * @dev a controller can deploy a liquidity pool after initiation\n   * @dev a controller can deploy a new version of this module, but LPs would need to migrate\n   */\n  function deployLiquidityPool(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    address _GOVERNANCE\n  ) public {\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\n    uint256 lpVersion = self._defaultModules[ID_TYPE.MODULE_LIQUDITY_POOL];\n\n    require(\n      DATASTORE.readUint(poolId, \"liquidityPoolVersion\") != lpVersion,\n      \"SU: already latest version\"\n    );\n\n    address lp = Clones.clone(\n      DATASTORE.readAddress(lpVersion, \"CONTROLLER\")\n    );\n    bytes memory NAME = DATASTORE.readBytes(poolId, \"NAME\");\n\n    require(\n      ISwap(lp).initialize(\n        IgETH(self.gETH),\n        poolId,\n        string(abi.encodePacked(NAME, \"-Geode LP Token\")),\n        string(abi.encodePacked(NAME, \"-LP\")),\n        DATASTORE.readAddress(\n          self._defaultModules[ID_TYPE.MODULE_LIQUDITY_POOL_TOKEN],\n          \"CONTROLLER\"\n        ),\n        _GOVERNANCE\n      ) != address(0),\n      \"SU: could not init liquidity pool\"\n    );\n\n    // approve token so we can use it in buybacks\n    self.gETH.setApprovalForAll(lp, true);\n\n    DATASTORE.writeUint(poolId, \"liquidityPoolVersion\", lpVersion);\n    DATASTORE.writeAddress(poolId, \"liquidityPool\", lp);\n  }\n\n  /**\n   * @notice changes the visibility of the pool\n   * @param isPrivate true if pool should be private, false for public pools\n   * Note private pools can whitelist addresses with the help of a third party contract.\n   */\n  function setPoolVisibility(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    bool isPrivate\n  ) public {\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\n\n    require(isPrivate != isPrivatePool(DATASTORE, poolId), \"SU: already set\");\n\n    DATASTORE.writeUint(poolId, \"private\", isPrivate ? 1 : 0);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice private pools can whitelist addresses with the help of a third party contract\n   * @dev Whitelisting contracts should implement IWhitelist interface.\n   */\n  function setWhitelist(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    address whitelist\n  ) external {\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\n    require(isPrivatePool(DATASTORE, poolId), \"SU: must be private pool\");\n    DATASTORE.writeAddress(poolId, \"whitelist\", whitelist);\n  }\n\n  /**\n   * @notice                                     ** INITIATORS **\n   *\n   * IDs that are occupied by a user should be initiated to be activated\n   * - Operators need to onboarded by the Dual Governance to be able to initiate an ID.\n   * - Pools are permissionless, calling the initiator will immediately activate the pool.\n   */\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice initiates ID as a Permissionned Node Operator\n   * @notice requires ID to be approved as a node operator with a specific CONTROLLER\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\n   * @param validatorPeriod the expected maximum staking interval. This value should between\n   * * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above.\n   * Operator can unstake at any given point before this period ends.\n   * If operator disobeys this rule, it can be prisoned with blameOperator()\n   * @param maintainer an address that automates daily operations, a script, a contract...\n   * @dev operators can fund their internal wallet on initiation by simply sending some ether.\n   */\n  function initiateOperator(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    uint256 fee,\n    uint256 validatorPeriod,\n    address maintainer\n  ) external {\n    require(\n      DATASTORE.readUint(id, \"initiated\") == 0,\n      \"SU: already initiated\"\n    );\n\n    require(\n      DATASTORE.readUint(id, \"TYPE\") == ID_TYPE.OPERATOR,\n      \"SU: TYPE NOT allowed\"\n    );\n\n    require(\n      msg.sender == DATASTORE.readAddress(id, \"CONTROLLER\"),\n      \"SU: sender NOT CONTROLLER\"\n    );\n\n    _setMaintainer(DATASTORE, id, maintainer);\n    _setMaintenanceFee(DATASTORE, id, fee);\n    _setValidatorPeriod(DATASTORE, id, validatorPeriod);\n\n    _increaseWalletBalance(DATASTORE, id, msg.value);\n\n    DATASTORE.writeUint(id, \"initiated\", block.timestamp);\n    emit IdInitiated(id, ID_TYPE.OPERATOR);\n  }\n\n  /**\n   * @notice Creates a Configurable Trustless Staking Pool!\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\n   * @param interfaceVersion Pool creators can choose any allowed version as their gETHInterface\n   * @param maintainer an address that automates daily operations, a script, a contract... not really powerful.\n   * @param _GOVERNANCE needed in case the Pool is configured with a Bound Liquidity Pool\n   * @param NAME used to generate an ID for the Pool\n   * @param interface_data interfaces might require additional data on initialization; like name, symbol, etc.\n   * @param config [private(true) or public(false), deploying an interface with given version, deploying liquidity pool with latest version]\n   * @dev checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.\n   * @dev requires exactly 1 validator worth of funds to be deposited on initiation - to prevent sybil attacks\n   */\n  function initiatePool(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 fee,\n    uint256 interfaceVersion,\n    address maintainer,\n    address _GOVERNANCE,\n    bytes calldata NAME,\n    bytes calldata interface_data,\n    bool[3] calldata config\n  ) external {\n    require(\n      msg.value == DCU.DEPOSIT_AMOUNT,\n      \"SU: requires 1 validator worth of Ether\"\n    );\n\n    uint256 id = DSU.generateId(NAME, ID_TYPE.POOL);\n\n    require(id > 10 ** 7, \"SU: Wow! low id\");\n\n    require(\n      DATASTORE.readUint(id, \"initiated\") == 0,\n      \"SU: already initiated\"\n    );\n    DATASTORE.writeUint(id, \"TYPE\", ID_TYPE.POOL);\n    DATASTORE.writeAddress(id, \"CONTROLLER\", msg.sender);\n    DATASTORE.writeBytes(id, \"NAME\", NAME);\n    DATASTORE.writeUint(id, \"initiated\", block.timestamp);\n    DATASTORE.allIdsByType[ID_TYPE.POOL].push(id);\n\n    _setMaintainer(DATASTORE, id, maintainer);\n    _setMaintenanceFee(DATASTORE, id, fee);\n\n    _deployWithdrawalContract(self, DATASTORE, id);\n    if (config[0]) setPoolVisibility(DATASTORE, id, true);\n    if (config[1])\n      _deployInterface(self, DATASTORE, id, interfaceVersion, interface_data);\n    if (config[2]) deployLiquidityPool(self, DATASTORE, id, _GOVERNANCE);\n\n    // initially 1 ETHER = 1 ETHER\n    self.gETH.setPricePerShare(1 ether, id);\n\n    // mint gETH and send back to the caller\n    uint256 mintedgETH = _mintgETH(self, DATASTORE, id, DCU.DEPOSIT_AMOUNT);\n    self.gETH.safeTransferFrom(address(this), msg.sender, id, mintedgETH, \"\");\n\n    emit IdInitiated(id, ID_TYPE.POOL);\n  }\n\n  /**\n   * @notice                                     ** MAINTAINERS **\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice Set the maintainer address on initiation or later\n   * @param newMaintainer address of the new maintainer\n   */\n  function _setMaintainer(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    address newMaintainer\n  ) internal {\n    require(newMaintainer != address(0), \"SU: maintainer can NOT be zero\");\n\n    address currentMaintainer = DATASTORE.readAddress(id, \"maintainer\");\n\n    require(\n      currentMaintainer != newMaintainer,\n      \"SU: provided the current maintainer\"\n    );\n\n    DATASTORE.writeAddress(id, \"maintainer\", newMaintainer);\n    emit MaintainerChanged(id, newMaintainer);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n  /**\n   * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\n   * @dev there can only be 1 maintainer per ID.\n   * @dev it is wise to change the maintainer before the CONTROLLER, in case of any migration\n   */\n  function changeMaintainer(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    address newMaintainer\n  ) external {\n    authenticate(DATASTORE, id, true, false, [true, true]);\n    _setMaintainer(DATASTORE, id, newMaintainer);\n  }\n\n  /**\n   * @notice                                     ** MAINTENANCE FEE **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\n   * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100\n   */\n  function getMaintenanceFee(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id\n  ) public view returns (uint256 fee) {\n    if (DATASTORE.readUint(id, \"feeSwitch\") > block.timestamp) {\n      return DATASTORE.readUint(id, \"priorFee\");\n    }\n    return DATASTORE.readUint(id, \"fee\");\n  }\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice  internal function to set fee with NO DELAY\n   */\n  function _setMaintenanceFee(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _id,\n    uint256 _newFee\n  ) internal {\n    require(_newFee <= MAX_MAINTENANCE_FEE, \"SU: > MAX_MAINTENANCE_FEE \");\n    DATASTORE.writeUint(_id, \"fee\", _newFee);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\n   * Note Can NOT be called again while its currently switching.\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\n   */\n  function switchMaintenanceFee(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    uint256 newFee\n  ) external {\n    authenticate(DATASTORE, id, true, false, [true, true]);\n\n    require(\n      block.timestamp > DATASTORE.readUint(id, \"feeSwitch\"),\n      \"SU: fee is currently switching\"\n    );\n\n    DATASTORE.writeUint(\n      id,\n      \"priorFee\",\n      DATASTORE.readUint(id, \"fee\")\n    );\n    DATASTORE.writeUint(id, \"feeSwitch\", block.timestamp + SWITCH_LATENCY);\n\n    _setMaintenanceFee(DATASTORE, id, newFee);\n\n    emit FeeSwitched(id, newFee, block.timestamp + SWITCH_LATENCY);\n  }\n\n  /**\n   * @notice                                     ** INTERNAL WALLET **\n   *\n   * Internal wallet of an ID accrues fees over time.\n   * It is also used by Node Operators to fund 1 ETH per validator proposal, which is reimbursed if/when activated.\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice Simply increases the balance of an IDs Maintainer wallet\n   * @param _value Ether (in Wei) amount to increase the wallet balance.\n   * @return success if the amount was deducted\n   */\n  function _increaseWalletBalance(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _id,\n    uint256 _value\n  ) internal returns (bool success) {\n    DATASTORE.addUint(_id, \"wallet\", _value);\n    return true;\n  }\n\n  /**\n   * @notice To decrease the balance of an Operator's wallet internally\n   * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\n   */\n  function _decreaseWalletBalance(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _id,\n    uint256 _value\n  ) internal returns (bool success) {\n    require(\n      DATASTORE.readUint(_id, \"wallet\") >= _value,\n      \"SU: NOT enough funds in wallet\"\n    );\n    DATASTORE.subUint(_id, \"wallet\", _value);\n    return true;\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice external function to increase the internal wallet balance\n   * @dev anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\n   */\n  function increaseWalletBalance(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id\n  ) external returns (bool success) {\n    authenticate(DATASTORE, id, false, false, [true, true]);\n    return _increaseWalletBalance(DATASTORE, id, msg.value);\n  }\n\n  /**\n   * @notice external function to decrease the internal wallet balance\n   * @dev only CONTROLLER can decrease the balance externally,\n   * @return success if the amount was sent and deducted\n   */\n  function decreaseWalletBalance(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 id,\n    uint256 value\n  ) external returns (bool success) {\n    authenticate(DATASTORE, id, true, false, [true, true]);\n\n    require(address(this).balance >= value, \"SU: not enough funds in Portal ?\");\n\n    bool decreased = _decreaseWalletBalance(DATASTORE, id, value);\n\n    (bool sent, ) = payable(DATASTORE.readAddress(id, \"CONTROLLER\")).call{\n      value: value\n    }(\"\");\n    require(decreased && sent, \"SU: Failed to send ETH\");\n    return sent;\n  }\n\n  /**\n   * @notice                                     ** PRISON **\n   *\n   * When node operators act in a malicious way, which can also be interpereted as\n   * an honest mistake like using a faulty signature, Oracle imprisons the operator.\n   * These conditions are:\n   * * 1. Created a malicious validator(alien): faulty withdrawal credential, faulty signatures etc.\n   * * 2. Have not respect the validatorPeriod\n   * * 3. Stole block fees or MEV boost rewards from the pool\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice Checks if the given operator is Prisoned\n   * @dev \"released\" key refers to the end of the last imprisonment, when the limitations of operator is lifted\n   */\n  function isPrisoned(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _operatorId\n  ) public view returns (bool) {\n    return (block.timestamp < DATASTORE.readUint(_operatorId, \"released\"));\n  }\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice Put an operator in prison\n   * @dev \"released\" key refers to the end of the last imprisonment, when the limitations of operator is lifted\n   */\n  function _imprison(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _operatorId,\n    bytes calldata proof\n  ) internal {\n    authenticate(DATASTORE, _operatorId, false, false, [true, false]);\n\n    DATASTORE.writeUint(\n      _operatorId,\n      \"released\",\n      block.timestamp + PRISON_SENTENCE\n    );\n\n    emit Prisoned(_operatorId, proof, block.timestamp + PRISON_SENTENCE);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice allows imprisoning an Operator if the validator have not been exited until expectedExit\n   * @dev anyone can call this function\n   * @dev if operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned\n   */\n  function blameOperator(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    bytes calldata pk\n  ) external {\n    require(\n      self._validators[pk].state == VALIDATOR_STATE.ACTIVE,\n      \"SU: validator is never activated\"\n    );\n    require(\n      block.timestamp > self._validators[pk].expectedExit,\n      \"SU: validator is still active\"\n    );\n\n    _imprison(DATASTORE, self._validators[pk].operatorId, pk);\n  }\n\n  /**\n   * @notice                                     ** OPERATOR FUNCTIONS **\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice internal function to set validator period with NO DELAY\n   */\n  function _setValidatorPeriod(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _operatorId,\n    uint256 _newPeriod\n  ) internal {\n    require(\n      _newPeriod >= MIN_VALIDATOR_PERIOD,\n      \"SU: should be more than MIN_VALIDATOR_PERIOD\"\n    );\n\n    require(\n      _newPeriod <= MAX_VALIDATOR_PERIOD,\n      \"SU: should be less than MAX_VALIDATOR_PERIOD\"\n    );\n\n    DATASTORE.writeUint(_operatorId, \"validatorPeriod\", _newPeriod);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\n   * @dev limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\n   */\n  function switchValidatorPeriod(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 operatorId,\n    uint256 newPeriod\n  ) external {\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\n\n    require(\n      block.timestamp > DATASTORE.readUint(operatorId, \"periodSwitch\"),\n      \"SU: period is currently switching\"\n    );\n\n    DATASTORE.writeUint(\n      operatorId,\n      \"priorPeriod\",\n      DATASTORE.readUint(operatorId, \"validatorPeriod\")\n    );\n    DATASTORE.writeUint(\n      operatorId,\n      \"periodSwitch\",\n      block.timestamp + SWITCH_LATENCY\n    );\n\n    _setValidatorPeriod(DATASTORE, operatorId, newPeriod);\n\n    emit ValidatorPeriodSwitched(\n      operatorId,\n      newPeriod,\n      block.timestamp + SWITCH_LATENCY\n    );\n  }\n\n  /**\n   * @notice                                     ** OPERATOR MARKETPLACE **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /** *\n   * @notice operatorAllowance is the maximum number of validators that the given Operator is allowed to create on behalf of the Pool\n   * @dev an operator can not create new validators if:\n   * * 1. allowance is 0 (zero)\n   * * 2. lower than the current (proposed + active) number of validators\n   * * But if operator withdraws a validator, then able to create a new one.\n   * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowance\n   * @dev allowance doesn't change when new validators created or old ones are unstaked.\n   */\n  function operatorAllowance(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256 operatorId\n  ) public view returns (uint256 allowance) {\n    allowance = DATASTORE.readUint(\n      poolId,\n      DSU.getKey(operatorId, \"allowance\")\n    );\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice To allow a Node Operator run validators for your Pool with a given number of validators.\n   * * This number can be set again at any given point in the future.\n   * @param poolId the gETH id of the Pool\n   * @param operatorIds array of Operator IDs to allow them create validators\n   * @param allowances the MAX number of validators that can be created by the Operator, for given Pool\n   * @dev When decreased the approved validator count below current active+proposed validators,\n   * operator can NOT create new validators.\n   */\n  function batchApproveOperators(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256[] calldata operatorIds,\n    uint256[] calldata allowances\n  ) external returns (bool) {\n    authenticate(DATASTORE, poolId, true, true, [false, true]);\n\n    require(\n      operatorIds.length == allowances.length,\n      \"SU: allowances should match\"\n    );\n\n    for (uint256 i = 0; i < operatorIds.length; ) {\n      authenticate(DATASTORE, operatorIds[i], false, false, [true, false]);\n\n      DATASTORE.writeUint(\n        poolId,\n        DSU.getKey(operatorIds[i], \"allowance\"),\n        allowances[i]\n      );\n\n      emit OperatorApproval(poolId, operatorIds[i], allowances[i]);\n\n      unchecked {\n        i += 1;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @notice                                     ** POOL HELPERS **\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice returns WithdrawalContract as a contract\n   */\n  function withdrawalContractById(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId\n  ) public view returns (IWithdrawalContract) {\n    return\n      IWithdrawalContract(\n        DATASTORE.readAddress(poolId, \"withdrawalContract\")\n      );\n  }\n\n  /**\n   * @notice returns liquidityPool as a contract\n   */\n  function liquidityPoolById(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 _poolId\n  ) public view returns (ISwap) {\n    return ISwap(DATASTORE.readAddress(_poolId, \"liquidityPool\"));\n  }\n\n  /**\n   * @notice checks if the Whitelist allows staker to use given private pool\n   * @dev Owner of the pool doesn't need whitelisting\n   * @dev Otherwise requires a whitelisting address to be set\n   * todo: add to portal\n   */\n  function isWhitelisted(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    address staker\n  ) public view returns (bool) {\n    if (DATASTORE.readAddress(poolId, \"CONTROLLER\") == msg.sender)\n      return true;\n\n    address whitelist = DATASTORE.readAddress(poolId, \"whitelist\");\n    require(whitelist != address(0), \"SU: this pool does not have whitelist\");\n\n    return IWhitelist(whitelist).isAllowed(staker);\n  }\n\n  /**\n   * @notice returns true if the price is valid:\n   * - last price syncinc happened less than 24h\n   * - there has been no oracle reports since the last update\n   *\n   * @dev known bug / feature: if there have been no oracle updates,\n   * * this function will return true.\n   *\n   * lastupdate + PRICE_EXPIRY >= block.timestamp ? true\n   *    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true\n   *    : false\n   */\n  function isPriceValid(\n    PooledStaking storage self,\n    uint256 poolId\n  ) public view returns (bool isValid) {\n    uint256 lastupdate = self.gETH.priceUpdateTimestamp(poolId);\n    unchecked {\n      isValid =\n        lastupdate + PRICE_EXPIRY >= block.timestamp ||\n        lastupdate >= self.ORACLE_UPDATE_TIMESTAMP;\n    }\n  }\n\n  /**\n   * @notice checks if staking is allowed in given staking pool\n   * @notice staking is not allowed if:\n   * 1. Price is not valid\n   * 2. WithdrawalContract is in Recovery Mode, can have many reasons\n   */\n  function isMintingAllowed(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId\n  ) public view returns (bool) {\n    return\n      isPriceValid(self, poolId) &&\n      !(withdrawalContractById(DATASTORE, poolId).recoveryMode());\n  }\n\n  /**\n   * @notice                                     ** POOLING OPERATIONS **\n   */\n\n  /**\n   * @dev  ->  internal\n   */\n\n  /**\n   * @notice mints gETH for a given ETH amount, keeps the tokens in Portal.\n   * @dev fails if the price if minting is not allowed\n   */\n  function _mintgETH(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256 ethAmount\n  ) internal returns (uint256 mintedgETH) {\n    require(\n      isMintingAllowed(self, DATASTORE, poolId),\n      \"SU: minting is not allowed\"\n    );\n\n    mintedgETH = (\n      ((ethAmount * self.gETH.denominator()) / self.gETH.pricePerShare(poolId))\n    );\n\n    self.gETH.mint(address(this), poolId, mintedgETH, \"\");\n    DATASTORE.addUint(poolId, \"surplus\", ethAmount);\n  }\n\n  /**\n   * @notice conducts a buyback using the given liquidity pool\n   * @param poolId id of the gETH that will be bought\n   * @param sellEth ETH amount to sell\n   * @param minToBuy TX is expected to revert by Swap.sol if not meet\n   * @param deadline TX is expected to revert by Swap.sol if not meet\n   * @dev this function assumes that pool is deployed by deployLiquidityPool\n   * as index 0 is ETH and index 1 is gETH!\n   */\n  function _buyback(\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256 sellEth,\n    uint256 minToBuy,\n    uint256 deadline\n  ) internal returns (uint256 outAmount) {\n    // SWAP in LP\n    outAmount = liquidityPoolById(DATASTORE, poolId).swap{value: sellEth}(\n      0,\n      1,\n      sellEth,\n      minToBuy,\n      deadline\n    );\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice Allowing users to deposit into a staking pool.\n   * @notice If a pool is not public only the maintainer can deposit.\n   * @param poolId id of the staking pool, liquidity pool and gETH to be used.\n   * @param mingETH liquidity pool parameter\n   * @param deadline liquidity pool parameter\n   * @dev an example for minting + buybacks\n   * * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\n   * // debt  msgValue\n   * // 100   10  => buyback\n   * // 100   100 => buyback\n   * // 10    100 => buyback + mint\n   * // 1     x   => mint\n   * // 0.5   x   => mint\n   * // 0     x   => mint\n   */\n  function deposit(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256 mingETH,\n    uint256 deadline,\n    address receiver\n  ) external returns (uint256 boughtgETH, uint256 mintedgETH) {\n    authenticate(DATASTORE, poolId, false, false, [false, true]);\n    require(deadline > block.timestamp, \"SU: deadline not met\");\n    require(receiver != address(0), \"SU: receiver is zero address\");\n\n    if (isPrivatePool(DATASTORE, poolId))\n      require(\n        isWhitelisted(DATASTORE, poolId, msg.sender),\n        \"SU: sender NOT whitelisted\"\n      );\n\n    uint256 remEth = msg.value;\n\n    if (DATASTORE.readAddress(poolId, \"liquidityPool\") != address(0)) {\n      uint256 debt = liquidityPoolById(DATASTORE, poolId).getDebt();\n      if (debt > IGNORABLE_DEBT) {\n        if (debt < remEth) {\n          boughtgETH = _buyback(DATASTORE, poolId, debt, 0, deadline);\n          remEth -= debt;\n        } else {\n          boughtgETH = _buyback(DATASTORE, poolId, remEth, mingETH, deadline);\n          remEth = 0;\n        }\n      }\n    }\n\n    if (remEth > 0) mintedgETH = _mintgETH(self, DATASTORE, poolId, remEth);\n    require(boughtgETH + mintedgETH >= mingETH, \"SU: less than minimum\");\n\n    // send back to user\n    self.gETH.safeTransferFrom(\n      address(this),\n      receiver,\n      poolId,\n      boughtgETH + mintedgETH,\n      \"\"\n    );\n\n    emit Deposit(poolId, boughtgETH, mintedgETH);\n  }\n\n  /**\n   * @notice                                     ** VALIDATOR OPERATIONS **\n   *\n   * Creation of a Validator takes 2 steps: propose and beacon stake.\n   * Before entering beaconStake function, _canStake verifies the eligibility of\n   * given pubKey that is proposed by an operator with proposeStake function.\n   * Eligibility is defined by an optimistic alienation, check alienate() for info.\n   */\n\n  /**\n   * @dev  ->  view\n   */\n\n  /**\n   * @notice internal function to check if a validator can use the pool funds\n   *\n   *  @param pubkey BLS12-381 public key of the validator\n   *  @return true if:\n   *   - pubkey should be proposed\n   *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\n   *   - validator's index should be lower than VERIFICATION_INDEX. Updated by Telescope.\n   * Note: TODO while distributing the rewards, if a validator has 1 Eth, it is safe to assume that the balance belongs to Operator\n   */\n  function _canStake(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    bytes calldata pubkey,\n    uint256 verificationIndex\n  ) internal view returns (bool) {\n    return\n      (self._validators[pubkey].state == VALIDATOR_STATE.PROPOSED &&\n        self._validators[pubkey].index <= verificationIndex) &&\n      !(\n        withdrawalContractById(DATASTORE, self._validators[pubkey].poolId)\n          .recoveryMode()\n      );\n  }\n\n  /**\n   * @notice external function to check if a validator can use the pool funds\n   */\n  function canStake(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    bytes calldata pubkey\n  ) external view returns (bool) {\n    return _canStake(self, DATASTORE, pubkey, self.VERIFICATION_INDEX);\n  }\n\n  /**\n   * @dev  ->  external\n   */\n\n  /**\n   * @notice Helper Struct to pack constant data that does not change per validator.\n   * * needed for that famous Solidity feature.\n   */\n  struct constantValidatorData {\n    uint256 index;\n    uint256 poolFee;\n    uint256 operatorFee;\n    uint256 earlyExitFee;\n    uint256 expectedExit;\n    bytes withdrawalCredential;\n  }\n\n  /**\n   * @notice Validator Credentials Proposal function, first step of crating validators.\n   * * Once a pubKey is proposed and not alienated after verificationIndex updated,\n   * * it is optimistically allowed to take funds from staking pools.\n   *\n   * @param poolId the id of the staking pool\n   * @param operatorId the id of the Operator whose maintainer calling this function\n   * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\n   * @param signatures1 Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's\n   * maintainer balance\n   * @param signatures31 Array of BLS12-381 signatures that will be used to send 31 ETH from pool on beaconStake\n   *\n   * @dev DCU.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCU.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator.\n   * 31 Ether will be staked after verification of oracles. 32 in total.\n   * 1 ether will be sent back to Node Operator when the finalized deposit is successful.\n   * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\n   * @dev ProposeStake requires enough funds within Wallet.\n   * @dev Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 64)\n   */\n  function proposeStake(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 poolId,\n    uint256 operatorId,\n    bytes[] calldata pubkeys,\n    bytes[] calldata signatures1,\n    bytes[] calldata signatures31\n  ) external {\n    // checks and effects\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\n    authenticate(DATASTORE, poolId, false, false, [false, true]);\n    {\n      uint256 pkLen = pubkeys.length;\n\n      require(\n        pkLen > 0 && pkLen <= DCU.MAX_DEPOSITS_PER_CALL,\n        \"SU: MAX 50 nodes per call\"\n      );\n      require(pkLen == signatures1.length, \"SU: invalid signatures1 length\");\n      require(pkLen == signatures31.length, \"SU: invalid signatures31 length\");\n\n      unchecked {\n        require(\n          (DATASTORE.readUint(operatorId, \"totalActiveValidators\") +\n            DATASTORE.readUint(operatorId, \"totalProposedValidators\") +\n            pkLen) <= self.MONOPOLY_THRESHOLD,\n          \"SU: IceBear does NOT like monopolies\"\n        );\n\n        require(\n          (DATASTORE.readUint(\n            poolId,\n            DSU.getKey(operatorId, \"proposedValidators\")\n          ) +\n            DATASTORE.readUint(\n              poolId,\n              DSU.getKey(operatorId, \"activeValidators\")\n            ) +\n            pkLen) <= operatorAllowance(DATASTORE, poolId, operatorId),\n          \"SU: NOT enough allowance\"\n        );\n\n        require(\n          DATASTORE.readUint(poolId, \"surplus\") >=\n            DCU.DEPOSIT_AMOUNT * pkLen,\n          \"SU: NOT enough surplus\"\n        );\n      }\n\n      _decreaseWalletBalance(\n        DATASTORE,\n        operatorId,\n        (pkLen * DCU.DEPOSIT_AMOUNT_PRESTAKE)\n      );\n\n      DATASTORE.subUint(poolId, \"surplus\", (pkLen * DCU.DEPOSIT_AMOUNT));\n\n      DATASTORE.addUint(poolId, \"secured\", (pkLen * DCU.DEPOSIT_AMOUNT));\n\n      DATASTORE.addUint(\n        poolId,\n        DSU.getKey(operatorId, \"proposedValidators\"),\n        pkLen\n      );\n\n      DATASTORE.addUint(operatorId, \"totalProposedValidators\", pkLen);\n    }\n\n    constantValidatorData memory valData = constantValidatorData({\n      index: self.VALIDATORS_INDEX + 1,\n      poolFee: getMaintenanceFee(DATASTORE, poolId),\n      operatorFee: getMaintenanceFee(DATASTORE, operatorId),\n      earlyExitFee: self.EARLY_EXIT_FEE,\n      expectedExit: block.timestamp +\n        DATASTORE.readUint(operatorId, \"validatorPeriod\"),\n      withdrawalCredential: DATASTORE.readBytes(\n        poolId,\n        \"withdrawalCredential\"\n      )\n    });\n\n    for (uint256 i; i < pubkeys.length; ) {\n      require(\n        self._validators[pubkeys[i]].state == VALIDATOR_STATE.NONE,\n        \"SU: Pubkey already used or alienated\"\n      );\n      require(\n        pubkeys[i].length == DCU.PUBKEY_LENGTH,\n        \"SU: PUBKEY_LENGTH ERROR\"\n      );\n      require(\n        signatures1[i].length == DCU.SIGNATURE_LENGTH,\n        \"SU: SIGNATURE_LENGTH ERROR\"\n      );\n\n      require(\n        signatures31[i].length == DCU.SIGNATURE_LENGTH,\n        \"SU: SIGNATURE_LENGTH ERROR\"\n      );\n\n      self._validators[pubkeys[i]] = Validator(\n        1,\n        valData.index + i,\n        poolId,\n        operatorId,\n        valData.poolFee,\n        valData.operatorFee,\n        valData.earlyExitFee,\n        block.timestamp,\n        valData.expectedExit,\n        signatures31[i]\n      );\n\n      DCU.depositValidator(\n        pubkeys[i],\n        valData.withdrawalCredential,\n        signatures1[i],\n        DCU.DEPOSIT_AMOUNT_PRESTAKE\n      );\n\n      unchecked {\n        i += 1;\n      }\n    }\n\n    self.VALIDATORS_INDEX += pubkeys.length;\n\n    emit ProposalStaked(poolId, operatorId, pubkeys);\n  }\n\n  /**\n   *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\n   *  1 Eth per successful validator boostraping is returned back to Wallet.\n   *\n   *  @param operatorId the id of the Operator whose maintainer calling this function\n   *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\n   *\n   *  @dev To save gas cost, pubkeys should be arranged by poolIds.\n   *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\n   *  pk1, pk2, pk3 from pool1\n   *  pk4, pk5 from pool2\n   *  pk6 from pool3\n   *  seperate them in similar groups as much as possible.\n   *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)\n   *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\n   */\n  function beaconStake(\n    PooledStaking storage self,\n    DSU.IsolatedStorage storage DATASTORE,\n    uint256 operatorId,\n    bytes[] calldata pubkeys\n  ) external {\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\n\n    require(\n      pubkeys.length > 0 && pubkeys.length <= DCU.MAX_DEPOSITS_PER_CALL,\n      \"SU: MAX 50 nodes\"\n    );\n\n    {\n      uint256 verificationIndex = self.VERIFICATION_INDEX;\n      for (uint256 j; j < pubkeys.length; ) {\n        require(\n          _canStake(self, DATASTORE, pubkeys[j], verificationIndex),\n          \"SU: NOT all pubkeys are stakeable\"\n        );\n        unchecked {\n          j += 1;\n        }\n      }\n    }\n\n    {\n      bytes32 activeValKey = DSU.getKey(operatorId, \"activeValidators\");\n      bytes32 proposedValKey = DSU.getKey(operatorId, \"proposedValidators\");\n\n      uint256 poolId = self._validators[pubkeys[0]].poolId;\n\n      bytes memory withdrawalCredential = DATASTORE.readBytes(\n        poolId,\n        \"withdrawalCredential\"\n      );\n\n      uint256 lastIdChange;\n      for (uint256 i; i < pubkeys.length; ) {\n        if (poolId != self._validators[pubkeys[i]].poolId) {\n          uint256 sinceLastIdChange;\n\n          unchecked {\n            sinceLastIdChange = i - lastIdChange;\n          }\n\n          DATASTORE.subUint(\n            poolId,\n            \"secured\",\n            (DCU.DEPOSIT_AMOUNT * (sinceLastIdChange))\n          );\n          DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\n          DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\n\n          poolId = self._validators[pubkeys[i]].poolId;\n          withdrawalCredential = DATASTORE.readBytes(\n            poolId,\n            \"withdrawalCredential\"\n          );\n          lastIdChange = i;\n        }\n\n        bytes memory signature = self._validators[pubkeys[i]].signature31;\n\n        DCU.depositValidator(\n          pubkeys[i],\n          withdrawalCredential,\n          signature,\n          DCU.DEPOSIT_AMOUNT - DCU.DEPOSIT_AMOUNT_PRESTAKE\n        );\n\n        DATASTORE.appendBytesArray(poolId, \"validators\", pubkeys[i]);\n        self._validators[pubkeys[i]].state = VALIDATOR_STATE.ACTIVE;\n        unchecked {\n          i += 1;\n        }\n      }\n      {\n        uint256 sinceLastIdChange;\n        unchecked {\n          sinceLastIdChange = pubkeys.length - lastIdChange;\n        }\n\n        DATASTORE.subUint(\n          poolId,\n          \"secured\",\n          DCU.DEPOSIT_AMOUNT * (sinceLastIdChange)\n        );\n        DATASTORE.addUint(poolId, activeValKey, (sinceLastIdChange));\n        DATASTORE.subUint(poolId, proposedValKey, (sinceLastIdChange));\n\n        DATASTORE.addUint(\n          operatorId,\n          \"totalActiveValidators\",\n          pubkeys.length\n        );\n        DATASTORE.subUint(\n          operatorId,\n          \"totalProposedValidators\",\n          pubkeys.length\n        );\n        _increaseWalletBalance(\n          DATASTORE,\n          operatorId,\n          DCU.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length\n        );\n      }\n      emit BeaconStaked(pubkeys);\n    }\n  }\n}\n"
    },
    "contracts/Portal/withdrawalContract/WithdrawalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {ID_TYPE} from \"../utils/globals.sol\";\nimport {DataStoreUtils} from \"../utils/DataStoreUtilsLib.sol\";\nimport {GeodeUtils} from \"../utils/GeodeUtilsLib.sol\";\n\nimport {IgETH} from \"../../interfaces/IgETH.sol\";\nimport {IPortal} from \"../../interfaces/IPortal.sol\";\nimport {IWithdrawalContract} from \"../../interfaces/IWithdrawalContract.sol\";\nimport \"hardhat/console.sol\";\n\n/**\n * @author Icebear & Crash Bandicoot\n * @title WithdrawalContract: Saviour of Trustless Staking Derivatives\n * @notice This is a simple contract:\n * - used as the withdrawal credential of the validators.\n * - accrues fees and rewards from validators over time.\n * - handles the withdrawal queue for stakers.\n * - manages its own versioning without trusting Portal.\n * @dev This contract utilizes Dual Governance between Portal (GOVERNANCE) and \n the Pool Owner (SENATE) to empower the Limited Upgradability.\n *\n * @dev Recovery Mode stops pool operations while allowing withdrawal queue to operate as usual\n *\n * @dev todo: Withdrawal Queue\n */\n\ncontract WithdrawalContract is\n  IWithdrawalContract,\n  ReentrancyGuardUpgradeable,\n  PausableUpgradeable,\n  UUPSUpgradeable\n{\n  using DataStoreUtils for DataStoreUtils.IsolatedStorage;\n  using GeodeUtils for GeodeUtils.DualGovernance;\n\n  ///@notice Events\n  event ControllerChanged(uint256 id, address newCONTROLLER);\n  event Proposed(\n    uint256 id,\n    address CONTROLLER,\n    uint256 TYPE,\n    uint256 deadline\n  );\n  event ProposalApproved(uint256 id);\n  event NewSenate(address senate, uint256 senateExpiry);\n\n  event ContractVersionSet(uint256 version);\n\n  ///@notice Variables\n  DataStoreUtils.IsolatedStorage private DATASTORE;\n  GeodeUtils.DualGovernance private GEM;\n  address internal gETH;\n  uint256 internal POOL_ID;\n  uint256 internal CONTRACT_VERSION;\n\n  function initialize(\n    uint256 _VERSION,\n    uint256 _ID,\n    address _gETH,\n    address _PORTAL,\n    address _OWNER\n  ) public virtual override initializer returns (bool) {\n    __ReentrancyGuard_init();\n    __Pausable_init();\n    __UUPSUpgradeable_init();\n\n    gETH = _gETH;\n    POOL_ID = _ID;\n\n    GEM.GOVERNANCE = _PORTAL;\n    GEM.SENATE = _OWNER;\n    GEM.SENATE_EXPIRY = type(uint256).max;\n\n    CONTRACT_VERSION = _VERSION;\n    emit ContractVersionSet(_VERSION);\n\n    return true;\n  }\n\n  modifier onlyPortal() {\n    require(\n      msg.sender == GEM.getGovernance(),\n      \"WithdrawalContract: sender NOT PORTAL\"\n    );\n    _;\n  }\n\n  modifier onlyOwner() {\n    require(\n      msg.sender == GEM.getSenate(),\n      \"WithdrawalContract: sender NOT OWNER\"\n    );\n    _;\n  }\n\n  ///@dev required by the UUPS module\n  function _authorizeUpgrade(\n    address proposed_implementation\n  ) internal virtual override onlyOwner {\n    require(\n      GEM.isUpgradeAllowed(proposed_implementation),\n      \"WithdrawalContract: NOT allowed to upgrade\"\n    );\n  }\n\n  /**\n   * @notice pausing the contract activates the recoveryMode\n   */\n  function pause() external virtual override onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @notice unpausing the contract deactivates the recoveryMode\n   */\n  function unpause() external virtual override onlyOwner {\n    _unpause();\n  }\n\n  /**\n   * @notice get gETH as a contract\n   */\n  function getgETH() public view override returns (IgETH) {\n    return IgETH(gETH);\n  }\n\n  /**\n   * @notice get Portal as a contract\n   */\n  function getPortal() public view override returns (IPortal) {\n    return IPortal(GEM.getGovernance());\n  }\n\n  /**\n   * @notice get the gETH ID of the corresponding staking pool\n   */\n  function getPoolId() public view override returns (uint256) {\n    return POOL_ID;\n  }\n\n  /**\n   * @notice get the current version of the contract\n   */\n  function getContractVersion() public view virtual override returns (uint256) {\n    return CONTRACT_VERSION;\n  }\n\n  /**\n   * @notice get the latest version of the withdrawal contract module from Portal\n   */\n  function getProposedVersion() public view virtual override returns (uint256) {\n    return getPortal().getDefaultModule(ID_TYPE.MODULE_WITHDRAWAL_CONTRACT);\n  }\n\n  /**\n   * @notice Recovery Mode allows Withdrawal Contract to isolate itself\n   * from Portal and continue handling the withdrawals.\n   * @return isRecovering true if recoveryMode is active\n   */\n  function recoveryMode()\n    public\n    view\n    virtual\n    override\n    returns (bool isRecovering)\n  {\n    isRecovering =\n      getContractVersion() != getProposedVersion() ||\n      paused() ||\n      getPortal().readAddress(getPoolId(), \"CONTROLLER\") !=\n      GEM.getSenate() ||\n      block.timestamp >= GEM.getSenateExpiry();\n  }\n\n  /**\n   * @notice Creates a new Proposal within Withdrawal Contract, used by Portal\n   * @dev only Governance check is inside, note Governance is Portal.\n   */\n  function newProposal(\n    address _CONTROLLER,\n    uint256 _TYPE,\n    bytes calldata _NAME,\n    uint256 duration\n  ) external virtual override {\n    GEM.newProposal(DATASTORE, _CONTROLLER, _TYPE, _NAME, duration);\n  }\n\n  function approveProposal(\n    uint256 id\n  )\n    public\n    virtual\n    override\n    whenNotPaused\n    returns (uint256 _type, address _controller)\n  {\n    (_type, _controller) = GEM.approveProposal(DATASTORE, id);\n  }\n\n  /**\n   * @notice Fetching an upgradeProposal from Portal creates an upgrade proposal\n   * @notice approving the version changes the approvedVersion on GeodeUtils\n   * @dev remaining code is basically taken from upgradeTo of UUPS since\n   * it is still not public, but external\n   */\n  function fetchUpgradeProposal() external virtual override onlyOwner {\n    uint256 proposedVersion = getPortal()\n      .fetchWithdrawalContractUpgradeProposal(POOL_ID);\n\n    require(\n      proposedVersion != getContractVersion() && proposedVersion != 0,\n      \"WithdrawalContract: PROPOSED_VERSION ERROR\"\n    );\n\n    approveProposal(proposedVersion);\n    _authorizeUpgrade(GEM.approvedVersion);\n    _upgradeToAndCallUUPS(GEM.approvedVersion, new bytes(0), false);\n  }\n\n  /**\n   * @notice changes the Senate's address without extending the expiry\n   * @dev OnlySenate is checked inside the GeodeUtils\n   */\n  function changeController(address _newSenate) external virtual override {\n    GEM.changeSenate(_newSenate);\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  /**\n   * @notice keep the contract size at 50\n   */\n  uint256[45] private __gap;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
