{
  "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "avoider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAvoid",
          "type": "bool"
        }
      ],
      "name": "Avoider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "MiddlewareSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIDDLEWARE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URI_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAvoid",
          "type": "bool"
        }
      ],
      "name": "avoidMiddlewares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isAvoider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isMiddleware",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "priceUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "setMiddleware",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "setPricePerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMiddlewareManager",
          "type": "address"
        }
      ],
      "name": "transferMiddlewareManagerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "transferMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "transferOracleRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "transferPauserRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUriSetter",
          "type": "address"
        }
      ],
      "name": "transferUriSetterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0x3f911696044d000CcF7D085e35b060e846b95f56",
    "transactionIndex": 2,
    "gasUsed": "2932197",
    "logsBloom": "0x
    "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822",
    "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9149151,
        "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
        "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9149151,
        "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
        "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9149151,
        "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
        "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9149151,
        "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
        "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a1",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9149151,
        "transactionHash": "0xc8be6a97abfb5ad3658637955ff770a211cef02f3503038cd22f671198745a52",
        "address": "0x3f911696044d000CcF7D085e35b060e846b95f56",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef1",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c",
          "0x0000000000000000000000002c95bc18fd9382a07776d416eef6c2feb3ad2a8c"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x680d10b8b819f44988213aa74f40b929def8008c332d4dfefaee7a86819dc822"
      }
    ],
    "blockNumber": 9149151,
    "cumulativeGasUsed": "3161599",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Geode Staked Ether",
    "gETH",
    "https://api.geode.fi/geth"
  ],
  "numDeployments": 1,
  "solcInputHash": "0d9b4f013ad8b24d94c0978b4d3f3ea8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"avoider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAvoid\",\"type\":\"bool\"}],\"name\":\"Avoider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"MiddlewareSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIDDLEWARE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvoid\",\"type\":\"bool\"}],\"name\":\"avoidMiddlewares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isAvoider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isMiddleware\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"priceUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setMiddleware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setPricePerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMiddlewareManager\",\"type\":\"address\"}],\"name\":\"transferMiddlewareManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"transferOracleRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"transferPauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUriSetter\",\"type\":\"address\"}],\"name\":\"transferUriSetterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ice Bear & Crash Bandicoot\",\"details\":\"gETH is chain-agnostic, meaning it can be used on any evm chain * if given the correct name and symbol.gETH is immutable, it can not be upgraded.gETH is a special ERC1155 contract with additional functionalities: gETHMiddlewares: * Most important functionality gETH provides: * Allowing any other contract to provide additional functionality * around the balance and price data, such as using an ID like ERC20. * This addition effectively result in changes in * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() * functions, reasoning is in the comments. Avoiders: * If one wants to remain unbound from gETHMiddlewares, * it can be done so by calling \\\"avoidMiddlewares\\\" function. PricePerShare: * Keeping track of the ratio between the derivative * and the underlaying staked asset, Ether. Denominator: * ERC1155 does not have decimals and it is not wise to use the name convention * but we need to provide some information on how to denominate the balances, price, etc.review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.\",\"events\":{\"PriceUpdated(uint256,uint256,uint256)\":{\"custom:section\":\"** EVENTS **\"}},\"kind\":\"dev\",\"methods\":{\"avoidMiddlewares(uint256,bool)\":{\"details\":\"ADDED for gETH*\",\"params\":{\"isAvoid\":\"true: restrict middlewares, false: allow middlewares\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"CHANGED for gETHADDED \\\"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\\\"See ERC1155Burnable burn: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L15\"},\"constructor\":{\"params\":{\"_name\":\"chain specific name: Geode Staked Ether, geode Staked Avax etc.\",\"_symbol\":\"chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.*\"}},\"denominator()\":{\"details\":\"ERC1155 does not have a decimals, and it is not wise to use the same nameADDED for gETH\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isAvoider(address,uint256)\":{\"details\":\"ADDED for gETH*\",\"params\":{\"account\":\"the potential avoider\"}},\"isMiddleware(address,uint256)\":{\"details\":\"ADDED for gETH\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pricePerShare(uint256)\":{\"details\":\"ADDED for gETH\",\"returns\":{\"_0\":\"price of the derivative in terms of underlying token, Ether\"}},\"priceUpdateTimestamp(uint256)\":{\"details\":\"ADDED for gETH\",\"returns\":{\"_0\":\"timestamp of the latest price update for given ID\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"CHANGED for gETHADDED \\\"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\\\"See ERC1155 safeTransferFrom: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/ERC1155.sol#L114\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setMiddleware(address,uint256,bool)\":{\"details\":\"ADDED for gETH\",\"params\":{\"isSet\":\"true: sets as an middleware, false: unsets\",\"middleware\":\"Address of the contract that will act as an middleware\"}},\"setPricePerShare(uint256,uint256)\":{\"details\":\"ADDED for gETH\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferMiddlewareManagerRole(address)\":{\"details\":\"MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferMinterRole(address)\":{\"details\":\"MINTER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferOracleRole(address)\":{\"details\":\"ORACLE is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferPauserRole(address)\":{\"details\":\"PAUSER is basically a superUser, there can be only 1 at a given time,intended as \\\"Portal\\\"\"},\"transferUriSetterRole(address)\":{\"details\":\"URI_SETTER is basically a superuser, there can be only 1 at a given time,intended as \\\"Governance/DAO\\\"\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"MIDDLEWARE_MANAGER_ROLE\":{\"custom:section\":\"** CONSTANTS **\"},\"_avoiders\":{\"details\":\"ADDED for gETH*\"},\"_middlewares\":{\"details\":\"There can be multiple Middlewares for 1 staking pool.ADDED for gETH*\"},\"_pricePerShare\":{\"details\":\"Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETHADDED for gETH*\"},\"_priceUpdateTimestamp\":{\"details\":\"ADDED for gETH*\"},\"name\":{\"custom:section\":\"** VARIABLES **\"}},\"title\":\"gETH : Geode Finance Liquid Staking Derivatives\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avoidMiddlewares(uint256,bool)\":{\"notice\":\"Restrict any affect of middlewares on the tokens of caller\"},\"constructor\":{\"notice\":\"Sets name, symbol, uri and grants necessary roles.\"},\"denominator()\":{\"notice\":\"a centralized denominator for all contract using gETH\"},\"isAvoider(address,uint256)\":{\"notice\":\"Checks if the given address restricts the affect of the middlewares on their gETH\"},\"isMiddleware(address,uint256)\":{\"notice\":\"Check if an address is approved as an middleware for an ID\"},\"setMiddleware(address,uint256,bool)\":{\"notice\":\"Set an address of a contract that will act as a middleware on gETH contract for a spesific ID\"},\"setPricePerShare(uint256,uint256)\":{\"notice\":\"Only ORACLE can call this function and set price\"},\"transferMiddlewareManagerRole(address)\":{\"notice\":\"transfers the authorized party for middleware management\"},\"transferMinterRole(address)\":{\"notice\":\"transfers the authorized party for Minting operations related to minting\"},\"transferOracleRole(address)\":{\"notice\":\"transfers the authorized party for Oracle operations related to pricing\"},\"transferPauserRole(address)\":{\"notice\":\"transfers the authorized party for Pausing operations.\"},\"transferUriSetterRole(address)\":{\"notice\":\"transfers the authorized party for setting a new uri.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/gETH.sol\":\"gETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Portal/gETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// interfaces\\nimport {IgETH} from \\\"./interfaces/IgETH.sol\\\";\\n// libraries\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// contracts\\nimport {ERC1155PausableBurnableSupply} from \\\"./helpers/ERC1155PausableBurnableSupply.sol\\\";\\n\\n/**\\n * @title gETH : Geode Finance Liquid Staking Derivatives\\n *\\n * @dev gETH is chain-agnostic, meaning it can be used on any evm chain\\n * * if given the correct name and symbol.\\n *\\n * @dev gETH is immutable, it can not be upgraded.\\n *\\n * @dev gETH is a special ERC1155 contract with additional functionalities:\\n * gETHMiddlewares:\\n * * Most important functionality gETH provides:\\n * * Allowing any other contract to provide additional functionality\\n * * around the balance and price data, such as using an ID like ERC20.\\n * * This addition effectively result in changes in\\n * * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck()\\n * * functions, reasoning is in the comments.\\n * Avoiders:\\n * * If one wants to remain unbound from gETHMiddlewares,\\n * * it can be done so by calling \\\"avoidMiddlewares\\\" function.\\n * PricePerShare:\\n * * Keeping track of the ratio between the derivative\\n * * and the underlaying staked asset, Ether.\\n * Denominator:\\n * * ERC1155 does not have decimals and it is not wise to use the name convention\\n * * but we need to provide some information on how to denominate the balances, price, etc.\\n *\\n * @dev review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.\\n *\\n * @author Ice Bear & Crash Bandicoot\\n */\\n\\ncontract gETH is IgETH, ERC1155PausableBurnableSupply {\\n  using Address for address;\\n\\n  /**\\n   * @custom:section                           ** CONSTANTS **\\n   */\\n\\n  bytes32 public constant MIDDLEWARE_MANAGER_ROLE = keccak256(\\\"MIDDLEWARE_MANAGER_ROLE\\\");\\n  bytes32 public constant ORACLE_ROLE = keccak256(\\\"ORACLE_ROLE\\\");\\n  uint256 internal constant DENOMINATOR = 1 ether;\\n\\n  /**\\n   * @custom:section                           ** VARIABLES **\\n   */\\n\\n  string public name;\\n  string public symbol;\\n  /**\\n   * @notice Mapping from pool IDs to gETHMiddleware implementation addresses\\n   * @dev There can be multiple Middlewares for 1 staking pool.\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => mapping(address => bool)) private _middlewares;\\n\\n  /**\\n   * @notice Mapping of user addresses who chose to restrict the access of Middlewares\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(address => mapping(uint256 => bool)) private _avoiders;\\n\\n  /**\\n   * @notice shows the underlying ETH for 1 staked gETH for a given asset ID\\n   * @dev Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETH\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => uint256) private _pricePerShare;\\n  /**\\n   * @notice ID to timestamp, pointing the second that the latest price update happened\\n   * @dev ADDED for gETH\\n   **/\\n  mapping(uint256 => uint256) private _priceUpdateTimestamp;\\n\\n  /**\\n   * @custom:section                           ** EVENTS **\\n   */\\n  event PriceUpdated(uint256 id, uint256 pricePerShare, uint256 updateTimestamp);\\n  event MiddlewareSet(uint256 id, address middleware, bool isSet);\\n  event Avoider(address avoider, uint256 id, bool isAvoid);\\n\\n  /**\\n   * @custom:section                           ** CONSTRUCTOR **\\n   */\\n  /**\\n   * @notice Sets name, symbol, uri and grants necessary roles.\\n   * @param _name chain specific name: Geode Staked Ether, geode Staked Avax etc.\\n   * @param _symbol chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.\\n   **/\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri\\n  ) ERC1155PausableBurnableSupply(_uri) {\\n    name = _name;\\n    symbol = _symbol;\\n\\n    _grantRole(MIDDLEWARE_MANAGER_ROLE, _msgSender());\\n    _grantRole(ORACLE_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @custom:section                           ** DENOMINATOR **\\n   *\\n   * @custom:visibility -> view\\n   */\\n  /**\\n   * @notice a centralized denominator for all contract using gETH\\n   * @dev ERC1155 does not have a decimals, and it is not wise to use the same name\\n   * @dev ADDED for gETH\\n   */\\n  function denominator() external view virtual override returns (uint256) {\\n    return DENOMINATOR;\\n  }\\n\\n  /**\\n   * @custom:section                           ** MIDDLEWARES **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n\\n  /**\\n   * @notice Check if an address is approved as an middleware for an ID\\n   * @dev ADDED for gETH\\n   */\\n  function isMiddleware(\\n    address middleware,\\n    uint256 id\\n  ) public view virtual override returns (bool) {\\n    return _middlewares[id][middleware];\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n  /**\\n   * @dev Only authorized parties should set the middleware\\n   * @dev ADDED for gETH\\n   */\\n  function _setMiddleware(address _middleware, uint256 _id, bool _isSet) internal virtual {\\n    _middlewares[_id][_middleware] = _isSet;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice Set an address of a contract that will\\n   * act as a middleware on gETH contract for a spesific ID\\n   * @param middleware Address of the contract that will act as an middleware\\n   * @param isSet true: sets as an middleware, false: unsets\\n   * @dev ADDED for gETH\\n   */\\n  function setMiddleware(\\n    address middleware,\\n    uint256 id,\\n    bool isSet\\n  ) external virtual override onlyRole(MIDDLEWARE_MANAGER_ROLE) {\\n    require(middleware != address(0), \\\"gETH:middleware query for the zero address\\\");\\n    require(middleware.isContract(), \\\"gETH:middleware must be a contract\\\");\\n\\n    _setMiddleware(middleware, id, isSet);\\n\\n    emit MiddlewareSet(id, middleware, isSet);\\n  }\\n\\n  /**\\n   * @custom:section                           ** AVOIDERS **\\n   */\\n  /**\\n   * @custom:visibility -> view-public\\n   */\\n  /**\\n   * @notice Checks if the given address restricts the affect of the middlewares on their gETH\\n   * @param account the potential avoider\\n   * @dev ADDED for gETH\\n   **/\\n  function isAvoider(address account, uint256 id) public view virtual override returns (bool) {\\n    return _avoiders[account][id];\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n  /**\\n   * @notice Restrict any affect of middlewares on the tokens of caller\\n   * @param isAvoid true: restrict middlewares, false: allow middlewares\\n   * @dev ADDED for gETH\\n   **/\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external virtual override {\\n    address account = _msgSender();\\n\\n    _avoiders[account][id] = isAvoid;\\n\\n    emit Avoider(account, id, isAvoid);\\n  }\\n\\n  /**\\n   * @custom:section                           ** PRICE **\\n   */\\n\\n  /**\\n   * @custom:visibility -> view-external\\n   */\\n\\n  /**\\n   * @dev ADDED for gETH\\n   * @return price of the derivative in terms of underlying token, Ether\\n   */\\n  function pricePerShare(uint256 id) external view virtual override returns (uint256) {\\n    return _pricePerShare[id];\\n  }\\n\\n  /**\\n   * @dev ADDED for gETH\\n   * @return timestamp of the latest price update for given ID\\n   */\\n  function priceUpdateTimestamp(uint256 id) external view virtual override returns (uint256) {\\n    return _priceUpdateTimestamp[id];\\n  }\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev ADDED for gETH\\n   */\\n  function _setPricePerShare(uint256 _price, uint256 _id) internal virtual {\\n    _pricePerShare[_id] = _price;\\n    _priceUpdateTimestamp[_id] = block.timestamp;\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice Only ORACLE can call this function and set price\\n   * @dev ADDED for gETH\\n   */\\n  function setPricePerShare(\\n    uint256 price,\\n    uint256 id\\n  ) external virtual override onlyRole(ORACLE_ROLE) {\\n    require(id != 0, \\\"gETH:price query for the zero address\\\");\\n\\n    _setPricePerShare(price, id);\\n\\n    emit PriceUpdated(id, price, block.timestamp);\\n  }\\n\\n  /**\\n   * @custom:section                           ** ROLES **\\n   *\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @notice transfers the authorized party for setting a new uri.\\n   * @dev URI_SETTER is basically a superuser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Governance/DAO\\\"\\n   */\\n  function transferUriSetterRole(address newUriSetter) external virtual override onlyRole(URI_SETTER_ROLE) {\\n    _grantRole(URI_SETTER_ROLE, newUriSetter);\\n    renounceRole(URI_SETTER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Pausing operations.\\n   * @dev PAUSER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferPauserRole(address newPauser) external virtual override onlyRole(PAUSER_ROLE) {\\n    _grantRole(PAUSER_ROLE, newPauser);\\n    renounceRole(PAUSER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Minting operations related to minting\\n   * @dev MINTER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferMinterRole(address newMinter) external virtual override onlyRole(MINTER_ROLE) {\\n    _grantRole(MINTER_ROLE, newMinter);\\n    renounceRole(MINTER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for Oracle operations related to pricing\\n   * @dev ORACLE is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferOracleRole(address newOracle) external virtual override onlyRole(ORACLE_ROLE) {\\n    _grantRole(ORACLE_ROLE, newOracle);\\n    renounceRole(ORACLE_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice transfers the authorized party for middleware management\\n   * @dev MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,\\n   * @dev intended as \\\"Portal\\\"\\n   */\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external virtual override onlyRole(MIDDLEWARE_MANAGER_ROLE) {\\n    _grantRole(MIDDLEWARE_MANAGER_ROLE, newMiddlewareManager);\\n    renounceRole(MIDDLEWARE_MANAGER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @custom:section                           ** OVERRIDES **\\n   *\\n   * @dev middleware of a specific ID can move funds between accounts without approval.\\n   * So, we will be overriding 2 functions:\\n   * * safeTransferFrom\\n   * * burn\\n   * note safeBatchTransferFrom is not need to be overriden,\\n   * as a middleware should not do batch transfers.\\n   *\\n   * @dev middlewares should handle transfer checks internally.\\n   * Because of this we want to remove the SafeTransferAcceptanceCheck if the caller is a middleware.\\n   * However, overriding _doSafeTransferAcceptanceCheck was not possible, so we copy pasted OZ contracts and\\n   * made it internal virtual.\\n   * note _doSafeBatchTransferAcceptanceCheck is not need to be overriden,\\n   * as a middleware should not do batch transfers.\\n   */\\n\\n  /**\\n   * @custom:visibility -> internal\\n   */\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED if (!isMiddleware) check\\n   * @dev See ERC1155 _doSafeTransferAcceptanceCheck:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/ERC1155.sol#L447\\n   */\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual override {\\n    if (!(isMiddleware(operator, id))) {\\n      super._doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n  }\\n\\n  /**\\n   * @custom:visibility -> external\\n   */\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED \\\"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\\\"\\n   * @dev See ERC1155 safeTransferFrom:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/ERC1155.sol#L114\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      (from == _msgSender()) ||\\n        (isApprovedForAll(from, _msgSender())) ||\\n        (isMiddleware(_msgSender(), id) && !isAvoider(from, id)),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev CHANGED for gETH\\n   * @dev ADDED \\\"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\\\"\\n   * @dev See ERC1155Burnable burn:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L15\\n   */\\n  function burn(address account, uint256 id, uint256 value) public virtual override {\\n    require(\\n      (account == _msgSender()) ||\\n        (isApprovedForAll(account, _msgSender())) ||\\n        (isMiddleware(_msgSender(), id) && !isAvoider(account, id)),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n\\n    _burn(account, id, value);\\n  }\\n}\\n\",\"keccak256\":\"0xe683e9c5692d21f96cb703262ce7b25a75964a6d78d405c4314768f45a961a87\",\"license\":\"MIT\"},\"contracts/Portal/helpers/ERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Burnable, IERC1155Supply, IERC1155PausableBurnableSupply} from \\\"../interfaces/helpers/IERC1155PausableBurnableSupply.sol\\\";\\n// external\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n * @notice base contract for gETH.\\n *\\n * @dev Following contracts are taken from Openzeppelin.\\n * Only difference is ERC1155._doSafeTransferAcceptanceCheck is being internal virtual instead of private,\\n * because we want to override it in gETH.\\n *\\n * ERC1155:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/ERC1155.sol\\n * ERC1155Burnable:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\n * ERC1155Supply:\\n * * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\n *\\n * @dev ERC1155PausableBurnableSupply is created with openzeppelin wizard.\\n * + Mintable\\n * + Burnable\\n * + Supply Tracking\\n * + Pausable\\n * + Updatable URI\\n * + Roles\\n */\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n  using Address for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n  string private _uri;\\n\\n  /**\\n   * @dev See {_setURI}.\\n   */\\n  constructor(string memory uri_) {\\n    _setURI(uri_);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(IERC1155).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * This implementation returns the same URI for *all* token types. It relies\\n   * on the token type ID substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(\\n    address[] memory accounts,\\n    uint256[] memory ids\\n  ) public view virtual override returns (uint256[] memory) {\\n    require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(\\n    address account,\\n    address operator\\n  ) public view virtual override returns (bool) {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n    _balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   * substitution mechanism\\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n   *\\n   * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\\n   * clients with the token type ID.\\n   *\\n   * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n   * interpreted by clients as\\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n   * for token type ID 0x4cce0.\\n   *\\n   * See {uri}.\\n   *\\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\\n   * this function emits no events.\\n   */\\n  function _setURI(string memory newuri) internal virtual {\\n    _uri = newuri;\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _balances[id][to] += amount;\\n    emit TransferSingle(operator, address(0), to, id, amount);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n    address operator = _msgSender();\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n\\n    emit TransferSingle(operator, from, address(0), id, amount);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n    require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is IERC1155Burnable, ERC1155 {\\n  function burn(address account, uint256 id, uint256 value) public virtual override {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n\\n    _burn(account, id, value);\\n  }\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory values\\n  ) public virtual override {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n\\n    _burnBatch(account, ids, values);\\n  }\\n}\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is IERC1155Supply, ERC1155 {\\n  mapping(uint256 => uint256) private _totalSupply;\\n\\n  /**\\n   * @dev Total amount of tokens in with a given id.\\n   */\\n  function totalSupply(uint256 id) public view virtual override returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev Indicates whether any token exist with a given id, or not.\\n   */\\n  function exists(uint256 id) public view virtual override returns (bool) {\\n    return ERC1155Supply.totalSupply(id) > 0;\\n  }\\n\\n  /**\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    if (from == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        _totalSupply[ids[i]] += amounts[i];\\n      }\\n    }\\n\\n    if (to == address(0)) {\\n      for (uint256 i = 0; i < ids.length; ++i) {\\n        uint256 id = ids[i];\\n        uint256 amount = amounts[i];\\n        uint256 supply = _totalSupply[id];\\n        require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n        unchecked {\\n          _totalSupply[id] = supply - amount;\\n        }\\n      }\\n    }\\n  }\\n}\\n\\ncontract ERC1155PausableBurnableSupply is\\n  IERC1155PausableBurnableSupply,\\n  ERC1155,\\n  AccessControl,\\n  Pausable,\\n  ERC1155Burnable,\\n  ERC1155Supply\\n{\\n  bytes32 public constant URI_SETTER_ROLE = keccak256(\\\"URI_SETTER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n  /**\\n   * @dev DEFAULT_ADMIN_ROLE is not set, no more role management here.\\n   */\\n  constructor(string memory uri_) ERC1155(uri_) {\\n    _grantRole(URI_SETTER_ROLE, msg.sender);\\n    _grantRole(PAUSER_ROLE, msg.sender);\\n    _grantRole(MINTER_ROLE, msg.sender);\\n  }\\n\\n  function setURI(string memory newuri) public override onlyRole(URI_SETTER_ROLE) {\\n    _setURI(newuri);\\n  }\\n\\n  function pause() public override onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  function unpause() public override onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public override onlyRole(MINTER_ROLE) {\\n    _mint(account, id, amount, data);\\n  }\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public override onlyRole(MINTER_ROLE) {\\n    _mintBatch(to, ids, amounts, data);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal override(ERC1155, ERC1155Supply) whenNotPaused {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view override(IERC165, ERC1155, AccessControl) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xfeca6326c02b91ad879994b42055e652079406688912d24c8dbb28ff11701cd2\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC1155PausableBurnableSupply} from \\\"./helpers/IERC1155PausableBurnableSupply.sol\\\";\\n\\ninterface IgETH is IERC1155PausableBurnableSupply {\\n  function denominator() external view returns (uint256);\\n\\n  function isMiddleware(address middleware, uint256 id) external view returns (bool);\\n\\n  function setMiddleware(address middleware, uint256 id, bool isSet) external;\\n\\n  function isAvoider(address account, uint256 id) external view returns (bool);\\n\\n  function avoidMiddlewares(uint256 id, bool isAvoid) external;\\n\\n  function pricePerShare(uint256 id) external view returns (uint256);\\n\\n  function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n  function setPricePerShare(uint256 price, uint256 id) external;\\n\\n  function transferUriSetterRole(address newUriSetter) external;\\n\\n  function transferPauserRole(address newPauser) external;\\n\\n  function transferMinterRole(address newMinter) external;\\n\\n  function transferOracleRole(address newOracle) external;\\n\\n  function transferMiddlewareManagerRole(address newMiddlewareManager) external;\\n}\\n\",\"keccak256\":\"0x5f8a92104d98c387d41e038463b666ccc095e8c38272e9f45aef9f74d352f903\",\"license\":\"MIT\"},\"contracts/Portal/interfaces/helpers/IERC1155PausableBurnableSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IERC1155Burnable is IERC165, IERC1155, IERC1155MetadataURI {\\n  function burn(address account, uint256 id, uint256 value) external;\\n\\n  function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\\n}\\n\\ninterface IERC1155Supply is IERC165, IERC1155, IERC1155MetadataURI {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n\\n  function exists(uint256 id) external view returns (bool);\\n}\\n\\ninterface IERC1155PausableBurnableSupply is IERC1155Burnable, IERC1155Supply {\\n  function setURI(string memory newuri) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x815e777c097747b9d7e2ba44129420204b2d446736fb8e04733ebf2d482d81ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034a2380380620034a2833981016040819052620000349162000378565b808062000041816200015e565b506004805460ff19169055620000787f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c3362000177565b620000a47f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3362000177565b620000d07f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000177565b508251620000e69060069060208601906200021b565b508151620000fc9060079060208501906200021b565b50620001297ff04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a13362000177565b620001557f68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef13362000177565b5050506200045c565b8051620001739060029060208401906200021b565b5050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16620001735760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620002299062000409565b90600052602060002090601f0160209004810192826200024d576000855562000298565b82601f106200026857805160ff191683800117855562000298565b8280016001018555821562000298579182015b82811115620002985782518255916020019190600101906200027b565b50620002a6929150620002aa565b5090565b5b80821115620002a65760008155600101620002ab565b600082601f830112620002d357600080fd5b81516001600160401b0380821115620002f057620002f062000446565b604051601f8301601f19908116603f011681019082821181831017156200031b576200031b62000446565b816040528381526020925086838588010111156200033857600080fd5b600091505b838210156200035c57858201830151818301840152908201906200033d565b838211156200036e5760008385830101525b9695505050505050565b6000806000606084860312156200038e57600080fd5b83516001600160401b0380821115620003a657600080fd5b620003b487838801620002c1565b94506020860151915080821115620003cb57600080fd5b620003d987838801620002c1565b93506040860151915080821115620003f057600080fd5b50620003ff86828701620002c1565b9150509250925092565b600181811c908216806200041e57607f821691505b602082108114156200044057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613036806200046c6000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c8063731133e911610151578063bad383a6116100c3578063e63ab1e911610087578063e63ab1e914610584578063e985e9c514610599578063eef37fd5146105d5578063f242432a146105ea578063f5298aca146105fd578063f759cc3b1461061057600080fd5b8063bad383a614610516578063bd85b03914610529578063c7bddb1e14610549578063d53913931461055c578063d547741f1461057157600080fd5b806391d148541161011557806391d14854146104bf57806395d89b41146104d257806396ce0795146104da578063a217fddf146104e8578063a22cb465146104f0578063b8bf60f91461050357600080fd5b8063731133e91461045c5780637f3457101461046f5780638456cb59146104845780638801b9b81461048c578063908d67ed1461049f57600080fd5b80632eb2c2d6116101ea5780634d280a55116101ae5780634d280a55146103d65780634e1273f4146103e95780634f558e7914610409578063512be7961461042b5780635c975abb1461043e5780636b20c4541461044957600080fd5b80632eb2c2d6146103825780632f2ff15d146103955780633106fde8146103a857806336568abe146103bb5780633f4ba83a146103ce57600080fd5b8063072650d21161023c578063072650d2146102fe57806307e2cea5146103115780630e89341c146103265780631f7fdffa1461033957806322af59971461034c578063248a9ca31461035f57600080fd5b8062fdd58e1461027857806301ffc9a71461029e57806302fe5305146102c15780630492f6e1146102d657806306fdde03146102e9575b600080fd5b61028b610286366004612674565b610630565b6040519081526020015b60405180910390f35b6102b16102ac36600461286d565b6106c6565b6040519015158152602001610295565b6102d46102cf3660046128a7565b6106d7565b005b6102d46102e43660046128f7565b6106fc565b6102f161076b565b6040516102959190612afc565b6102b161030c366004612674565b6107f9565b61028b600080516020612f6183398151915281565b6102f1610334366004612831565b610824565b6102d46103473660046125b2565b6108b8565b6102d461035a36600461291a565b6108e3565b61028b61036d366004612831565b60009081526003602052604090206001015490565b6102d4610390366004612432565b6109b4565b6102d46103a336600461284a565b6109f9565b6102d46103b63660046123e4565b610a23565b6102d46103c936600461284a565b610a67565b6102d4610ae1565b6102b16103e4366004612674565b610b04565b6103fc6103f7366004612761565b610b2e565b6040516102959190612abb565b6102b1610417366004612831565b600090815260056020526040902054151590565b6102d461043936600461269e565b610c57565b60045460ff166102b1565b6102d461045736600461253f565b610dbb565b6102d461046a36600461270d565b610dfe565b61028b600080516020612f8183398151915281565b6102d4610e22565b6102d461049a3660046123e4565b610e42565b61028b6104ad366004612831565b6000908152600b602052604090205490565b6102b16104cd36600461284a565b610e8a565b6102f1610eb5565b670de0b6b3a764000061028b565b61028b600081565b6102d46104fe36600461264a565b610ec2565b6102d46105113660046123e4565b610ecd565b6102d46105243660046123e4565b610f15565b61028b610537366004612831565b60009081526005602052604090205490565b6102d46105573660046123e4565b610f5d565b61028b600080516020612fc183398151915281565b6102d461057f36600461284a565b610fa5565b61028b600080516020612fa183398151915281565b6102b16105a73660046123ff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61028b600080516020612fe183398151915281565b6102d46105f83660046124db565b610fca565b6102d461060b3660046126da565b611032565b61028b61061e366004612831565b6000908152600a602052604090205490565b60006001600160a01b0383166106a05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006106d182611098565b92915050565b600080516020612f818339815191526106ef816110bd565b6106f8826110c7565b5050565b336000818152600960209081526040808320868452825291829020805460ff19168515159081179091558251848152918201869052918101919091527f78738b8c4717822a58cc752d3b2d657f2d706db6042748d69d2048438ff07e2c906060015b60405180910390a1505050565b6006805461077890612de1565b80601f01602080910402602001604051908101604052809291908181526020018280546107a490612de1565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b505050505081565b6001600160a01b03919091166000908152600960209081526040808320938352929052205460ff1690565b60606002805461083390612de1565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612de1565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b50505050509050919050565b600080516020612fc18339815191526108d0816110bd565b6108dc858585856110da565b5050505050565b600080516020612f618339815191526108fb816110bd565b816109565760405162461bcd60e51b815260206004820152602560248201527f674554483a707269636520717565727920666f7220746865207a65726f206164604482015264647265737360d81b6064820152608401610697565b6000828152600a60209081526040808320869055600b9091529020429055604080518381526020810185905242918101919091527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489060600161075e565b6001600160a01b0385163314806109d057506109d085336105a7565b6109ec5760405162461bcd60e51b815260040161069790612b9b565b6108dc8585858585611234565b600082815260036020526040902060010154610a14816110bd565b610a1e83836113de565b505050565b600080516020612f81833981519152610a3b816110bd565b610a53600080516020612f81833981519152836113de565b6106f8600080516020612f81833981519152335b6001600160a01b0381163314610ad75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610697565b6106f88282611464565b600080516020612fa1833981519152610af9816110bd565b610b016114cb565b50565b60009081526008602090815260408083206001600160a01b03949094168352929052205460ff1690565b60608151835114610b935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610697565b600083516001600160401b03811115610bae57610bae612e8f565b604051908082528060200260200182016040528015610bd7578160200160208202803683370190505b50905060005b8451811015610c4f57610c22858281518110610bfb57610bfb612e79565b6020026020010151858381518110610c1557610c15612e79565b6020026020010151610630565b828281518110610c3457610c34612e79565b6020908102919091010152610c4881612e48565b9050610bdd565b509392505050565b600080516020612fe1833981519152610c6f816110bd565b6001600160a01b038416610cd85760405162461bcd60e51b815260206004820152602a60248201527f674554483a6d6964646c657761726520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610697565b6001600160a01b0384163b610d3a5760405162461bcd60e51b815260206004820152602260248201527f674554483a6d6964646c6577617265206d757374206265206120636f6e74726160448201526118dd60f21b6064820152608401610697565b60008381526008602090815260408083206001600160a01b03881684529091529020805460ff1916831515179055604080518481526001600160a01b0386166020820152831515918101919091527fc3c7dc5ac1b5d811719dbd5be732967d24ed27897351a8a123e526f6b53dc5249060600160405180910390a150505050565b6001600160a01b038316331480610dd75750610dd783336105a7565b610df35760405162461bcd60e51b815260040161069790612b9b565b610a1e83838361151d565b600080516020612fc1833981519152610e16816110bd565b6108dc858585856116bb565b600080516020612fa1833981519152610e3a816110bd565b610b016117a4565b600080516020612f61833981519152610e5a816110bd565b610e72600080516020612f61833981519152836113de565b6106f8600080516020612f6183398151915233610a67565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6007805461077890612de1565b6106f83383836117e1565b600080516020612fc1833981519152610ee5816110bd565b610efd600080516020612fc1833981519152836113de565b6106f8600080516020612fc183398151915233610a67565b600080516020612fa1833981519152610f2d816110bd565b610f45600080516020612fa1833981519152836113de565b6106f8600080516020612fa183398151915233610a67565b600080516020612fe1833981519152610f75816110bd565b610f8d600080516020612fe1833981519152836113de565b6106f8600080516020612fe183398151915233610a67565b600082815260036020526040902060010154610fc0816110bd565b610a1e8383611464565b6001600160a01b038516331480610fe65750610fe685336105a7565b806110095750610ff63384610b04565b8015611009575061100785846107f9565b155b6110255760405162461bcd60e51b815260040161069790612b9b565b6108dc85858585856118c2565b6001600160a01b03831633148061104e575061104e83336105a7565b80611071575061105e3383610b04565b8015611071575061106f83836107f9565b155b61108d5760405162461bcd60e51b815260040161069790612b9b565b610a1e8383836119fa565b60006001600160e01b03198216637965db0b60e01b14806106d157506106d182611b12565b610b018133611b62565b80516106f890600290602084019061222b565b6001600160a01b0384166111005760405162461bcd60e51b815260040161069790612d03565b81518351146111215760405162461bcd60e51b815260040161069790612cbb565b3361113181600087878787611bbb565b60005b84518110156111cc5783818151811061114f5761114f612e79565b602002602001015160008087848151811061116c5761116c612e79565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111b49190612d67565b909155508190506111c481612e48565b915050611134565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161121d929190612ace565b60405180910390a46108dc81600087878787611bd1565b81518351146112555760405162461bcd60e51b815260040161069790612cbb565b6001600160a01b03841661127b5760405162461bcd60e51b815260040161069790612be9565b3361128a818787878787611bbb565b60005b84518110156113705760008582815181106112aa576112aa612e79565b6020026020010151905060008583815181106112c8576112c8612e79565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156113185760405162461bcd60e51b815260040161069790612c71565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611355908490612d67565b925050819055505050508061136990612e48565b905061128d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113c0929190612ace565b60405180910390a46113d6818787878787611bd1565b505050505050565b6113e88282610e8a565b6106f85760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61146e8282610e8a565b156106f85760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6114d3611d3c565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166115435760405162461bcd60e51b815260040161069790612c2e565b80518251146115645760405162461bcd60e51b815260040161069790612cbb565b600033905061158781856000868660405180602001604052806000815250611bbb565b60005b835181101561164c5760008482815181106115a7576115a7612e79565b6020026020010151905060008483815181106115c5576115c5612e79565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156116155760405162461bcd60e51b815260040161069790612b57565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061164481612e48565b91505061158a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161169d929190612ace565b60405180910390a46040805160208101909152600090525b50505050565b6001600160a01b0384166116e15760405162461bcd60e51b815260040161069790612d03565b3360006116ed85611d87565b905060006116fa85611d87565b905061170b83600089858589611bbb565b6000868152602081815260408083206001600160a01b038b1684529091528120805487929061173b908490612d67565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461179b83600089898989611dd2565b50505050505050565b6117ac611dee565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115003390565b816001600160a01b0316836001600160a01b031614156118555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610697565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118e85760405162461bcd60e51b815260040161069790612be9565b3360006118f485611d87565b9050600061190185611d87565b9050611911838989858589611bbb565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156119525760405162461bcd60e51b815260040161069790612c71565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061198f908490612d67565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46119ef848a8a8a8a8a611dd2565b505050505050505050565b6001600160a01b038316611a205760405162461bcd60e51b815260040161069790612c2e565b336000611a2c84611d87565b90506000611a3984611d87565b9050611a5983876000858560405180602001604052806000815250611bbb565b6000858152602081815260408083206001600160a01b038a16845290915290205484811015611a9a5760405162461bcd60e51b815260040161069790612b57565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261179b565b60006001600160e01b03198216636cdb3d1360e11b1480611b4357506001600160e01b031982166303a24d0760e21b145b806106d157506301ffc9a760e01b6001600160e01b03198316146106d1565b611b6c8282610e8a565b6106f857611b7981611e34565b611b84836020611e46565b604051602001611b959291906129a3565b60408051601f198184030181529082905262461bcd60e51b825261069791600401612afc565b611bc3611dee565b6113d6868686868686611fe8565b6001600160a01b0384163b156113d65760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c159089908990889088908890600401612a18565b602060405180830381600087803b158015611c2f57600080fd5b505af1925050508015611c5f575060408051601f3d908101601f19168201909252611c5c9181019061288a565b60015b611d0c57611c6b612ea5565b806308c379a01415611ca55750611c80612ec1565b80611c8b5750611ca7565b8060405162461bcd60e51b81526004016106979190612afc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610697565b6001600160e01b0319811663bc197c8160e01b1461179b5760405162461bcd60e51b815260040161069790612b0f565b60045460ff16611d855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610697565b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611dc157611dc1612e79565b602090810291909101015292915050565b611ddc8684610b04565b6113d6576113d6868686868686612161565b60045460ff1615611d855760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610697565b60606106d16001600160a01b03831660145b60606000611e55836002612d7f565b611e60906002612d67565b6001600160401b03811115611e7757611e77612e8f565b6040519080825280601f01601f191660200182016040528015611ea1576020820181803683370190505b509050600360fc1b81600081518110611ebc57611ebc612e79565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611eeb57611eeb612e79565b60200101906001600160f81b031916908160001a9053506000611f0f846002612d7f565b611f1a906001612d67565b90505b6001811115611f92576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f4e57611f4e612e79565b1a60f81b828281518110611f6457611f64612e79565b60200101906001600160f81b031916908160001a90535060049490941c93611f8b81612dca565b9050611f1d565b508315611fe15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610697565b9392505050565b6001600160a01b03851661206f5760005b835181101561206d5782818151811061201457612014612e79565b60200260200101516005600086848151811061203257612032612e79565b6020026020010151815260200190815260200160002060008282546120579190612d67565b90915550612066905081612e48565b9050611ff9565b505b6001600160a01b0384166113d65760005b835181101561179b57600084828151811061209d5761209d612e79565b6020026020010151905060008483815181106120bb576120bb612e79565b602002602001015190506000600560008481526020019081526020016000205490508181101561213e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610697565b6000928352600560205260409092209103905561215a81612e48565b9050612080565b6001600160a01b0384163b156113d65760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121a59089908990889088908890600401612a76565b602060405180830381600087803b1580156121bf57600080fd5b505af19250505080156121ef575060408051601f3d908101601f191682019092526121ec9181019061288a565b60015b6121fb57611c6b612ea5565b6001600160e01b0319811663f23a6e6160e01b1461179b5760405162461bcd60e51b815260040161069790612b0f565b82805461223790612de1565b90600052602060002090601f016020900481019282612259576000855561229f565b82601f1061227257805160ff191683800117855561229f565b8280016001018555821561229f579182015b8281111561229f578251825591602001919060010190612284565b506122ab9291506122af565b5090565b5b808211156122ab57600081556001016122b0565b60006001600160401b038311156122dd576122dd612e8f565b6040516122f4601f8501601f191660200182612e1c565b80915083815284848401111561230957600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461233857600080fd5b919050565b600082601f83011261234e57600080fd5b8135602061235b82612d44565b6040516123688282612e1c565b8381528281019150858301600585901b8701840188101561238857600080fd5b60005b858110156123a75781358452928401929084019060010161238b565b5090979650505050505050565b8035801515811461233857600080fd5b600082601f8301126123d557600080fd5b611fe1838335602085016122c4565b6000602082840312156123f657600080fd5b611fe182612321565b6000806040838503121561241257600080fd5b61241b83612321565b915061242960208401612321565b90509250929050565b600080600080600060a0868803121561244a57600080fd5b61245386612321565b945061246160208701612321565b935060408601356001600160401b038082111561247d57600080fd5b61248989838a0161233d565b9450606088013591508082111561249f57600080fd5b6124ab89838a0161233d565b935060808801359150808211156124c157600080fd5b506124ce888289016123c4565b9150509295509295909350565b600080600080600060a086880312156124f357600080fd5b6124fc86612321565b945061250a60208701612321565b9350604086013592506060860135915060808601356001600160401b0381111561253357600080fd5b6124ce888289016123c4565b60008060006060848603121561255457600080fd5b61255d84612321565b925060208401356001600160401b038082111561257957600080fd5b6125858783880161233d565b9350604086013591508082111561259b57600080fd5b506125a88682870161233d565b9150509250925092565b600080600080608085870312156125c857600080fd5b6125d185612321565b935060208501356001600160401b03808211156125ed57600080fd5b6125f98883890161233d565b9450604087013591508082111561260f57600080fd5b61261b8883890161233d565b9350606087013591508082111561263157600080fd5b5061263e878288016123c4565b91505092959194509250565b6000806040838503121561265d57600080fd5b61266683612321565b9150612429602084016123b4565b6000806040838503121561268757600080fd5b61269083612321565b946020939093013593505050565b6000806000606084860312156126b357600080fd5b6126bc84612321565b9250602084013591506126d1604085016123b4565b90509250925092565b6000806000606084860312156126ef57600080fd5b6126f884612321565b95602085013595506040909401359392505050565b6000806000806080858703121561272357600080fd5b61272c85612321565b9350602085013592506040850135915060608501356001600160401b0381111561275557600080fd5b61263e878288016123c4565b6000806040838503121561277457600080fd5b82356001600160401b038082111561278b57600080fd5b818501915085601f83011261279f57600080fd5b813560206127ac82612d44565b6040516127b98282612e1c565b8381528281019150858301600585901b870184018b10156127d957600080fd5b600096505b84871015612803576127ef81612321565b8352600196909601959183019183016127de565b509650508601359250508082111561281a57600080fd5b506128278582860161233d565b9150509250929050565b60006020828403121561284357600080fd5b5035919050565b6000806040838503121561285d57600080fd5b8235915061242960208401612321565b60006020828403121561287f57600080fd5b8135611fe181612f4a565b60006020828403121561289c57600080fd5b8151611fe181612f4a565b6000602082840312156128b957600080fd5b81356001600160401b038111156128cf57600080fd5b8201601f810184136128e057600080fd5b6128ef848235602084016122c4565b949350505050565b6000806040838503121561290a57600080fd5b82359150612429602084016123b4565b6000806040838503121561292d57600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561296c57815187529582019590820190600101612950565b509495945050505050565b6000815180845261298f816020860160208601612d9e565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129db816017850160208801612d9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612a0c816028840160208801612d9e565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612a449083018661293c565b8281036060840152612a56818661293c565b90508281036080840152612a6a8185612977565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ab090830184612977565b979650505050505050565b602081526000611fe1602083018461293c565b604081526000612ae1604083018561293c565b8281036020840152612af3818561293c565b95945050505050565b602081526000611fe16020830184612977565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b03821115612d5d57612d5d612e8f565b5060051b60200190565b60008219821115612d7a57612d7a612e63565b500190565b6000816000190483118215151615612d9957612d99612e63565b500290565b60005b83811015612db9578181015183820152602001612da1565b838111156116b55750506000910152565b600081612dd957612dd9612e63565b506000190190565b600181811c90821680612df557607f821691505b60208210811415612e1657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715612e4157612e41612e8f565b6040525050565b6000600019821415612e5c57612e5c612e63565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612ebe5760046000803e5060005160e01c5b90565b600060443d1015612ecf5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612efe57505050505090565b8285019150815181811115612f165750505050505090565b843d8701016020828501011115612f305750505050505090565b612f3f60208286010187612e1c565b509095945050505050565b6001600160e01b031981168114610b0157600080fdfe68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef17804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6f04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a1a26469706673582212205e0e1b366bf375f97cdba5c4e5118849b149bcd7b08e4477ae00f9d5c35e14d464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c8063731133e911610151578063bad383a6116100c3578063e63ab1e911610087578063e63ab1e914610584578063e985e9c514610599578063eef37fd5146105d5578063f242432a146105ea578063f5298aca146105fd578063f759cc3b1461061057600080fd5b8063bad383a614610516578063bd85b03914610529578063c7bddb1e14610549578063d53913931461055c578063d547741f1461057157600080fd5b806391d148541161011557806391d14854146104bf57806395d89b41146104d257806396ce0795146104da578063a217fddf146104e8578063a22cb465146104f0578063b8bf60f91461050357600080fd5b8063731133e91461045c5780637f3457101461046f5780638456cb59146104845780638801b9b81461048c578063908d67ed1461049f57600080fd5b80632eb2c2d6116101ea5780634d280a55116101ae5780634d280a55146103d65780634e1273f4146103e95780634f558e7914610409578063512be7961461042b5780635c975abb1461043e5780636b20c4541461044957600080fd5b80632eb2c2d6146103825780632f2ff15d146103955780633106fde8146103a857806336568abe146103bb5780633f4ba83a146103ce57600080fd5b8063072650d21161023c578063072650d2146102fe57806307e2cea5146103115780630e89341c146103265780631f7fdffa1461033957806322af59971461034c578063248a9ca31461035f57600080fd5b8062fdd58e1461027857806301ffc9a71461029e57806302fe5305146102c15780630492f6e1146102d657806306fdde03146102e9575b600080fd5b61028b610286366004612674565b610630565b6040519081526020015b60405180910390f35b6102b16102ac36600461286d565b6106c6565b6040519015158152602001610295565b6102d46102cf3660046128a7565b6106d7565b005b6102d46102e43660046128f7565b6106fc565b6102f161076b565b6040516102959190612afc565b6102b161030c366004612674565b6107f9565b61028b600080516020612f6183398151915281565b6102f1610334366004612831565b610824565b6102d46103473660046125b2565b6108b8565b6102d461035a36600461291a565b6108e3565b61028b61036d366004612831565b60009081526003602052604090206001015490565b6102d4610390366004612432565b6109b4565b6102d46103a336600461284a565b6109f9565b6102d46103b63660046123e4565b610a23565b6102d46103c936600461284a565b610a67565b6102d4610ae1565b6102b16103e4366004612674565b610b04565b6103fc6103f7366004612761565b610b2e565b6040516102959190612abb565b6102b1610417366004612831565b600090815260056020526040902054151590565b6102d461043936600461269e565b610c57565b60045460ff166102b1565b6102d461045736600461253f565b610dbb565b6102d461046a36600461270d565b610dfe565b61028b600080516020612f8183398151915281565b6102d4610e22565b6102d461049a3660046123e4565b610e42565b61028b6104ad366004612831565b6000908152600b602052604090205490565b6102b16104cd36600461284a565b610e8a565b6102f1610eb5565b670de0b6b3a764000061028b565b61028b600081565b6102d46104fe36600461264a565b610ec2565b6102d46105113660046123e4565b610ecd565b6102d46105243660046123e4565b610f15565b61028b610537366004612831565b60009081526005602052604090205490565b6102d46105573660046123e4565b610f5d565b61028b600080516020612fc183398151915281565b6102d461057f36600461284a565b610fa5565b61028b600080516020612fa183398151915281565b6102b16105a73660046123ff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61028b600080516020612fe183398151915281565b6102d46105f83660046124db565b610fca565b6102d461060b3660046126da565b611032565b61028b61061e366004612831565b6000908152600a602052604090205490565b60006001600160a01b0383166106a05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006106d182611098565b92915050565b600080516020612f818339815191526106ef816110bd565b6106f8826110c7565b5050565b336000818152600960209081526040808320868452825291829020805460ff19168515159081179091558251848152918201869052918101919091527f78738b8c4717822a58cc752d3b2d657f2d706db6042748d69d2048438ff07e2c906060015b60405180910390a1505050565b6006805461077890612de1565b80601f01602080910402602001604051908101604052809291908181526020018280546107a490612de1565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b505050505081565b6001600160a01b03919091166000908152600960209081526040808320938352929052205460ff1690565b60606002805461083390612de1565b80601f016020809104026020016040519081016040528092919081815260200182805461085f90612de1565b80156108ac5780601f10610881576101008083540402835291602001916108ac565b820191906000526020600020905b81548152906001019060200180831161088f57829003601f168201915b50505050509050919050565b600080516020612fc18339815191526108d0816110bd565b6108dc858585856110da565b5050505050565b600080516020612f618339815191526108fb816110bd565b816109565760405162461bcd60e51b815260206004820152602560248201527f674554483a707269636520717565727920666f7220746865207a65726f206164604482015264647265737360d81b6064820152608401610697565b6000828152600a60209081526040808320869055600b9091529020429055604080518381526020810185905242918101919091527f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489060600161075e565b6001600160a01b0385163314806109d057506109d085336105a7565b6109ec5760405162461bcd60e51b815260040161069790612b9b565b6108dc8585858585611234565b600082815260036020526040902060010154610a14816110bd565b610a1e83836113de565b505050565b600080516020612f81833981519152610a3b816110bd565b610a53600080516020612f81833981519152836113de565b6106f8600080516020612f81833981519152335b6001600160a01b0381163314610ad75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610697565b6106f88282611464565b600080516020612fa1833981519152610af9816110bd565b610b016114cb565b50565b60009081526008602090815260408083206001600160a01b03949094168352929052205460ff1690565b60608151835114610b935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610697565b600083516001600160401b03811115610bae57610bae612e8f565b604051908082528060200260200182016040528015610bd7578160200160208202803683370190505b50905060005b8451811015610c4f57610c22858281518110610bfb57610bfb612e79565b6020026020010151858381518110610c1557610c15612e79565b6020026020010151610630565b828281518110610c3457610c34612e79565b6020908102919091010152610c4881612e48565b9050610bdd565b509392505050565b600080516020612fe1833981519152610c6f816110bd565b6001600160a01b038416610cd85760405162461bcd60e51b815260206004820152602a60248201527f674554483a6d6964646c657761726520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610697565b6001600160a01b0384163b610d3a5760405162461bcd60e51b815260206004820152602260248201527f674554483a6d6964646c6577617265206d757374206265206120636f6e74726160448201526118dd60f21b6064820152608401610697565b60008381526008602090815260408083206001600160a01b03881684529091529020805460ff1916831515179055604080518481526001600160a01b0386166020820152831515918101919091527fc3c7dc5ac1b5d811719dbd5be732967d24ed27897351a8a123e526f6b53dc5249060600160405180910390a150505050565b6001600160a01b038316331480610dd75750610dd783336105a7565b610df35760405162461bcd60e51b815260040161069790612b9b565b610a1e83838361151d565b600080516020612fc1833981519152610e16816110bd565b6108dc858585856116bb565b600080516020612fa1833981519152610e3a816110bd565b610b016117a4565b600080516020612f61833981519152610e5a816110bd565b610e72600080516020612f61833981519152836113de565b6106f8600080516020612f6183398151915233610a67565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6007805461077890612de1565b6106f83383836117e1565b600080516020612fc1833981519152610ee5816110bd565b610efd600080516020612fc1833981519152836113de565b6106f8600080516020612fc183398151915233610a67565b600080516020612fa1833981519152610f2d816110bd565b610f45600080516020612fa1833981519152836113de565b6106f8600080516020612fa183398151915233610a67565b600080516020612fe1833981519152610f75816110bd565b610f8d600080516020612fe1833981519152836113de565b6106f8600080516020612fe183398151915233610a67565b600082815260036020526040902060010154610fc0816110bd565b610a1e8383611464565b6001600160a01b038516331480610fe65750610fe685336105a7565b806110095750610ff63384610b04565b8015611009575061100785846107f9565b155b6110255760405162461bcd60e51b815260040161069790612b9b565b6108dc85858585856118c2565b6001600160a01b03831633148061104e575061104e83336105a7565b80611071575061105e3383610b04565b8015611071575061106f83836107f9565b155b61108d5760405162461bcd60e51b815260040161069790612b9b565b610a1e8383836119fa565b60006001600160e01b03198216637965db0b60e01b14806106d157506106d182611b12565b610b018133611b62565b80516106f890600290602084019061222b565b6001600160a01b0384166111005760405162461bcd60e51b815260040161069790612d03565b81518351146111215760405162461bcd60e51b815260040161069790612cbb565b3361113181600087878787611bbb565b60005b84518110156111cc5783818151811061114f5761114f612e79565b602002602001015160008087848151811061116c5761116c612e79565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111b49190612d67565b909155508190506111c481612e48565b915050611134565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161121d929190612ace565b60405180910390a46108dc81600087878787611bd1565b81518351146112555760405162461bcd60e51b815260040161069790612cbb565b6001600160a01b03841661127b5760405162461bcd60e51b815260040161069790612be9565b3361128a818787878787611bbb565b60005b84518110156113705760008582815181106112aa576112aa612e79565b6020026020010151905060008583815181106112c8576112c8612e79565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156113185760405162461bcd60e51b815260040161069790612c71565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611355908490612d67565b925050819055505050508061136990612e48565b905061128d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113c0929190612ace565b60405180910390a46113d6818787878787611bd1565b505050505050565b6113e88282610e8a565b6106f85760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61146e8282610e8a565b156106f85760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6114d3611d3c565b6004805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166115435760405162461bcd60e51b815260040161069790612c2e565b80518251146115645760405162461bcd60e51b815260040161069790612cbb565b600033905061158781856000868660405180602001604052806000815250611bbb565b60005b835181101561164c5760008482815181106115a7576115a7612e79565b6020026020010151905060008483815181106115c5576115c5612e79565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156116155760405162461bcd60e51b815260040161069790612b57565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061164481612e48565b91505061158a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161169d929190612ace565b60405180910390a46040805160208101909152600090525b50505050565b6001600160a01b0384166116e15760405162461bcd60e51b815260040161069790612d03565b3360006116ed85611d87565b905060006116fa85611d87565b905061170b83600089858589611bbb565b6000868152602081815260408083206001600160a01b038b1684529091528120805487929061173b908490612d67565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461179b83600089898989611dd2565b50505050505050565b6117ac611dee565b6004805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115003390565b816001600160a01b0316836001600160a01b031614156118555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610697565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166118e85760405162461bcd60e51b815260040161069790612be9565b3360006118f485611d87565b9050600061190185611d87565b9050611911838989858589611bbb565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156119525760405162461bcd60e51b815260040161069790612c71565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061198f908490612d67565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46119ef848a8a8a8a8a611dd2565b505050505050505050565b6001600160a01b038316611a205760405162461bcd60e51b815260040161069790612c2e565b336000611a2c84611d87565b90506000611a3984611d87565b9050611a5983876000858560405180602001604052806000815250611bbb565b6000858152602081815260408083206001600160a01b038a16845290915290205484811015611a9a5760405162461bcd60e51b815260040161069790612b57565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261179b565b60006001600160e01b03198216636cdb3d1360e11b1480611b4357506001600160e01b031982166303a24d0760e21b145b806106d157506301ffc9a760e01b6001600160e01b03198316146106d1565b611b6c8282610e8a565b6106f857611b7981611e34565b611b84836020611e46565b604051602001611b959291906129a3565b60408051601f198184030181529082905262461bcd60e51b825261069791600401612afc565b611bc3611dee565b6113d6868686868686611fe8565b6001600160a01b0384163b156113d65760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c159089908990889088908890600401612a18565b602060405180830381600087803b158015611c2f57600080fd5b505af1925050508015611c5f575060408051601f3d908101601f19168201909252611c5c9181019061288a565b60015b611d0c57611c6b612ea5565b806308c379a01415611ca55750611c80612ec1565b80611c8b5750611ca7565b8060405162461bcd60e51b81526004016106979190612afc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610697565b6001600160e01b0319811663bc197c8160e01b1461179b5760405162461bcd60e51b815260040161069790612b0f565b60045460ff16611d855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610697565b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611dc157611dc1612e79565b602090810291909101015292915050565b611ddc8684610b04565b6113d6576113d6868686868686612161565b60045460ff1615611d855760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610697565b60606106d16001600160a01b03831660145b60606000611e55836002612d7f565b611e60906002612d67565b6001600160401b03811115611e7757611e77612e8f565b6040519080825280601f01601f191660200182016040528015611ea1576020820181803683370190505b509050600360fc1b81600081518110611ebc57611ebc612e79565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611eeb57611eeb612e79565b60200101906001600160f81b031916908160001a9053506000611f0f846002612d7f565b611f1a906001612d67565b90505b6001811115611f92576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f4e57611f4e612e79565b1a60f81b828281518110611f6457611f64612e79565b60200101906001600160f81b031916908160001a90535060049490941c93611f8b81612dca565b9050611f1d565b508315611fe15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610697565b9392505050565b6001600160a01b03851661206f5760005b835181101561206d5782818151811061201457612014612e79565b60200260200101516005600086848151811061203257612032612e79565b6020026020010151815260200190815260200160002060008282546120579190612d67565b90915550612066905081612e48565b9050611ff9565b505b6001600160a01b0384166113d65760005b835181101561179b57600084828151811061209d5761209d612e79565b6020026020010151905060008483815181106120bb576120bb612e79565b602002602001015190506000600560008481526020019081526020016000205490508181101561213e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610697565b6000928352600560205260409092209103905561215a81612e48565b9050612080565b6001600160a01b0384163b156113d65760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121a59089908990889088908890600401612a76565b602060405180830381600087803b1580156121bf57600080fd5b505af19250505080156121ef575060408051601f3d908101601f191682019092526121ec9181019061288a565b60015b6121fb57611c6b612ea5565b6001600160e01b0319811663f23a6e6160e01b1461179b5760405162461bcd60e51b815260040161069790612b0f565b82805461223790612de1565b90600052602060002090601f016020900481019282612259576000855561229f565b82601f1061227257805160ff191683800117855561229f565b8280016001018555821561229f579182015b8281111561229f578251825591602001919060010190612284565b506122ab9291506122af565b5090565b5b808211156122ab57600081556001016122b0565b60006001600160401b038311156122dd576122dd612e8f565b6040516122f4601f8501601f191660200182612e1c565b80915083815284848401111561230957600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461233857600080fd5b919050565b600082601f83011261234e57600080fd5b8135602061235b82612d44565b6040516123688282612e1c565b8381528281019150858301600585901b8701840188101561238857600080fd5b60005b858110156123a75781358452928401929084019060010161238b565b5090979650505050505050565b8035801515811461233857600080fd5b600082601f8301126123d557600080fd5b611fe1838335602085016122c4565b6000602082840312156123f657600080fd5b611fe182612321565b6000806040838503121561241257600080fd5b61241b83612321565b915061242960208401612321565b90509250929050565b600080600080600060a0868803121561244a57600080fd5b61245386612321565b945061246160208701612321565b935060408601356001600160401b038082111561247d57600080fd5b61248989838a0161233d565b9450606088013591508082111561249f57600080fd5b6124ab89838a0161233d565b935060808801359150808211156124c157600080fd5b506124ce888289016123c4565b9150509295509295909350565b600080600080600060a086880312156124f357600080fd5b6124fc86612321565b945061250a60208701612321565b9350604086013592506060860135915060808601356001600160401b0381111561253357600080fd5b6124ce888289016123c4565b60008060006060848603121561255457600080fd5b61255d84612321565b925060208401356001600160401b038082111561257957600080fd5b6125858783880161233d565b9350604086013591508082111561259b57600080fd5b506125a88682870161233d565b9150509250925092565b600080600080608085870312156125c857600080fd5b6125d185612321565b935060208501356001600160401b03808211156125ed57600080fd5b6125f98883890161233d565b9450604087013591508082111561260f57600080fd5b61261b8883890161233d565b9350606087013591508082111561263157600080fd5b5061263e878288016123c4565b91505092959194509250565b6000806040838503121561265d57600080fd5b61266683612321565b9150612429602084016123b4565b6000806040838503121561268757600080fd5b61269083612321565b946020939093013593505050565b6000806000606084860312156126b357600080fd5b6126bc84612321565b9250602084013591506126d1604085016123b4565b90509250925092565b6000806000606084860312156126ef57600080fd5b6126f884612321565b95602085013595506040909401359392505050565b6000806000806080858703121561272357600080fd5b61272c85612321565b9350602085013592506040850135915060608501356001600160401b0381111561275557600080fd5b61263e878288016123c4565b6000806040838503121561277457600080fd5b82356001600160401b038082111561278b57600080fd5b818501915085601f83011261279f57600080fd5b813560206127ac82612d44565b6040516127b98282612e1c565b8381528281019150858301600585901b870184018b10156127d957600080fd5b600096505b84871015612803576127ef81612321565b8352600196909601959183019183016127de565b509650508601359250508082111561281a57600080fd5b506128278582860161233d565b9150509250929050565b60006020828403121561284357600080fd5b5035919050565b6000806040838503121561285d57600080fd5b8235915061242960208401612321565b60006020828403121561287f57600080fd5b8135611fe181612f4a565b60006020828403121561289c57600080fd5b8151611fe181612f4a565b6000602082840312156128b957600080fd5b81356001600160401b038111156128cf57600080fd5b8201601f810184136128e057600080fd5b6128ef848235602084016122c4565b949350505050565b6000806040838503121561290a57600080fd5b82359150612429602084016123b4565b6000806040838503121561292d57600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561296c57815187529582019590820190600101612950565b509495945050505050565b6000815180845261298f816020860160208601612d9e565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129db816017850160208801612d9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612a0c816028840160208801612d9e565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612a449083018661293c565b8281036060840152612a56818661293c565b90508281036080840152612a6a8185612977565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ab090830184612977565b979650505050505050565b602081526000611fe1602083018461293c565b604081526000612ae1604083018561293c565b8281036020840152612af3818561293c565b95945050505050565b602081526000611fe16020830184612977565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b03821115612d5d57612d5d612e8f565b5060051b60200190565b60008219821115612d7a57612d7a612e63565b500190565b6000816000190483118215151615612d9957612d99612e63565b500290565b60005b83811015612db9578181015183820152602001612da1565b838111156116b55750506000910152565b600081612dd957612dd9612e63565b506000190190565b600181811c90821680612df557607f821691505b60208210811415612e1657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715612e4157612e41612e8f565b6040525050565b6000600019821415612e5c57612e5c612e63565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612ebe5760046000803e5060005160e01c5b90565b600060443d1015612ecf5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612efe57505050505090565b8285019150815181811115612f165750505050505090565b843d8701016020828501011115612f305750505050505090565b612f3f60208286010187612e1c565b509095945050505050565b6001600160e01b031981168114610b0157600080fdfe68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef17804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6f04f52d1f685586eac22a7ca73ab9ce0c45b77d01934bed334a9ff223be978a1a26469706673582212205e0e1b366bf375f97cdba5c4e5118849b149bcd7b08e4477ae00f9d5c35e14d464736f6c63430008070033",
  "devdoc": {
    "author": "Ice Bear & Crash Bandicoot",
    "details": "gETH is chain-agnostic, meaning it can be used on any evm chain * if given the correct name and symbol.gETH is immutable, it can not be upgraded.gETH is a special ERC1155 contract with additional functionalities: gETHMiddlewares: * Most important functionality gETH provides: * Allowing any other contract to provide additional functionality * around the balance and price data, such as using an ID like ERC20. * This addition effectively result in changes in * safeTransferFrom(), burn(), _doSafeTransferAcceptanceCheck() * functions, reasoning is in the comments. Avoiders: * If one wants to remain unbound from gETHMiddlewares, * it can be done so by calling \"avoidMiddlewares\" function. PricePerShare: * Keeping track of the ratio between the derivative * and the underlaying staked asset, Ether. Denominator: * ERC1155 does not have decimals and it is not wise to use the name convention * but we need to provide some information on how to denominate the balances, price, etc.review ERC1155PausableBurnableSupply, which is generated with Openzeppelin wizard.",
    "events": {
      "PriceUpdated(uint256,uint256,uint256)": {
        "custom:section": "** EVENTS **"
      }
    },
    "kind": "dev",
    "methods": {
      "avoidMiddlewares(uint256,bool)": {
        "details": "ADDED for gETH*",
        "params": {
          "isAvoid": "true: restrict middlewares, false: allow middlewares"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "CHANGED for gETHADDED \"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\"See ERC1155Burnable burn: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/extensions/ERC1155Burnable.sol#L15"
      },
      "constructor": {
        "params": {
          "_name": "chain specific name: Geode Staked Ether, geode Staked Avax etc.",
          "_symbol": "chain specific symbol of the staking derivative: gETH, gGNO, gAVAX, etc.*"
        }
      },
      "denominator()": {
        "details": "ERC1155 does not have a decimals, and it is not wise to use the same nameADDED for gETH"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isAvoider(address,uint256)": {
        "details": "ADDED for gETH*",
        "params": {
          "account": "the potential avoider"
        }
      },
      "isMiddleware(address,uint256)": {
        "details": "ADDED for gETH"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pricePerShare(uint256)": {
        "details": "ADDED for gETH",
        "returns": {
          "_0": "price of the derivative in terms of underlying token, Ether"
        }
      },
      "priceUpdateTimestamp(uint256)": {
        "details": "ADDED for gETH",
        "returns": {
          "_0": "timestamp of the latest price update for given ID"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "CHANGED for gETHADDED \"|| (isMiddleware(_msgSender(), id) && !isAvoider(from, id))\"See ERC1155 safeTransferFrom: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/cf86fd9962701396457e50ab0d6cc78aa29a5ebc/contracts/token/ERC1155/ERC1155.sol#L114"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setMiddleware(address,uint256,bool)": {
        "details": "ADDED for gETH",
        "params": {
          "isSet": "true: sets as an middleware, false: unsets",
          "middleware": "Address of the contract that will act as an middleware"
        }
      },
      "setPricePerShare(uint256,uint256)": {
        "details": "ADDED for gETH"
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferMiddlewareManagerRole(address)": {
        "details": "MIDDLEWARE MANAGER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferMinterRole(address)": {
        "details": "MINTER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferOracleRole(address)": {
        "details": "ORACLE is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferPauserRole(address)": {
        "details": "PAUSER is basically a superUser, there can be only 1 at a given time,intended as \"Portal\""
      },
      "transferUriSetterRole(address)": {
        "details": "URI_SETTER is basically a superuser, there can be only 1 at a given time,intended as \"Governance/DAO\""
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "MIDDLEWARE_MANAGER_ROLE": {
        "custom:section": "** CONSTANTS **"
      },
      "_avoiders": {
        "details": "ADDED for gETH*"
      },
      "_middlewares": {
        "details": "There can be multiple Middlewares for 1 staking pool.ADDED for gETH*"
      },
      "_pricePerShare": {
        "details": "Freshly created IDs should return 1e18 since initally 1 ETH = 1 gETHADDED for gETH*"
      },
      "_priceUpdateTimestamp": {
        "details": "ADDED for gETH*"
      },
      "name": {
        "custom:section": "** VARIABLES **"
      }
    },
    "title": "gETH : Geode Finance Liquid Staking Derivatives",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "avoidMiddlewares(uint256,bool)": {
        "notice": "Restrict any affect of middlewares on the tokens of caller"
      },
      "constructor": {
        "notice": "Sets name, symbol, uri and grants necessary roles."
      },
      "denominator()": {
        "notice": "a centralized denominator for all contract using gETH"
      },
      "isAvoider(address,uint256)": {
        "notice": "Checks if the given address restricts the affect of the middlewares on their gETH"
      },
      "isMiddleware(address,uint256)": {
        "notice": "Check if an address is approved as an middleware for an ID"
      },
      "setMiddleware(address,uint256,bool)": {
        "notice": "Set an address of a contract that will act as a middleware on gETH contract for a spesific ID"
      },
      "setPricePerShare(uint256,uint256)": {
        "notice": "Only ORACLE can call this function and set price"
      },
      "transferMiddlewareManagerRole(address)": {
        "notice": "transfers the authorized party for middleware management"
      },
      "transferMinterRole(address)": {
        "notice": "transfers the authorized party for Minting operations related to minting"
      },
      "transferOracleRole(address)": {
        "notice": "transfers the authorized party for Oracle operations related to pricing"
      },
      "transferPauserRole(address)": {
        "notice": "transfers the authorized party for Pausing operations."
      },
      "transferUriSetterRole(address)": {
        "notice": "transfers the authorized party for setting a new uri."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20821,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20827,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20829,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4101,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4096_storage)"
      },
      {
        "astId": 5103,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 22097,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19674,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 19676,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 19683,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_middlewares",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 19690,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_avoiders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 19695,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_pricePerShare",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19700,
        "contract": "contracts/Portal/gETH.sol:gETH",
        "label": "_priceUpdateTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4096_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4096_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4096_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/Portal/gETH.sol:gETH",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4095,
            "contract": "contracts/Portal/gETH.sol:gETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}