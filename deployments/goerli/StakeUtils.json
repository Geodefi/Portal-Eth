{
  "address": "0x449b0b8d4F68F00196f1Ede76063F83b296a7DC2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "BeaconStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtgETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedgETH",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "FeeSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "TYPE",
          "type": "uint256"
        }
      ],
      "name": "IdInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMaintainer",
          "type": "address"
        }
      ],
      "name": "MaintainerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "OperatorApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Prisoned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveAfter",
          "type": "uint256"
        }
      ],
      "name": "ValidatorPeriodSwitched",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IGNORABLE_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EARLY_EXIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MAINTENANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VALIDATOR_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_EXPIRY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRISON_SENTENCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWITCH_LATENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd605cfc094ee0403a11a80013f0c94787f92c79bbf7e666fb34ecc9c8665bf2",
  "receipt": {
    "to": null,
    "from": "0x2C95BC18Fd9382a07776D416EeF6c2FEb3AD2A8C",
    "contractAddress": "0x449b0b8d4F68F00196f1Ede76063F83b296a7DC2",
    "transactionIndex": 3,
    "gasUsed": "5178987",
    "logsBloom": "0x
    "blockHash": "0xfca975301cd06142bb7a39f698641bb682b993e795fc677fd2d970da9e7c12bf",
    "transactionHash": "0xcd605cfc094ee0403a11a80013f0c94787f92c79bbf7e666fb34ecc9c8665bf2",
    "logs": [],
    "blockNumber": 8557493,
    "cumulativeGasUsed": "5373806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ade6b4939fda34d609e172906ec4e12a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"BeaconStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtgETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedgETH\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"FeeSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"TYPE\",\"type\":\"uint256\"}],\"name\":\"IdInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"OperatorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"Prisoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"ProposalStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveAfter\",\"type\":\"uint256\"}],\"name\":\"ValidatorPeriodSwitched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IGNORABLE_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EARLY_EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MAINTENANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALIDATOR_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_EXPIRY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISON_SENTENCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWITCH_LATENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Icebear & Crash Bandicoot\",\"details\":\"It is important to keep every pool isolated and remember that every validator is unique.Controllers and Maintainers: * CONTROLLER is the owner of an ID, it manages the pool or the operator and its security is exteremely important. * maintainer is the worker, can be used to automate some daily tasks * * like distributing validators for Staking Pools or creating validators for Operators, * * not so crucial in terms of security.Reserved ID_TYPE: USERS: * Type 4 : Permissioned Operators * * Needs to be onboarded by the Dual Governance (Senate + Governance). * * Maintains Beacon Chain Validators on behalf of the Staking Pools. * * Can participate in the Operator Marketplace after initiation. * * Can utilize maintainers for staking operations. * Type 5 : Configurable Staking Pools * * Permissionless to create. * * Can utilize powers of modules such as Bound Liquidity Pools, Interfaces etc. * * Can be public or private, can use a whitelist if private. * * Can utilize maintainers for validator distribution on Operator Marketplace. * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * * accruing rewards and keeping Staked Ether safe and isolated. DEFAULT MODULES: * Some Modules has only 1 version that can be used by the Pool Owners. * Type 21 : Withdrawal Contract implementation version * * Mandatory. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Pools are in \\\"Recovery Mode\\\" until their Withdrawal Contract is upgraded. * * * Meaning, no more Depositing or Staking can happen. * Type 41 : Liquidity Pool version * * Optional. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate. * * Pools can simply deploy the new version of this Module and start using it, if ever changed. * * Liquidity Providers however, need to migrate. * Type 42 : Liquidity Pool Token version * * Optional, dependant to Liquidity Pool Module. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Crucial to have the same name with the LP version ALLOWED MODULES: * Some Modules can support many different versions that can be used by the Pool Owners. * Type 31 : gETH interface version * * Optional. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeUtils.PooledStakingFunctions are already protected with authenticationfirst review DataStoreUtilsthen review GeodeUtils\",\"kind\":\"dev\",\"methods\":{\"batchApproveOperators(DataStoreUtils.IsolatedStorage storage,uint256,uint256[],uint256[])\":{\"details\":\"When decreased the approved validator count below current active+proposed validators, operator can NOT create new validators.\",\"params\":{\"allowances\":\"the MAX number of validators that can be created by the Operator, for given Pool\",\"operatorIds\":\"array of Operator IDs to allow them create validators\",\"poolId\":\"the gETH id of the Pool\"}},\"beaconStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,bytes[])\":{\"details\":\"To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\"}},\"blameOperator(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)\":{\"details\":\"anyone can call this functionif operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned\"},\"changeMaintainer(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"details\":\"there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migration\"},\"decreaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"only CONTROLLER can decrease the balance externally,\",\"returns\":{\"success\":\"if the amount was sent and deducted\"}},\"deployLiquidityPool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"details\":\"sets the liquidity pool, LP token and liquidityPoolVersiongives full allowance to the pool, should not be a problem as portal does not hold any tokensa controller can deploy a liquidity pool after initiationa controller can deploy a new version of this module, but LPs would need to migrate\",\"params\":{\"_GOVERNANCE\":\"governance address will be the owner of the created pool.\"}},\"deposit(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"details\":\"an example for minting + buybacks * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- // debt  msgValue // 100   10  => buyback // 100   100 => buyback // 10    100 => buyback + mint // 1     x   => mint // 0.5   x   => mint // 0     x   => mint\",\"params\":{\"deadline\":\"liquidity pool parameter\",\"mingETH\":\"liquidity pool parameter\",\"poolId\":\"id of the staking pool, liquidity pool and gETH to be used.\"}},\"gETHInterfaces(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"for future referance: unsetted interfaces SHOULD return address(0)\"},\"getMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"returns\":{\"fee\":\"= percentage * PERCENTAGE_DENOMINATOR / 100\"}},\"increaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"details\":\"anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\"},\"initiateOperator(DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"details\":\"operators can fund their internal wallet on initiation by simply sending some ether.\",\"params\":{\"fee\":\"as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\",\"maintainer\":\"an address that automates daily operations, a script, a contract...\",\"validatorPeriod\":\"the expected maximum staking interval. This value should between * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above. Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()\"}},\"initiatePool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,address,address,bytes,bytes,bool[3])\":{\"details\":\"checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.requires exactly 1 validator worth of funds to be deposited on initiation - to prevent sybil attacks\",\"params\":{\"NAME\":\"used to generate an ID for the Pool\",\"_GOVERNANCE\":\"needed in case the Pool is configured with a Bound Liquidity Pool\",\"config\":\"[private(true) or public(false), deploying an interface with given version, deploying liquidity pool with latest version]\",\"fee\":\"as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\",\"interfaceVersion\":\"Pool creators can choose any allowed version as their gETHInterface\",\"interface_data\":\"interfaces might require additional data on initialization; like name, symbol, etc.\",\"maintainer\":\"an address that automates daily operations, a script, a contract... not really powerful.\"}},\"isPriceValid(StakeUtils.PooledStaking storage,uint256)\":{\"details\":\"known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false\"},\"isPrisoned(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"details\":\"\\\"released\\\" key refers to the end of the last imprisonment, when the limitations of operator is lifted\"},\"isWhitelisted(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"details\":\"Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set todo: add to portal\"},\"operatorAllowance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"an operator can not create new validators if: * 1. allowance is 0 (zero) * 2. lower than the current (proposed + active) number of validators * But if operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked.\"},\"proposeStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"details\":\"DCU.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCU.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 64)\",\"params\":{\"operatorId\":\"the id of the Operator whose maintainer calling this function\",\"poolId\":\"the id of the staking pool\",\"pubkeys\":\"Array of BLS12-381 public keys of the validators that will be proposed\",\"signatures1\":\"Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance\",\"signatures31\":\"Array of BLS12-381 signatures that will be used to send 31 ETH from pool on beaconStake\"}},\"setPoolVisibility(DataStoreUtils.IsolatedStorage storage,uint256,bool)\":{\"params\":{\"isPrivate\":\"true if pool should be private, false for public pools Note private pools can whitelist addresses with the help of a third party contract.\"}},\"setWhitelist(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"details\":\"Whitelisting contracts should implement IWhitelist interface.\"},\"switchMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"advise that 100% == PERCENTAGE_DENOMINATOR\"},\"switchValidatorPeriod(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"details\":\"limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\"}},\"title\":\"The Staking Library\",\"version\":1},\"userdoc\":{\"events\":{\"IdInitiated(uint256,uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"IGNORABLE_DEBT()\":{\"notice\":\"ignoring any buybacks if the Liquidity Pools has a low debt\"},\"MAX_EARLY_EXIT_FEE()\":{\"notice\":\"limiting EARLY_EXIT_FEE, 5%\"},\"MAX_MAINTENANCE_FEE()\":{\"notice\":\"limiting the pool and operator maintenance fee, 10%\"},\"MIN_VALIDATOR_PERIOD()\":{\"notice\":\"limiting the operator.validatorPeriod, between 3 months to 5 years\"},\"PRICE_EXPIRY()\":{\"notice\":\"price of gETH is only valid for 24H, after that minting is not allowed.\"},\"PRISON_SENTENCE()\":{\"notice\":\"limiting the access for Operators in case of bad/malicious/faulty behaviour\"},\"SWITCH_LATENCY()\":{\"notice\":\"some parameter changes are effective after a delay\"},\"batchApproveOperators(DataStoreUtils.IsolatedStorage storage,uint256,uint256[],uint256[])\":{\"notice\":\"To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future.\"},\"beaconStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,bytes[])\":{\"notice\":\"Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet.\"},\"blameOperator(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)\":{\"notice\":\"allows imprisoning an Operator if the validator have not been exited until expectedExit\"},\"canStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)\":{\"notice\":\"external function to check if a validator can use the pool funds\"},\"changeMaintainer(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"notice\":\"CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\"},\"decreaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"external function to decrease the internal wallet balance\"},\"deployLiquidityPool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"notice\":\"deploys a new liquidity pool using the latest version of MODULE_LIQUDITY_POOL\"},\"deposit(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"notice\":\"Allowing users to deposit into a staking pool.If a pool is not public only the maintainer can deposit.\"},\"gETHInterfaces(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"access all interfaces of a given ID.\"},\"getMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\"},\"increaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"external function to increase the internal wallet balance\"},\"initiateOperator(DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)\":{\"notice\":\"initiates ID as a Permissionned Node Operatorrequires ID to be approved as a node operator with a specific CONTROLLER\"},\"initiatePool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,address,address,bytes,bytes,bool[3])\":{\"notice\":\"Creates a Configurable Trustless Staking Pool!\"},\"isMintingAllowed(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Recovery Mode, can have many reasons\"},\"isPriceValid(StakeUtils.PooledStaking storage,uint256)\":{\"notice\":\"returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update\"},\"isPrisoned(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"Checks if the given operator is Prisoned\"},\"isPrivatePool(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"returns true if the pool is private\"},\"isWhitelisted(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"notice\":\"checks if the Whitelist allows staker to use given private pool\"},\"liquidityPoolById(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"returns liquidityPool as a contract\"},\"operatorAllowance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"*operatorAllowance is the maximum number of validators that the given Operator is allowed to create on behalf of the Pool\"},\"proposeStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])\":{\"notice\":\"Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools.\"},\"setPoolVisibility(DataStoreUtils.IsolatedStorage storage,uint256,bool)\":{\"notice\":\"changes the visibility of the pool\"},\"setWhitelist(DataStoreUtils.IsolatedStorage storage,uint256,address)\":{\"notice\":\"private pools can whitelist addresses with the help of a third party contract\"},\"switchMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY. Note Can NOT be called again while its currently switching.\"},\"switchValidatorPeriod(DataStoreUtils.IsolatedStorage storage,uint256,uint256)\":{\"notice\":\"updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\"},\"withdrawalContractById(DataStoreUtils.IsolatedStorage storage,uint256)\":{\"notice\":\"returns WithdrawalContract as a contract\"}},\"notice\":\"Creating a global standard for Staking, allowing anyone to create a trustless staking pool, improving the user experience for stakers and removing the need for intermediaries. * Exclusively contains functions related to: * 1. Modular Architecture of Configurable Staking Pools * 2. Operator Marketplace and Staking Operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Portal/utils/StakeUtilsLib.sol\":\"StakeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/Portal/helpers/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.7;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x47661fc872b08aa96131860eb7a6a2c398987b151104ab8dd70ce2ed5a31a5e4\",\"license\":\"Unlicense\"},\"contracts/Portal/utils/DataStoreUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title Isolated Storage Layout\\n * A Storage Management Library for Dynamic Structs\\n *\\n * * DataStoreUtils is a storage management tool designed to create a safe and scalable\\n * * storage layout with the help of data types, IDs and keys.\\n *\\n * * Focusing on upgradable contracts with multiple user types to create a\\n * * sustainable development environment.\\n * * In summary, extra gas cost that would be saved with Storage packing are\\n * * ignored to create upgradable structs.\\n *\\n * @dev Distinct id and key pairs SHOULD return different storage slots\\n * @dev TYPEs are defined in globals.sol\\n *\\n * @dev IDs are the representation of an entity with any given key as properties.\\n * @dev While it is good practice to keep record,\\n * * TYPE for ID is NOT mandatory, an ID might not have an explicit type.\\n * * Thus there is no checks of types or keys.\\n */\\n\\nlibrary DataStoreUtils {\\n  /**\\n   * @notice Main Struct for reading and writing operations for given (id, key) pairs\\n   * @param allIdsByType type => id[], optional categorization for IDs, requires direct access\\n   * @param uintData keccak(id, key) =>  returns uint256\\n   * @param bytesData keccak(id, key) => returns bytes\\n   * @param addressData keccak(id, key) =>  returns address\\n   * @param __gap keep the struct size at 16\\n   * @dev any other storage type can be expressed as uint or bytes\\n   */\\n  struct IsolatedStorage {\\n    mapping(uint256 => uint256[]) allIdsByType;\\n    mapping(bytes32 => uint256) uintData;\\n    mapping(bytes32 => bytes) bytesData;\\n    mapping(bytes32 => address) addressData;\\n    uint256[12] __gap;\\n  }\\n\\n  /**\\n   *                              ** HELPERS **\\n   **/\\n\\n  /**\\n   * @notice generaliazed method of generating an ID\\n   * @dev Some TYPEs may require permissionless creation. Allowing anyone to claim any ID,\\n   * meaning malicious actors can claim names to mislead people. To prevent this\\n   * TYPEs will be considered during ID generation.\\n   */\\n  function generateId(\\n    bytes memory _name,\\n    uint256 _type\\n  ) internal pure returns (uint256 id) {\\n    id = uint256(keccak256(abi.encodePacked(_name, _type)));\\n  }\\n\\n  /**\\n   * @notice hashes given id and a parameter to be used as key in getters and setters\\n   * @return key bytes32 hash of id and parameter to be stored\\n   **/\\n  function getKey(\\n    uint256 id,\\n    bytes32 param\\n  ) internal pure returns (bytes32 key) {\\n    key = keccak256(abi.encodePacked(id, param));\\n  }\\n\\n  /**\\n   *                              ** DATA GETTERS **\\n   **/\\n\\n  function readUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_id, _key)];\\n  }\\n\\n  function readBytesForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_id, _key)];\\n  }\\n\\n  function readAddressForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_id, _key)];\\n  }\\n\\n  /**\\n   *                              ** ARRAY GETTERS **\\n   **/\\n\\n  function readUintArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (uint256 data) {\\n    data = self.uintData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readBytesArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (bytes memory data) {\\n    data = self.bytesData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  function readAddressArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _index\\n  ) internal view returns (address data) {\\n    data = self.addressData[getKey(_index, getKey(_id, _key))];\\n  }\\n\\n  /**\\n   *                              ** DATA SETTERS **\\n   **/\\n\\n  function writeUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function addUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _addend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] += _addend;\\n  }\\n\\n  function subUintForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _minuend\\n  ) internal {\\n    self.uintData[getKey(_id, _key)] -= _minuend;\\n  }\\n\\n  function writeBytesForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    self.bytesData[getKey(_id, _key)] = _data;\\n  }\\n\\n  function writeAddressForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    self.addressData[getKey(_id, _key)] = _data;\\n  }\\n\\n  /**\\n   *                              ** ARRAY SETTERS **\\n   **/\\n\\n  function appendUintArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256 _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.uintData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendBytesArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.bytesData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  function appendAddressArrayForId(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    self.addressData[getKey(self.uintData[arrayKey]++, arrayKey)] = _data;\\n  }\\n\\n  /**\\n   *                              ** BATCH ARRAY SETTERS **\\n   **/\\n\\n  function appendUintArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    uint256[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.uintData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendBytesArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    bytes[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.bytesData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n\\n  function appendAddressArrayForIdBatch(\\n    IsolatedStorage storage self,\\n    uint256 _id,\\n    bytes32 _key,\\n    address[] memory _data\\n  ) internal {\\n    bytes32 arrayKey = getKey(_id, _key);\\n    uint256 arrayLen = self.uintData[arrayKey];\\n    for (uint256 i; i < _data.length; ) {\\n      self.addressData[getKey(arrayLen++, arrayKey)] = _data[i];\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    self.uintData[arrayKey] = arrayLen;\\n  }\\n}\\n\",\"keccak256\":\"0xa792c6f0c02220de88911ee11ab57c13f69cf020d618556754a713fe320b201a\",\"license\":\"MIT\"},\"contracts/Portal/utils/DepositContractUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../helpers/BytesLib.sol\\\";\\n\\nlibrary DepositContractUtils {\\n  IDepositContract internal constant DEPOSIT_CONTRACT =\\n    IDepositContract(0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b);\\n  uint256 internal constant PUBKEY_LENGTH = 48;\\n  uint256 internal constant SIGNATURE_LENGTH = 96;\\n  uint256 internal constant WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n  uint256 internal constant DEPOSIT_AMOUNT = 32 ether;\\n  uint256 internal constant DEPOSIT_AMOUNT_PRESTAKE = 1 ether;\\n  uint256 internal constant MAX_DEPOSITS_PER_CALL = 50;\\n\\n  /**\\n   * @dev Padding memory array with zeroes up to 64 bytes on the right\\n   * @param _b Memory array of size 32 .. 64\\n   */\\n  function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n    assert(_b.length >= 32 && _b.length <= 64);\\n    if (64 == _b.length) return _b;\\n\\n    bytes memory zero32 = new bytes(32);\\n    assembly {\\n      mstore(add(zero32, 0x20), 0)\\n    }\\n\\n    if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n    else\\n      return\\n        BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64 - _b.length)));\\n  }\\n\\n  /**\\n   * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n   * @param _value Number less than `2**64` for compatibility reasons\\n   */\\n  function _toLittleEndian64(\\n    uint256 _value\\n  ) internal pure returns (uint256 result) {\\n    result = 0;\\n    uint256 temp_value = _value;\\n    for (uint256 i = 0; i < 8; ++i) {\\n      result = (result << 8) | (temp_value & 0xFF);\\n      temp_value >>= 8;\\n    }\\n\\n    assert(0 == temp_value); // fully converted\\n    result <<= (24 * 8);\\n  }\\n\\n  function _getDepositDataRoot(\\n    bytes memory _pubkey,\\n    bytes memory _withdrawalCredentials,\\n    bytes memory _signature,\\n    uint256 _stakeAmount\\n  ) internal pure returns (bytes32) {\\n    require(_stakeAmount >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n    require(\\n      _stakeAmount % 1 gwei == 0,\\n      \\\"DepositContract: deposit value not multiple of gwei\\\"\\n    );\\n\\n    uint256 deposit_amount = _stakeAmount / 1 gwei;\\n    bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n    bytes32 signatureRoot = sha256(\\n      abi.encodePacked(\\n        sha256(BytesLib.slice(_signature, 0, 64)),\\n        sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n      )\\n    );\\n\\n    bytes32 depositDataRoot = sha256(\\n      abi.encodePacked(\\n        sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n        sha256(\\n          abi.encodePacked(_toLittleEndian64(deposit_amount), signatureRoot)\\n        )\\n      )\\n    );\\n\\n    return depositDataRoot;\\n  }\\n\\n  function addressToWC(address wcAddress) internal pure returns (bytes memory) {\\n    uint256 w = 1 << 248;\\n\\n    return\\n      abi.encodePacked(\\n        bytes32(w) | bytes32(uint256(uint160(address(wcAddress))))\\n      );\\n  }\\n\\n  function depositValidator(\\n    bytes calldata pubkey,\\n    bytes memory withdrawalCredential,\\n    bytes memory signature,\\n    uint256 amount\\n  ) internal {\\n    DEPOSIT_CONTRACT.deposit{value: amount}(\\n      pubkey,\\n      withdrawalCredential,\\n      signature,\\n      _getDepositDataRoot(pubkey, withdrawalCredential, signature, amount)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd81c6713a99d087426a3915d4810fc9638a2e7d6f64cb43585c5474bad7367a8\",\"license\":\"MIT\"},\"contracts/Portal/utils/GeodeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport {ID_TYPE, PERCENTAGE_DENOMINATOR} from \\\"./globals.sol\\\";\\nimport {DataStoreUtils as DSU} from \\\"./DataStoreUtilsLib.sol\\\";\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title Geode Dual Governance\\n * @notice Exclusively contains functions for the administration of the Isolated Storage,\\n * and Limited Upgradability with Dual Governance of Governance and Senate\\n * Note This library contains both functions called by users(ID) (approveSenate) and admins(GOVERNANCE, SENATE)\\n *\\n * @dev Reserved ID_TYPEs:\\n *\\n * * Type 0 : NULL\\n *\\n * * Type 1 : SENATE ELECTIONS\\n * * * Every SENATE has an expiration date, a new one should be elected before it ends.\\n * * * Only the controllers of IDs with TYPEs that are set true on _electorTypes can vote.\\n * * * 2/3 is the expected concensus, however this logic seems to be improved in the future.\\n *\\n * * Type 2 : CONTRACT UPGRADES\\n * * * Provides Limited Upgradability on Portal and Withdrawal Contract\\n * * * Contract can be upgradable once Senate approves it.\\n *\\n * * Type 3 : __GAP__\\n * * * ormally represented the admin contract, but we use UUPS. Reserved to be never used.\\n *\\n * @dev Contracts relying on this library must initialize GeodeUtils.DualGovernance\\n * @dev Functions are already protected accordingly\\n *\\n * @dev review DataStoreUtils\\n */\\nlibrary GeodeUtils {\\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\\n  using DSU for DSU.IsolatedStorage;\\n\\n  /// @notice EVENTS\\n  event GovernanceFeeUpdated(uint256 newFee);\\n  event ControllerChanged(uint256 indexed id, address newCONTROLLER);\\n  event Proposed(\\n    uint256 id,\\n    address CONTROLLER,\\n    uint256 indexed TYPE,\\n    uint256 deadline\\n  );\\n  event ProposalApproved(uint256 id);\\n  event ElectorTypeSet(uint256 TYPE, bool isElector);\\n  event Vote(uint256 indexed proposalId, uint256 indexed voterId);\\n  event NewSenate(address senate, uint256 senateExpiry);\\n\\n  /**\\n   * @notice Proposals give the control of a specific ID to a CONTROLLER\\n   *\\n   * @notice A Proposal has 4 specs:\\n   * @param TYPE: refer to globals.sol\\n   * @param CONTROLLER: the address that refers to the change that is proposed by given proposal.\\n   * * This slot can refer to the controller of an id, a new implementation contract, a new Senate etc.\\n   * @param NAME: DataStore generates ID by keccak(name, type)\\n   * @param deadline: refers to last timestamp until a proposal expires, limited by MAX_PROPOSAL_DURATION\\n   * * Expired proposals can not be approved by Senate\\n   * * Expired proposals can not be overriden by new proposals\\n   **/\\n  struct Proposal {\\n    address CONTROLLER;\\n    uint256 TYPE;\\n    bytes NAME;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice DualGovernance allows 2 parties to manage a contract with proposals and approvals\\n   * @param GOVERNANCE a community that works to improve the core product and ensures its adoption in the DeFi ecosystem\\n   * Suggests updates, such as new operators, contract upgrades, a new Senate -without any permission to force them-\\n   * @param SENATE An address that protects the users by controlling the state of governance, contract updates and other crucial changes\\n   * Note SENATE is proposed by Governance and voted by all elector TYPEs, approved if \\u230a2/3\\u230b votes.\\n   * @param SENATE_EXPIRY refers to the last timestamp that SENATE can continue operating. Enforces a new election, limited by MAX_SENATE_PERIOD\\n   * @param GOVERNANCE_FEE operation fee on the given contract, acquired by GOVERNANCE. Limited by MAX_GOVERNANCE_FEE\\n   * @param approvedVersion only 1 implementation contract SHOULD be \\\"approved\\\" at any given time.\\n   * * @dev safe to set to address(0) after every upgrade as isUpgradeAllowed returns false for address(0)\\n   * @param _electorCount increased when a new id is added with _electorTypes[id] == true\\n   * @param _electorTypes only given TYPEs can vote\\n   * @param _proposals till approved, proposals are kept separated from the Isolated Storage\\n   * @param __gap keep the struct size at 16\\n   **/\\n  struct DualGovernance {\\n    address GOVERNANCE;\\n    address SENATE;\\n    uint256 SENATE_EXPIRY;\\n    uint256 GOVERNANCE_FEE;\\n    address approvedVersion;\\n    uint256 _electorCount;\\n    mapping(uint256 => bool) _electorTypes;\\n    mapping(uint256 => Proposal) _proposals;\\n    uint256[8] __gap;\\n  }\\n\\n  /**\\n   * @notice limiting the GOVERNANCE_FEE, 5%\\n   */\\n  uint256 public constant MAX_GOVERNANCE_FEE =\\n    (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /**\\n   * @notice prevents Governance from collecting any fees till given timestamp:\\n   * @notice April 2025\\n   * @dev fee switch will be automatically switched on after given timestamp\\n   * @dev fee switch can be switched on with the approval of Senate (a contract upgrade)\\n   */\\n  uint256 public constant FEE_COOLDOWN = 1743454800;\\n\\n  uint32 public constant MIN_PROPOSAL_DURATION = 1 days;\\n  uint32 public constant MAX_PROPOSAL_DURATION = 4 weeks;\\n  uint32 public constant MAX_SENATE_PERIOD = 365 days;\\n\\n  modifier onlySenate(DualGovernance storage self) {\\n    require(msg.sender == self.SENATE, \\\"GU: SENATE role needed\\\");\\n    require(block.timestamp < self.SENATE_EXPIRY, \\\"GU: SENATE expired\\\");\\n    _;\\n  }\\n\\n  modifier onlyGovernance(DualGovernance storage self) {\\n    require(msg.sender == self.GOVERNANCE, \\\"GU: GOVERNANCE role needed\\\");\\n    _;\\n  }\\n\\n  modifier onlyController(DSU.IsolatedStorage storage DATASTORE, uint256 id) {\\n    require(\\n      msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\n      \\\"GU: CONTROLLER role needed\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice                                     ** DualGovernance **\\n   **/\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @return address of SENATE\\n   **/\\n  function getSenate(\\n    DualGovernance storage self\\n  ) external view returns (address) {\\n    return self.SENATE;\\n  }\\n\\n  /**\\n   * @return address of GOVERNANCE\\n   **/\\n  function getGovernance(\\n    DualGovernance storage self\\n  ) external view returns (address) {\\n    return self.GOVERNANCE;\\n  }\\n\\n  /**\\n   * @return the expiration date of current SENATE as a timestamp\\n   */\\n  function getSenateExpiry(\\n    DualGovernance storage self\\n  ) external view returns (uint256) {\\n    return self.SENATE_EXPIRY;\\n  }\\n\\n  /**\\n   * @notice active GOVERNANCE_FEE limited by FEE_COOLDOWN and MAX_GOVERNANCE_FEE\\n   * @dev MAX_GOVERNANCE_FEE MUST limit GOVERNANCE_FEE even if MAX is changed later\\n   * @dev MUST return 0 until cooldown period is active\\n   */\\n  function getGovernanceFee(\\n    DualGovernance storage self\\n  ) external view returns (uint256) {\\n    return\\n      block.timestamp < FEE_COOLDOWN\\n        ? 0\\n        : MAX_GOVERNANCE_FEE > self.GOVERNANCE_FEE\\n        ? self.GOVERNANCE_FEE\\n        : MAX_GOVERNANCE_FEE;\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyGovernance, sets the governance fee\\n   * @dev Can not set the fee more than MAX_GOVERNANCE_FEE\\n   */\\n  function setGovernanceFee(\\n    DualGovernance storage self,\\n    uint256 newFee\\n  ) external onlyGovernance(self) {\\n    require(newFee <= MAX_GOVERNANCE_FEE, \\\"GU: > MAX_GOVERNANCE_FEE\\\");\\n\\n    self.GOVERNANCE_FEE = newFee;\\n\\n    emit GovernanceFeeUpdated(newFee);\\n  }\\n\\n  /**\\n   * @notice                                     ** ID **\\n   */\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyController, change the CONTROLLER of an ID\\n   * @dev this operation can not be reverted by the old CONTROLLER !\\n   * @dev can not provide address(0), try 0x000000000000000000000000000000000000dEaD\\n   */\\n  function changeIdCONTROLLER(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newCONTROLLER\\n  ) external onlyController(DATASTORE, id) {\\n    require(newCONTROLLER != address(0), \\\"GU: CONTROLLER can not be zero\\\");\\n\\n    DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", newCONTROLLER);\\n\\n    emit ControllerChanged(id, newCONTROLLER);\\n  }\\n\\n  /**\\n   * @notice                                     ** PROPOSALS **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @dev refer to Proposal struct\\n   */\\n  function getProposal(\\n    DualGovernance storage self,\\n    uint256 id\\n  ) external view returns (Proposal memory) {\\n    return self._proposals[id];\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlyGovernance, creates a new Proposal\\n   * @dev DATASTORE[id] will not be updated until the proposal is approved\\n   * @dev Proposals can NEVER be overriden\\n   * @dev refer to Proposal struct\\n   */\\n  function newProposal(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external onlyGovernance(self) returns (uint256 id) {\\n    id = DSU.generateId(_NAME, _TYPE);\\n\\n    require(self._proposals[id].deadline == 0, \\\"GU: NAME already proposed\\\");\\n\\n    require(\\n      (DATASTORE.readBytesForId(id, \\\"NAME\\\")).length == 0,\\n      \\\"GU: ID already exist\\\"\\n    );\\n\\n    require(_CONTROLLER != address(0), \\\"GU: CONTROLLER can NOT be ZERO\\\");\\n    require(\\n      _TYPE != ID_TYPE.NONE && _TYPE != ID_TYPE.__GAP__,\\n      \\\"GU: TYPE is NONE or GAP\\\"\\n    );\\n    require(\\n      duration >= MIN_PROPOSAL_DURATION && duration <= MAX_PROPOSAL_DURATION,\\n      \\\"GU: invalid proposal duration\\\"\\n    );\\n\\n    uint256 _deadline = block.timestamp + duration;\\n\\n    self._proposals[id] = Proposal({\\n      CONTROLLER: _CONTROLLER,\\n      TYPE: _TYPE,\\n      NAME: _NAME,\\n      deadline: _deadline\\n    });\\n\\n    emit Proposed(id, _CONTROLLER, _TYPE, _deadline);\\n  }\\n\\n  /**\\n   * @notice onlySenate, approves a proposal and records given data to\\n   *  @notice specific changes for the reserved types (1,2,3) are implemented here,\\n   *  any other addition should take place in Portal, as not related\\n   *  @param id given ID proposal that has been approved by Senate\\n   *  @dev Senate is not able to approve approved proposals\\n   *  @dev Senate is not able to approve expired proposals\\n   *  @dev Senate is not able to approve SENATE proposals\\n   */\\n  function approveProposal(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) external onlySenate(self) returns (uint256 _type, address _controller) {\\n    require(\\n      self._proposals[id].deadline > block.timestamp,\\n      \\\"GU: NOT an active proposal\\\"\\n    );\\n\\n    _type = self._proposals[id].TYPE;\\n    _controller = self._proposals[id].CONTROLLER;\\n\\n    require(_type != ID_TYPE.SENATE, \\\"GU: can NOT approve SENATE election\\\");\\n\\n    DATASTORE.writeUintForId(id, \\\"TYPE\\\", _type);\\n    DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", _controller);\\n    DATASTORE.writeBytesForId(id, \\\"NAME\\\", self._proposals[id].NAME);\\n    DATASTORE.allIdsByType[_type].push(id);\\n\\n    if (_type == ID_TYPE.CONTRACT_UPGRADE) {\\n      self.approvedVersion = _controller;\\n    }\\n\\n    if (isElector(self, _type)) {\\n      self._electorCount += 1;\\n    }\\n\\n    // important\\n    self._proposals[id].deadline = block.timestamp;\\n\\n    emit ProposalApproved(id);\\n  }\\n\\n  /**\\n   * @notice                                       ** SENATE ELECTIONS **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  function isElector(\\n    DualGovernance storage self,\\n    uint256 _TYPE\\n  ) public view returns (bool) {\\n    return self._electorTypes[_TYPE];\\n  }\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice internal function to set a new senate with a given period\\n   */\\n  function _setSenate(\\n    DualGovernance storage self,\\n    address _newSenate,\\n    uint256 _expiry\\n  ) internal {\\n    self.SENATE = _newSenate;\\n    self.SENATE_EXPIRY = _expiry;\\n\\n    emit NewSenate(self.SENATE, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice onlySenate, Sometimes it is useful to be able to change the Senate's address.\\n   * @dev does not change the expiry\\n   */\\n  function changeSenate(\\n    DualGovernance storage self,\\n    address _newSenate\\n  ) external onlySenate(self) {\\n    _setSenate(self, _newSenate, self.SENATE_EXPIRY);\\n  }\\n\\n  /**\\n   * @notice onlyGovernance, only elector types can vote for senate\\n   * @param _TYPE selected type\\n   * @param _isElector true if selected _type can vote for senate from now on\\n   * @dev can not set with the same value again, preventing double increment/decrements\\n   */\\n  function setElectorType(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _TYPE,\\n    bool _isElector\\n  ) external onlyGovernance(self) {\\n    require(_isElector != isElector(self, _TYPE), \\\"GU: type already elector\\\");\\n    require(\\n      _TYPE > ID_TYPE.__GAP__,\\n      \\\"GU: 0, Senate, Upgrade, GAP cannot be elector\\\"\\n    );\\n\\n    self._electorTypes[_TYPE] = _isElector;\\n\\n    if (_isElector) {\\n      self._electorCount += DATASTORE.allIdsByType[_TYPE].length;\\n    } else {\\n      self._electorCount -= DATASTORE.allIdsByType[_TYPE].length;\\n    }\\n\\n    emit ElectorTypeSet(_TYPE, _isElector);\\n  }\\n\\n  /**\\n   * @notice onlyController, Proposed CONTROLLER is the new Senate after 2/3 of the electors approved\\n   * NOTE mathematically, min 3 elector is needed for (c+1)*2/3 to work properly\\n   * @notice id can not vote if:\\n   * - approved already\\n   * - proposal is expired\\n   * - not its type is elector\\n   * - not senate proposal\\n   * @param voterId should have the voting rights, msg.sender should be the CONTROLLER of given ID\\n   * @dev pins id as \\\"voted\\\" when approved\\n   * @dev increases \\\"approvalCount\\\" of proposalId by 1 when approved\\n   */\\n  function approveSenate(\\n    DualGovernance storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 proposalId,\\n    uint256 voterId\\n  ) external onlyController(DATASTORE, voterId) {\\n    uint256 _type = self._proposals[proposalId].TYPE;\\n    require(_type == ID_TYPE.SENATE, \\\"GU: NOT Senate Proposal\\\");\\n    require(\\n      self._proposals[proposalId].deadline >= block.timestamp,\\n      \\\"GU: proposal expired\\\"\\n    );\\n    require(\\n      isElector(self, DATASTORE.readUintForId(voterId, \\\"TYPE\\\")),\\n      \\\"GU: NOT an elector\\\"\\n    );\\n    require(\\n      DATASTORE.readUintForId(proposalId, DSU.getKey(voterId, \\\"voted\\\")) == 0,\\n      \\\" GU: already approved\\\"\\n    );\\n\\n    DATASTORE.writeUintForId(proposalId, DSU.getKey(voterId, \\\"voted\\\"), 1);\\n    DATASTORE.addUintForId(proposalId, \\\"approvalCount\\\", 1);\\n\\n    if (\\n      DATASTORE.readUintForId(proposalId, \\\"approvalCount\\\") >=\\n      ((self._electorCount + 1) * 2) / 3\\n    ) {\\n      self._proposals[proposalId].deadline = block.timestamp;\\n      _setSenate(\\n        self,\\n        self._proposals[proposalId].CONTROLLER,\\n        block.timestamp + MAX_SENATE_PERIOD\\n      );\\n    }\\n\\n    emit Vote(proposalId, voterId);\\n  }\\n\\n  /**\\n   * @notice                                       ** LIMITED UPGRADABILITY **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice Get if it is allowed to change a specific contract with the current version.\\n   * @return True if it is allowed by senate and false if not.\\n   * @dev address(0) should return false\\n   * @dev DO NOT TOUCH, EVER! WHATEVER YOU DEVELOP IN FUCKING 3022\\n   **/\\n  function isUpgradeAllowed(\\n    DualGovernance storage self,\\n    address proposedImplementation\\n  ) external view returns (bool) {\\n    return\\n      self.approvedVersion != address(0) &&\\n      self.approvedVersion == proposedImplementation;\\n  }\\n}\\n\",\"keccak256\":\"0x778b193b23ba4dae7dc6b1ddafcd9a460eff6e8f624be6f1fff8aa69efb8606c\",\"license\":\"MIT\"},\"contracts/Portal/utils/OracleUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport {ID_TYPE, VALIDATOR_STATE, PERCENTAGE_DENOMINATOR} from \\\"./globals.sol\\\";\\n\\nimport {DataStoreUtils as DSU} from \\\"./DataStoreUtilsLib.sol\\\";\\nimport {StakeUtils as SU} from \\\"./StakeUtilsLib.sol\\\";\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title OracleUtils Library: An extension to StakeUtils Library\\n * @notice Oracle, named Telescope, handles some operations for The Staking Library,\\n * * using the following logic, which is very simple.\\n *\\n * @dev Telescope is responsible from 3 tasks:\\n * * Updating the on-chain price of all pools with a MerkleRoot\\n * * Confirming validator proposals\\n * * Regulating the Node Operators\\n *\\n * 1. reportOracle: Continous Data Flow: Price Merkle Root and MONOPOLY_THRESHOLD\\n * * 1. Oracle Nodes calculates the price of its derivative,\\n * * * according to the validator data such as balance and fees.\\n * * 2. If a pool doesn't have a validator, price is kept the same.\\n * * 3. A merkle tree is constructed with the order of allIdsByType array.\\n * * 4. A watcher collects all the signatures from Multiple Oracle Nodes, and submits the merkle root.\\n * * 5. Anyone can update the price of the derivative\\n * * * by calling priceSync() functions with correct merkle proofs\\n * * 6. Minting is allowed within PRICE_EXPIRY (24H) after the last price update.\\n * * 7. Updates the regulation around Monopolies\\n *\\n * 2. updateVerificationIndex :Confirming validator proposals\\n * * Simply, all proposed validator has an index bound to them,\\n * * n representing the latest proposal: (0,n]\\n * * Telescope verifies the validator data provided in proposeStake:\\n * * especially sig1, sig31 and withdrawal credentials.\\n * * Telescope confirms the latest index it verified and states the faulty validator proposals (aliens)\\n * * If a validator proposal is faulty then it's state is set to 69.\\n * * * 2 step process is essential to prevent the frontrunning\\n * * * with a problematic withdrawalCredential, (https://bit.ly/3Tkc6UC)\\n *\\n * 3. regulateOperators: Regulating the Operators\\n * * Operators can act faulty in many different ways. To prevent such actions,\\n * * Telescope regulates them with well defined limitations.\\n * * * Currently only issue is the fee theft, meaning operator have not\\n * * * used the withdrawal contract for miner fees or MEV boost.\\n * * * * There can be other restrictions in the future.\\n *\\n * @dev All 3 functions have OracleOnly modifier, priceSync functions do not.\\n *\\n * @dev first review DataStoreUtils\\n * @dev then review StakeUtils\\n */\\n\\nlibrary OracleUtils {\\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\\n  using DSU for DSU.IsolatedStorage;\\n\\n  /// @notice Using StakeUtils for PooledStaking struct\\n  using SU for SU.PooledStaking;\\n\\n  /// @notice EVENTS\\n  event Alienated(bytes indexed pubkey);\\n  event VerificationIndexUpdated(uint256 validatorVerificationIndex);\\n  event FeeTheft(uint256 indexed id, bytes proofs);\\n  event OracleReported(bytes32 merkleRoot, uint256 monopolyThreshold);\\n\\n  /// @notice effective on MONOPOLY_THRESHOLD, limiting the active validators, set to 1% at start.\\n  uint256 public constant MONOPOLY_RATIO = (1 * PERCENTAGE_DENOMINATOR) / 100;\\n\\n  /// @notice sensible value for the total beacon chain validators, no reasoning.\\n  uint256 public constant MIN_VALIDATOR_COUNT = 50000;\\n\\n  modifier onlyOracle(SU.PooledStaking storage STAKER) {\\n    require(msg.sender == STAKER.ORACLE_POSITION, \\\"OU: sender NOT ORACLE\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice                                     ** VERIFICATION INDEX **\\n   **/\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice \\\"Alien\\\" is a validator that is created with a faulty withdrawal\\n   * credential or signatures, this is a malicious act.\\n   * @notice Alienation results in imprisonment for the operator of the faulty validator proposal.\\n   * @dev While alienating a validator we should adjust the 'surplus' and 'secured'\\n   * balances of the pool accordingly\\n   * @dev We should adjust the 'totalProposedValidators', 'proposedValidators' to fix allowances.\\n   */\\n  function _alienateValidator(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    bytes calldata _pk\\n  ) internal {\\n    require(\\n      STAKER._validators[_pk].state == VALIDATOR_STATE.PROPOSED,\\n      \\\"OU: NOT all pubkeys are pending\\\"\\n    );\\n    require(\\n      STAKER._validators[_pk].index <= STAKER.VERIFICATION_INDEX,\\n      \\\"OU: unexpected index\\\"\\n    );\\n    SU._imprison(DATASTORE, STAKER._validators[_pk].operatorId, _pk);\\n\\n    uint256 poolId = STAKER._validators[_pk].poolId;\\n    DATASTORE.subUintForId(poolId, \\\"secured\\\", DCU.DEPOSIT_AMOUNT);\\n    DATASTORE.addUintForId(poolId, \\\"surplus\\\", DCU.DEPOSIT_AMOUNT);\\n\\n    uint256 operatorId = STAKER._validators[_pk].operatorId;\\n    DATASTORE.subUintForId(operatorId, \\\"totalProposedValidators\\\", 1);\\n    DATASTORE.subUintForId(\\n      poolId,\\n      DSU.getKey(operatorId, \\\"proposedValidators\\\"),\\n      1\\n    );\\n\\n    STAKER._validators[_pk].state = VALIDATOR_STATE.ALIENATED;\\n\\n    emit Alienated(_pk);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice Updating VERIFICATION_INDEX, signaling that it is safe to activate\\n   * the validator proposals with lower index than new VERIFICATION_INDEX\\n   * @param validatorVerificationIndex (inclusive) index of the highest validator that is verified to be activated\\n   * @param alienatedPubkeys faulty proposals within the range of new and old verification indexes.\\n   */\\n  function updateVerificationIndex(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external onlyOracle(STAKER) {\\n    require(\\n      STAKER.VALIDATORS_INDEX >= validatorVerificationIndex,\\n      \\\"OU: high VERIFICATION_INDEX\\\"\\n    );\\n    require(\\n      validatorVerificationIndex > STAKER.VERIFICATION_INDEX,\\n      \\\"OU: low VERIFICATION_INDEX\\\"\\n    );\\n\\n    STAKER.VERIFICATION_INDEX = validatorVerificationIndex;\\n\\n    for (uint256 i; i < alienatedPubkeys.length; ++i) {\\n      _alienateValidator(DATASTORE, STAKER, alienatedPubkeys[i]);\\n    }\\n\\n    emit VerificationIndexUpdated(validatorVerificationIndex);\\n  }\\n\\n  /**\\n   * @notice                                     ** REGULATING OPERATORS **\\n   */\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice regulating operators, currently only regulation is towards fee theft, can add more stuff in the future.\\n   * @param feeThefts Operator ids who have stolen MEV or block rewards detected\\n   * @param proofs  BlockNumber, tx or any other referance as a proof\\n   * @dev Stuff here result in imprisonment\\n   */\\n  function regulateOperators(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256[] calldata feeThefts,\\n    bytes[] calldata proofs\\n  ) external onlyOracle(STAKER) {\\n    require(feeThefts.length == proofs.length, \\\"OU: invalid proofs\\\");\\n    for (uint256 i; i < feeThefts.length; ++i) {\\n      SU._imprison(DATASTORE, feeThefts[i], proofs[i]);\\n\\n      emit FeeTheft(feeThefts[i], proofs[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice                                     ** CONTINUOUS UPDATES **\\n   */\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice Telescope reports all of the g-derivate prices with a new PRICE_MERKLE_ROOT.\\n   * Then, updates the ORACLE_UPDATE_TIMESTAMP and MONOPOLY_THRESHOLD\\n   * @param allValidatorsCount Number of all validators within BeaconChain, all of them.\\n   * Prevents monopolies.\\n   */\\n  function reportOracle(\\n    SU.PooledStaking storage STAKER,\\n    bytes32 priceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external onlyOracle(STAKER) {\\n    require(\\n      allValidatorsCount > MIN_VALIDATOR_COUNT,\\n      \\\"OU: low validator count\\\"\\n    );\\n\\n    STAKER.PRICE_MERKLE_ROOT = priceMerkleRoot;\\n    STAKER.ORACLE_UPDATE_TIMESTAMP = block.timestamp;\\n\\n    uint256 newThreshold = (allValidatorsCount * MONOPOLY_RATIO) /\\n      PERCENTAGE_DENOMINATOR;\\n    STAKER.MONOPOLY_THRESHOLD = newThreshold;\\n\\n    emit OracleReported(priceMerkleRoot, newThreshold);\\n  }\\n\\n  /**\\n   * @notice                                     ** Updating PricePerShare **\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @dev in order to prevent faulty updates to the derivative prices there are boundaries to price updates.\\n   * 1. Price should not be increased more than DAILY_PRICE_INCREASE_LIMIT\\n   *  with the factor of how many days since priceUpdateTimestamp has past.\\n   * 2. Price should not be decreased more than DAILY_PRICE_DECREASE_LIMIT\\n   *  with the factor of how many days since priceUpdateTimestamp has past.\\n   */\\n  function _sanityCheck(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256 _id,\\n    uint256 _newPrice\\n  ) internal view {\\n    require(\\n      DATASTORE.readUintForId(_id, \\\"TYPE\\\") == ID_TYPE.POOL,\\n      \\\"OU: not a pool?\\\"\\n    );\\n\\n    uint256 lastUpdate = STAKER.gETH.priceUpdateTimestamp(_id);\\n    uint256 dayPercentSinceUpdate = ((block.timestamp - lastUpdate) *\\n      PERCENTAGE_DENOMINATOR) / 1 days;\\n\\n    uint256 curPrice = STAKER.gETH.pricePerShare(_id);\\n\\n    uint256 maxPrice = curPrice +\\n      ((curPrice * STAKER.DAILY_PRICE_INCREASE_LIMIT * dayPercentSinceUpdate) /\\n        PERCENTAGE_DENOMINATOR) /\\n      PERCENTAGE_DENOMINATOR;\\n\\n    uint256 minPrice = curPrice -\\n      ((curPrice * STAKER.DAILY_PRICE_DECREASE_LIMIT * dayPercentSinceUpdate) /\\n        PERCENTAGE_DENOMINATOR /\\n        PERCENTAGE_DENOMINATOR);\\n\\n    require(\\n      _newPrice >= minPrice && _newPrice <= maxPrice,\\n      \\\"OU: price is insane\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice syncing the price of g-derivatives after checking the merkle proofs and the sanity of the price.\\n   * @param _price price of the derivative denominated in gETH.denominator()\\n   * @param _priceProof merkle proofs\\n   */\\n  function _priceSync(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256 _poolId,\\n    uint256 _price,\\n    bytes32[] calldata _priceProof\\n  ) internal {\\n    bytes32 leaf = keccak256(\\n      bytes.concat(keccak256(abi.encode(_poolId, _price)))\\n    );\\n    require(\\n      MerkleProof.verify(_priceProof, STAKER.PRICE_MERKLE_ROOT, leaf),\\n      \\\"OU: NOT all proofs are valid\\\"\\n    );\\n\\n    _sanityCheck(DATASTORE, STAKER, _poolId, _price);\\n\\n    STAKER.gETH.setPricePerShare(_price, _poolId);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice external function to set a derivative price on Portal\\n   * @param price price of the derivative denominated in gETH.denominator()\\n   * @param priceProof merkle proofs\\n   */\\n  function priceSync(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProof\\n  ) external {\\n    _priceSync(DATASTORE, STAKER, poolId, price, priceProof);\\n  }\\n\\n  /**\\n   * @notice external function to set a multiple derivatives price at once, saves gas.\\n   * @param prices price of the derivative denominated in gETH.denominator()\\n   * @param priceProofs merkle proofs\\n   */\\n  function priceSyncBatch(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    SU.PooledStaking storage STAKER,\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external {\\n    require(poolIds.length == prices.length);\\n    require(poolIds.length == priceProofs.length);\\n    for (uint256 i = 0; i < poolIds.length; ++i) {\\n      _priceSync(DATASTORE, STAKER, poolIds[i], prices[i], priceProofs[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb8e33e210d03af2484d6214859433bf8b37d53bbe969387d9f5327c44ab539e5\",\"license\":\"MIT\"},\"contracts/Portal/utils/StakeUtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nimport {ID_TYPE, VALIDATOR_STATE, PERCENTAGE_DENOMINATOR} from \\\"./globals.sol\\\";\\n\\nimport {DataStoreUtils as DSU} from \\\"./DataStoreUtilsLib.sol\\\";\\nimport {DepositContractUtils as DCU} from \\\"./DepositContractUtilsLib.sol\\\";\\n\\nimport {IgETH} from \\\"../../interfaces/IgETH.sol\\\";\\nimport {IWithdrawalContract} from \\\"../../interfaces/IWithdrawalContract.sol\\\";\\nimport {ISwap} from \\\"../../interfaces/ISwap.sol\\\";\\nimport {ILPToken} from \\\"../../interfaces/ILPToken.sol\\\";\\nimport {IWhitelist} from \\\"../../interfaces/IWhitelist.sol\\\";\\nimport {IgETHInterface} from \\\"../../interfaces/IgETHInterface.sol\\\";\\n\\n/**\\n * @author Icebear & Crash Bandicoot\\n * @title The Staking Library\\n * @notice Creating a global standard for Staking, allowing anyone to create a trustless staking pool,\\n * improving the user experience for stakers and removing the need for intermediaries.\\n * * Exclusively contains functions related to:\\n * * 1. Modular Architecture of Configurable Staking Pools\\n * * 2. Operator Marketplace and Staking Operations.\\n * @dev It is important to keep every pool isolated and remember that every validator is unique.\\n *\\n * @dev Controllers and Maintainers:\\n * * CONTROLLER is the owner of an ID, it manages the pool or the operator and its security is exteremely important.\\n * * maintainer is the worker, can be used to automate some daily tasks\\n * * * like distributing validators for Staking Pools or creating validators for Operators,\\n * * * not so crucial in terms of security.\\n *\\n * @dev Reserved ID_TYPE:\\n *\\n * USERS:\\n *\\n * * Type 4 : Permissioned Operators\\n * * * Needs to be onboarded by the Dual Governance (Senate + Governance).\\n * * * Maintains Beacon Chain Validators on behalf of the Staking Pools.\\n * * * Can participate in the Operator Marketplace after initiation.\\n * * * Can utilize maintainers for staking operations.\\n *\\n * * Type 5 : Configurable Staking Pools\\n * * * Permissionless to create.\\n * * * Can utilize powers of modules such as Bound Liquidity Pools, Interfaces etc.\\n * * * Can be public or private, can use a whitelist if private.\\n * * * Can utilize maintainers for validator distribution on Operator Marketplace.\\n * * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation,\\n * * * accruing rewards and keeping Staked Ether safe and isolated.\\n *\\n * DEFAULT MODULES:\\n * * Some Modules has only 1 version that can be used by the Pool Owners.\\n *\\n * * Type 21 : Withdrawal Contract implementation version\\n * * * Mandatory.\\n * * * CONTROLLER is the implementation contract position (like always)\\n * * * Requires the approval of Senate\\n * * * Pools are in \\\"Recovery Mode\\\" until their Withdrawal Contract is upgraded.\\n * * * * Meaning, no more Depositing or Staking can happen.\\n *\\n * * Type 41 : Liquidity Pool version\\n * * * Optional.\\n * * * CONTROLLER is the implementation contract position (like always)\\n * * * Requires the approval of Senate.\\n * * * Pools can simply deploy the new version of this Module and start using it, if ever changed.\\n * * * Liquidity Providers however, need to migrate.\\n *\\n * * Type 42 : Liquidity Pool Token version\\n * * * Optional, dependant to Liquidity Pool Module.\\n * * * CONTROLLER is the implementation contract position (like always)\\n * * * Requires the approval of Senate\\n * * * Crucial to have the same name with the LP version\\n *\\n * ALLOWED MODULES:\\n * * Some Modules can support many different versions that can be used by the Pool Owners.\\n *\\n * * Type 31 : gETH interface version\\n * * * Optional.\\n * * * CONTROLLER is the implementation contract position (like always)\\n * * * Requires the approval of Senate\\n * * * Currently should be utilized on initiation.\\n *\\n * @dev Contracts relying on this library must initialize StakeUtils.PooledStaking\\n * @dev Functions are already protected with authentication\\n *\\n * @dev first review DataStoreUtils\\n * @dev then review GeodeUtils\\n */\\n\\nlibrary StakeUtils {\\n  /// @notice Using DataStoreUtils for IsolatedStorage struct\\n  using DSU for DSU.IsolatedStorage;\\n\\n  /// @notice EVENTS\\n  event IdInitiated(uint256 indexed id, uint256 indexed TYPE);\\n  event MaintainerChanged(uint256 indexed id, address newMaintainer);\\n  event FeeSwitched(uint256 indexed id, uint256 fee, uint256 effectiveAfter);\\n  event ValidatorPeriodSwitched(\\n    uint256 indexed id,\\n    uint256 period,\\n    uint256 effectiveAfter\\n  );\\n  event OperatorApproval(\\n    uint256 indexed poolId,\\n    uint256 indexed operatorId,\\n    uint256 allowance\\n  );\\n  event Prisoned(uint256 indexed id, bytes proof, uint256 releaseTimestamp);\\n  event Deposit(uint256 indexed poolId, uint256 boughtgETH, uint256 mintedgETH);\\n  event ProposalStaked(\\n    uint256 indexed poolId,\\n    uint256 operatorId,\\n    bytes[] pubkeys\\n  );\\n  event BeaconStaked(bytes[] pubkeys);\\n\\n  /**\\n   * @param state state of the validator, refer to globals.sol\\n   * @param index representing this validator's placement on the chronological order of the validators proposals\\n   * @param poolId needed for withdrawal_credential\\n   * @param operatorId needed for staking after allowance\\n   * @param poolFee percentage of the rewards that will go to pool's maintainer, locked when the validator is proposed\\n   * @param operatorFee percentage of the rewards that will go to operator's maintainer, locked when the validator is proposed\\n   * @param createdAt the timestamp pointing the proposal to create a validator with given pubkey.\\n   * @param expectedExit the latest point in time the operator is allowed to maintain this validator (createdAt + validatorPeriod).\\n   * @param signature BLS12-381 signature for the validator, used when sending the remaining 31 ETH on validator activation.\\n   **/\\n  struct Validator {\\n    uint8 state;\\n    uint256 index;\\n    uint256 poolId;\\n    uint256 operatorId;\\n    uint256 poolFee;\\n    uint256 operatorFee;\\n    uint256 earlyExitFee;\\n    uint256 createdAt;\\n    uint256 expectedExit;\\n    bytes signature31;\\n  }\\n\\n  /**\\n   * @param gETH ERC1155, Staking Derivatives Token, should NOT be changed.\\n   * @param VALIDATORS_INDEX total number of validators that are proposed at any given point.\\n   * * Includes all validators: proposed, active, alienated, exited.\\n   * @param VERIFICATION_INDEX the highest index of the validators that are verified (as not alien) by the Holy Oracle.\\n   * @param MONOPOLY_THRESHOLD max number of validators 1 operator is allowed to operate, updated by the Holy Oracle.\\n   * @param EARLY_EXIT_FEE a parameter to be used while handling the validator exits, currently 0 and logic around it is ambigious.\\n   * @param ORACLE_UPDATE_TIMESTAMP timestamp of the latest oracle update\\n   * @param DAILY_PRICE_DECREASE_LIMIT limiting the price decreases for one oracle period, 24h. Effective for any time interval.\\n   * @param DAILY_PRICE_INCREASE_LIMIT limiting the price increases for one oracle period, 24h. Effective for any time interval.\\n   * @param PRICE_MERKLE_ROOT merkle root of the prices of every pool\\n   * @param ORACLE_POSITION address of the Oracle multisig https://github.com/Geodefi/Telescope-Eth\\n   * @param _defaultModules TYPE => version, pointing to the latest versions of the given TYPE.\\n   * * Like default Withdrawal Contract version.\\n   * @param _allowedModules TYPE => version => isAllowed, useful to check if any version of the module can be used.\\n   * * Like all the whitelisted gETH interfaces.\\n   * @param _validators pubkey => Validator, contains all the data about proposed or/and active validators\\n   * @param __gap keep the struct size at 16\\n   **/\\n  struct PooledStaking {\\n    IgETH gETH;\\n    uint256 VALIDATORS_INDEX;\\n    uint256 VERIFICATION_INDEX;\\n    uint256 MONOPOLY_THRESHOLD;\\n    uint256 EARLY_EXIT_FEE;\\n    uint256 ORACLE_UPDATE_TIMESTAMP;\\n    uint256 DAILY_PRICE_INCREASE_LIMIT;\\n    uint256 DAILY_PRICE_DECREASE_LIMIT;\\n    bytes32 PRICE_MERKLE_ROOT;\\n    address ORACLE_POSITION;\\n    mapping(uint256 => uint256) _defaultModules;\\n    mapping(uint256 => mapping(uint256 => bool)) _allowedModules;\\n    mapping(bytes => Validator) _validators;\\n    uint256[3] __gap;\\n  }\\n  /**\\n   * @notice                                     ** Constants **\\n   */\\n\\n  /// @notice limiting the pool and operator maintenance fee, 10%\\n  uint256 public constant MAX_MAINTENANCE_FEE =\\n    (PERCENTAGE_DENOMINATOR * 10) / 100;\\n\\n  /// @notice limiting EARLY_EXIT_FEE, 5%\\n  uint256 public constant MAX_EARLY_EXIT_FEE =\\n    (PERCENTAGE_DENOMINATOR * 5) / 100;\\n\\n  /// @notice price of gETH is only valid for 24H, after that minting is not allowed.\\n  uint256 public constant PRICE_EXPIRY = 24 hours;\\n\\n  /// @notice ignoring any buybacks if the Liquidity Pools has a low debt\\n  uint256 public constant IGNORABLE_DEBT = 1 ether;\\n\\n  /// @notice limiting the operator.validatorPeriod, between 3 months to 5 years\\n  uint256 public constant MIN_VALIDATOR_PERIOD = 90 days;\\n  uint256 public constant MAX_VALIDATOR_PERIOD = 1825 days;\\n\\n  /// @notice some parameter changes are effective after a delay\\n  uint256 public constant SWITCH_LATENCY = 3 days;\\n\\n  /// @notice limiting the access for Operators in case of bad/malicious/faulty behaviour\\n  uint256 public constant PRISON_SENTENCE = 14 days;\\n\\n  /**\\n   * @notice                                     ** AUTHENTICATION **\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice restricts the access to given function based on TYPE and msg.sender\\n   * @param expectCONTROLLER restricts the access to only CONTROLLER.\\n   * @param expectMaintainer restricts the access to only maintainer.\\n   * @param restrictionMap Restricts which TYPEs can pass the authentication 0: Operator = TYPE(4), Pool = TYPE(5)\\n   * @dev authenticate can only be used after an ID is initiated\\n   * @dev CONTROLLERS and maintainers of the Prisoned Operators can not access.\\n   * @dev In principal, CONTROLLER should be able to do anything a maintainer is authenticated to do.\\n   */\\n  function authenticate(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    bool expectCONTROLLER,\\n    bool expectMaintainer,\\n    bool[2] memory restrictionMap\\n  ) internal view {\\n    require(\\n      DATASTORE.readUintForId(id, \\\"initiated\\\") != 0,\\n      \\\"SU: ID is not initiated\\\"\\n    );\\n\\n    uint256 typeOfId = DATASTORE.readUintForId(id, \\\"TYPE\\\");\\n\\n    if (typeOfId == ID_TYPE.OPERATOR) {\\n      require(restrictionMap[0], \\\"SU: TYPE NOT allowed\\\");\\n      if (expectCONTROLLER || expectMaintainer) {\\n        require(\\n          !isPrisoned(DATASTORE, id),\\n          \\\"SU: operator is in prison, get in touch with governance\\\"\\n        );\\n      }\\n    } else if (typeOfId == ID_TYPE.POOL) {\\n      require(restrictionMap[1], \\\"SU: TYPE NOT allowed\\\");\\n    } else revert(\\\"SU: invalid TYPE\\\");\\n\\n    if (expectMaintainer) {\\n      require(\\n        msg.sender == DATASTORE.readAddressForId(id, \\\"maintainer\\\"),\\n        \\\"SU: sender NOT maintainer\\\"\\n      );\\n      return;\\n    }\\n\\n    if (expectCONTROLLER) {\\n      require(\\n        msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\n        \\\"SU: sender NOT CONTROLLER\\\"\\n      );\\n      return;\\n    }\\n  }\\n\\n  /**\\n   * @notice                                     ** CONFIGURABLE STAKING POOL MODULES **\\n   *\\n   * - WithdrawalContracts\\n   * - gETHInterfaces\\n   * - Bound Liquidity Pools\\n   * - Pool visibility (public/private) and using whitelists\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice access all interfaces of a given ID.\\n   * @dev for future referance: unsetted interfaces SHOULD return address(0)\\n   */\\n  function gETHInterfaces(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 index\\n  ) external view returns (address _interface) {\\n    _interface = DATASTORE.readAddressArrayForId(id, \\\"interfaces\\\", index);\\n  }\\n\\n  /**\\n   * @notice returns true if the pool is private\\n   */\\n  function isPrivatePool(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return (DATASTORE.readUintForId(poolId, \\\"private\\\") == 1);\\n  }\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice internal function to set a gETHInterface\\n   * @param _interface address of the new gETHInterface for given ID\\n   * @dev every interface has a unique index within the \\\"interfaces\\\" dynamic array.\\n   * @dev on unset, SHOULD replace the implementation with address(0) for obvious security reasons.\\n   */\\n  function _setInterface(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address _interface\\n  ) internal {\\n    require(!self.gETH.isInterface(_interface, id), \\\"SU: already interface\\\");\\n    DATASTORE.appendAddressArrayForId(id, \\\"interfaces\\\", _interface);\\n    self.gETH.setInterface(_interface, id, true);\\n  }\\n\\n  /**\\n   * @notice deploys a new gETHInterface by cloning the DEFAULT_gETH_INTERFACE\\n   * @param _version id, can use any version as an interface that is allowed for TYPE = MODULE_GETH_INTERFACE\\n   * @param interface_data interfaces might require additional data on initialization; like name, symbol, etc.\\n   * @dev currrently, can NOT deploy an interface after initiation, thus only used by the initiator.\\n   * @dev currrently, can NOT unset an interface.\\n   */\\n  function _deployInterface(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _version,\\n    bytes memory interface_data\\n  ) internal {\\n    require(\\n      self._allowedModules[ID_TYPE.MODULE_GETH_INTERFACE][_version],\\n      \\\"SU: not an interface\\\"\\n    );\\n\\n    address gInterface = Clones.clone(\\n      DATASTORE.readAddressForId(_version, \\\"CONTROLLER\\\")\\n    );\\n\\n    require(\\n      IgETHInterface(gInterface).initialize(\\n        _id,\\n        address(self.gETH),\\n        interface_data\\n      ),\\n      \\\"SU: could not init interface\\\"\\n    );\\n\\n    _setInterface(self, DATASTORE, _id, gInterface);\\n  }\\n\\n  /**\\n   * @notice Deploys a Withdrawal Contract that will be used as a withdrawal credential on validator creation\\n   * @dev using the latest version of the MODULE_WITHDRAWAL_CONTRACT\\n   * @dev every pool requires a withdrawal Contract, thus this function is only used by the initiator\\n   */\\n  function _deployWithdrawalContract(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _id\\n  ) internal {\\n    require(\\n      DATASTORE.readAddressForId(_id, \\\"withdrawalContract\\\") == address(0),\\n      \\\"SU: already has a withdrawal contract\\\"\\n    );\\n\\n    uint256 version = self._defaultModules[ID_TYPE.MODULE_WITHDRAWAL_CONTRACT];\\n\\n    address withdrawalContract = address(\\n      new ERC1967Proxy(\\n        DATASTORE.readAddressForId(version, \\\"CONTROLLER\\\"),\\n        abi.encodeWithSelector(\\n          IWithdrawalContract(address(0)).initialize.selector,\\n          version,\\n          _id,\\n          self.gETH,\\n          address(this),\\n          DATASTORE.readAddressForId(_id, \\\"CONTROLLER\\\")\\n        )\\n      )\\n    );\\n\\n    DATASTORE.writeAddressForId(_id, \\\"withdrawalContract\\\", withdrawalContract);\\n\\n    DATASTORE.writeBytesForId(\\n      _id,\\n      \\\"withdrawalCredential\\\",\\n      DCU.addressToWC(withdrawalContract)\\n    );\\n  }\\n\\n  /**\\n   * @dev  ->  public\\n   */\\n\\n  /**\\n   * @notice deploys a new liquidity pool using the latest version of MODULE_LIQUDITY_POOL\\n   * @dev sets the liquidity pool, LP token and liquidityPoolVersion\\n   * @dev gives full allowance to the pool, should not be a problem as portal does not hold any tokens\\n   * @param _GOVERNANCE governance address will be the owner of the created pool.\\n   * @dev a controller can deploy a liquidity pool after initiation\\n   * @dev a controller can deploy a new version of this module, but LPs would need to migrate\\n   */\\n  function deployLiquidityPool(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    address _GOVERNANCE\\n  ) public {\\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    uint256 lpVersion = self._defaultModules[ID_TYPE.MODULE_LIQUDITY_POOL];\\n\\n    require(\\n      DATASTORE.readUintForId(poolId, \\\"liquidityPoolVersion\\\") != lpVersion,\\n      \\\"SU: already latest version\\\"\\n    );\\n\\n    address lp = Clones.clone(\\n      DATASTORE.readAddressForId(lpVersion, \\\"CONTROLLER\\\")\\n    );\\n    bytes memory NAME = DATASTORE.readBytesForId(poolId, \\\"NAME\\\");\\n\\n    require(\\n      ISwap(lp).initialize(\\n        IgETH(self.gETH),\\n        poolId,\\n        string(abi.encodePacked(NAME, \\\"-Geode LP Token\\\")),\\n        string(abi.encodePacked(NAME, \\\"-LP\\\")),\\n        DATASTORE.readAddressForId(\\n          self._defaultModules[ID_TYPE.MODULE_LIQUDITY_POOL_TOKEN],\\n          \\\"CONTROLLER\\\"\\n        ),\\n        _GOVERNANCE\\n      ) != address(0),\\n      \\\"SU: could not init liquidity pool\\\"\\n    );\\n\\n    // approve token so we can use it in buybacks\\n    self.gETH.setApprovalForAll(lp, true);\\n\\n    DATASTORE.writeUintForId(poolId, \\\"liquidityPoolVersion\\\", lpVersion);\\n    DATASTORE.writeAddressForId(poolId, \\\"liquidityPool\\\", lp);\\n  }\\n\\n  /**\\n   * @notice changes the visibility of the pool\\n   * @param isPrivate true if pool should be private, false for public pools\\n   * Note private pools can whitelist addresses with the help of a third party contract.\\n   */\\n  function setPoolVisibility(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    bool isPrivate\\n  ) public {\\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\\n\\n    require(isPrivate != isPrivatePool(DATASTORE, poolId), \\\"SU: already set\\\");\\n\\n    DATASTORE.writeUintForId(poolId, \\\"private\\\", isPrivate ? 1 : 0);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice private pools can whitelist addresses with the help of a third party contract\\n   * @dev Whitelisting contracts should implement IWhitelist interface.\\n   */\\n  function setWhitelist(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    address whitelist\\n  ) external {\\n    authenticate(DATASTORE, poolId, true, false, [false, true]);\\n    require(isPrivatePool(DATASTORE, poolId), \\\"SU: must be private pool\\\");\\n    DATASTORE.writeAddressForId(poolId, \\\"whitelist\\\", whitelist);\\n  }\\n\\n  /**\\n   * @notice                                     ** INITIATORS **\\n   *\\n   * IDs that are occupied by a user should be initiated to be activated\\n   * - Operators need to onboarded by the Dual Governance to be able to initiate an ID.\\n   * - Pools are permissionless, calling the initiator will immediately activate the pool.\\n   */\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice initiates ID as a Permissionned Node Operator\\n   * @notice requires ID to be approved as a node operator with a specific CONTROLLER\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\\n   * @param validatorPeriod the expected maximum staking interval. This value should between\\n   * * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above.\\n   * Operator can unstake at any given point before this period ends.\\n   * If operator disobeys this rule, it can be prisoned with blameOperator()\\n   * @param maintainer an address that automates daily operations, a script, a contract...\\n   * @dev operators can fund their internal wallet on initiation by simply sending some ether.\\n   */\\n  function initiateOperator(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external {\\n    require(\\n      DATASTORE.readUintForId(id, \\\"initiated\\\") == 0,\\n      \\\"SU: already initiated\\\"\\n    );\\n\\n    require(\\n      DATASTORE.readUintForId(id, \\\"TYPE\\\") == ID_TYPE.OPERATOR,\\n      \\\"SU: TYPE NOT allowed\\\"\\n    );\\n\\n    require(\\n      msg.sender == DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\"),\\n      \\\"SU: sender NOT CONTROLLER\\\"\\n    );\\n\\n    _setMaintainer(DATASTORE, id, maintainer);\\n    _setMaintenanceFee(DATASTORE, id, fee);\\n    _setValidatorPeriod(DATASTORE, id, validatorPeriod);\\n\\n    _increaseWalletBalance(DATASTORE, id, msg.value);\\n\\n    DATASTORE.writeUintForId(id, \\\"initiated\\\", block.timestamp);\\n    emit IdInitiated(id, ID_TYPE.OPERATOR);\\n  }\\n\\n  /**\\n   * @notice Creates a Configurable Trustless Staking Pool!\\n   * @param fee as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%\\n   * @param interfaceVersion Pool creators can choose any allowed version as their gETHInterface\\n   * @param maintainer an address that automates daily operations, a script, a contract... not really powerful.\\n   * @param _GOVERNANCE needed in case the Pool is configured with a Bound Liquidity Pool\\n   * @param NAME used to generate an ID for the Pool\\n   * @param interface_data interfaces might require additional data on initialization; like name, symbol, etc.\\n   * @param config [private(true) or public(false), deploying an interface with given version, deploying liquidity pool with latest version]\\n   * @dev checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.\\n   * @dev requires exactly 1 validator worth of funds to be deposited on initiation - to prevent sybil attacks\\n   */\\n  function initiatePool(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 fee,\\n    uint256 interfaceVersion,\\n    address maintainer,\\n    address _GOVERNANCE,\\n    bytes calldata NAME,\\n    bytes calldata interface_data,\\n    bool[3] calldata config\\n  ) external {\\n    require(\\n      msg.value == DCU.DEPOSIT_AMOUNT,\\n      \\\"SU: requires 1 validator worth of Ether\\\"\\n    );\\n\\n    uint256 id = DSU.generateId(NAME, ID_TYPE.POOL);\\n\\n    require(id > 10 ** 7, \\\"SU: Wow! low id\\\");\\n\\n    require(\\n      DATASTORE.readUintForId(id, \\\"initiated\\\") == 0,\\n      \\\"SU: already initiated\\\"\\n    );\\n    DATASTORE.writeUintForId(id, \\\"TYPE\\\", ID_TYPE.POOL);\\n    DATASTORE.writeAddressForId(id, \\\"CONTROLLER\\\", msg.sender);\\n    DATASTORE.writeBytesForId(id, \\\"NAME\\\", NAME);\\n    DATASTORE.writeUintForId(id, \\\"initiated\\\", block.timestamp);\\n    DATASTORE.allIdsByType[ID_TYPE.POOL].push(id);\\n\\n    _setMaintainer(DATASTORE, id, maintainer);\\n    _setMaintenanceFee(DATASTORE, id, fee);\\n\\n    _deployWithdrawalContract(self, DATASTORE, id);\\n    if (config[0]) setPoolVisibility(DATASTORE, id, true);\\n    if (config[1])\\n      _deployInterface(self, DATASTORE, id, interfaceVersion, interface_data);\\n    if (config[2]) deployLiquidityPool(self, DATASTORE, id, _GOVERNANCE);\\n\\n    // initially 1 ETHER = 1 ETHER\\n    self.gETH.setPricePerShare(1 ether, id);\\n\\n    // mint gETH and send back to the caller\\n    uint256 mintedgETH = _mintgETH(self, DATASTORE, id, DCU.DEPOSIT_AMOUNT);\\n    self.gETH.safeTransferFrom(address(this), msg.sender, id, mintedgETH, \\\"\\\");\\n\\n    emit IdInitiated(id, ID_TYPE.POOL);\\n  }\\n\\n  /**\\n   * @notice                                     ** MAINTAINERS **\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice Set the maintainer address on initiation or later\\n   * @param newMaintainer address of the new maintainer\\n   */\\n  function _setMaintainer(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newMaintainer\\n  ) internal {\\n    require(newMaintainer != address(0), \\\"SU: maintainer can NOT be zero\\\");\\n\\n    address currentMaintainer = DATASTORE.readAddressForId(id, \\\"maintainer\\\");\\n\\n    require(\\n      currentMaintainer != newMaintainer,\\n      \\\"SU: provided the current maintainer\\\"\\n    );\\n\\n    DATASTORE.writeAddressForId(id, \\\"maintainer\\\", newMaintainer);\\n    emit MaintainerChanged(id, newMaintainer);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n  /**\\n   * @notice CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS\\n   * @dev there can only be 1 maintainer per ID.\\n   * @dev it is wise to change the maintainer before the CONTROLLER, in case of any migration\\n   */\\n  function changeMaintainer(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    address newMaintainer\\n  ) external {\\n    authenticate(DATASTORE, id, true, false, [true, true]);\\n    _setMaintainer(DATASTORE, id, newMaintainer);\\n  }\\n\\n  /**\\n   * @notice                                     ** MAINTENANCE FEE **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%\\n   * @return fee = percentage * PERCENTAGE_DENOMINATOR / 100\\n   */\\n  function getMaintenanceFee(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) public view returns (uint256 fee) {\\n    if (DATASTORE.readUintForId(id, \\\"feeSwitch\\\") > block.timestamp) {\\n      return DATASTORE.readUintForId(id, \\\"priorFee\\\");\\n    }\\n    return DATASTORE.readUintForId(id, \\\"fee\\\");\\n  }\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice  internal function to set fee with NO DELAY\\n   */\\n  function _setMaintenanceFee(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _newFee\\n  ) internal {\\n    require(_newFee <= MAX_MAINTENANCE_FEE, \\\"SU: > MAX_MAINTENANCE_FEE \\\");\\n    DATASTORE.writeUintForId(_id, \\\"fee\\\", _newFee);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY.\\n   * Note Can NOT be called again while its currently switching.\\n   * @dev advise that 100% == PERCENTAGE_DENOMINATOR\\n   */\\n  function switchMaintenanceFee(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 newFee\\n  ) external {\\n    authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(\\n      block.timestamp > DATASTORE.readUintForId(id, \\\"feeSwitch\\\"),\\n      \\\"SU: fee is currently switching\\\"\\n    );\\n\\n    DATASTORE.writeUintForId(\\n      id,\\n      \\\"priorFee\\\",\\n      DATASTORE.readUintForId(id, \\\"fee\\\")\\n    );\\n    DATASTORE.writeUintForId(id, \\\"feeSwitch\\\", block.timestamp + SWITCH_LATENCY);\\n\\n    _setMaintenanceFee(DATASTORE, id, newFee);\\n\\n    emit FeeSwitched(id, newFee, block.timestamp + SWITCH_LATENCY);\\n  }\\n\\n  /**\\n   * @notice                                     ** INTERNAL WALLET **\\n   *\\n   * Internal wallet of an ID accrues fees over time.\\n   * It is also used by Node Operators to fund 1 ETH per validator proposal, which is reimbursed if/when activated.\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice Simply increases the balance of an IDs Maintainer wallet\\n   * @param _value Ether (in Wei) amount to increase the wallet balance.\\n   * @return success if the amount was deducted\\n   */\\n  function _increaseWalletBalance(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal returns (bool success) {\\n    DATASTORE.addUintForId(_id, \\\"wallet\\\", _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice To decrease the balance of an Operator's wallet internally\\n   * @param _value Ether (in Wei) amount to decrease the wallet balance and send back to Maintainer.\\n   */\\n  function _decreaseWalletBalance(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _id,\\n    uint256 _value\\n  ) internal returns (bool success) {\\n    require(\\n      DATASTORE.readUintForId(_id, \\\"wallet\\\") >= _value,\\n      \\\"SU: NOT enough funds in wallet\\\"\\n    );\\n    DATASTORE.subUintForId(_id, \\\"wallet\\\", _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice external function to increase the internal wallet balance\\n   * @dev anyone can increase the balance directly, useful for withdrawalContracts and fees etc.\\n   */\\n  function increaseWalletBalance(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id\\n  ) external returns (bool success) {\\n    authenticate(DATASTORE, id, false, false, [true, true]);\\n    return _increaseWalletBalance(DATASTORE, id, msg.value);\\n  }\\n\\n  /**\\n   * @notice external function to decrease the internal wallet balance\\n   * @dev only CONTROLLER can decrease the balance externally,\\n   * @return success if the amount was sent and deducted\\n   */\\n  function decreaseWalletBalance(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 id,\\n    uint256 value\\n  ) external returns (bool success) {\\n    authenticate(DATASTORE, id, true, false, [true, true]);\\n\\n    require(address(this).balance >= value, \\\"SU: not enough funds in Portal ?\\\");\\n\\n    bool decreased = _decreaseWalletBalance(DATASTORE, id, value);\\n\\n    (bool sent, ) = payable(DATASTORE.readAddressForId(id, \\\"CONTROLLER\\\")).call{\\n      value: value\\n    }(\\\"\\\");\\n    require(decreased && sent, \\\"SU: Failed to send ETH\\\");\\n    return sent;\\n  }\\n\\n  /**\\n   * @notice                                     ** PRISON **\\n   *\\n   * When node operators act in a malicious way, which can also be interpereted as\\n   * an honest mistake like using a faulty signature, Oracle imprisons the operator.\\n   * These conditions are:\\n   * * 1. Created a malicious validator(alien): faulty withdrawal credential, faulty signatures etc.\\n   * * 2. Have not respect the validatorPeriod\\n   * * 3. Stole block fees or MEV boost rewards from the pool\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice Checks if the given operator is Prisoned\\n   * @dev \\\"released\\\" key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function isPrisoned(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _operatorId\\n  ) public view returns (bool) {\\n    return (block.timestamp < DATASTORE.readUintForId(_operatorId, \\\"released\\\"));\\n  }\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice Put an operator in prison\\n   * @dev \\\"released\\\" key refers to the end of the last imprisonment, when the limitations of operator is lifted\\n   */\\n  function _imprison(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    bytes calldata proof\\n  ) internal {\\n    authenticate(DATASTORE, _operatorId, false, false, [true, false]);\\n\\n    DATASTORE.writeUintForId(\\n      _operatorId,\\n      \\\"released\\\",\\n      block.timestamp + PRISON_SENTENCE\\n    );\\n\\n    emit Prisoned(_operatorId, proof, block.timestamp + PRISON_SENTENCE);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice allows imprisoning an Operator if the validator have not been exited until expectedExit\\n   * @dev anyone can call this function\\n   * @dev if operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned\\n   */\\n  function blameOperator(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    bytes calldata pk\\n  ) external {\\n    require(\\n      self._validators[pk].state == VALIDATOR_STATE.ACTIVE,\\n      \\\"SU: validator is never activated\\\"\\n    );\\n    require(\\n      block.timestamp > self._validators[pk].expectedExit,\\n      \\\"SU: validator is still active\\\"\\n    );\\n\\n    _imprison(DATASTORE, self._validators[pk].operatorId, pk);\\n  }\\n\\n  /**\\n   * @notice                                     ** OPERATOR FUNCTIONS **\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice internal function to set validator period with NO DELAY\\n   */\\n  function _setValidatorPeriod(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _operatorId,\\n    uint256 _newPeriod\\n  ) internal {\\n    require(\\n      _newPeriod >= MIN_VALIDATOR_PERIOD,\\n      \\\"SU: should be more than MIN_VALIDATOR_PERIOD\\\"\\n    );\\n\\n    require(\\n      _newPeriod <= MAX_VALIDATOR_PERIOD,\\n      \\\"SU: should be less than MAX_VALIDATOR_PERIOD\\\"\\n    );\\n\\n    DATASTORE.writeUintForId(_operatorId, \\\"validatorPeriod\\\", _newPeriod);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY.\\n   * @dev limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD\\n   */\\n  function switchValidatorPeriod(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 operatorId,\\n    uint256 newPeriod\\n  ) external {\\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\\n\\n    require(\\n      block.timestamp > DATASTORE.readUintForId(operatorId, \\\"periodSwitch\\\"),\\n      \\\"SU: period is currently switching\\\"\\n    );\\n\\n    DATASTORE.writeUintForId(\\n      operatorId,\\n      \\\"priorPeriod\\\",\\n      DATASTORE.readUintForId(operatorId, \\\"validatorPeriod\\\")\\n    );\\n    DATASTORE.writeUintForId(\\n      operatorId,\\n      \\\"periodSwitch\\\",\\n      block.timestamp + SWITCH_LATENCY\\n    );\\n\\n    _setValidatorPeriod(DATASTORE, operatorId, newPeriod);\\n\\n    emit ValidatorPeriodSwitched(\\n      operatorId,\\n      newPeriod,\\n      block.timestamp + SWITCH_LATENCY\\n    );\\n  }\\n\\n  /**\\n   * @notice                                     ** OPERATOR MARKETPLACE **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /** *\\n   * @notice operatorAllowance is the maximum number of validators that the given Operator is allowed to create on behalf of the Pool\\n   * @dev an operator can not create new validators if:\\n   * * 1. allowance is 0 (zero)\\n   * * 2. lower than the current (proposed + active) number of validators\\n   * * But if operator withdraws a validator, then able to create a new one.\\n   * @dev prestake checks the approved validator count to make sure the number of validators are not bigger than allowance\\n   * @dev allowance doesn't change when new validators created or old ones are unstaked.\\n   */\\n  function operatorAllowance(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId\\n  ) public view returns (uint256 allowance) {\\n    allowance = DATASTORE.readUintForId(\\n      poolId,\\n      DSU.getKey(operatorId, \\\"allowance\\\")\\n    );\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice To allow a Node Operator run validators for your Pool with a given number of validators.\\n   * * This number can be set again at any given point in the future.\\n   * @param poolId the gETH id of the Pool\\n   * @param operatorIds array of Operator IDs to allow them create validators\\n   * @param allowances the MAX number of validators that can be created by the Operator, for given Pool\\n   * @dev When decreased the approved validator count below current active+proposed validators,\\n   * operator can NOT create new validators.\\n   */\\n  function batchApproveOperators(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external returns (bool) {\\n    authenticate(DATASTORE, poolId, true, true, [false, true]);\\n\\n    require(\\n      operatorIds.length == allowances.length,\\n      \\\"SU: allowances should match\\\"\\n    );\\n\\n    for (uint256 i = 0; i < operatorIds.length; ) {\\n      authenticate(DATASTORE, operatorIds[i], false, false, [true, false]);\\n\\n      DATASTORE.writeUintForId(\\n        poolId,\\n        DSU.getKey(operatorIds[i], \\\"allowance\\\"),\\n        allowances[i]\\n      );\\n\\n      emit OperatorApproval(poolId, operatorIds[i], allowances[i]);\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice                                     ** POOL HELPERS **\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice returns WithdrawalContract as a contract\\n   */\\n  function withdrawalContractById(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (IWithdrawalContract) {\\n    return\\n      IWithdrawalContract(\\n        DATASTORE.readAddressForId(poolId, \\\"withdrawalContract\\\")\\n      );\\n  }\\n\\n  /**\\n   * @notice returns liquidityPool as a contract\\n   */\\n  function liquidityPoolById(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 _poolId\\n  ) public view returns (ISwap) {\\n    return ISwap(DATASTORE.readAddressForId(_poolId, \\\"liquidityPool\\\"));\\n  }\\n\\n  /**\\n   * @notice checks if the Whitelist allows staker to use given private pool\\n   * @dev Owner of the pool doesn't need whitelisting\\n   * @dev Otherwise requires a whitelisting address to be set\\n   * todo: add to portal\\n   */\\n  function isWhitelisted(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    address staker\\n  ) public view returns (bool) {\\n    if (DATASTORE.readAddressForId(poolId, \\\"CONTROLLER\\\") == msg.sender)\\n      return true;\\n\\n    address whitelist = DATASTORE.readAddressForId(poolId, \\\"whitelist\\\");\\n    require(whitelist != address(0), \\\"SU: this pool does not have whitelist\\\");\\n\\n    return IWhitelist(whitelist).isAllowed(staker);\\n  }\\n\\n  /**\\n   * @notice returns true if the price is valid:\\n   * - last price syncinc happened less than 24h\\n   * - there has been no oracle reports since the last update\\n   *\\n   * @dev known bug / feature: if there have been no oracle updates,\\n   * * this function will return true.\\n   *\\n   * lastupdate + PRICE_EXPIRY >= block.timestamp ? true\\n   *    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true\\n   *    : false\\n   */\\n  function isPriceValid(\\n    PooledStaking storage self,\\n    uint256 poolId\\n  ) public view returns (bool isValid) {\\n    uint256 lastupdate = self.gETH.priceUpdateTimestamp(poolId);\\n    unchecked {\\n      isValid =\\n        lastupdate + PRICE_EXPIRY >= block.timestamp ||\\n        lastupdate >= self.ORACLE_UPDATE_TIMESTAMP;\\n    }\\n  }\\n\\n  /**\\n   * @notice checks if staking is allowed in given staking pool\\n   * @notice staking is not allowed if:\\n   * 1. Price is not valid\\n   * 2. WithdrawalContract is in Recovery Mode, can have many reasons\\n   */\\n  function isMintingAllowed(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId\\n  ) public view returns (bool) {\\n    return\\n      isPriceValid(self, poolId) &&\\n      !(withdrawalContractById(DATASTORE, poolId).recoveryMode());\\n  }\\n\\n  /**\\n   * @notice                                     ** POOLING OPERATIONS **\\n   */\\n\\n  /**\\n   * @dev  ->  internal\\n   */\\n\\n  /**\\n   * @notice mints gETH for a given ETH amount, keeps the tokens in Portal.\\n   * @dev fails if the price if minting is not allowed\\n   */\\n  function _mintgETH(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 ethAmount\\n  ) internal returns (uint256 mintedgETH) {\\n    require(\\n      isMintingAllowed(self, DATASTORE, poolId),\\n      \\\"SU: minting is not allowed\\\"\\n    );\\n\\n    mintedgETH = (\\n      ((ethAmount * self.gETH.denominator()) / self.gETH.pricePerShare(poolId))\\n    );\\n\\n    self.gETH.mint(address(this), poolId, mintedgETH, \\\"\\\");\\n    DATASTORE.addUintForId(poolId, \\\"surplus\\\", ethAmount);\\n  }\\n\\n  /**\\n   * @notice conducts a buyback using the given liquidity pool\\n   * @param poolId id of the gETH that will be bought\\n   * @param sellEth ETH amount to sell\\n   * @param minToBuy TX is expected to revert by Swap.sol if not meet\\n   * @param deadline TX is expected to revert by Swap.sol if not meet\\n   * @dev this function assumes that pool is deployed by deployLiquidityPool\\n   * as index 0 is ETH and index 1 is gETH!\\n   */\\n  function _buyback(\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 sellEth,\\n    uint256 minToBuy,\\n    uint256 deadline\\n  ) internal returns (uint256 outAmount) {\\n    // SWAP in LP\\n    outAmount = liquidityPoolById(DATASTORE, poolId).swap{value: sellEth}(\\n      0,\\n      1,\\n      sellEth,\\n      minToBuy,\\n      deadline\\n    );\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice Allowing users to deposit into a staking pool.\\n   * @notice If a pool is not public only the maintainer can deposit.\\n   * @param poolId id of the staking pool, liquidity pool and gETH to be used.\\n   * @param mingETH liquidity pool parameter\\n   * @param deadline liquidity pool parameter\\n   * @dev an example for minting + buybacks\\n   * * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt-\\n   * // debt  msgValue\\n   * // 100   10  => buyback\\n   * // 100   100 => buyback\\n   * // 10    100 => buyback + mint\\n   * // 1     x   => mint\\n   * // 0.5   x   => mint\\n   * // 0     x   => mint\\n   */\\n  function deposit(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    address receiver\\n  ) external returns (uint256 boughtgETH, uint256 mintedgETH) {\\n    authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    require(deadline > block.timestamp, \\\"SU: deadline not met\\\");\\n    require(receiver != address(0), \\\"SU: receiver is zero address\\\");\\n\\n    if (isPrivatePool(DATASTORE, poolId))\\n      require(\\n        isWhitelisted(DATASTORE, poolId, msg.sender),\\n        \\\"SU: sender NOT whitelisted\\\"\\n      );\\n\\n    uint256 remEth = msg.value;\\n\\n    if (DATASTORE.readAddressForId(poolId, \\\"liquidityPool\\\") != address(0)) {\\n      uint256 debt = liquidityPoolById(DATASTORE, poolId).getDebt();\\n      if (debt > IGNORABLE_DEBT) {\\n        if (debt < remEth) {\\n          boughtgETH = _buyback(DATASTORE, poolId, debt, 0, deadline);\\n          remEth -= debt;\\n        } else {\\n          boughtgETH = _buyback(DATASTORE, poolId, remEth, mingETH, deadline);\\n          remEth = 0;\\n        }\\n      }\\n    }\\n\\n    if (remEth > 0) mintedgETH = _mintgETH(self, DATASTORE, poolId, remEth);\\n    require(boughtgETH + mintedgETH >= mingETH, \\\"SU: less than minimum\\\");\\n\\n    // send back to user\\n    self.gETH.safeTransferFrom(\\n      address(this),\\n      receiver,\\n      poolId,\\n      boughtgETH + mintedgETH,\\n      \\\"\\\"\\n    );\\n\\n    emit Deposit(poolId, boughtgETH, mintedgETH);\\n  }\\n\\n  /**\\n   * @notice                                     ** VALIDATOR OPERATIONS **\\n   *\\n   * Creation of a Validator takes 2 steps: propose and beacon stake.\\n   * Before entering beaconStake function, _canStake verifies the eligibility of\\n   * given pubKey that is proposed by an operator with proposeStake function.\\n   * Eligibility is defined by an optimistic alienation, check alienate() for info.\\n   */\\n\\n  /**\\n   * @dev  ->  view\\n   */\\n\\n  /**\\n   * @notice internal function to check if a validator can use the pool funds\\n   *\\n   *  @param pubkey BLS12-381 public key of the validator\\n   *  @return true if:\\n   *   - pubkey should be proposed\\n   *   - pubkey should not be alienated (https://bit.ly/3Tkc6UC)\\n   *   - validator's index should be lower than VERIFICATION_INDEX. Updated by Telescope.\\n   * Note: TODO while distributing the rewards, if a validator has 1 Eth, it is safe to assume that the balance belongs to Operator\\n   */\\n  function _canStake(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    bytes calldata pubkey,\\n    uint256 verificationIndex\\n  ) internal view returns (bool) {\\n    return\\n      (self._validators[pubkey].state == VALIDATOR_STATE.PROPOSED &&\\n        self._validators[pubkey].index <= verificationIndex) &&\\n      !(\\n        withdrawalContractById(DATASTORE, self._validators[pubkey].poolId)\\n          .recoveryMode()\\n      );\\n  }\\n\\n  /**\\n   * @notice external function to check if a validator can use the pool funds\\n   */\\n  function canStake(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    bytes calldata pubkey\\n  ) external view returns (bool) {\\n    return _canStake(self, DATASTORE, pubkey, self.VERIFICATION_INDEX);\\n  }\\n\\n  /**\\n   * @dev  ->  external\\n   */\\n\\n  /**\\n   * @notice Helper Struct to pack constant data that does not change per validator.\\n   * * needed for that famous Solidity feature.\\n   */\\n  struct constantValidatorData {\\n    uint256 index;\\n    uint256 poolFee;\\n    uint256 operatorFee;\\n    uint256 earlyExitFee;\\n    uint256 expectedExit;\\n    bytes withdrawalCredential;\\n  }\\n\\n  /**\\n   * @notice Validator Credentials Proposal function, first step of crating validators.\\n   * * Once a pubKey is proposed and not alienated after verificationIndex updated,\\n   * * it is optimistically allowed to take funds from staking pools.\\n   *\\n   * @param poolId the id of the staking pool\\n   * @param operatorId the id of the Operator whose maintainer calling this function\\n   * @param pubkeys  Array of BLS12-381 public keys of the validators that will be proposed\\n   * @param signatures1 Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's\\n   * maintainer balance\\n   * @param signatures31 Array of BLS12-381 signatures that will be used to send 31 ETH from pool on beaconStake\\n   *\\n   * @dev DCU.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCU.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator.\\n   * 31 Ether will be staked after verification of oracles. 32 in total.\\n   * 1 ether will be sent back to Node Operator when the finalized deposit is successful.\\n   * @dev ProposeStake requires enough allowance from Staking Pools to Operators.\\n   * @dev ProposeStake requires enough funds within Wallet.\\n   * @dev Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 64)\\n   */\\n  function proposeStake(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external {\\n    // checks and effects\\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\\n    authenticate(DATASTORE, poolId, false, false, [false, true]);\\n    {\\n      uint256 pkLen = pubkeys.length;\\n\\n      require(\\n        pkLen > 0 && pkLen <= DCU.MAX_DEPOSITS_PER_CALL,\\n        \\\"SU: MAX 50 nodes per call\\\"\\n      );\\n      require(pkLen == signatures1.length, \\\"SU: invalid signatures1 length\\\");\\n      require(pkLen == signatures31.length, \\\"SU: invalid signatures31 length\\\");\\n\\n      unchecked {\\n        require(\\n          (DATASTORE.readUintForId(operatorId, \\\"totalActiveValidators\\\") +\\n            DATASTORE.readUintForId(operatorId, \\\"totalProposedValidators\\\") +\\n            pkLen) <= self.MONOPOLY_THRESHOLD,\\n          \\\"SU: IceBear does NOT like monopolies\\\"\\n        );\\n\\n        require(\\n          (DATASTORE.readUintForId(\\n            poolId,\\n            DSU.getKey(operatorId, \\\"proposedValidators\\\")\\n          ) +\\n            DATASTORE.readUintForId(\\n              poolId,\\n              DSU.getKey(operatorId, \\\"activeValidators\\\")\\n            ) +\\n            pkLen) <= operatorAllowance(DATASTORE, poolId, operatorId),\\n          \\\"SU: NOT enough allowance\\\"\\n        );\\n\\n        require(\\n          DATASTORE.readUintForId(poolId, \\\"surplus\\\") >=\\n            DCU.DEPOSIT_AMOUNT * pkLen,\\n          \\\"SU: NOT enough surplus\\\"\\n        );\\n      }\\n\\n      _decreaseWalletBalance(\\n        DATASTORE,\\n        operatorId,\\n        (pkLen * DCU.DEPOSIT_AMOUNT_PRESTAKE)\\n      );\\n\\n      DATASTORE.subUintForId(poolId, \\\"surplus\\\", (pkLen * DCU.DEPOSIT_AMOUNT));\\n\\n      DATASTORE.addUintForId(poolId, \\\"secured\\\", (pkLen * DCU.DEPOSIT_AMOUNT));\\n\\n      DATASTORE.addUintForId(\\n        poolId,\\n        DSU.getKey(operatorId, \\\"proposedValidators\\\"),\\n        pkLen\\n      );\\n\\n      DATASTORE.addUintForId(operatorId, \\\"totalProposedValidators\\\", pkLen);\\n    }\\n\\n    constantValidatorData memory valData = constantValidatorData({\\n      index: self.VALIDATORS_INDEX + 1,\\n      poolFee: getMaintenanceFee(DATASTORE, poolId),\\n      operatorFee: getMaintenanceFee(DATASTORE, operatorId),\\n      earlyExitFee: self.EARLY_EXIT_FEE,\\n      expectedExit: block.timestamp +\\n        DATASTORE.readUintForId(operatorId, \\\"validatorPeriod\\\"),\\n      withdrawalCredential: DATASTORE.readBytesForId(\\n        poolId,\\n        \\\"withdrawalCredential\\\"\\n      )\\n    });\\n\\n    for (uint256 i; i < pubkeys.length; ) {\\n      require(\\n        self._validators[pubkeys[i]].state == VALIDATOR_STATE.NONE,\\n        \\\"SU: Pubkey already used or alienated\\\"\\n      );\\n      require(\\n        pubkeys[i].length == DCU.PUBKEY_LENGTH,\\n        \\\"SU: PUBKEY_LENGTH ERROR\\\"\\n      );\\n      require(\\n        signatures1[i].length == DCU.SIGNATURE_LENGTH,\\n        \\\"SU: SIGNATURE_LENGTH ERROR\\\"\\n      );\\n\\n      require(\\n        signatures31[i].length == DCU.SIGNATURE_LENGTH,\\n        \\\"SU: SIGNATURE_LENGTH ERROR\\\"\\n      );\\n\\n      self._validators[pubkeys[i]] = Validator(\\n        1,\\n        valData.index + i,\\n        poolId,\\n        operatorId,\\n        valData.poolFee,\\n        valData.operatorFee,\\n        valData.earlyExitFee,\\n        block.timestamp,\\n        valData.expectedExit,\\n        signatures31[i]\\n      );\\n\\n      DCU.depositValidator(\\n        pubkeys[i],\\n        valData.withdrawalCredential,\\n        signatures1[i],\\n        DCU.DEPOSIT_AMOUNT_PRESTAKE\\n      );\\n\\n      unchecked {\\n        i += 1;\\n      }\\n    }\\n\\n    self.VALIDATORS_INDEX += pubkeys.length;\\n\\n    emit ProposalStaked(poolId, operatorId, pubkeys);\\n  }\\n\\n  /**\\n   *  @notice Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.\\n   *  1 Eth per successful validator boostraping is returned back to Wallet.\\n   *\\n   *  @param operatorId the id of the Operator whose maintainer calling this function\\n   *  @param pubkeys  Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake.\\n   *\\n   *  @dev To save gas cost, pubkeys should be arranged by poolIds.\\n   *  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]\\n   *  pk1, pk2, pk3 from pool1\\n   *  pk4, pk5 from pool2\\n   *  pk6 from pool3\\n   *  seperate them in similar groups as much as possible.\\n   *  @dev Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)\\n   *  @dev A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.\\n   */\\n  function beaconStake(\\n    PooledStaking storage self,\\n    DSU.IsolatedStorage storage DATASTORE,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys\\n  ) external {\\n    authenticate(DATASTORE, operatorId, true, true, [true, false]);\\n\\n    require(\\n      pubkeys.length > 0 && pubkeys.length <= DCU.MAX_DEPOSITS_PER_CALL,\\n      \\\"SU: MAX 50 nodes\\\"\\n    );\\n\\n    {\\n      uint256 verificationIndex = self.VERIFICATION_INDEX;\\n      for (uint256 j; j < pubkeys.length; ) {\\n        require(\\n          _canStake(self, DATASTORE, pubkeys[j], verificationIndex),\\n          \\\"SU: NOT all pubkeys are stakeable\\\"\\n        );\\n        unchecked {\\n          j += 1;\\n        }\\n      }\\n    }\\n\\n    {\\n      bytes32 activeValKey = DSU.getKey(operatorId, \\\"activeValidators\\\");\\n      bytes32 proposedValKey = DSU.getKey(operatorId, \\\"proposedValidators\\\");\\n\\n      uint256 poolId = self._validators[pubkeys[0]].poolId;\\n\\n      bytes memory withdrawalCredential = DATASTORE.readBytesForId(\\n        poolId,\\n        \\\"withdrawalCredential\\\"\\n      );\\n\\n      uint256 lastIdChange;\\n      for (uint256 i; i < pubkeys.length; ) {\\n        if (poolId != self._validators[pubkeys[i]].poolId) {\\n          uint256 sinceLastIdChange;\\n\\n          unchecked {\\n            sinceLastIdChange = i - lastIdChange;\\n          }\\n\\n          DATASTORE.subUintForId(\\n            poolId,\\n            \\\"secured\\\",\\n            (DCU.DEPOSIT_AMOUNT * (sinceLastIdChange))\\n          );\\n          DATASTORE.addUintForId(poolId, activeValKey, (sinceLastIdChange));\\n          DATASTORE.subUintForId(poolId, proposedValKey, (sinceLastIdChange));\\n\\n          poolId = self._validators[pubkeys[i]].poolId;\\n          withdrawalCredential = DATASTORE.readBytesForId(\\n            poolId,\\n            \\\"withdrawalCredential\\\"\\n          );\\n          lastIdChange = i;\\n        }\\n\\n        bytes memory signature = self._validators[pubkeys[i]].signature31;\\n\\n        DCU.depositValidator(\\n          pubkeys[i],\\n          withdrawalCredential,\\n          signature,\\n          DCU.DEPOSIT_AMOUNT - DCU.DEPOSIT_AMOUNT_PRESTAKE\\n        );\\n\\n        DATASTORE.appendBytesArrayForId(poolId, \\\"validators\\\", pubkeys[i]);\\n        self._validators[pubkeys[i]].state = VALIDATOR_STATE.ACTIVE;\\n        unchecked {\\n          i += 1;\\n        }\\n      }\\n      {\\n        uint256 sinceLastIdChange;\\n        unchecked {\\n          sinceLastIdChange = pubkeys.length - lastIdChange;\\n        }\\n\\n        DATASTORE.subUintForId(\\n          poolId,\\n          \\\"secured\\\",\\n          DCU.DEPOSIT_AMOUNT * (sinceLastIdChange)\\n        );\\n        DATASTORE.addUintForId(poolId, activeValKey, (sinceLastIdChange));\\n        DATASTORE.subUintForId(poolId, proposedValKey, (sinceLastIdChange));\\n\\n        DATASTORE.addUintForId(\\n          operatorId,\\n          \\\"totalActiveValidators\\\",\\n          pubkeys.length\\n        );\\n        DATASTORE.subUintForId(\\n          operatorId,\\n          \\\"totalProposedValidators\\\",\\n          pubkeys.length\\n        );\\n        _increaseWalletBalance(\\n          DATASTORE,\\n          operatorId,\\n          DCU.DEPOSIT_AMOUNT_PRESTAKE * pubkeys.length\\n        );\\n      }\\n      emit BeaconStaked(pubkeys);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9c44c0565e797fae15fa9accbd63d842266f01e7bd747626df2449c433e2d53a\",\"license\":\"MIT\"},\"contracts/Portal/utils/globals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// PERCENTAGE_DENOMINATOR represents 100%\\nuint256 constant PERCENTAGE_DENOMINATOR = 10 ** 10;\\n\\n/**\\n * @notice ID_TYPE is like an ENUM, widely used within Portal and Modules like Withdrawal Contract\\n * @dev Why not use enums, they basically do the same thing?\\n * * We like using a explicit defined uints than linearly increasing ones.\\n */\\nlibrary ID_TYPE {\\n  /// @notice TYPE 0: *invalid*\\n  uint256 internal constant NONE = 0;\\n\\n  /// @notice TYPE 1: Senate and Senate Election Proposals\\n  uint256 internal constant SENATE = 1;\\n\\n  /// @notice TYPE 2: Contract Upgrade\\n  uint256 internal constant CONTRACT_UPGRADE = 2;\\n\\n  /// @notice TYPE 3: *gap*: formally represented the admin contract, now reserved to be never used\\n  uint256 internal constant __GAP__ = 3;\\n\\n  /// @notice TYPE 4: Node Operators\\n  uint256 internal constant OPERATOR = 4;\\n\\n  /// @notice TYPE 5: Staking Pools\\n  uint256 internal constant POOL = 5;\\n\\n  /// @notice TYPE 21: Module: Withdrawal Contract\\n  uint256 internal constant MODULE_WITHDRAWAL_CONTRACT = 21;\\n\\n  /// @notice TYPE 31: Module: A new gETH interface\\n  uint256 internal constant MODULE_GETH_INTERFACE = 31;\\n\\n  /// @notice TYPE 41: Module: A new Liquidity Pool\\n  uint256 internal constant MODULE_LIQUDITY_POOL = 41;\\n\\n  /// @notice TYPE 42: Module: A new Liquidity Pool token\\n  uint256 internal constant MODULE_LIQUDITY_POOL_TOKEN = 42;\\n}\\n\\n/**\\n * @notice VALIDATOR_STATE keeping track of validators within The Staking Library\\n */\\nlibrary VALIDATOR_STATE {\\n  /// @notice STATE 0: *invalid*\\n  uint8 internal constant NONE = 0;\\n\\n  /// @notice STATE 1: validator is proposed, 1 ETH is sent from Operator to Deposit Contract\\n  uint8 internal constant PROPOSED = 1;\\n\\n  /// @notice STATE 2: proposal was approved, operator used pooled funds, 1 ETH is released back to Operator\\n  uint8 internal constant ACTIVE = 2;\\n\\n  /// @notice STATE 3: validator is exited, not currently used much\\n  uint8 internal constant EXITED = 3;\\n\\n  /// @notice STATE 69: proposal was malicious(alien), maybe faulty signatures or probably: (https://bit.ly/3Tkc6UC)\\n  uint8 internal constant ALIENATED = 69;\\n}\\n\",\"keccak256\":\"0xda2ab3b886f2e31a1c6dabf2115aead8022e6b91bf0495e3793b7a5189824478\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x30e9e5fbb5b5db73c5964c9c6c4753819ad0b64230c0e77021c9b01f9bf5f68d\",\"license\":\"MIT\"},\"contracts/interfaces/ILPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\ninterface ILPToken {\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function initialize(string memory name, string memory symbol)\\n        external\\n        returns (bool);\\n\\n    function mint(address recipient, uint256 amount) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x7ee52a6c1db3c279a92be6c04ccd6dbbafed5f4476dc16007e4e8465a00a313f\",\"license\":\"MIT\"},\"contracts/interfaces/IPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"../Portal/utils/DataStoreUtilsLib.sol\\\";\\nimport \\\"../Portal/utils/GeodeUtilsLib.sol\\\";\\nimport \\\"../Portal/utils/OracleUtilsLib.sol\\\";\\nimport \\\"../Portal/utils/StakeUtilsLib.sol\\\";\\n\\ninterface IPortal {\\n  function initialize(\\n    address _GOVERNANCE,\\n    address _SENATE,\\n    address _gETH,\\n    address _ORACLE_POSITION,\\n    address _DEFAULT_WITHDRAWAL_CONTRACT_MODULE,\\n    address _DEFAULT_LP_MODULE,\\n    address _DEFAULT_LP_TOKEN_MODULE,\\n    address[] calldata _ALLOWED_GETH_INTERFACE_MODULES,\\n    bytes[] calldata _ALLOWED_GETH_INTERFACE_MODULE_NAMES,\\n    uint256 _GOVERNANCE_FEE\\n  ) external;\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function pausegETH() external;\\n\\n  function unpausegETH() external;\\n\\n  function fetchWithdrawalContractUpgradeProposal(\\n    uint256 id\\n  ) external returns (uint256 withdrawalContractVersion);\\n\\n  function gETH() external view returns (address);\\n\\n  function gETHInterfaces(\\n    uint256 id,\\n    uint256 index\\n  ) external view returns (address);\\n\\n  function allIdsByType(\\n    uint256 _type,\\n    uint256 _index\\n  ) external view returns (uint256);\\n\\n  function generateId(\\n    string calldata _name,\\n    uint256 _type\\n  ) external pure returns (uint256 id);\\n\\n  function getKey(\\n    uint256 _id,\\n    bytes32 _param\\n  ) external pure returns (bytes32 key);\\n\\n  function readAddressForId(\\n    uint256 id,\\n    bytes32 key\\n  ) external view returns (address data);\\n\\n  function readUintForId(\\n    uint256 id,\\n    bytes32 key\\n  ) external view returns (uint256 data);\\n\\n  function readBytesForId(\\n    uint256 id,\\n    bytes32 key\\n  ) external view returns (bytes memory data);\\n\\n  function readUintArrayForId(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (uint256 data);\\n\\n  function readBytesArrayForId(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (bytes memory data);\\n\\n  function readAddressArrayForId(\\n    uint256 id,\\n    bytes32 key,\\n    uint256 index\\n  ) external view returns (address data);\\n\\n  function GeodeParams()\\n    external\\n    view\\n    returns (\\n      address SENATE,\\n      address GOVERNANCE,\\n      uint256 SENATE_EXPIRY,\\n      uint256 GOVERNANCE_FEE\\n    );\\n\\n  function getProposal(\\n    uint256 id\\n  ) external view returns (GeodeUtils.Proposal memory proposal);\\n\\n  function isElector(uint256 _TYPE) external view returns (bool);\\n\\n  function isUpgradeAllowed(\\n    address proposedImplementation\\n  ) external view returns (bool);\\n\\n  function setGovernanceFee(uint256 newFee) external;\\n\\n  function setElectorType(uint256 _TYPE, bool isElector) external;\\n\\n  function newProposal(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external;\\n\\n  function approveProposal(uint256 id) external;\\n\\n  function changeSenate(address _newSenate) external;\\n\\n  function changeIdCONTROLLER(uint256 id, address newCONTROLLER) external;\\n\\n  function approveSenate(uint256 proposalId, uint256 electorId) external;\\n\\n  function StakingParams()\\n    external\\n    view\\n    returns (\\n      uint256 VALIDATORS_INDEX,\\n      uint256 VERIFICATION_INDEX,\\n      uint256 MONOPOLY_THRESHOLD,\\n      uint256 EARLY_EXIT_FEE,\\n      uint256 ORACLE_UPDATE_TIMESTAMP,\\n      uint256 DAILY_PRICE_INCREASE_LIMIT,\\n      uint256 DAILY_PRICE_DECREASE_LIMIT,\\n      bytes32 PRICE_MERKLE_ROOT,\\n      address ORACLE_POSITION\\n    );\\n\\n  function getDefaultModule(\\n    uint256 _type\\n  ) external view returns (uint256 _version);\\n\\n  function isAllowedModule(\\n    uint256 _type,\\n    uint256 _version\\n  ) external view returns (bool);\\n\\n  function getValidator(\\n    bytes calldata pubkey\\n  ) external view returns (StakeUtils.Validator memory);\\n\\n  function getValidatorByPool(\\n    uint256 poolId,\\n    uint256 index\\n  ) external view returns (bytes memory);\\n\\n  function getMaintenanceFee(uint256 id) external view returns (uint256 fee);\\n\\n  // function operatorAllowance(\\n  //   uint256 poolId,\\n  //   uint256 operatorId\\n  // ) external view returns (uint256 allowance);\\n\\n  function isPrisoned(uint256 operatorId) external view returns (bool);\\n\\n  function isPrivatePool(uint256 poolId) external view returns (bool);\\n\\n  function isPriceValid(uint256 poolId) external view returns (bool);\\n\\n  function isMintingAllowed(uint256 poolId) external view returns (bool);\\n\\n  function canStake(bytes calldata pubkey) external view returns (bool);\\n\\n  function initiateOperator(\\n    uint256 id,\\n    uint256 fee,\\n    uint256 validatorPeriod,\\n    address maintainer\\n  ) external payable;\\n\\n  function initiatePool(\\n    uint256 fee,\\n    uint256 interfaceVersion,\\n    address maintainer,\\n    bytes calldata NAME,\\n    bytes calldata interface_data,\\n    bool[3] calldata config\\n  ) external payable;\\n\\n  function setPoolVisibility(uint256 poolId, bool isPrivate) external;\\n\\n  function deployLiquidityPool(uint256 poolId) external;\\n\\n  function changeMaintainer(uint256 id, address newMaintainer) external;\\n\\n  function switchMaintenanceFee(uint256 id, uint256 newFee) external;\\n\\n  function increaseWalletBalance(\\n    uint256 id\\n  ) external payable returns (bool success);\\n\\n  function decreaseWalletBalance(\\n    uint256 id,\\n    uint256 value\\n  ) external returns (bool success);\\n\\n  function switchValidatorPeriod(uint256 id, uint256 newPeriod) external;\\n\\n  function blameOperator(bytes calldata pk) external;\\n\\n  function setEarlyExitFee(uint256 fee) external;\\n\\n  function releasePrisoned(uint256 operatorId) external;\\n\\n  function approveOperators(\\n    uint256 poolId,\\n    uint256[] calldata operatorIds,\\n    uint256[] calldata allowances\\n  ) external;\\n\\n  function setWhitelist(uint256 poolId, address whitelist) external;\\n\\n  function deposit(\\n    uint256 poolId,\\n    uint256 mingETH,\\n    uint256 deadline,\\n    uint256 price,\\n    bytes32[] calldata priceProofs,\\n    address receiver\\n  ) external payable;\\n\\n  function proposeStake(\\n    uint256 poolId,\\n    uint256 operatorId,\\n    bytes[] calldata pubkeys,\\n    bytes[] calldata signatures1,\\n    bytes[] calldata signatures31\\n  ) external;\\n\\n  function beaconStake(uint256 operatorId, bytes[] calldata pubkeys) external;\\n\\n  function updateVerificationIndex(\\n    uint256 validatorVerificationIndex,\\n    bytes[] calldata alienatedPubkeys\\n  ) external;\\n\\n  function regulateOperators(\\n    uint256[] calldata feeThefts,\\n    bytes[] calldata stolenBlocks\\n  ) external;\\n\\n  function reportOracle(\\n    bytes32 priceMerkleRoot,\\n    uint256 allValidatorsCount\\n  ) external;\\n\\n  function priceSync(\\n    uint256 poolId,\\n    uint256 price,\\n    bytes32[] calldata priceProofs\\n  ) external;\\n\\n  function priceSyncBatch(\\n    uint256[] calldata poolIds,\\n    uint256[] calldata prices,\\n    bytes32[][] calldata priceProofs\\n  ) external;\\n}\\n\",\"keccak256\":\"0xad694c194a8ea0d64eb505163205e57ee874ba855f58f1686ba83cbeef58e1f6\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.7;\\n\\nimport \\\"./IgETH.sol\\\";\\n\\ninterface ISwap {\\n  // pool data view functions\\n  function getERC1155() external view returns (address);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getAPrecise() external view returns (uint256);\\n\\n  function getSwapFee() external view returns (uint256);\\n\\n  function getToken() external view returns (uint256);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  function getDebt() external view returns (uint256);\\n\\n  function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(\\n    uint256[2] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(\\n    uint256 amount\\n  ) external view returns (uint256[2] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IgETH _gEth,\\n    uint256 _pooledTokenId,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    address lpTokenTargetAddress,\\n    address owner\\n  ) external returns (address lpToken);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[2] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[2] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[2] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[2] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function withdrawAdminFees() external;\\n\\n  function setAdminFee(uint256 newAdminFee) external;\\n\\n  function setSwapFee(uint256 newSwapFee) external;\\n\\n  function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n  function stopRampA() external;\\n}\\n\",\"keccak256\":\"0x34510bc5e9065f86a20fae5ca94b71a9333d141484c99254efb47845f3a74490\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IWhitelist {\\n  function isAllowed(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19fef7cf90817c40e9c773d5a4c2ee81e8bf48791fdd406b2349821c89a5411c\",\"license\":\"MIT\"},\"contracts/interfaces/IWithdrawalContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"./IgETH.sol\\\";\\nimport \\\"./IPortal.sol\\\";\\n\\ninterface IWithdrawalContract {\\n  function initialize(\\n    uint256 _VERSION,\\n    uint256 _ID,\\n    address _gETH,\\n    address _PORTAL,\\n    address _CONTROLLER\\n  ) external returns (bool);\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function getgETH() external view returns (IgETH);\\n\\n  function getPortal() external view returns (IPortal);\\n\\n  function getPoolId() external view returns (uint256);\\n\\n  function getContractVersion() external view returns (uint256);\\n\\n  function getProposedVersion() external view returns (uint256);\\n\\n  function recoveryMode() external view returns (bool);\\n\\n  function newProposal(\\n    address _CONTROLLER,\\n    uint256 _TYPE,\\n    bytes calldata _NAME,\\n    uint256 duration\\n  ) external;\\n\\n  function approveProposal(\\n    uint256 id\\n  ) external returns (uint256 _type, address _controller);\\n\\n  function fetchUpgradeProposal() external;\\n\\n  function changeController(address _newSenate) external;\\n}\\n\",\"keccak256\":\"0x5dc505ca1284824afc4e5f67e9b0456ce14ac5eaa28a48402f7f3bfa78862fa0\",\"license\":\"MIT\"},\"contracts/interfaces/IgETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IgETH {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function uri(uint256) external view returns (string memory);\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // gETH Specials\\n\\n    function denominator() external view returns (uint256);\\n\\n    function pricePerShare(uint256 id) external view returns (uint256);\\n\\n    function priceUpdateTimestamp(uint256 id) external view returns (uint256);\\n\\n    function setPricePerShare(uint256 price, uint256 id) external;\\n\\n    function isInterface(\\n        address _interface,\\n        uint256 id\\n    ) external view returns (bool);\\n\\n    function isAvoider(\\n        address account,\\n        uint256 id\\n    ) external view returns (bool);\\n\\n    function avoidInterfaces(uint256 id, bool isAvoid) external;\\n\\n    function setInterface(address _interface, uint256 id, bool isSet) external;\\n\\n    function updateMinterRole(address Minter) external;\\n\\n    function updatePauserRole(address Pauser) external;\\n\\n    function updateOracleRole(address Oracle) external;\\n}\\n\",\"keccak256\":\"0xda89519bc8f6f3ece7bfd842d379fbfba768080cc0de0b6983065be4ec73af14\",\"license\":\"MIT\"},\"contracts/interfaces/IgETHInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\ninterface IgETHInterface {\\n  function initialize(\\n    uint256 id_,\\n    address erc1155_,\\n    bytes memory data\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3b9f0fb1e4fc4ab7d57477b715679e3a587edc6fe27d8a4e281b0d55d5120c83\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Icebear & Crash Bandicoot",
    "details": "It is important to keep every pool isolated and remember that every validator is unique.Controllers and Maintainers: * CONTROLLER is the owner of an ID, it manages the pool or the operator and its security is exteremely important. * maintainer is the worker, can be used to automate some daily tasks * * like distributing validators for Staking Pools or creating validators for Operators, * * not so crucial in terms of security.Reserved ID_TYPE: USERS: * Type 4 : Permissioned Operators * * Needs to be onboarded by the Dual Governance (Senate + Governance). * * Maintains Beacon Chain Validators on behalf of the Staking Pools. * * Can participate in the Operator Marketplace after initiation. * * Can utilize maintainers for staking operations. * Type 5 : Configurable Staking Pools * * Permissionless to create. * * Can utilize powers of modules such as Bound Liquidity Pools, Interfaces etc. * * Can be public or private, can use a whitelist if private. * * Can utilize maintainers for validator distribution on Operator Marketplace. * * Uses a Withdrawal Contract to be given as withdrawalCredential on validator creation, * * accruing rewards and keeping Staked Ether safe and isolated. DEFAULT MODULES: * Some Modules has only 1 version that can be used by the Pool Owners. * Type 21 : Withdrawal Contract implementation version * * Mandatory. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Pools are in \"Recovery Mode\" until their Withdrawal Contract is upgraded. * * * Meaning, no more Depositing or Staking can happen. * Type 41 : Liquidity Pool version * * Optional. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate. * * Pools can simply deploy the new version of this Module and start using it, if ever changed. * * Liquidity Providers however, need to migrate. * Type 42 : Liquidity Pool Token version * * Optional, dependant to Liquidity Pool Module. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Crucial to have the same name with the LP version ALLOWED MODULES: * Some Modules can support many different versions that can be used by the Pool Owners. * Type 31 : gETH interface version * * Optional. * * CONTROLLER is the implementation contract position (like always) * * Requires the approval of Senate * * Currently should be utilized on initiation.Contracts relying on this library must initialize StakeUtils.PooledStakingFunctions are already protected with authenticationfirst review DataStoreUtilsthen review GeodeUtils",
    "kind": "dev",
    "methods": {
      "batchApproveOperators(DataStoreUtils.IsolatedStorage storage,uint256,uint256[],uint256[])": {
        "details": "When decreased the approved validator count below current active+proposed validators, operator can NOT create new validators.",
        "params": {
          "allowances": "the MAX number of validators that can be created by the Operator, for given Pool",
          "operatorIds": "array of Operator IDs to allow them create validators",
          "poolId": "the gETH id of the Pool"
        }
      },
      "beaconStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,bytes[])": {
        "details": "To save gas cost, pubkeys should be arranged by poolIds.  ex: [pk1, pk2, pk3, pk4, pk5, pk6, pk7]  pk1, pk2, pk3 from pool1  pk4, pk5 from pool2  pk6 from pool3  seperate them in similar groups as much as possible.Max number of validators to boostrap is MAX_DEPOSITS_PER_CALL (currently 64)A pubkey that is alienated will not get through. Do not frontrun during ProposeStake.",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "pubkeys": "Array of BLS12-381 public keys of the validators that are already proposed with ProposeStake."
        }
      },
      "blameOperator(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)": {
        "details": "anyone can call this functionif operator has given enough allowance, they SHOULD rotate the validators to avoid being prisoned"
      },
      "changeMaintainer(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "details": "there can only be 1 maintainer per ID.it is wise to change the maintainer before the CONTROLLER, in case of any migration"
      },
      "decreaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "only CONTROLLER can decrease the balance externally,",
        "returns": {
          "success": "if the amount was sent and deducted"
        }
      },
      "deployLiquidityPool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "details": "sets the liquidity pool, LP token and liquidityPoolVersiongives full allowance to the pool, should not be a problem as portal does not hold any tokensa controller can deploy a liquidity pool after initiationa controller can deploy a new version of this module, but LPs would need to migrate",
        "params": {
          "_GOVERNANCE": "governance address will be the owner of the created pool."
        }
      },
      "deposit(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "details": "an example for minting + buybacks * Buys from DWP if price is low -debt-, mints new tokens if surplus is sent -more than debt- // debt  msgValue // 100   10  => buyback // 100   100 => buyback // 10    100 => buyback + mint // 1     x   => mint // 0.5   x   => mint // 0     x   => mint",
        "params": {
          "deadline": "liquidity pool parameter",
          "mingETH": "liquidity pool parameter",
          "poolId": "id of the staking pool, liquidity pool and gETH to be used."
        }
      },
      "gETHInterfaces(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "for future referance: unsetted interfaces SHOULD return address(0)"
      },
      "getMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "returns": {
          "fee": "= percentage * PERCENTAGE_DENOMINATOR / 100"
        }
      },
      "increaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "details": "anyone can increase the balance directly, useful for withdrawalContracts and fees etc."
      },
      "initiateOperator(DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "details": "operators can fund their internal wallet on initiation by simply sending some ether.",
        "params": {
          "fee": "as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%",
          "maintainer": "an address that automates daily operations, a script, a contract...",
          "validatorPeriod": "the expected maximum staking interval. This value should between * MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD values defined as constants above. Operator can unstake at any given point before this period ends. If operator disobeys this rule, it can be prisoned with blameOperator()"
        }
      },
      "initiatePool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,address,address,bytes,bytes,bool[3])": {
        "details": "checking only initiated is enough to validate that ID is not used. no need to check TYPE, CONTROLLER etc.requires exactly 1 validator worth of funds to be deposited on initiation - to prevent sybil attacks",
        "params": {
          "NAME": "used to generate an ID for the Pool",
          "_GOVERNANCE": "needed in case the Pool is configured with a Bound Liquidity Pool",
          "config": "[private(true) or public(false), deploying an interface with given version, deploying liquidity pool with latest version]",
          "fee": "as a percentage limited by MAX_MAINTENANCE_FEE, PERCENTAGE_DENOMINATOR is 100%",
          "interfaceVersion": "Pool creators can choose any allowed version as their gETHInterface",
          "interface_data": "interfaces might require additional data on initialization; like name, symbol, etc.",
          "maintainer": "an address that automates daily operations, a script, a contract... not really powerful."
        }
      },
      "isPriceValid(StakeUtils.PooledStaking storage,uint256)": {
        "details": "known bug / feature: if there have been no oracle updates, * this function will return true. lastupdate + PRICE_EXPIRY >= block.timestamp ? true    : lastupdate >= self.ORACLE_UPDATE_TIMESTAMP ? true    : false"
      },
      "isPrisoned(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "details": "\"released\" key refers to the end of the last imprisonment, when the limitations of operator is lifted"
      },
      "isWhitelisted(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "details": "Owner of the pool doesn't need whitelistingOtherwise requires a whitelisting address to be set todo: add to portal"
      },
      "operatorAllowance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "an operator can not create new validators if: * 1. allowance is 0 (zero) * 2. lower than the current (proposed + active) number of validators * But if operator withdraws a validator, then able to create a new one.prestake checks the approved validator count to make sure the number of validators are not bigger than allowanceallowance doesn't change when new validators created or old ones are unstaked."
      },
      "proposeStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "details": "DCU.DEPOSIT_AMOUNT_PRESTAKE = 1 ether, DCU.DEPOSIT_AMOUNT = 32 ether which is the minimum amount to create a validator. 31 Ether will be staked after verification of oracles. 32 in total. 1 ether will be sent back to Node Operator when the finalized deposit is successful.ProposeStake requires enough allowance from Staking Pools to Operators.ProposeStake requires enough funds within Wallet.Max number of validators to propose is per call is MAX_DEPOSITS_PER_CALL (currently 64)",
        "params": {
          "operatorId": "the id of the Operator whose maintainer calling this function",
          "poolId": "the id of the staking pool",
          "pubkeys": "Array of BLS12-381 public keys of the validators that will be proposed",
          "signatures1": "Array of BLS12-381 signatures that will be used to send 1 ETH from the Operator's maintainer balance",
          "signatures31": "Array of BLS12-381 signatures that will be used to send 31 ETH from pool on beaconStake"
        }
      },
      "setPoolVisibility(DataStoreUtils.IsolatedStorage storage,uint256,bool)": {
        "params": {
          "isPrivate": "true if pool should be private, false for public pools Note private pools can whitelist addresses with the help of a third party contract."
        }
      },
      "setWhitelist(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "details": "Whitelisting contracts should implement IWhitelist interface."
      },
      "switchMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "advise that 100% == PERCENTAGE_DENOMINATOR"
      },
      "switchValidatorPeriod(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "details": "limited by MIN_VALIDATOR_PERIOD and MAX_VALIDATOR_PERIOD"
      }
    },
    "title": "The Staking Library",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IdInitiated(uint256,uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "IGNORABLE_DEBT()": {
        "notice": "ignoring any buybacks if the Liquidity Pools has a low debt"
      },
      "MAX_EARLY_EXIT_FEE()": {
        "notice": "limiting EARLY_EXIT_FEE, 5%"
      },
      "MAX_MAINTENANCE_FEE()": {
        "notice": "limiting the pool and operator maintenance fee, 10%"
      },
      "MIN_VALIDATOR_PERIOD()": {
        "notice": "limiting the operator.validatorPeriod, between 3 months to 5 years"
      },
      "PRICE_EXPIRY()": {
        "notice": "price of gETH is only valid for 24H, after that minting is not allowed."
      },
      "PRISON_SENTENCE()": {
        "notice": "limiting the access for Operators in case of bad/malicious/faulty behaviour"
      },
      "SWITCH_LATENCY()": {
        "notice": "some parameter changes are effective after a delay"
      },
      "batchApproveOperators(DataStoreUtils.IsolatedStorage storage,uint256,uint256[],uint256[])": {
        "notice": "To allow a Node Operator run validators for your Pool with a given number of validators. * This number can be set again at any given point in the future."
      },
      "beaconStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,bytes[])": {
        "notice": "Sends 31 Eth from staking pool to validators that are previously created with ProposeStake.  1 Eth per successful validator boostraping is returned back to Wallet."
      },
      "blameOperator(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)": {
        "notice": "allows imprisoning an Operator if the validator have not been exited until expectedExit"
      },
      "canStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,bytes)": {
        "notice": "external function to check if a validator can use the pool funds"
      },
      "changeMaintainer(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "notice": "CONTROLLER of the ID can change the maintainer to any address other than ZERO_ADDRESS"
      },
      "decreaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "external function to decrease the internal wallet balance"
      },
      "deployLiquidityPool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "notice": "deploys a new liquidity pool using the latest version of MODULE_LIQUDITY_POOL"
      },
      "deposit(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "notice": "Allowing users to deposit into a staking pool.If a pool is not public only the maintainer can deposit."
      },
      "gETHInterfaces(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "access all interfaces of a given ID."
      },
      "getMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "Gets fee as a percentage, PERCENTAGE_DENOMINATOR = 100%"
      },
      "increaseWalletBalance(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "external function to increase the internal wallet balance"
      },
      "initiateOperator(DataStoreUtils.IsolatedStorage storage,uint256,uint256,uint256,address)": {
        "notice": "initiates ID as a Permissionned Node Operatorrequires ID to be approved as a node operator with a specific CONTROLLER"
      },
      "initiatePool(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,address,address,bytes,bytes,bool[3])": {
        "notice": "Creates a Configurable Trustless Staking Pool!"
      },
      "isMintingAllowed(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "checks if staking is allowed in given staking poolstaking is not allowed if: 1. Price is not valid 2. WithdrawalContract is in Recovery Mode, can have many reasons"
      },
      "isPriceValid(StakeUtils.PooledStaking storage,uint256)": {
        "notice": "returns true if the price is valid: - last price syncinc happened less than 24h - there has been no oracle reports since the last update"
      },
      "isPrisoned(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "Checks if the given operator is Prisoned"
      },
      "isPrivatePool(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "returns true if the pool is private"
      },
      "isWhitelisted(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "notice": "checks if the Whitelist allows staker to use given private pool"
      },
      "liquidityPoolById(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "returns liquidityPool as a contract"
      },
      "operatorAllowance(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "*operatorAllowance is the maximum number of validators that the given Operator is allowed to create on behalf of the Pool"
      },
      "proposeStake(StakeUtils.PooledStaking storage,DataStoreUtils.IsolatedStorage storage,uint256,uint256,bytes[],bytes[],bytes[])": {
        "notice": "Validator Credentials Proposal function, first step of crating validators. * Once a pubKey is proposed and not alienated after verificationIndex updated, * it is optimistically allowed to take funds from staking pools."
      },
      "setPoolVisibility(DataStoreUtils.IsolatedStorage storage,uint256,bool)": {
        "notice": "changes the visibility of the pool"
      },
      "setWhitelist(DataStoreUtils.IsolatedStorage storage,uint256,address)": {
        "notice": "private pools can whitelist addresses with the help of a third party contract"
      },
      "switchMaintenanceFee(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "Changes the fee that is applied to the newly created validators, with A DELAY OF SWITCH_LATENCY. Note Can NOT be called again while its currently switching."
      },
      "switchValidatorPeriod(DataStoreUtils.IsolatedStorage storage,uint256,uint256)": {
        "notice": "updates validatorPeriod for given operator, with A DELAY OF SWITCH_LATENCY."
      },
      "withdrawalContractById(DataStoreUtils.IsolatedStorage storage,uint256)": {
        "notice": "returns WithdrawalContract as a contract"
      }
    },
    "notice": "Creating a global standard for Staking, allowing anyone to create a trustless staking pool, improving the user experience for stakers and removing the need for intermediaries. * Exclusively contains functions related to: * 1. Modular Architecture of Configurable Staking Pools * 2. Operator Marketplace and Staking Operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}